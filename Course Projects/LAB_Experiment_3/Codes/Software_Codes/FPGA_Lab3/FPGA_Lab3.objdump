
FPGA_Lab3.elf:     file format elf32-littlenios2
FPGA_Lab3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012438 memsz 0x00012438 flags r-x
    LOAD off    0x00013458 vaddr 0x00012458 paddr 0x00013fb8 align 2**12
         filesz 0x00001b60 memsz 0x00001b60 flags rw-
    LOAD off    0x00015b18 vaddr 0x00015b18 paddr 0x00015b18 align 2**12
         filesz 0x00000000 memsz 0x00186d6c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b80  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000724  00011d34  00011d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b60  00012458  00013fb8  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00187046  00015b18  00015b18  00015b18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014fb8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f18  00000000  00000000  00014fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000021d6  00000000  00000000  00015ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d5b6  00000000  00000000  000180ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000958d  00000000  00000000  00045684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018ff0  00000000  00000000  0004ec11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023c4  00000000  00000000  00067c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a04  00000000  00000000  00069fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d1d2  00000000  00000000  0006c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00079ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e8  00000000  00000000  00079bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ea98  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007ea9b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ea9e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ea9f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007eaa0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007eaa4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007eaa8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007eaac  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007eab5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007eabe  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007eac7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  0007ead2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  0007eb1e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  000839e6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00011d34 l    d  .rodata	00000000 .rodata
00012458 l    d  .rwdata	00000000 .rwdata
00015b18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
00012096 l     O .rodata	00000010 C.41.2348
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002c8c l     F .text	00000058 __sprint_r
00012272 l     O .rodata	00000010 blanks.3452
00012262 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004cf0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000066ec l     F .text	00000058 std
000067f8 l     F .text	00000008 __fp_lock
00006800 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012558 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00013f84 l     O .rwdata	00000004 charset
000122a8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000123f0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000a8c8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b9f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000bed4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000bf34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c034 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c314 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000c3f4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000c550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ca14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013fac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ccb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012f14 l     O .rwdata	00001060 JTAG_UART
0000cdb0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000cff0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000d218 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001090c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010dc4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010f00 l     F .text	000000dc alt_file_locked
00011164 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011b1c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00011cd0 l     F .text	00000040 alt_sim_halt
00008370 g     F .text	00000094 _mprec_log10
0000845c g     F .text	00000088 __any_on
00009bdc g     F .text	00000070 _isatty_r
000123c8 g     O .rodata	00000028 __mprec_tinytens
0000c5b0 g     F .text	0000006c alt_main
0000fde8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
000005c0 g     F .text	00000060 interval_timer_ISR
0000e9c4 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
0019c5f4 g     O .bss	00000100 alt_irq
00009c4c g     F .text	00000078 _lseek_r
00013fb8 g       *ABS*	00000000 __flash_rwdata_start
0000e284 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000b3e8 g     F .text	00000088 __eqdf2
00015b20 g     O .bss	00000001 byte2
0000dc74 g     F .text	00000070 alt_up_audio_read_fifo_avail
0019c884 g       *ABS*	00000000 __alt_heap_start
00002c14 g     F .text	00000044 printf
00001c10 g     F .text	00000218 print_screen
0000dce4 g     F .text	00000070 alt_up_audio_record_r
00015b21 g     O .bss	00000001 byte3
00009634 g     F .text	00000068 __sseek
00006754 g     F .text	000000a4 __sinit
0001189c g     F .text	00000130 __swbuf_r
0000f00c g     F .text	00000114 alt_up_char_buffer_string
0000e7dc g     F .text	00000034 read_CE_bit
00015b22 g     O .bss	00000001 copy_byte3
0000742c g     F .text	00000084 _setlocale_r
00006854 g     F .text	00000068 __sfmoreglue
0000c63c g     F .text	00000020 __malloc_unlock
0000eb70 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000ef3c g     F .text	000000d0 alt_up_char_buffer_draw
00015bd4 g     O .bss	00061a80 record_l_buf
0000dbec g     F .text	00000088 alt_up_audio_reset_audio_core
00015ba0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007e84 g     F .text	000000e0 memmove
00015b23 g     O .bss	00000001 byte1
00006844 g     F .text	00000010 _cleanup
00001a00 g     F .text	00000034 setMouseBounds
000084e4 g     F .text	000000bc _Balloc
00002340 g     F .text	00000094 __fixsfsi
00015b3c g     O .bss	00000004 prev_y_mouse
0000f1bc g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000b4f8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00001e28 g     F .text	00000158 denoise_the_noisy_sound
0000e208 g     F .text	0000007c get_DDRAM_addr
0000f17c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009b68 g     F .text	00000074 _fstat_r
00015b88 g     O .bss	00000004 errno
000024e8 g     F .text	00000038 __make_dp
0000dbb0 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00015b94 g     O .bss	00000004 alt_argv
0001bf74 g       *ABS*	00000000 _gp
0000f35c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00012d94 g     O .rwdata	00000180 alt_fd_list
00010a34 g     F .text	00000094 alt_find_dev
00002adc g     F .text	000000a0 memcpy
0000e41c g     F .text	0000004c alt_up_character_lcd_write_fd
0000f120 g     F .text	0000005c alt_up_char_buffer_clear
00006838 g     F .text	0000000c _cleanup_r
0000b690 g     F .text	000000f8 __floatsidf
00010e88 g     F .text	00000078 alt_io_redirect
0000b608 g     F .text	00000088 __ltdf2
00011d34 g       *ABS*	00000000 __DTOR_END__
00001448 g     F .text	0000008c check_for_click
00015b24 g     O .bss	00000001 copy_byte1
000082c0 g     F .text	000000b0 __ratio
0000e148 g     F .text	00000060 alt_up_audio_read_fifo_head
0000f40c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000d430 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002c58 g     F .text	00000034 _printf_r
0000bb30 g     F .text	00000008 __udivsi3
0000c254 g     F .text	000000c0 isatty
000122d8 g     O .rodata	000000c8 __mprec_tens
00015b40 g     O .bss	00000004 y_mouse
0000fa98 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00007408 g     F .text	00000008 __locale_charset
00011560 g     F .text	00000090 alt_icache_flush
00015b7c g     O .bss	00000004 __malloc_top_pad
00015b1c g     O .bss	00000004 flag
00013f80 g     O .rwdata	00000004 __mb_cur_max
00007410 g     F .text	0000000c _localeconv_r
00008bdc g     F .text	0000003c __i2b
00006dec g     F .text	0000049c __sfvwrite_r
000095bc g     F .text	00000070 _sbrk_r
0019c5d4 g     O .bss	00000020 up_dev
0001027c g     F .text	000000d0 helper_plot_pixel
00009cc4 g     F .text	00000078 _read_r
00077654 g     O .bss	00061a80 play_l_buf
00012958 g     O .rwdata	0000000c __lc_ctype
00013fa0 g     O .rwdata	00000004 alt_max_fd
0000e1a8 g     F .text	00000060 alt_up_audio_write_fifo_head
0000bbd8 g     F .text	00000138 __unpack_d
00009a44 g     F .text	00000110 _fclose_r
0000e810 g     F .text	00000034 read_num_bytes_available
000066b8 g     F .text	00000034 fflush
00015b80 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c094 g     F .text	000001c0 alt_irq_register
0000e778 g     F .text	00000034 read_RI_bit
000023d4 g     F .text	00000054 __extendsfdf2
0000ad58 g     F .text	00000074 __adddf3
00001298 g     F .text	000000b8 PS2_Init
00015b44 g     O .bss	00000004 prev_y_mouse_front
000081a0 g     F .text	00000120 __b2d
0000f440 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000a318 g     F .text	000005b0 __umoddi3
0000c460 g     F .text	000000f0 lseek
00013f7c g     O .rwdata	00000004 _global_impure_ptr
00008f58 g     F .text	000005f4 _realloc_r
000d90d4 g     O .bss	00061a80 record_r_buf
0019c884 g       *ABS*	00000000 __bss_end
00010ccc g     F .text	000000f8 alt_iic_isr_register
0000f5a4 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0001125c g     F .text	0000010c alt_tick
00009d3c g     F .text	000005dc __udivdi3
000123a0 g     O .rodata	00000028 __mprec_bigtens
00008e38 g     F .text	00000120 __s2b
0000b860 g     F .text	00000194 __floatunsidf
00012458 g     O .rwdata	00000100 denoise_filter_coefficients
000080c0 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000d9fc g     F .text	00000040 alt_up_audio_open_dev
0000e878 g     F .text	0000002c read_data_byte
00015b34 g     O .bss	00000004 echo
00006820 g     F .text	00000018 __fp_lock_all
00010c84 g     F .text	00000048 alt_ic_irq_enabled
000014d4 g     F .text	00000144 check_KEYs
00015b48 g     O .bss	00000004 prev_y_mouse_back
0000de38 g     F .text	00000070 alt_up_audio_play_r
000111c4 g     F .text	00000098 alt_alarm_stop
0000e7ac g     F .text	00000030 read_RE_bit
00015b8c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00012d6c g     O .rwdata	00000028 alt_dev_null
00002700 g     F .text	000000c8 __unpack_f
0000e704 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00001f80 g     F .text	00000270 echo_maker
0000e738 g     F .text	00000040 alt_up_parallel_port_open_dev
00015b4c g     O .bss	00000004 max_y_mouse
0000ea1c g     F .text	00000078 alt_up_ps2_write_data_byte
0001083c g     F .text	0000001c alt_dcache_flush_all
00007f8c g     F .text	00000070 __hi0bits
000101b8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000b788 g     F .text	000000d8 __fixdfsi
00013fb8 g       *ABS*	00000000 __ram_rwdata_end
00013f98 g     O .rwdata	00000008 alt_dev_list
0000cb90 g     F .text	00000120 write
000117b4 g     F .text	000000e8 _putc_r
00015b50 g     O .bss	00000004 prev_x_mouse
0000d9d4 g     F .text	00000028 alt_timestamp_freq
0001034c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00012458 g       *ABS*	00000000 __ram_rodata_end
0000bf60 g     F .text	000000d4 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00001350 g     F .text	000000f8 show_mouse_buttons_states_on_Red_LEDs
00008d18 g     F .text	00000120 __pow5mult
00015b70 g     O .bss	00000004 __nlocale_changed
0000bb38 g     F .text	00000008 __umodsi3
00015b54 g     O .bss	00000004 max_x_mouse
00015b25 g     O .bss	00000001 copy_byte2
0019c884 g       *ABS*	00000000 end
0000ed90 g     F .text	000000a8 alt_up_ps2_write_fd
000025a0 g     F .text	00000160 __pack_f
0000ee78 g     F .text	00000084 alt_up_char_buffer_init
0000cf30 g     F .text	000000c0 altera_avalon_jtag_uart_init
00001a34 g     F .text	000001dc getMouseState
00011d30 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00001174 g     F .text	00000124 HEX_PS2
00002520 g     F .text	00000080 __clzsi2
0000d654 g     F .text	00000240 altera_avalon_jtag_uart_write
00015b58 g     O .bss	00000004 right_button_click
00006744 g     F .text	00000004 __sfp_lock_acquire
00007da0 g     F .text	000000e4 memchr
0000e32c g     F .text	00000078 alt_up_character_lcd_write
00002ce4 g     F .text	00001eac ___vfprintf_internal_r
00006ad8 g     F .text	00000314 _free_r
0000c65c g     F .text	00000258 alt_printf
00011b20 g     F .text	000001b0 __call_exitprocs
00015b74 g     O .bss	00000004 __mlocale_changed
00013f8c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00015ba4 g     O .bss	00000004 _alt_tick_rate
00015b38 g     O .bss	00000004 mouse_width
0000e01c g     F .text	0000012c alt_up_audio_write_fifo
000088a8 g     F .text	0000014c __lshift
00015ba8 g     O .bss	00000004 _alt_nticks
0000c8f4 g     F .text	00000120 read
0000cd44 g     F .text	0000006c alt_sys_init
0000e590 g     F .text	000000b0 alt_up_character_lcd_shift_display
000022a8 g     F .text	00000098 __floatsisf
0000df18 g     F .text	00000104 alt_up_audio_read_fifo
000119e8 g     F .text	00000134 __register_exitproc
0000db24 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000ec9c g     F .text	00000058 alt_up_ps2_clear_fifo
000089f4 g     F .text	000001e8 __multiply
0000e640 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000d2c8 g     F .text	00000074 altera_avalon_jtag_uart_close
00012458 g       *ABS*	00000000 __ram_rwdata_start
00011d34 g       *ABS*	00000000 __ram_rodata_start
00015bac g     O .bss	00000028 __malloc_current_mallinfo
000085a0 g     F .text	0000017c __d2b
00013f74 g     O .rwdata	00000004 number_of_coefficients
0000cde8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000114a8 g     F .text	000000b8 alt_get_fd
0000bd10 g     F .text	000000c8 __fpcmp_parts_d
000099d4 g     F .text	00000070 _close_r
0000dad8 g     F .text	0000004c alt_up_audio_enable_write_interrupt
0001163c g     F .text	00000074 memcmp
0000ce98 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0019c884 g       *ABS*	00000000 __alt_stack_base
0000cee0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004bb4 g     F .text	0000013c __swsetup_r
0000b190 g     F .text	00000258 __divdf3
0000da88 g     F .text	00000050 alt_up_audio_disable_read_interrupt
000068bc g     F .text	000000f0 __sfp
00008404 g     F .text	00000058 __copybits
00012964 g     O .rwdata	00000408 __malloc_av_
00006750 g     F .text	00000004 __sinit_lock_release
0000adcc g     F .text	000003c4 __muldf3
00009718 g     F .text	00000060 __sread
00011388 g     F .text	00000120 alt_find_file
00010858 g     F .text	000000b4 alt_dev_llist_insert
0000c61c g     F .text	00000020 __malloc_lock
0000cad4 g     F .text	000000bc sbrk
000064bc g     F .text	000001fc _fflush_r
00009920 g     F .text	000000b4 _calloc_r
00015b18 g       *ABS*	00000000 __bss_start
00002b7c g     F .text	00000098 memset
00000620 g     F .text	00000b54 main
0000ddc4 g     F .text	00000074 alt_up_audio_write_fifo_space
00015b98 g     O .bss	00000004 alt_envp
00015b84 g     O .bss	00000004 __malloc_max_total_mem
0000f3b4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000eefc g     F .text	00000040 alt_up_char_buffer_open_dev
0000ce40 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000119cc g     F .text	0000001c __swbuf
00015b5c g     O .bss	00000004 left_button_click
0000e4e0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000962c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009b54 g     F .text	00000014 fclose
0000ec20 g     F .text	0000007c alt_up_ps2_read_data_byte
00015b60 g     O .bss	00000004 prev_x_mouse_back
00015b28 g     O .bss	00000004 timeout
0000d894 g     F .text	000000a4 alt_timestamp_start
0019c6f4 g     O .bss	00000190 _atexit0
00004f08 g     F .text	000015b4 _dtoa_r
00007660 g     F .text	00000740 _malloc_r
00013fa4 g     O .rwdata	00000004 alt_errno
00007350 g     F .text	000000b8 _fwalk
0000ee38 g     F .text	00000040 alt_up_ps2_open_dev
000116b0 g     F .text	00000104 putc
0000ba70 g     F .text	00000060 __divsi3
000123fc g     O .rodata	00000014 __thenan_df
0000e2ec g     F .text	00000040 alt_up_character_lcd_open_dev
000069ac g     F .text	0000012c _malloc_trim_r
0000e970 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00011d34 g       *ABS*	00000000 __CTOR_END__
0000e2b8 g     F .text	00000034 alt_up_character_lcd_init
00009778 g     F .text	000000bc strcmp
00011d34 g       *ABS*	00000000 __flash_rodata_start
00011d34 g       *ABS*	00000000 __DTOR_LIST__
00015b18 g     O .bss	00000004 count
0000b470 g     F .text	00000088 __nedf2
0000cd10 g     F .text	00000034 alt_irq_init
0000ca74 g     F .text	00000060 alt_release_fd
0000e844 g     F .text	00000034 read_data_valid
0000e6d0 g     F .text	00000034 alt_up_character_lcd_cursor_off
00012104 g     O .rodata	00000100 __clz_tab
00015b78 g     O .bss	00000004 _PathLocale
000115f0 g     F .text	00000014 atexit
0000eb04 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
000098a8 g     F .text	00000078 _write_r
000074b0 g     F .text	0000001c setlocale
000021f0 g     F .text	000000b8 pushbutton_ISR
000001f0 g     F .text	00000150 PS2_ISR
00013f78 g     O .rwdata	00000004 _impure_ptr
00015b2c g     O .bss	00000004 buf_index_play
000016bc g     F .text	00000344 erase_previous_mouse_position
00015b90 g     O .bss	00000004 alt_argc
00015b9c g     O .bss	00000004 altera_avalon_timer_ts_base
000109d0 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00008120 g     F .text	00000080 __ulp
0000954c g     F .text	00000040 __isinfd
00006808 g     F .text	00000018 __fp_unlock_all
00013f90 g     O .rwdata	00000008 alt_fs_list
0000dd54 g     F .text	00000070 alt_up_audio_record_l
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000741c g     F .text	00000010 localeconv
0000d938 g     F .text	0000009c alt_timestamp
00010af8 g     F .text	00000050 alt_ic_isr_register
00001618 g     F .text	000000a4 print_mouse_on_given_position
00013fb8 g       *ABS*	00000000 _edata
0019c884 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000d33c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000340 g     F .text	00000280 audio_ISR
0000dea8 g     F .text	00000070 alt_up_audio_play_l
00010be4 g     F .text	000000a0 alt_ic_irq_disable
0000969c g     F .text	0000007c __swrite
00013f88 g     O .rwdata	00000004 __malloc_trim_threshold
00011368 g     F .text	00000020 altera_nios2_qsys_irq_init
00011604 g     F .text	00000038 exit
00015b64 g     O .bss	00000004 x_mouse
00007288 g     F .text	000000c8 _fwalk_reent
00002428 g     F .text	000000c0 __floatunsisf
0000e8a4 g     F .text	000000cc alt_up_ps2_init
0000871c g     F .text	0000018c __mdiff
0000bad0 g     F .text	00000060 __modsi3
00015b68 g     O .bss	00000004 middle_button_click
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006748 g     F .text	00000004 __sfp_lock_release
0000e3a4 g     F .text	00000078 alt_up_character_lcd_string
00011d10 g     F .text	00000020 _exit
0000958c g     F .text	00000030 __isnand
000106e8 g     F .text	00000154 alt_alarm_start
0013ab54 g     O .bss	00061a80 play_r_buf
0000bb40 g     F .text	00000098 __muldi3
000074cc g     F .text	00000194 __smakebuf_r
0000ea94 g     F .text	00000070 alt_up_ps2_wait_for_ack
00009834 g     F .text	00000074 strlen
00010fdc g     F .text	00000188 open
0000b580 g     F .text	00000088 __gedf2
0000c8b4 g     F .text	00000040 alt_putchar
00015b30 g     O .bss	00000004 buf_index_record
00015b6c g     O .bss	00000004 prev_x_mouse_front
00010ac8 g     F .text	00000030 alt_icache_flush_all
0000e468 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00013fa8 g     O .rwdata	00000004 alt_priority_mask
00010b48 g     F .text	0000009c alt_ic_irq_enable
00004b90 g     F .text	00000024 __vfprintf_internal
0000ecf4 g     F .text	0000009c alt_up_ps2_read_fd
0000acd8 g     F .text	00000080 __subdf3
00007ffc g     F .text	000000c4 __lo0bits
00013fb0 g     O .rwdata	00000008 alt_alarm_list
0001096c g     F .text	00000064 _do_ctors
0000bdd8 g     F .text	000000fc close
0000c374 g     F .text	00000080 alt_load
0000da3c g     F .text	0000004c alt_up_audio_enable_read_interrupt
000027c8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0000674c g     F .text	00000004 __sinit_lock_acquire
00008c18 g     F .text	00000100 __multadd
00007f64 g     F .text	00000028 _Bfree
0000db74 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c006b4 	movhi	r3,26
 134:	18f17d04 	addi	r3,r3,-14860
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c006b4 	movhi	r3,26
 14c:	18f17d04 	addi	r3,r3,-14860
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6afdd14 	ori	gp,gp,49012
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	1096c614 	ori	r2,r2,23320

    movhi r3, %hi(__bss_end)
     1cc:	00c00674 	movhi	r3,25
    ori r3, r3, %lo(__bss_end)
     1d0:	18f22114 	ori	r3,r3,51332

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000c3740 	call	c374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000c5b00 	call	c5b0 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f0:	defffb04 	addi	sp,sp,-20
     1f4:	dfc00415 	stw	ra,16(sp)
     1f8:	df000315 	stw	fp,12(sp)
     1fc:	df000304 	addi	fp,sp,12
     200:	e13ffe15 	stw	r4,-8(fp)
     204:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     208:	e0bffe17 	ldw	r2,-8(fp)
     20c:	11000317 	ldw	r4,12(r2)
     210:	e17ffd04 	addi	r5,fp,-12
     214:	000ec200 	call	ec20 <alt_up_ps2_read_data_byte>
     218:	1004c03a 	cmpne	r2,r2,zero
     21c:	1000431e 	bne	r2,zero,32c <PS2_ISR+0x13c>
	{
		/* allows save the last three bytes of data */
		copy_byte1 = copy_byte2;
     220:	00800074 	movhi	r2,1
     224:	1096c944 	addi	r2,r2,23333
     228:	10c00003 	ldbu	r3,0(r2)
     22c:	00800074 	movhi	r2,1
     230:	1096c904 	addi	r2,r2,23332
     234:	10c00005 	stb	r3,0(r2)
		copy_byte2 = copy_byte3;
     238:	00800074 	movhi	r2,1
     23c:	1096c884 	addi	r2,r2,23330
     240:	10c00003 	ldbu	r3,0(r2)
     244:	00800074 	movhi	r2,1
     248:	1096c944 	addi	r2,r2,23333
     24c:	10c00005 	stb	r3,0(r2)
		copy_byte3 = PS2_data;
     250:	e0fffd03 	ldbu	r3,-12(fp)
     254:	00800074 	movhi	r2,1
     258:	1096c884 	addi	r2,r2,23330
     25c:	10c00005 	stb	r3,0(r2)

		if(count > 0){
     260:	d0a6e917 	ldw	r2,-25692(gp)
     264:	10800050 	cmplti	r2,r2,1
     268:	10001b1e 	bne	r2,zero,2d8 <PS2_ISR+0xe8>
			if(count != 3){
     26c:	d0a6e917 	ldw	r2,-25692(gp)
     270:	108000e0 	cmpeqi	r2,r2,3
     274:	1000031e 	bne	r2,zero,284 <PS2_ISR+0x94>
				count++;
     278:	d0a6e917 	ldw	r2,-25692(gp)
     27c:	10800044 	addi	r2,r2,1
     280:	d0a6e915 	stw	r2,-25692(gp)
			}
			if(count == 3){
     284:	d0a6e917 	ldw	r2,-25692(gp)
     288:	108000d8 	cmpnei	r2,r2,3
     28c:	1000121e 	bne	r2,zero,2d8 <PS2_ISR+0xe8>
				byte1 = copy_byte1;
     290:	00800074 	movhi	r2,1
     294:	1096c904 	addi	r2,r2,23332
     298:	10c00003 	ldbu	r3,0(r2)
     29c:	00800074 	movhi	r2,1
     2a0:	1096c8c4 	addi	r2,r2,23331
     2a4:	10c00005 	stb	r3,0(r2)
				byte2 = copy_byte2;
     2a8:	00800074 	movhi	r2,1
     2ac:	1096c944 	addi	r2,r2,23333
     2b0:	10c00003 	ldbu	r3,0(r2)
     2b4:	00800074 	movhi	r2,1
     2b8:	1096c804 	addi	r2,r2,23328
     2bc:	10c00005 	stb	r3,0(r2)
				byte3 = copy_byte3;
     2c0:	00800074 	movhi	r2,1
     2c4:	1096c884 	addi	r2,r2,23330
     2c8:	10c00003 	ldbu	r3,0(r2)
     2cc:	00800074 	movhi	r2,1
     2d0:	1096c844 	addi	r2,r2,23329
     2d4:	10c00005 	stb	r3,0(r2)
			}
		}
		if(count == 0){
     2d8:	d0a6e917 	ldw	r2,-25692(gp)
     2dc:	1004c03a 	cmpne	r2,r2,zero
     2e0:	1000121e 	bne	r2,zero,32c <PS2_ISR+0x13c>
			if ( (copy_byte2 == (unsigned char) 0xAA) && (copy_byte3 == (unsigned char) 0x00) ){
     2e4:	00800074 	movhi	r2,1
     2e8:	1096c944 	addi	r2,r2,23333
     2ec:	10800003 	ldbu	r2,0(r2)
     2f0:	10803fcc 	andi	r2,r2,255
     2f4:	10802a98 	cmpnei	r2,r2,170
     2f8:	10000c1e 	bne	r2,zero,32c <PS2_ISR+0x13c>
     2fc:	00800074 	movhi	r2,1
     300:	1096c884 	addi	r2,r2,23330
     304:	10800003 	ldbu	r2,0(r2)
     308:	10803fcc 	andi	r2,r2,255
     30c:	1004c03a 	cmpne	r2,r2,zero
     310:	1000061e 	bne	r2,zero,32c <PS2_ISR+0x13c>
					// mouse inserted; initialize sending of data
					(void) alt_up_ps2_write_data_byte_with_ack (up_dev->PS2_dev, (unsigned char) 0xF4);
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	11000317 	ldw	r4,12(r2)
     31c:	01403d04 	movi	r5,244
     320:	000eb040 	call	eb04 <alt_up_ps2_write_data_byte_with_ack>
					count = 1;
     324:	00800044 	movi	r2,1
     328:	d0a6e915 	stw	r2,-25692(gp)
		}


	}
	return;
}
     32c:	e037883a 	mov	sp,fp
     330:	dfc00117 	ldw	ra,4(sp)
     334:	df000017 	ldw	fp,0(sp)
     338:	dec00204 	addi	sp,sp,8
     33c:	f800283a 	ret

00000340 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     340:	defff904 	addi	sp,sp,-28
     344:	dfc00615 	stw	ra,24(sp)
     348:	df000515 	stw	fp,20(sp)
     34c:	df000504 	addi	fp,sp,20
     350:	e13ffe15 	stw	r4,-8(fp)
     354:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	11000517 	ldw	r4,20(r2)
     360:	000db740 	call	db74 <alt_up_audio_read_interrupt_pending>
     364:	1005003a 	cmpeq	r2,r2,zero
     368:	1000441e 	bne	r2,zero,47c <audio_ISR+0x13c>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     36c:	e0bffe17 	ldw	r2,-8(fp)
     370:	10800117 	ldw	r2,4(r2)
     374:	10800a17 	ldw	r2,40(r2)
     378:	1007883a 	mov	r3,r2
     37c:	00800044 	movi	r2,1
     380:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     384:	00800074 	movhi	r2,1
     388:	1096cc04 	addi	r2,r2,23344
     38c:	10c00017 	ldw	r3,0(r2)
     390:	008000b4 	movhi	r2,2
     394:	10a1a7c4 	addi	r2,r2,-31073
     398:	10c03816 	blt	r2,r3,47c <audio_ISR+0x13c>
		{
			//printf("record is runnig...\n");
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(record_r_buf[buf_index_record]),
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	11000517 	ldw	r4,20(r2)
     3a4:	00800074 	movhi	r2,1
     3a8:	1096cc04 	addi	r2,r2,23344
     3ac:	10800017 	ldw	r2,0(r2)
     3b0:	1085883a 	add	r2,r2,r2
     3b4:	1085883a 	add	r2,r2,r2
     3b8:	1007883a 	mov	r3,r2
     3bc:	008003b4 	movhi	r2,14
     3c0:	10a43504 	addi	r2,r2,-28460
     3c4:	188b883a 	add	r5,r3,r2
     3c8:	00800074 	movhi	r2,1
     3cc:	1096cc04 	addi	r2,r2,23344
     3d0:	10c00017 	ldw	r3,0(r2)
     3d4:	008000b4 	movhi	r2,2
     3d8:	10a1a804 	addi	r2,r2,-31072
     3dc:	10cdc83a 	sub	r6,r2,r3
     3e0:	000dce40 	call	dce4 <alt_up_audio_record_r>
     3e4:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(record_l_buf[buf_index_record]),
     3e8:	e0bffe17 	ldw	r2,-8(fp)
     3ec:	11000517 	ldw	r4,20(r2)
     3f0:	00800074 	movhi	r2,1
     3f4:	1096cc04 	addi	r2,r2,23344
     3f8:	10800017 	ldw	r2,0(r2)
     3fc:	1085883a 	add	r2,r2,r2
     400:	1085883a 	add	r2,r2,r2
     404:	1007883a 	mov	r3,r2
     408:	00800074 	movhi	r2,1
     40c:	1096f504 	addi	r2,r2,23508
     410:	188b883a 	add	r5,r3,r2
     414:	e1bffd17 	ldw	r6,-12(fp)
     418:	000dd540 	call	dd54 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     41c:	00800074 	movhi	r2,1
     420:	1096cc04 	addi	r2,r2,23344
     424:	10c00017 	ldw	r3,0(r2)
     428:	e0bffd17 	ldw	r2,-12(fp)
     42c:	1887883a 	add	r3,r3,r2
     430:	00800074 	movhi	r2,1
     434:	1096cc04 	addi	r2,r2,23344
     438:	10c00015 	stw	r3,0(r2)
			//printf("buf_index_record: %d\n", buf_index_record);
			if (buf_index_record >= BUF_SIZE)
     43c:	00800074 	movhi	r2,1
     440:	1096cc04 	addi	r2,r2,23344
     444:	10c00017 	ldw	r3,0(r2)
     448:	008000b4 	movhi	r2,2
     44c:	10a1a7c4 	addi	r2,r2,-31073
     450:	10c00a0e 	bge	r2,r3,47c <audio_ISR+0x13c>
			{
				// done recording
				buf_index_record = 0;
     454:	00800074 	movhi	r2,1
     458:	1096cc04 	addi	r2,r2,23344
     45c:	10000015 	stw	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     460:	e0bffe17 	ldw	r2,-8(fp)
     464:	10800117 	ldw	r2,4(r2)
     468:	10800a17 	ldw	r2,40(r2)
     46c:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	11000517 	ldw	r4,20(r2)
     478:	000da880 	call	da88 <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	11000517 	ldw	r4,20(r2)
     484:	000dbb00 	call	dbb0 <alt_up_audio_write_interrupt_pending>
     488:	1005003a 	cmpeq	r2,r2,zero
     48c:	1000471e 	bne	r2,zero,5ac <audio_ISR+0x26c>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x4); // set LEDG[2] on
     490:	e0bffe17 	ldw	r2,-8(fp)
     494:	10800117 	ldw	r2,4(r2)
     498:	10800a17 	ldw	r2,40(r2)
     49c:	1007883a 	mov	r3,r2
     4a0:	00800104 	movi	r2,4
     4a4:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     4a8:	00800074 	movhi	r2,1
     4ac:	1096cb04 	addi	r2,r2,23340
     4b0:	10c00017 	ldw	r3,0(r2)
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a7c4 	addi	r2,r2,-31073
     4bc:	10c03b16 	blt	r2,r3,5ac <audio_ISR+0x26c>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(play_r_buf[buf_index_play]),
     4c0:	e0bffe17 	ldw	r2,-8(fp)
     4c4:	11000517 	ldw	r4,20(r2)
     4c8:	00800074 	movhi	r2,1
     4cc:	1096cb04 	addi	r2,r2,23340
     4d0:	10800017 	ldw	r2,0(r2)
     4d4:	1085883a 	add	r2,r2,r2
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1007883a 	mov	r3,r2
     4e0:	00800534 	movhi	r2,20
     4e4:	10aad504 	addi	r2,r2,-21676
     4e8:	188b883a 	add	r5,r3,r2
     4ec:	00800074 	movhi	r2,1
     4f0:	1096cb04 	addi	r2,r2,23340
     4f4:	10c00017 	ldw	r3,0(r2)
     4f8:	008000b4 	movhi	r2,2
     4fc:	10a1a804 	addi	r2,r2,-31072
     500:	10cdc83a 	sub	r6,r2,r3
     504:	000de380 	call	de38 <alt_up_audio_play_r>
     508:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(play_l_buf[buf_index_play]),
     50c:	e0bffe17 	ldw	r2,-8(fp)
     510:	11000517 	ldw	r4,20(r2)
     514:	00800074 	movhi	r2,1
     518:	1096cb04 	addi	r2,r2,23340
     51c:	10800017 	ldw	r2,0(r2)
     520:	1085883a 	add	r2,r2,r2
     524:	1085883a 	add	r2,r2,r2
     528:	1007883a 	mov	r3,r2
     52c:	008001f4 	movhi	r2,7
     530:	109d9504 	addi	r2,r2,30292
     534:	188b883a 	add	r5,r3,r2
     538:	e1bffc17 	ldw	r6,-16(fp)
     53c:	000dea80 	call	dea8 <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     540:	00800074 	movhi	r2,1
     544:	1096cb04 	addi	r2,r2,23340
     548:	10c00017 	ldw	r3,0(r2)
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	1887883a 	add	r3,r3,r2
     554:	00800074 	movhi	r2,1
     558:	1096cb04 	addi	r2,r2,23340
     55c:	10c00015 	stw	r3,0(r2)
			//printf("buf_index_play: %d\n", buf_index_play);

			if (buf_index_play >= BUF_SIZE)
     560:	00800074 	movhi	r2,1
     564:	1096cb04 	addi	r2,r2,23340
     568:	10c00017 	ldw	r3,0(r2)
     56c:	008000b4 	movhi	r2,2
     570:	10a1a7c4 	addi	r2,r2,-31073
     574:	10c00d0e 	bge	r2,r3,5ac <audio_ISR+0x26c>
			{
				// done playback
				printf("done playing");
     578:	01000074 	movhi	r4,1
     57c:	21074d04 	addi	r4,r4,7476
     580:	0002c140 	call	2c14 <printf>
				buf_index_play = 0;
     584:	00800074 	movhi	r2,1
     588:	1096cb04 	addi	r2,r2,23340
     58c:	10000015 	stw	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     590:	e0bffe17 	ldw	r2,-8(fp)
     594:	10800117 	ldw	r2,4(r2)
     598:	10800a17 	ldw	r2,40(r2)
     59c:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     5a0:	e0bffe17 	ldw	r2,-8(fp)
     5a4:	11000517 	ldw	r4,20(r2)
     5a8:	000db240 	call	db24 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     5ac:	e037883a 	mov	sp,fp
     5b0:	dfc00117 	ldw	ra,4(sp)
     5b4:	df000017 	ldw	fp,0(sp)
     5b8:	dec00204 	addi	sp,sp,8
     5bc:	f800283a 	ret

000005c0 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     5c0:	defffb04 	addi	sp,sp,-20
     5c4:	dfc00415 	stw	ra,16(sp)
     5c8:	df000315 	stw	fp,12(sp)
     5cc:	df000304 	addi	fp,sp,12
     5d0:	e13ffe15 	stw	r4,-8(fp)
     5d4:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     5d8:	00840034 	movhi	r2,4096
     5dc:	10880004 	addi	r2,r2,8192
     5e0:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     5e4:	e0bffd17 	ldw	r2,-12(fp)
     5e8:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     5ec:	00c00074 	movhi	r3,1
     5f0:	18d6ca04 	addi	r3,r3,23336
     5f4:	00800044 	movi	r2,1
     5f8:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	11000417 	ldw	r4,16(r2)
     604:	017fffc4 	movi	r5,-1
     608:	000e5900 	call	e590 <alt_up_character_lcd_shift_display>

	return;
}
     60c:	e037883a 	mov	sp,fp
     610:	dfc00117 	ldw	ra,4(sp)
     614:	df000017 	ldw	fp,0(sp)
     618:	dec00204 	addi	sp,sp,8
     61c:	f800283a 	ret

00000620 <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     620:	defffe04 	addi	sp,sp,-8
     624:	dfc00115 	stw	ra,4(sp)
     628:	df000015 	stw	fp,0(sp)
     62c:	d839883a 	mov	fp,sp
     630:	023ffa34 	movhi	r8,65512
     634:	42253204 	addi	r8,r8,-27448
     638:	da37883a 	add	sp,sp,r8
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interval timer base address
     63c:	00840034 	movhi	r2,4096
     640:	10880004 	addi	r2,r2,8192
     644:	00fffa34 	movhi	r3,65512
     648:	18e54f04 	addi	r3,r3,-27332
     64c:	1f07883a 	add	r3,r3,fp
     650:	18800015 	stw	r2,0(r3)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0;
     654:	00800074 	movhi	r2,1
     658:	1096c8c4 	addi	r2,r2,23331
     65c:	10000005 	stb	zero,0(r2)
     660:	00800074 	movhi	r2,1
     664:	1096c804 	addi	r2,r2,23328
     668:	10000005 	stb	zero,0(r2)
     66c:	00800074 	movhi	r2,1
     670:	1096c844 	addi	r2,r2,23329
     674:	10000005 	stb	zero,0(r2)
	copy_byte1 = 0; copy_byte2 = 0; copy_byte3 = 0;// used to hold PS/2 data
     678:	00800074 	movhi	r2,1
     67c:	1096c904 	addi	r2,r2,23332
     680:	10000005 	stb	zero,0(r2)
     684:	00800074 	movhi	r2,1
     688:	1096c944 	addi	r2,r2,23333
     68c:	10000005 	stb	zero,0(r2)
     690:	00800074 	movhi	r2,1
     694:	1096c884 	addi	r2,r2,23330
     698:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     69c:	00800074 	movhi	r2,1
     6a0:	1096ca04 	addi	r2,r2,23336
     6a4:	10000015 	stw	zero,0(r2)
	count = 0;
     6a8:	00800074 	movhi	r2,1
     6ac:	1096c604 	addi	r2,r2,23320
     6b0:	10000015 	stw	zero,0(r2)

	x_mouse = 0; y_mouse = 0;                       // first mouse position is (0,0)
     6b4:	d026fc15 	stw	zero,-25616(gp)
     6b8:	d026f315 	stw	zero,-25652(gp)
	setMouseBounds(319, 239);                   // screen size is 319 * 239
     6bc:	01004fc4 	movi	r4,319
     6c0:	01403bc4 	movi	r5,239
     6c4:	0001a000 	call	1a00 <setMouseBounds>
	prev_x_mouse_front = x_mouse;
     6c8:	d0a6fc17 	ldw	r2,-25616(gp)
     6cc:	d0a6fe15 	stw	r2,-25608(gp)
	prev_y_mouse_front = y_mouse;
     6d0:	d0a6f317 	ldw	r2,-25652(gp)
     6d4:	d0a6f415 	stw	r2,-25648(gp)
	prev_x_mouse_back = x_mouse;
     6d8:	d0a6fc17 	ldw	r2,-25616(gp)
     6dc:	d0a6fb15 	stw	r2,-25620(gp)
	prev_y_mouse_back = y_mouse;
     6e0:	d0a6f317 	ldw	r2,-25652(gp)
     6e4:	d0a6f515 	stw	r2,-25644(gp)
	prev_x_mouse = prev_x_mouse_front;
     6e8:	d0a6fe17 	ldw	r2,-25608(gp)
     6ec:	d0a6f715 	stw	r2,-25636(gp)
	prev_y_mouse = prev_y_mouse_front;
     6f0:	d0a6f417 	ldw	r2,-25648(gp)
     6f4:	d0a6f215 	stw	r2,-25656(gp)
	/* these variables are used for the VGA screen */
	int ALT_x1; int ALT_x2; int ALT_y;
	int ALT_inc_x; int ALT_inc_y;
	int blue_x1; int blue_y1; int blue_x2; int blue_y2;
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color; short trans_color = 0x1863;
     6f8:	008618c4 	movi	r2,6243
     6fc:	013ffa34 	movhi	r4,65512
     700:	21254084 	addi	r4,r4,-27390
     704:	2709883a 	add	r4,r4,fp
     708:	2080000d 	sth	r2,0(r4)
	alt_u8 buffer_type = 1;
     70c:	00800044 	movi	r2,1
     710:	023ffa34 	movhi	r8,65512
     714:	42254004 	addi	r8,r8,-27392
     718:	4711883a 	add	r8,r8,fp
     71c:	40800005 	stb	r2,0(r8)

	// variables for Play, Record and Echo boxes on VGA screen
	int y1_boxes = 26; int y2_boxes = 34;
     720:	00800684 	movi	r2,26
     724:	00fffa34 	movhi	r3,65512
     728:	18e53f04 	addi	r3,r3,-27396
     72c:	1f07883a 	add	r3,r3,fp
     730:	18800015 	stw	r2,0(r3)
     734:	00800884 	movi	r2,34
     738:	013ffa34 	movhi	r4,65512
     73c:	21253e04 	addi	r4,r4,-27400
     740:	2709883a 	add	r4,r4,fp
     744:	20800015 	stw	r2,0(r4)
	int x1_box_record = 8; int x2_box_record = 26;
     748:	00800204 	movi	r2,8
     74c:	023ffa34 	movhi	r8,65512
     750:	42253d04 	addi	r8,r8,-27404
     754:	4711883a 	add	r8,r8,fp
     758:	40800015 	stw	r2,0(r8)
     75c:	00800684 	movi	r2,26
     760:	00fffa34 	movhi	r3,65512
     764:	18e53c04 	addi	r3,r3,-27408
     768:	1f07883a 	add	r3,r3,fp
     76c:	18800015 	stw	r2,0(r3)
	int x1_box_play = 30; int x2_box_play = 48;
     770:	00800784 	movi	r2,30
     774:	013ffa34 	movhi	r4,65512
     778:	21253b04 	addi	r4,r4,-27412
     77c:	2709883a 	add	r4,r4,fp
     780:	20800015 	stw	r2,0(r4)
     784:	00800c04 	movi	r2,48
     788:	023ffa34 	movhi	r8,65512
     78c:	42253a04 	addi	r8,r8,-27416
     790:	4711883a 	add	r8,r8,fp
     794:	40800015 	stw	r2,0(r8)
	int x1_box_echo = 52; int x2_box_echo = 70;
     798:	00800d04 	movi	r2,52
     79c:	00fffa34 	movhi	r3,65512
     7a0:	18e53904 	addi	r3,r3,-27420
     7a4:	1f07883a 	add	r3,r3,fp
     7a8:	18800015 	stw	r2,0(r3)
     7ac:	00801184 	movi	r2,70
     7b0:	013ffa34 	movhi	r4,65512
     7b4:	21253804 	addi	r4,r4,-27424
     7b8:	2709883a 	add	r4,r4,fp
     7bc:	20800015 	stw	r2,0(r4)
	int play = 0; int record = 0;  int denoise = 0;
     7c0:	023ffa34 	movhi	r8,65512
     7c4:	42255804 	addi	r8,r8,-27296
     7c8:	4711883a 	add	r8,r8,fp
     7cc:	40000015 	stw	zero,0(r8)
     7d0:	00bffa34 	movhi	r2,65512
     7d4:	10a55904 	addi	r2,r2,-27292
     7d8:	1705883a 	add	r2,r2,fp
     7dc:	10000015 	stw	zero,0(r2)
     7e0:	00fffa34 	movhi	r3,65512
     7e4:	18e55a04 	addi	r3,r3,-27288
     7e8:	1f07883a 	add	r3,r3,fp
     7ec:	18000015 	stw	zero,0(r3)

	// variables for audio buffer
	int buffer_index = 0;
     7f0:	013ffa34 	movhi	r4,65512
     7f4:	21255b04 	addi	r4,r4,-27284
     7f8:	2709883a 	add	r4,r4,fp
     7fc:	20000015 	stw	zero,0(r4)
	unsigned int echo_left_buf[BUF_SIZE];
	unsigned int echo_right_buf[BUF_SIZE];
	int num_read; int num_written;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     800:	008025b4 	movhi	r2,150
     804:	023ffa34 	movhi	r8,65512
     808:	42253504 	addi	r8,r8,-27436
     80c:	4711883a 	add	r8,r8,fp
     810:	40800015 	stw	r2,0(r8)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     814:	00fffa34 	movhi	r3,65512
     818:	18e54f04 	addi	r3,r3,-27332
     81c:	1f07883a 	add	r3,r3,fp
     820:	18800017 	ldw	r2,0(r3)
     824:	10c00204 	addi	r3,r2,8
     828:	013ffa34 	movhi	r4,65512
     82c:	21253504 	addi	r4,r4,-27436
     830:	2709883a 	add	r4,r4,fp
     834:	20800017 	ldw	r2,0(r4)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     840:	023ffa34 	movhi	r8,65512
     844:	42254f04 	addi	r8,r8,-27332
     848:	4711883a 	add	r8,r8,fp
     84c:	40800017 	ldw	r2,0(r8)
     850:	10c00304 	addi	r3,r2,12
     854:	013ffa34 	movhi	r4,65512
     858:	21253504 	addi	r4,r4,-27436
     85c:	2709883a 	add	r4,r4,fp
     860:	20800017 	ldw	r2,0(r4)
     864:	1005d43a 	srai	r2,r2,16
     868:	10bfffcc 	andi	r2,r2,65535
     86c:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     870:	023ffa34 	movhi	r8,65512
     874:	42254f04 	addi	r8,r8,-27332
     878:	4711883a 	add	r8,r8,fp
     87c:	40800017 	ldw	r2,0(r8)
     880:	10c00104 	addi	r3,r2,4
     884:	008001c4 	movi	r2,7
     888:	18800015 	stw	r2,0(r3)


	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     88c:	01000074 	movhi	r4,1
     890:	21075104 	addi	r4,r4,7492
     894:	000e7380 	call	e738 <alt_up_parallel_port_open_dev>
     898:	00fffa34 	movhi	r3,65512
     89c:	18e55704 	addi	r3,r3,-27300
     8a0:	1f07883a 	add	r3,r3,fp
     8a4:	18800015 	stw	r2,0(r3)
	if ( KEY_dev == NULL)
     8a8:	013ffa34 	movhi	r4,65512
     8ac:	21255704 	addi	r4,r4,-27300
     8b0:	2709883a 	add	r4,r4,fp
     8b4:	20800017 	ldw	r2,0(r4)
     8b8:	1004c03a 	cmpne	r2,r2,zero
     8bc:	1000061e 	bne	r2,zero,8d8 <main+0x2b8>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     8c0:	01000074 	movhi	r4,1
     8c4:	21075604 	addi	r4,r4,7512
     8c8:	000c65c0 	call	c65c <alt_printf>
		return -1;
     8cc:	023fffc4 	movi	r8,-1
     8d0:	e23fff15 	stw	r8,-4(fp)
     8d4:	00022106 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     8d8:	01000074 	movhi	r4,1
     8dc:	21076204 	addi	r4,r4,7560
     8e0:	000c65c0 	call	c65c <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     8e4:	00c006b4 	movhi	r3,26
     8e8:	18f17504 	addi	r3,r3,-14892
     8ec:	013ffa34 	movhi	r4,65512
     8f0:	21255704 	addi	r4,r4,-27300
     8f4:	2709883a 	add	r4,r4,fp
     8f8:	20800017 	ldw	r2,0(r4)
     8fc:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     900:	023ffa34 	movhi	r8,65512
     904:	42255704 	addi	r8,r8,-27300
     908:	4711883a 	add	r8,r8,fp
     90c:	40800017 	ldw	r2,0(r8)
     910:	10800a17 	ldw	r2,40(r2)
     914:	10800204 	addi	r2,r2,8
     918:	1007883a 	mov	r3,r2
     91c:	00800384 	movi	r2,14
     920:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     924:	01000074 	movhi	r4,1
     928:	21076a04 	addi	r4,r4,7592
     92c:	000e7380 	call	e738 <alt_up_parallel_port_open_dev>
     930:	00fffa34 	movhi	r3,65512
     934:	18e55604 	addi	r3,r3,-27304
     938:	1f07883a 	add	r3,r3,fp
     93c:	18800015 	stw	r2,0(r3)
	if ( green_LEDs_dev == NULL)
     940:	013ffa34 	movhi	r4,65512
     944:	21255604 	addi	r4,r4,-27304
     948:	2709883a 	add	r4,r4,fp
     94c:	20800017 	ldw	r2,0(r4)
     950:	1004c03a 	cmpne	r2,r2,zero
     954:	1000061e 	bne	r2,zero,970 <main+0x350>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     958:	01000074 	movhi	r4,1
     95c:	21076e04 	addi	r4,r4,7608
     960:	000c65c0 	call	c65c <alt_printf>
		return -1;
     964:	023fffc4 	movi	r8,-1
     968:	e23fff15 	stw	r8,-4(fp)
     96c:	0001fb06 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     970:	01000074 	movhi	r4,1
     974:	21077904 	addi	r4,r4,7652
     978:	000c65c0 	call	c65c <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     97c:	00c006b4 	movhi	r3,26
     980:	18f17504 	addi	r3,r3,-14892
     984:	013ffa34 	movhi	r4,65512
     988:	21255604 	addi	r4,r4,-27304
     98c:	2709883a 	add	r4,r4,fp
     990:	20800017 	ldw	r2,0(r4)
     994:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	red_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     998:	01000074 	movhi	r4,1
     99c:	21078004 	addi	r4,r4,7680
     9a0:	000e7380 	call	e738 <alt_up_parallel_port_open_dev>
     9a4:	023ffa34 	movhi	r8,65512
     9a8:	42255504 	addi	r8,r8,-27308
     9ac:	4711883a 	add	r8,r8,fp
     9b0:	40800015 	stw	r2,0(r8)
	if ( red_LEDs_dev == NULL)
     9b4:	00fffa34 	movhi	r3,65512
     9b8:	18e55504 	addi	r3,r3,-27308
     9bc:	1f07883a 	add	r3,r3,fp
     9c0:	18800017 	ldw	r2,0(r3)
     9c4:	1004c03a 	cmpne	r2,r2,zero
     9c8:	1000061e 	bne	r2,zero,9e4 <main+0x3c4>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     9cc:	01000074 	movhi	r4,1
     9d0:	21078404 	addi	r4,r4,7696
     9d4:	000c65c0 	call	c65c <alt_printf>
		return -1;
     9d8:	013fffc4 	movi	r4,-1
     9dc:	e13fff15 	stw	r4,-4(fp)
     9e0:	0001de06 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     9e4:	01000074 	movhi	r4,1
     9e8:	21078e04 	addi	r4,r4,7736
     9ec:	000c65c0 	call	c65c <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     9f0:	00c006b4 	movhi	r3,26
     9f4:	18f17504 	addi	r3,r3,-14892
     9f8:	023ffa34 	movhi	r8,65512
     9fc:	42255504 	addi	r8,r8,-27308
     a00:	4711883a 	add	r8,r8,fp
     a04:	40800017 	ldw	r2,0(r8)
     a08:	18800215 	stw	r2,8(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     a0c:	01000074 	movhi	r4,1
     a10:	21079404 	addi	r4,r4,7760
     a14:	000ee380 	call	ee38 <alt_up_ps2_open_dev>
     a18:	00fffa34 	movhi	r3,65512
     a1c:	18e55404 	addi	r3,r3,-27312
     a20:	1f07883a 	add	r3,r3,fp
     a24:	18800015 	stw	r2,0(r3)
	if ( PS2_dev == NULL)
     a28:	013ffa34 	movhi	r4,65512
     a2c:	21255404 	addi	r4,r4,-27312
     a30:	2709883a 	add	r4,r4,fp
     a34:	20800017 	ldw	r2,0(r4)
     a38:	1004c03a 	cmpne	r2,r2,zero
     a3c:	1000061e 	bne	r2,zero,a58 <main+0x438>
	{
		alt_printf ("Error: could not open PS2 device\n");
     a40:	01000074 	movhi	r4,1
     a44:	21079804 	addi	r4,r4,7776
     a48:	000c65c0 	call	c65c <alt_printf>
		return -1;
     a4c:	023fffc4 	movi	r8,-1
     a50:	e23fff15 	stw	r8,-4(fp)
     a54:	0001c106 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     a58:	01000074 	movhi	r4,1
     a5c:	2107a104 	addi	r4,r4,7812
     a60:	000c65c0 	call	c65c <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     a64:	00c006b4 	movhi	r3,26
     a68:	18f17504 	addi	r3,r3,-14892
     a6c:	013ffa34 	movhi	r4,65512
     a70:	21255404 	addi	r4,r4,-27312
     a74:	2709883a 	add	r4,r4,fp
     a78:	20800017 	ldw	r2,0(r4)
     a7c:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     a80:	023ffa34 	movhi	r8,65512
     a84:	42255404 	addi	r8,r8,-27312
     a88:	4711883a 	add	r8,r8,fp
     a8c:	41000017 	ldw	r4,0(r8)
     a90:	01403fc4 	movi	r5,255
     a94:	000ea1c0 	call	ea1c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     a98:	00bffa34 	movhi	r2,65512
     a9c:	10a55404 	addi	r2,r2,-27312
     aa0:	1705883a 	add	r2,r2,fp
     aa4:	11000017 	ldw	r4,0(r2)
     aa8:	000e9700 	call	e970 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     aac:	01000074 	movhi	r4,1
     ab0:	2107a604 	addi	r4,r4,7832
     ab4:	000d9fc0 	call	d9fc <alt_up_audio_open_dev>
     ab8:	00fffa34 	movhi	r3,65512
     abc:	18e55204 	addi	r3,r3,-27320
     ac0:	1f07883a 	add	r3,r3,fp
     ac4:	18800015 	stw	r2,0(r3)
	if ( audio_dev == NULL)
     ac8:	013ffa34 	movhi	r4,65512
     acc:	21255204 	addi	r4,r4,-27320
     ad0:	2709883a 	add	r4,r4,fp
     ad4:	20800017 	ldw	r2,0(r4)
     ad8:	1004c03a 	cmpne	r2,r2,zero
     adc:	1000061e 	bne	r2,zero,af8 <main+0x4d8>
	{
		alt_printf ("Error: could not open audio device\n");
     ae0:	01000074 	movhi	r4,1
     ae4:	2107a904 	addi	r4,r4,7844
     ae8:	000c65c0 	call	c65c <alt_printf>
		return -1;
     aec:	023fffc4 	movi	r8,-1
     af0:	e23fff15 	stw	r8,-4(fp)
     af4:	00019906 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     af8:	01000074 	movhi	r4,1
     afc:	2107b204 	addi	r4,r4,7880
     b00:	000c65c0 	call	c65c <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     b04:	00c006b4 	movhi	r3,26
     b08:	18f17504 	addi	r3,r3,-14892
     b0c:	013ffa34 	movhi	r4,65512
     b10:	21255204 	addi	r4,r4,-27320
     b14:	2709883a 	add	r4,r4,fp
     b18:	20800017 	ldw	r2,0(r4)
     b1c:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     b20:	01000074 	movhi	r4,1
     b24:	2107b804 	addi	r4,r4,7904
     b28:	000e2ec0 	call	e2ec <alt_up_character_lcd_open_dev>
     b2c:	023ffa34 	movhi	r8,65512
     b30:	42255304 	addi	r8,r8,-27316
     b34:	4711883a 	add	r8,r8,fp
     b38:	40800015 	stw	r2,0(r8)
	if ( lcd_dev == NULL)
     b3c:	00fffa34 	movhi	r3,65512
     b40:	18e55304 	addi	r3,r3,-27316
     b44:	1f07883a 	add	r3,r3,fp
     b48:	18800017 	ldw	r2,0(r3)
     b4c:	1004c03a 	cmpne	r2,r2,zero
     b50:	1000061e 	bne	r2,zero,b6c <main+0x54c>
	{
		alt_printf ("Error: could not open character LCD device\n");
     b54:	01000074 	movhi	r4,1
     b58:	2107bd04 	addi	r4,r4,7924
     b5c:	000c65c0 	call	c65c <alt_printf>
		return -1;
     b60:	013fffc4 	movi	r4,-1
     b64:	e13fff15 	stw	r4,-4(fp)
     b68:	00017c06 	br	115c <main+0xb3c>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     b6c:	01000074 	movhi	r4,1
     b70:	2107c804 	addi	r4,r4,7968
     b74:	000c65c0 	call	c65c <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     b78:	00c006b4 	movhi	r3,26
     b7c:	18f17504 	addi	r3,r3,-14892
     b80:	023ffa34 	movhi	r8,65512
     b84:	42255304 	addi	r8,r8,-27316
     b88:	4711883a 	add	r8,r8,fp
     b8c:	40800017 	ldw	r2,0(r8)
     b90:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passing a pointer to up_dev to each ISR (using the context argument) as
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     b94:	0009883a 	mov	r4,zero
     b98:	014006b4 	movhi	r5,26
     b9c:	29717504 	addi	r5,r5,-14892
     ba0:	01800034 	movhi	r6,0
     ba4:	31817004 	addi	r6,r6,1472
     ba8:	000c0940 	call	c094 <alt_irq_register>
	//alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     bac:	01000184 	movi	r4,6
     bb0:	014006b4 	movhi	r5,26
     bb4:	29717504 	addi	r5,r5,-14892
     bb8:	01800034 	movhi	r6,0
     bbc:	3180d004 	addi	r6,r6,832
     bc0:	000c0940 	call	c094 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     bc4:	010001c4 	movi	r4,7
     bc8:	014006b4 	movhi	r5,26
     bcc:	29717504 	addi	r5,r5,-14892
     bd0:	01800034 	movhi	r6,0
     bd4:	31807c04 	addi	r6,r6,496
     bd8:	000c0940 	call	c094 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     bdc:	00800634 	movhi	r2,24
     be0:	109aa704 	addi	r2,r2,27292
     be4:	013ffa34 	movhi	r4,65512
     be8:	21253504 	addi	r4,r4,-27436
     bec:	2709883a 	add	r4,r4,fp
     bf0:	2087883a 	add	r3,r4,r2
     bf4:	01000074 	movhi	r4,1
     bf8:	21080204 	addi	r4,r4,8200
     bfc:	20800017 	ldw	r2,0(r4)
     c00:	18800015 	stw	r2,0(r3)
     c04:	20800117 	ldw	r2,4(r4)
     c08:	18800115 	stw	r2,4(r3)
     c0c:	20800217 	ldw	r2,8(r4)
     c10:	18800215 	stw	r2,8(r3)
     c14:	20800317 	ldw	r2,12(r4)
     c18:	18800315 	stw	r2,12(r3)
     c1c:	20800417 	ldw	r2,16(r4)
     c20:	18800415 	stw	r2,16(r3)
     c24:	20800517 	ldw	r2,20(r4)
     c28:	18800515 	stw	r2,20(r3)
     c2c:	20800617 	ldw	r2,24(r4)
     c30:	18800615 	stw	r2,24(r3)
     c34:	20800717 	ldw	r2,28(r4)
     c38:	18800715 	stw	r2,28(r3)
     c3c:	20800817 	ldw	r2,32(r4)
     c40:	18800815 	stw	r2,32(r3)
     c44:	2080090b 	ldhu	r2,36(r4)
     c48:	1880090d 	sth	r2,36(r3)
     c4c:	19000984 	addi	r4,r3,38
     c50:	01800a84 	movi	r6,42
     c54:	000b883a 	mov	r5,zero
     c58:	0002b7c0 	call	2b7c <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     c5c:	00800634 	movhi	r2,24
     c60:	109abb04 	addi	r2,r2,27372
     c64:	023ffa34 	movhi	r8,65512
     c68:	42253504 	addi	r8,r8,-27436
     c6c:	4711883a 	add	r8,r8,fp
     c70:	4089883a 	add	r4,r8,r2
     c74:	00c00074 	movhi	r3,1
     c78:	18c81604 	addi	r3,r3,8280
     c7c:	18800017 	ldw	r2,0(r3)
     c80:	20800015 	stw	r2,0(r4)
     c84:	18800117 	ldw	r2,4(r3)
     c88:	20800115 	stw	r2,4(r4)
     c8c:	18800217 	ldw	r2,8(r3)
     c90:	20800215 	stw	r2,8(r4)
     c94:	20000315 	stw	zero,12(r4)
     c98:	20000415 	stw	zero,16(r4)
	char text_bottom_VGA[20] = "Media Computer\0";
     c9c:	00800634 	movhi	r2,24
     ca0:	109ac004 	addi	r2,r2,27392
     ca4:	00fffa34 	movhi	r3,65512
     ca8:	18e53504 	addi	r3,r3,-27436
     cac:	1f07883a 	add	r3,r3,fp
     cb0:	1889883a 	add	r4,r3,r2
     cb4:	00c00074 	movhi	r3,1
     cb8:	18c81b04 	addi	r3,r3,8300
     cbc:	18800017 	ldw	r2,0(r3)
     cc0:	20800015 	stw	r2,0(r4)
     cc4:	18800117 	ldw	r2,4(r3)
     cc8:	20800115 	stw	r2,4(r4)
     ccc:	18800217 	ldw	r2,8(r3)
     cd0:	20800215 	stw	r2,8(r4)
     cd4:	18800317 	ldw	r2,12(r3)
     cd8:	20800315 	stw	r2,12(r4)
     cdc:	20000415 	stw	zero,16(r4)
	char text_ALTERA[10] = "ALTERA\0";
     ce0:	00800634 	movhi	r2,24
     ce4:	109ac504 	addi	r2,r2,27412
     ce8:	013ffa34 	movhi	r4,65512
     cec:	21253504 	addi	r4,r4,-27436
     cf0:	2709883a 	add	r4,r4,fp
     cf4:	2087883a 	add	r3,r4,r2
     cf8:	01000074 	movhi	r4,1
     cfc:	21082004 	addi	r4,r4,8320
     d00:	20800017 	ldw	r2,0(r4)
     d04:	18800015 	stw	r2,0(r3)
     d08:	20800117 	ldw	r2,4(r4)
     d0c:	18800115 	stw	r2,4(r3)
     d10:	1800020d 	sth	zero,8(r3)
	char text_erase[10] = "      \0";
     d14:	00800634 	movhi	r2,24
     d18:	109ac784 	addi	r2,r2,27422
     d1c:	023ffa34 	movhi	r8,65512
     d20:	42253504 	addi	r8,r8,-27436
     d24:	4711883a 	add	r8,r8,fp
     d28:	4089883a 	add	r4,r8,r2
     d2c:	00c00074 	movhi	r3,1
     d30:	18c82304 	addi	r3,r3,8332
     d34:	1880000b 	ldhu	r2,0(r3)
     d38:	2080000d 	sth	r2,0(r4)
     d3c:	1880008b 	ldhu	r2,2(r3)
     d40:	2080008d 	sth	r2,2(r4)
     d44:	1880010b 	ldhu	r2,4(r3)
     d48:	2080010d 	sth	r2,4(r4)
     d4c:	1880018b 	ldhu	r2,6(r3)
     d50:	2080018d 	sth	r2,6(r4)
     d54:	2000020d 	sth	zero,8(r4)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     d58:	00bffa34 	movhi	r2,65512
     d5c:	10a55304 	addi	r2,r2,-27316
     d60:	1705883a 	add	r2,r2,fp
     d64:	11000017 	ldw	r4,0(r2)
     d68:	000b883a 	mov	r5,zero
     d6c:	000d883a 	mov	r6,zero
     d70:	000e4680 	call	e468 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     d74:	00800634 	movhi	r2,24
     d78:	109aa704 	addi	r2,r2,27292
     d7c:	00fffa34 	movhi	r3,65512
     d80:	18e53504 	addi	r3,r3,-27436
     d84:	1f07883a 	add	r3,r3,fp
     d88:	188b883a 	add	r5,r3,r2
     d8c:	023ffa34 	movhi	r8,65512
     d90:	42255304 	addi	r8,r8,-27316
     d94:	4711883a 	add	r8,r8,fp
     d98:	41000017 	ldw	r4,0(r8)
     d9c:	000e3a40 	call	e3a4 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor
     da0:	00bffa34 	movhi	r2,65512
     da4:	10a55304 	addi	r2,r2,-27316
     da8:	1705883a 	add	r2,r2,fp
     dac:	11000017 	ldw	r4,0(r2)
     db0:	000e6d00 	call	e6d0 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     db4:	01000074 	movhi	r4,1
     db8:	2107d004 	addi	r4,r4,8000
     dbc:	000f17c0 	call	f17c <alt_up_pixel_buffer_dma_open_dev>
     dc0:	00fffa34 	movhi	r3,65512
     dc4:	18e55004 	addi	r3,r3,-27328
     dc8:	1f07883a 	add	r3,r3,fp
     dcc:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     dd0:	013ffa34 	movhi	r4,65512
     dd4:	21255004 	addi	r4,r4,-27328
     dd8:	2709883a 	add	r4,r4,fp
     ddc:	20800017 	ldw	r2,0(r4)
     de0:	1004c03a 	cmpne	r2,r2,zero
     de4:	1000041e 	bne	r2,zero,df8 <main+0x7d8>
		alt_printf ("Error: could not open pixel buffer device\n");
     de8:	01000074 	movhi	r4,1
     dec:	2107d604 	addi	r4,r4,8024
     df0:	000c65c0 	call	c65c <alt_printf>
     df4:	00000306 	br	e04 <main+0x7e4>
	else
		alt_printf ("Opened pixel buffer device\n");
     df8:	01000074 	movhi	r4,1
     dfc:	2107e104 	addi	r4,r4,8068
     e00:	000c65c0 	call	c65c <alt_printf>
	color = 0x187F;		// a medium blue color
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
		blue_y2 * 4, color, 0);
*/
	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     e04:	01000074 	movhi	r4,1
     e08:	2107e804 	addi	r4,r4,8096
     e0c:	000eefc0 	call	eefc <alt_up_char_buffer_open_dev>
     e10:	023ffa34 	movhi	r8,65512
     e14:	42255104 	addi	r8,r8,-27324
     e18:	4711883a 	add	r8,r8,fp
     e1c:	40800015 	stw	r2,0(r8)
	if ( char_buffer_dev == NULL)
     e20:	00fffa34 	movhi	r3,65512
     e24:	18e55104 	addi	r3,r3,-27324
     e28:	1f07883a 	add	r3,r3,fp
     e2c:	18800017 	ldw	r2,0(r3)
     e30:	1004c03a 	cmpne	r2,r2,zero
     e34:	1000041e 	bne	r2,zero,e48 <main+0x828>
		alt_printf ("Error: could not open character buffer device\n");
     e38:	01000074 	movhi	r4,1
     e3c:	2107ee04 	addi	r4,r4,8120
     e40:	000c65c0 	call	c65c <alt_printf>
     e44:	00000306 	br	e54 <main+0x834>
	else
		alt_printf ("Opened character buffer device\n");
     e48:	01000074 	movhi	r4,1
     e4c:	2107fa04 	addi	r4,r4,8168
     e50:	000c65c0 	call	c65c <alt_printf>

	char_buffer_x = 79; char_buffer_y = 59;
	ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars /; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
	alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
*/
	print_screen(pixel_buffer_dev, char_buffer_dev);
     e54:	023ffa34 	movhi	r8,65512
     e58:	42255004 	addi	r8,r8,-27328
     e5c:	4711883a 	add	r8,r8,fp
     e60:	41000017 	ldw	r4,0(r8)
     e64:	00bffa34 	movhi	r2,65512
     e68:	10a55104 	addi	r2,r2,-27324
     e6c:	1705883a 	add	r2,r2,fp
     e70:	11400017 	ldw	r5,0(r2)
     e74:	0001c100 	call	1c10 <print_screen>
		if(byte2 > 0 || byte3 > 0)
		{
			erase_previous_mouse_position(pixel_buffer_dev, char_buffer_dev);
		}

*/		if(count == 4){
     e78:	00800074 	movhi	r2,1
     e7c:	1096c604 	addi	r2,r2,23320
     e80:	10800017 	ldw	r2,0(r2)
     e84:	10800118 	cmpnei	r2,r2,4
     e88:	1000361e 	bne	r2,zero,f64 <main+0x944>
			getMouseState();
     e8c:	0001a340 	call	1a34 <getMouseState>
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, prev_x_mouse, prev_y_mouse,
     e90:	d166f717 	ldw	r5,-25636(gp)
     e94:	d1a6f217 	ldw	r6,-25656(gp)
     e98:	d0e6f717 	ldw	r3,-25636(gp)
     e9c:	d0a6f117 	ldw	r2,-25660(gp)
     ea0:	188f883a 	add	r7,r3,r2
     ea4:	d0e6f217 	ldw	r3,-25656(gp)
     ea8:	d0a6f117 	ldw	r2,-25660(gp)
     eac:	1885883a 	add	r2,r3,r2
     eb0:	013ffa34 	movhi	r4,65512
     eb4:	21254084 	addi	r4,r4,-27390
     eb8:	2709883a 	add	r4,r4,fp
     ebc:	20c0000f 	ldh	r3,0(r4)
     ec0:	023ffa34 	movhi	r8,65512
     ec4:	42254004 	addi	r8,r8,-27392
     ec8:	4711883a 	add	r8,r8,fp
     ecc:	41000003 	ldbu	r4,0(r8)
     ed0:	d8800015 	stw	r2,0(sp)
     ed4:	d8c00115 	stw	r3,4(sp)
     ed8:	d9000215 	stw	r4,8(sp)
     edc:	00bffa34 	movhi	r2,65512
     ee0:	10a55004 	addi	r2,r2,-27328
     ee4:	1705883a 	add	r2,r2,fp
     ee8:	11000017 	ldw	r4,0(r2)
     eec:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
						prev_x_mouse + mouse_width, prev_y_mouse + mouse_width, trans_color, buffer_type);

			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x_mouse, y_mouse,
     ef0:	d166fc17 	ldw	r5,-25616(gp)
     ef4:	d1a6f317 	ldw	r6,-25652(gp)
     ef8:	d0e6fc17 	ldw	r3,-25616(gp)
     efc:	d0a6f117 	ldw	r2,-25660(gp)
     f00:	188f883a 	add	r7,r3,r2
     f04:	d0e6f317 	ldw	r3,-25652(gp)
     f08:	d0a6f117 	ldw	r2,-25660(gp)
     f0c:	1885883a 	add	r2,r3,r2
     f10:	013ffa34 	movhi	r4,65512
     f14:	21254004 	addi	r4,r4,-27392
     f18:	2709883a 	add	r4,r4,fp
     f1c:	20c00003 	ldbu	r3,0(r4)
     f20:	d8800015 	stw	r2,0(sp)
     f24:	00bfffc4 	movi	r2,-1
     f28:	d8800115 	stw	r2,4(sp)
     f2c:	d8c00215 	stw	r3,8(sp)
     f30:	023ffa34 	movhi	r8,65512
     f34:	42255004 	addi	r8,r8,-27328
     f38:	4711883a 	add	r8,r8,fp
     f3c:	41000017 	ldw	r4,0(r8)
     f40:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>

					//alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);

					//buffer_type = 1 - buffer_type; //toggle back and front buffer

			prev_x_mouse = x_mouse;
     f44:	d0a6fc17 	ldw	r2,-25616(gp)
     f48:	d0a6f715 	stw	r2,-25636(gp)
			prev_y_mouse = y_mouse;
     f4c:	d0a6f317 	ldw	r2,-25652(gp)
     f50:	d0a6f215 	stw	r2,-25656(gp)
			//byte1 = 0; byte2 = 0; byte3 = 0;
			count = 1;
     f54:	00c00074 	movhi	r3,1
     f58:	18d6c604 	addi	r3,r3,23320
     f5c:	00800044 	movi	r2,1
     f60:	18800015 	stw	r2,0(r3)
        }

		// check if either KEY1 or KEY2 is pressed for record and play
        check_KEYs(&record, &play, &denoise, &buffer_index, KEY_dev, audio_dev);
     f64:	00bffa34 	movhi	r2,65512
     f68:	10a55904 	addi	r2,r2,-27292
     f6c:	e089883a 	add	r4,fp,r2
     f70:	00fffa34 	movhi	r3,65512
     f74:	18e55804 	addi	r3,r3,-27296
     f78:	e0cb883a 	add	r5,fp,r3
     f7c:	023ffa34 	movhi	r8,65512
     f80:	42255a04 	addi	r8,r8,-27288
     f84:	e20d883a 	add	r6,fp,r8
     f88:	00bffa34 	movhi	r2,65512
     f8c:	10a55b04 	addi	r2,r2,-27284
     f90:	e08f883a 	add	r7,fp,r2
     f94:	00fffa34 	movhi	r3,65512
     f98:	18e55704 	addi	r3,r3,-27300
     f9c:	1f07883a 	add	r3,r3,fp
     fa0:	18800017 	ldw	r2,0(r3)
     fa4:	d8800015 	stw	r2,0(sp)
     fa8:	023ffa34 	movhi	r8,65512
     fac:	42255204 	addi	r8,r8,-27320
     fb0:	4711883a 	add	r8,r8,fp
     fb4:	40800017 	ldw	r2,0(r8)
     fb8:	d8800115 	stw	r2,4(sp)
     fbc:	00014d40 	call	14d4 <check_KEYs>
		alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
*/
		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */

		//VGA screen update
		if((byte2 > 0 || byte3 > 0))
     fc0:	00800074 	movhi	r2,1
     fc4:	1096c804 	addi	r2,r2,23328
     fc8:	10800003 	ldbu	r2,0(r2)
     fcc:	10803fcc 	andi	r2,r2,255
     fd0:	1004c03a 	cmpne	r2,r2,zero
     fd4:	1000031e 	bne	r2,zero,fe4 <main+0x9c4>
     fd8:	00800074 	movhi	r2,1
     fdc:	1096c844 	addi	r2,r2,23329
     fe0:	10800003 	ldbu	r2,0(r2)
						prev_y_mouse = prev_y_mouse_front;
					}*/
		}

		// check if either Record, Play or Echo box is clicked
		if(check_for_click(x1_box_record, x2_box_record, y1_boxes, y2_boxes)){
     fe4:	00bffa34 	movhi	r2,65512
     fe8:	10a53d04 	addi	r2,r2,-27404
     fec:	1705883a 	add	r2,r2,fp
     ff0:	11000017 	ldw	r4,0(r2)
     ff4:	00fffa34 	movhi	r3,65512
     ff8:	18e53c04 	addi	r3,r3,-27408
     ffc:	1f07883a 	add	r3,r3,fp
    1000:	19400017 	ldw	r5,0(r3)
    1004:	023ffa34 	movhi	r8,65512
    1008:	42253f04 	addi	r8,r8,-27396
    100c:	4711883a 	add	r8,r8,fp
    1010:	41800017 	ldw	r6,0(r8)
    1014:	00bffa34 	movhi	r2,65512
    1018:	10a53e04 	addi	r2,r2,-27400
    101c:	1705883a 	add	r2,r2,fp
    1020:	11c00017 	ldw	r7,0(r2)
    1024:	00014480 	call	1448 <check_for_click>
    1028:	10803fcc 	andi	r2,r2,255
    102c:	1005003a 	cmpeq	r2,r2,zero
    1030:	1000051e 	bne	r2,zero,1048 <main+0xa28>
			record = 1;
    1034:	00800044 	movi	r2,1
    1038:	00fffa34 	movhi	r3,65512
    103c:	18e55904 	addi	r3,r3,-27292
    1040:	1f07883a 	add	r3,r3,fp
    1044:	18800015 	stw	r2,0(r3)
		}
		if(check_for_click(x1_box_play, x2_box_play, y1_boxes, y2_boxes)){
    1048:	023ffa34 	movhi	r8,65512
    104c:	42253b04 	addi	r8,r8,-27412
    1050:	4711883a 	add	r8,r8,fp
    1054:	41000017 	ldw	r4,0(r8)
    1058:	00bffa34 	movhi	r2,65512
    105c:	10a53a04 	addi	r2,r2,-27416
    1060:	1705883a 	add	r2,r2,fp
    1064:	11400017 	ldw	r5,0(r2)
    1068:	00fffa34 	movhi	r3,65512
    106c:	18e53f04 	addi	r3,r3,-27396
    1070:	1f07883a 	add	r3,r3,fp
    1074:	19800017 	ldw	r6,0(r3)
    1078:	023ffa34 	movhi	r8,65512
    107c:	42253e04 	addi	r8,r8,-27400
    1080:	4711883a 	add	r8,r8,fp
    1084:	41c00017 	ldw	r7,0(r8)
    1088:	00014480 	call	1448 <check_for_click>
    108c:	10803fcc 	andi	r2,r2,255
    1090:	1005003a 	cmpeq	r2,r2,zero
    1094:	1000051e 	bne	r2,zero,10ac <main+0xa8c>
			play = 1;
    1098:	00800044 	movi	r2,1
    109c:	00fffa34 	movhi	r3,65512
    10a0:	18e55804 	addi	r3,r3,-27296
    10a4:	1f07883a 	add	r3,r3,fp
    10a8:	18800015 	stw	r2,0(r3)
		}
		if(check_for_click(x1_box_echo, x2_box_echo, y1_boxes, y2_boxes)){
    10ac:	023ffa34 	movhi	r8,65512
    10b0:	42253904 	addi	r8,r8,-27420
    10b4:	4711883a 	add	r8,r8,fp
    10b8:	41000017 	ldw	r4,0(r8)
    10bc:	00bffa34 	movhi	r2,65512
    10c0:	10a53804 	addi	r2,r2,-27424
    10c4:	1705883a 	add	r2,r2,fp
    10c8:	11400017 	ldw	r5,0(r2)
    10cc:	00fffa34 	movhi	r3,65512
    10d0:	18e53f04 	addi	r3,r3,-27396
    10d4:	1f07883a 	add	r3,r3,fp
    10d8:	19800017 	ldw	r6,0(r3)
    10dc:	023ffa34 	movhi	r8,65512
    10e0:	42253e04 	addi	r8,r8,-27400
    10e4:	4711883a 	add	r8,r8,fp
    10e8:	41c00017 	ldw	r7,0(r8)
    10ec:	00014480 	call	1448 <check_for_click>
    10f0:	10803fcc 	andi	r2,r2,255
    10f4:	1005003a 	cmpeq	r2,r2,zero
    10f8:	1000021e 	bne	r2,zero,1104 <main+0xae4>
			echo = 1;
    10fc:	00800044 	movi	r2,1
    1100:	d0a6f015 	stw	r2,-25664(gp)
		}

		HEX_PS2 (byte1, byte2, byte3);
    1104:	00800074 	movhi	r2,1
    1108:	1096c8c4 	addi	r2,r2,23331
    110c:	10800003 	ldbu	r2,0(r2)
    1110:	11003fcc 	andi	r4,r2,255
    1114:	00800074 	movhi	r2,1
    1118:	1096c804 	addi	r2,r2,23328
    111c:	10800003 	ldbu	r2,0(r2)
    1120:	11403fcc 	andi	r5,r2,255
    1124:	00800074 	movhi	r2,1
    1128:	1096c844 	addi	r2,r2,23329
    112c:	10800003 	ldbu	r2,0(r2)
    1130:	11803fcc 	andi	r6,r2,255
    1134:	00011740 	call	1174 <HEX_PS2>
		show_mouse_buttons_states_on_Red_LEDs (byte1);
    1138:	00800074 	movhi	r2,1
    113c:	1096c8c4 	addi	r2,r2,23331
    1140:	10800003 	ldbu	r2,0(r2)
    1144:	11003fcc 	andi	r4,r2,255
    1148:	00013500 	call	1350 <show_mouse_buttons_states_on_Red_LEDs>
		timeout = 0;
    114c:	00800074 	movhi	r2,1
    1150:	1096ca04 	addi	r2,r2,23336
    1154:	10000015 	stw	zero,0(r2)
	}
    1158:	003f4706 	br	e78 <main+0x858>
    115c:	e0bfff17 	ldw	r2,-4(fp)
}
    1160:	e037883a 	mov	sp,fp
    1164:	dfc00117 	ldw	ra,4(sp)
    1168:	df000017 	ldw	fp,0(sp)
    116c:	dec00204 	addi	sp,sp,8
    1170:	f800283a 	ret

00001174 <HEX_PS2>:
 * Subroutine to show a string of HEX data on the HEX displays
 * Note that we are using pointer accesses for the HEX displays parallel port. We could
 * also use the HAL functions for these ports instead
****************************************************************************************/
void HEX_PS2(unsigned char b1, unsigned char b2, unsigned char b3)
{
    1174:	deffef04 	addi	sp,sp,-68
    1178:	dfc01015 	stw	ra,64(sp)
    117c:	df000f15 	stw	fp,60(sp)
    1180:	df000f04 	addi	fp,sp,60
    1184:	e13ffd05 	stb	r4,-12(fp)
    1188:	e17ffe05 	stb	r5,-8(fp)
    118c:	e1bfff05 	stb	r6,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    1190:	00840034 	movhi	r2,4096
    1194:	10800804 	addi	r2,r2,32
    1198:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    119c:	00840034 	movhi	r2,4096
    11a0:	10800c04 	addi	r2,r2,48
    11a4:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    11a8:	00800074 	movhi	r2,1
    11ac:	10882584 	addi	r2,r2,8342
    11b0:	e13ff704 	addi	r4,fp,-36
    11b4:	100b883a 	mov	r5,r2
    11b8:	01800404 	movi	r6,16
    11bc:	0002adc0 	call	2adc <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    11c0:	e03ffb05 	stb	zero,-20(fp)
    11c4:	e03ffb45 	stb	zero,-19(fp)
    11c8:	e03ffb85 	stb	zero,-18(fp)
    11cc:	e03ffbc5 	stb	zero,-17(fp)
    11d0:	e03ffc05 	stb	zero,-16(fp)
    11d4:	e03ffc45 	stb	zero,-15(fp)
    11d8:	e03ffc85 	stb	zero,-14(fp)
    11dc:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    11e0:	e0bffd03 	ldbu	r2,-12(fp)
    11e4:	1006943a 	slli	r3,r2,16
    11e8:	e0bffe03 	ldbu	r2,-8(fp)
    11ec:	1004923a 	slli	r2,r2,8
    11f0:	1886b03a 	or	r3,r3,r2
    11f4:	e0bfff03 	ldbu	r2,-4(fp)
    11f8:	1884b03a 	or	r2,r3,r2
    11fc:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
    1200:	e03ff115 	stw	zero,-60(fp)
    1204:	00001306 	br	1254 <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    1208:	e0bff417 	ldw	r2,-48(fp)
    120c:	108003cc 	andi	r2,r2,15
    1210:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
    1214:	e0fff317 	ldw	r3,-52(fp)
    1218:	e0bff704 	addi	r2,fp,-36
    121c:	10c5883a 	add	r2,r2,r3
    1220:	10800003 	ldbu	r2,0(r2)
    1224:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
    1228:	e0fff117 	ldw	r3,-60(fp)
    122c:	e0bffb04 	addi	r2,fp,-20
    1230:	10c7883a 	add	r3,r2,r3
    1234:	e0bff203 	ldbu	r2,-56(fp)
    1238:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
    123c:	e0bff417 	ldw	r2,-48(fp)
    1240:	1004d13a 	srli	r2,r2,4
    1244:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
    1248:	e0bff117 	ldw	r2,-60(fp)
    124c:	10800044 	addi	r2,r2,1
    1250:	e0bff115 	stw	r2,-60(fp)
    1254:	e0bff117 	ldw	r2,-60(fp)
    1258:	10800190 	cmplti	r2,r2,6
    125c:	103fea1e 	bne	r2,zero,1208 <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1260:	e0bffb04 	addi	r2,fp,-20
    1264:	10c00017 	ldw	r3,0(r2)
    1268:	e0bff617 	ldw	r2,-40(fp)
    126c:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    1270:	e0bffb04 	addi	r2,fp,-20
    1274:	10800104 	addi	r2,r2,4
    1278:	10c00017 	ldw	r3,0(r2)
    127c:	e0bff517 	ldw	r2,-44(fp)
    1280:	10c00015 	stw	r3,0(r2)
}
    1284:	e037883a 	mov	sp,fp
    1288:	dfc00117 	ldw	ra,4(sp)
    128c:	df000017 	ldw	fp,0(sp)
    1290:	dec00204 	addi	sp,sp,8
    1294:	f800283a 	ret

00001298 <PS2_Init>:
void PS2_Init(alt_up_ps2_dev *PS2_dev)
{
    1298:	defffc04 	addi	sp,sp,-16
    129c:	dfc00315 	stw	ra,12(sp)
    12a0:	df000215 	stw	fp,8(sp)
    12a4:	df000204 	addi	fp,sp,8
    12a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    12ac:	e13fff17 	ldw	r4,-4(fp)
    12b0:	e17ffe04 	addi	r5,fp,-8
    12b4:	000ec200 	call	ec20 <alt_up_ps2_read_data_byte>
    12b8:	1004c03a 	cmpne	r2,r2,zero
    12bc:	10001f1e 	bne	r2,zero,133c <PS2_Init+0xa4>
	{
		/* allows save the last three bytes of data */
		byte1 = byte2;
    12c0:	00800074 	movhi	r2,1
    12c4:	1096c804 	addi	r2,r2,23328
    12c8:	10c00003 	ldbu	r3,0(r2)
    12cc:	00800074 	movhi	r2,1
    12d0:	1096c8c4 	addi	r2,r2,23331
    12d4:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
    12d8:	00800074 	movhi	r2,1
    12dc:	1096c844 	addi	r2,r2,23329
    12e0:	10c00003 	ldbu	r3,0(r2)
    12e4:	00800074 	movhi	r2,1
    12e8:	1096c804 	addi	r2,r2,23328
    12ec:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
    12f0:	e0fffe03 	ldbu	r3,-8(fp)
    12f4:	00800074 	movhi	r2,1
    12f8:	1096c844 	addi	r2,r2,23329
    12fc:	10c00005 	stb	r3,0(r2)

		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) )
    1300:	00800074 	movhi	r2,1
    1304:	1096c804 	addi	r2,r2,23328
    1308:	10800003 	ldbu	r2,0(r2)
    130c:	10803fcc 	andi	r2,r2,255
    1310:	10802a98 	cmpnei	r2,r2,170
    1314:	1000091e 	bne	r2,zero,133c <PS2_Init+0xa4>
    1318:	00800074 	movhi	r2,1
    131c:	1096c844 	addi	r2,r2,23329
    1320:	10800003 	ldbu	r2,0(r2)
    1324:	10803fcc 	andi	r2,r2,255
    1328:	1004c03a 	cmpne	r2,r2,zero
    132c:	1000031e 	bne	r2,zero,133c <PS2_Init+0xa4>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (PS2_dev, (unsigned char) 0xF4);
    1330:	e13fff17 	ldw	r4,-4(fp)
    1334:	01403d04 	movi	r5,244
    1338:	000ea1c0 	call	ea1c <alt_up_ps2_write_data_byte>
	}
	return;
}
    133c:	e037883a 	mov	sp,fp
    1340:	dfc00117 	ldw	ra,4(sp)
    1344:	df000017 	ldw	fp,0(sp)
    1348:	dec00204 	addi	sp,sp,8
    134c:	f800283a 	ret

00001350 <show_mouse_buttons_states_on_Red_LEDs>:
void show_mouse_buttons_states_on_Red_LEDs(unsigned char b1)
{
    1350:	defffe04 	addi	sp,sp,-8
    1354:	df000115 	stw	fp,4(sp)
    1358:	df000104 	addi	fp,sp,4
    135c:	e13fff05 	stb	r4,-4(fp)
	/* writing mouse buttons states on Red LEDs 1, 2 and 3 */

	if(b1 % 2){ /* left button is in b1[0] */
    1360:	e0bfff03 	ldbu	r2,-4(fp)
    1364:	1080004c 	andi	r2,r2,1
    1368:	10803fcc 	andi	r2,r2,255
    136c:	1005003a 	cmpeq	r2,r2,zero
    1370:	1000071e 	bne	r2,zero,1390 <show_mouse_buttons_states_on_Red_LEDs+0x40>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x4);
    1374:	008006b4 	movhi	r2,26
    1378:	10b17504 	addi	r2,r2,-14892
    137c:	10800217 	ldw	r2,8(r2)
    1380:	10800a17 	ldw	r2,40(r2)
    1384:	1007883a 	mov	r3,r2
    1388:	00800104 	movi	r2,4
    138c:	18800035 	stwio	r2,0(r3)
	}

	if((b1 >> 1) % 2){ /* right button is in b1[1] */
    1390:	e0bfff03 	ldbu	r2,-4(fp)
    1394:	1004d07a 	srli	r2,r2,1
    1398:	10803fcc 	andi	r2,r2,255
    139c:	1080004c 	andi	r2,r2,1
    13a0:	10803fcc 	andi	r2,r2,255
    13a4:	1005003a 	cmpeq	r2,r2,zero
    13a8:	1000071e 	bne	r2,zero,13c8 <show_mouse_buttons_states_on_Red_LEDs+0x78>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x1);
    13ac:	008006b4 	movhi	r2,26
    13b0:	10b17504 	addi	r2,r2,-14892
    13b4:	10800217 	ldw	r2,8(r2)
    13b8:	10800a17 	ldw	r2,40(r2)
    13bc:	1007883a 	mov	r3,r2
    13c0:	00800044 	movi	r2,1
    13c4:	18800035 	stwio	r2,0(r3)
	}

	if((b1 >> 2) % 2){ /* middle button is in b1[2] */
    13c8:	e0bfff03 	ldbu	r2,-4(fp)
    13cc:	1004d0ba 	srli	r2,r2,2
    13d0:	10803fcc 	andi	r2,r2,255
    13d4:	1080004c 	andi	r2,r2,1
    13d8:	10803fcc 	andi	r2,r2,255
    13dc:	1005003a 	cmpeq	r2,r2,zero
    13e0:	1000071e 	bne	r2,zero,1400 <show_mouse_buttons_states_on_Red_LEDs+0xb0>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x2);
    13e4:	008006b4 	movhi	r2,26
    13e8:	10b17504 	addi	r2,r2,-14892
    13ec:	10800217 	ldw	r2,8(r2)
    13f0:	10800a17 	ldw	r2,40(r2)
    13f4:	1007883a 	mov	r3,r2
    13f8:	00800084 	movi	r2,2
    13fc:	18800035 	stwio	r2,0(r3)
	}

    if((b1 != 12) && (b1 != 10) && (b1 != 9)){
    1400:	e0bfff03 	ldbu	r2,-4(fp)
    1404:	10800320 	cmpeqi	r2,r2,12
    1408:	10000b1e 	bne	r2,zero,1438 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
    140c:	e0bfff03 	ldbu	r2,-4(fp)
    1410:	108002a0 	cmpeqi	r2,r2,10
    1414:	1000081e 	bne	r2,zero,1438 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
    1418:	e0bfff03 	ldbu	r2,-4(fp)
    141c:	10800260 	cmpeqi	r2,r2,9
    1420:	1000051e 	bne	r2,zero,1438 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0);
    1424:	008006b4 	movhi	r2,26
    1428:	10b17504 	addi	r2,r2,-14892
    142c:	10800217 	ldw	r2,8(r2)
    1430:	10800a17 	ldw	r2,40(r2)
    1434:	10000035 	stwio	zero,0(r2)
	}

}
    1438:	e037883a 	mov	sp,fp
    143c:	df000017 	ldw	fp,0(sp)
    1440:	dec00104 	addi	sp,sp,4
    1444:	f800283a 	ret

00001448 <check_for_click>:
alt_u8 check_for_click(unsigned int start_x_region, unsigned int end_x_region, unsigned int start_y_region, unsigned int end_y_region) {
    1448:	defffa04 	addi	sp,sp,-24
    144c:	df000515 	stw	fp,20(sp)
    1450:	df000504 	addi	fp,sp,20
    1454:	e13ffb15 	stw	r4,-20(fp)
    1458:	e17ffc15 	stw	r5,-16(fp)
    145c:	e1bffd15 	stw	r6,-12(fp)
    1460:	e1fffe15 	stw	r7,-8(fp)
	if (left_button_click && x_mouse > start_x_region && x_mouse < end_x_region
    1464:	d0a6fa17 	ldw	r2,-25624(gp)
    1468:	1005003a 	cmpeq	r2,r2,zero
    146c:	1000131e 	bne	r2,zero,14bc <check_for_click+0x74>
    1470:	d0a6fc17 	ldw	r2,-25616(gp)
    1474:	1007883a 	mov	r3,r2
    1478:	e0bffb17 	ldw	r2,-20(fp)
    147c:	10c00f2e 	bgeu	r2,r3,14bc <check_for_click+0x74>
    1480:	d0a6fc17 	ldw	r2,-25616(gp)
    1484:	1007883a 	mov	r3,r2
    1488:	e0bffc17 	ldw	r2,-16(fp)
    148c:	18800b2e 	bgeu	r3,r2,14bc <check_for_click+0x74>
    1490:	d0a6f317 	ldw	r2,-25652(gp)
    1494:	1007883a 	mov	r3,r2
    1498:	e0bffd17 	ldw	r2,-12(fp)
    149c:	10c0072e 	bgeu	r2,r3,14bc <check_for_click+0x74>
    14a0:	d0a6f317 	ldw	r2,-25652(gp)
    14a4:	1007883a 	mov	r3,r2
    14a8:	e0bffe17 	ldw	r2,-8(fp)
    14ac:	1880032e 	bgeu	r3,r2,14bc <check_for_click+0x74>
			&& y_mouse > start_y_region && y_mouse < end_y_region) {
		return 1;
    14b0:	00800044 	movi	r2,1
    14b4:	e0bfff15 	stw	r2,-4(fp)
    14b8:	00000106 	br	14c0 <check_for_click+0x78>
	} else {
		return 0;
    14bc:	e03fff15 	stw	zero,-4(fp)
    14c0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	df000017 	ldw	fp,0(sp)
    14cc:	dec00104 	addi	sp,sp,4
    14d0:	f800283a 	ret

000014d4 <check_KEYs>:
void check_KEYs(int* KEY1, int* KEY2, int* KEY3, int* counter, alt_up_parallel_port_dev* KEY_dev, alt_up_audio_dev* audio_dev)
{
    14d4:	defff804 	addi	sp,sp,-32
    14d8:	dfc00715 	stw	ra,28(sp)
    14dc:	df000615 	stw	fp,24(sp)
    14e0:	dc000515 	stw	r16,20(sp)
    14e4:	df000504 	addi	fp,sp,20
    14e8:	e13ffc15 	stw	r4,-16(fp)
    14ec:	e17ffd15 	stw	r5,-12(fp)
    14f0:	e1bffe15 	stw	r6,-8(fp)
    14f4:	e1ffff15 	stw	r7,-4(fp)
	int KEY_value;

	KEY_value = alt_up_parallel_port_read_data(KEY_dev);
    14f8:	e0800317 	ldw	r2,12(fp)
    14fc:	10800a17 	ldw	r2,40(r2)
    1500:	10800037 	ldwio	r2,0(r2)
    1504:	e0bffb15 	stw	r2,-20(fp)

	while (alt_up_parallel_port_read_data(KEY_dev));	// wait for pushbutton KEY release
    1508:	e0800317 	ldw	r2,12(fp)
    150c:	10800a17 	ldw	r2,40(r2)
    1510:	10800037 	ldwio	r2,0(r2)
    1514:	1004c03a 	cmpne	r2,r2,zero
    1518:	103ffb1e 	bne	r2,zero,1508 <check_KEYs+0x34>

	if (KEY_value == 0x2)					// check KEY1
    151c:	e0bffb17 	ldw	r2,-20(fp)
    1520:	10800098 	cmpnei	r2,r2,2
    1524:	10000a1e 	bne	r2,zero,1550 <check_KEYs+0x7c>
	{
		// reset counter to start recording
		*counter = 0;
    1528:	e0bfff17 	ldw	r2,-4(fp)
    152c:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1530:	e1000417 	ldw	r4,16(fp)
    1534:	000dbec0 	call	dbec <alt_up_audio_reset_audio_core>
		alt_up_audio_enable_read_interrupt (audio_dev);
    1538:	e1000417 	ldw	r4,16(fp)
    153c:	000da3c0 	call	da3c <alt_up_audio_enable_read_interrupt>
		*KEY1 = 1;
    1540:	e0fffc17 	ldw	r3,-16(fp)
    1544:	00800044 	movi	r2,1
    1548:	18800015 	stw	r2,0(r3)
    154c:	00002c06 	br	1600 <check_KEYs+0x12c>

	}
	else if (KEY_value == 0x4)				// check KEY2
    1550:	e0bffb17 	ldw	r2,-20(fp)
    1554:	10800118 	cmpnei	r2,r2,4
    1558:	10000a1e 	bne	r2,zero,1584 <check_KEYs+0xb0>
	{
		// reset counter to start playback
		*counter = 0;
    155c:	e0bfff17 	ldw	r2,-4(fp)
    1560:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1564:	e1000417 	ldw	r4,16(fp)
    1568:	000dbec0 	call	dbec <alt_up_audio_reset_audio_core>
		alt_up_audio_enable_write_interrupt (audio_dev);
    156c:	e1000417 	ldw	r4,16(fp)
    1570:	000dad80 	call	dad8 <alt_up_audio_enable_write_interrupt>
		*KEY2 = 1;
    1574:	e0fffd17 	ldw	r3,-12(fp)
    1578:	00800044 	movi	r2,1
    157c:	18800015 	stw	r2,0(r3)
    1580:	00001f06 	br	1600 <check_KEYs+0x12c>
	}
	else if (KEY_value == 0x8)				// check KEY3
    1584:	e0bffb17 	ldw	r2,-20(fp)
    1588:	10800218 	cmpnei	r2,r2,8
    158c:	10001c1e 	bne	r2,zero,1600 <check_KEYs+0x12c>
	{

		// reset counter to start playback
		*counter = 0;
    1590:	e0bfff17 	ldw	r2,-4(fp)
    1594:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1598:	e1000417 	ldw	r4,16(fp)
    159c:	000dbec0 	call	dbec <alt_up_audio_reset_audio_core>
		alt_timestamp_start();
    15a0:	000d8940 	call	d894 <alt_timestamp_start>
		denoise_the_noisy_sound();
    15a4:	0001e280 	call	1e28 <denoise_the_noisy_sound>
		printf("Time taken to remove noise from the noisy sound was %3.f seconds\n", (float)alt_timestamp() / (float)alt_timestamp_freq());
    15a8:	000d9380 	call	d938 <alt_timestamp>
    15ac:	1009883a 	mov	r4,r2
    15b0:	00024280 	call	2428 <__floatunsisf>
    15b4:	1021883a 	mov	r16,r2
    15b8:	000d9d40 	call	d9d4 <alt_timestamp_freq>
    15bc:	1009883a 	mov	r4,r2
    15c0:	00024280 	call	2428 <__floatunsisf>
    15c4:	8085fff2 	custom	255,r2,r16,r2
    15c8:	1009883a 	mov	r4,r2
    15cc:	00023d40 	call	23d4 <__extendsfdf2>
    15d0:	100d883a 	mov	r6,r2
    15d4:	180f883a 	mov	r7,r3
    15d8:	01000074 	movhi	r4,1
    15dc:	21082a04 	addi	r4,r4,8360
    15e0:	300b883a 	mov	r5,r6
    15e4:	380d883a 	mov	r6,r7
    15e8:	0002c140 	call	2c14 <printf>
		alt_up_audio_enable_write_interrupt (audio_dev);
    15ec:	e1000417 	ldw	r4,16(fp)
    15f0:	000dad80 	call	dad8 <alt_up_audio_enable_write_interrupt>
		*KEY3 = 1;
    15f4:	e0fffe17 	ldw	r3,-8(fp)
    15f8:	00800044 	movi	r2,1
    15fc:	18800015 	stw	r2,0(r3)
	}
}
    1600:	e037883a 	mov	sp,fp
    1604:	dfc00217 	ldw	ra,8(sp)
    1608:	df000117 	ldw	fp,4(sp)
    160c:	dc000017 	ldw	r16,0(sp)
    1610:	dec00304 	addi	sp,sp,12
    1614:	f800283a 	ret

00001618 <print_mouse_on_given_position>:
void print_mouse_on_given_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, unsigned int x_mouse, unsigned int y_mouse)
{
    1618:	defff704 	addi	sp,sp,-36
    161c:	dfc00815 	stw	ra,32(sp)
    1620:	df000715 	stw	fp,28(sp)
    1624:	df000704 	addi	fp,sp,28
    1628:	e13ffd15 	stw	r4,-12(fp)
    162c:	e17ffe15 	stw	r5,-8(fp)
    1630:	e1bfff15 	stw	r6,-4(fp)
	/* printing a white square on mouse position*/
	int color = 0xFFFFFFFF; /* 1 = white */
    1634:	00bfffc4 	movi	r2,-1
    1638:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_mouse * 4, y_mouse * 4, (x_mouse + mouse_width) * 4,
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	1085883a 	add	r2,r2,r2
    1644:	1085883a 	add	r2,r2,r2
    1648:	100b883a 	mov	r5,r2
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	1085883a 	add	r2,r2,r2
    1654:	1085883a 	add	r2,r2,r2
    1658:	100d883a 	mov	r6,r2
    165c:	d0a6f117 	ldw	r2,-25660(gp)
    1660:	1007883a 	mov	r3,r2
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	1885883a 	add	r2,r3,r2
    166c:	1085883a 	add	r2,r2,r2
    1670:	1085883a 	add	r2,r2,r2
    1674:	100f883a 	mov	r7,r2
    1678:	d0a6f117 	ldw	r2,-25660(gp)
    167c:	1007883a 	mov	r3,r2
    1680:	e0bfff17 	ldw	r2,-4(fp)
    1684:	1885883a 	add	r2,r3,r2
    1688:	1085883a 	add	r2,r2,r2
    168c:	1085883a 	add	r2,r2,r2
    1690:	d8800015 	stw	r2,0(sp)
    1694:	e0bffc17 	ldw	r2,-16(fp)
    1698:	d8800115 	stw	r2,4(sp)
    169c:	d8000215 	stw	zero,8(sp)
    16a0:	e13ffd17 	ldw	r4,-12(fp)
    16a4:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
		(y_mouse + mouse_width) * 4, color, 0);
}
    16a8:	e037883a 	mov	sp,fp
    16ac:	dfc00117 	ldw	ra,4(sp)
    16b0:	df000017 	ldw	fp,0(sp)
    16b4:	dec00204 	addi	sp,sp,8
    16b8:	f800283a 	ret

000016bc <erase_previous_mouse_position>:
void erase_previous_mouse_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
    16bc:	defff104 	addi	sp,sp,-60
    16c0:	dfc00e15 	stw	ra,56(sp)
    16c4:	df000d15 	stw	fp,52(sp)
    16c8:	dc800c15 	stw	r18,48(sp)
    16cc:	dc400b15 	stw	r17,44(sp)
    16d0:	dc000a15 	stw	r16,40(sp)
    16d4:	df000a04 	addi	fp,sp,40
    16d8:	e13ffe15 	stw	r4,-8(fp)
    16dc:	e17fff15 	stw	r5,-4(fp)
	int x1, x2, y1, y2, color;

	if(8 <= x_mouse && x_mouse <= 26 && 26 <= y_mouse && y_mouse <= 34)
    16e0:	d0a6fc17 	ldw	r2,-25616(gp)
    16e4:	10800210 	cmplti	r2,r2,8
    16e8:	1000331e 	bne	r2,zero,17b8 <erase_previous_mouse_position+0xfc>
    16ec:	d0a6fc17 	ldw	r2,-25616(gp)
    16f0:	108006c8 	cmpgei	r2,r2,27
    16f4:	1000301e 	bne	r2,zero,17b8 <erase_previous_mouse_position+0xfc>
    16f8:	d0a6f317 	ldw	r2,-25652(gp)
    16fc:	10800690 	cmplti	r2,r2,26
    1700:	10002d1e 	bne	r2,zero,17b8 <erase_previous_mouse_position+0xfc>
    1704:	d0a6f317 	ldw	r2,-25652(gp)
    1708:	108008c8 	cmpgei	r2,r2,35
    170c:	10002a1e 	bne	r2,zero,17b8 <erase_previous_mouse_position+0xfc>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    1710:	00800204 	movi	r2,8
    1714:	e0bffd15 	stw	r2,-12(fp)
    1718:	00800684 	movi	r2,26
    171c:	e0bffc15 	stw	r2,-16(fp)
    1720:	00800684 	movi	r2,26
    1724:	e0bffb15 	stw	r2,-20(fp)
    1728:	00800884 	movi	r2,34
    172c:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    1730:	00861fc4 	movi	r2,6271
    1734:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1738:	e0bffd17 	ldw	r2,-12(fp)
    173c:	1085883a 	add	r2,r2,r2
    1740:	1085883a 	add	r2,r2,r2
    1744:	100b883a 	mov	r5,r2
    1748:	e0bffb17 	ldw	r2,-20(fp)
    174c:	1085883a 	add	r2,r2,r2
    1750:	1085883a 	add	r2,r2,r2
    1754:	100d883a 	mov	r6,r2
    1758:	e0bffc17 	ldw	r2,-16(fp)
    175c:	1085883a 	add	r2,r2,r2
    1760:	1085883a 	add	r2,r2,r2
    1764:	100f883a 	mov	r7,r2
    1768:	e0bffa17 	ldw	r2,-24(fp)
    176c:	1085883a 	add	r2,r2,r2
    1770:	1085883a 	add	r2,r2,r2
    1774:	d8800015 	stw	r2,0(sp)
    1778:	e0bff917 	ldw	r2,-28(fp)
    177c:	d8800115 	stw	r2,4(sp)
    1780:	d8000215 	stw	zero,8(sp)
    1784:	e13ffe17 	ldw	r4,-8(fp)
    1788:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
    178c:	e0bffd17 	ldw	r2,-12(fp)
    1790:	10800184 	addi	r2,r2,6
    1794:	100d883a 	mov	r6,r2
    1798:	e0bffb17 	ldw	r2,-20(fp)
    179c:	10800104 	addi	r2,r2,4
    17a0:	100f883a 	mov	r7,r2
    17a4:	e13fff17 	ldw	r4,-4(fp)
    17a8:	01400074 	movhi	r5,1
    17ac:	29483b04 	addi	r5,r5,8428
    17b0:	000f00c0 	call	f00c <alt_up_char_buffer_string>
}
void erase_previous_mouse_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
	int x1, x2, y1, y2, color;

	if(8 <= x_mouse && x_mouse <= 26 && 26 <= y_mouse && y_mouse <= 34)
    17b4:	00008a06 	br	19e0 <erase_previous_mouse_position+0x324>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
	}
	else if(30 <= x_mouse && x_mouse <= 48 && 26 <= y_mouse && y_mouse <= 34)
    17b8:	d0a6fc17 	ldw	r2,-25616(gp)
    17bc:	10800790 	cmplti	r2,r2,30
    17c0:	1000331e 	bne	r2,zero,1890 <erase_previous_mouse_position+0x1d4>
    17c4:	d0a6fc17 	ldw	r2,-25616(gp)
    17c8:	10800c48 	cmpgei	r2,r2,49
    17cc:	1000301e 	bne	r2,zero,1890 <erase_previous_mouse_position+0x1d4>
    17d0:	d0a6f317 	ldw	r2,-25652(gp)
    17d4:	10800690 	cmplti	r2,r2,26
    17d8:	10002d1e 	bne	r2,zero,1890 <erase_previous_mouse_position+0x1d4>
    17dc:	d0a6f317 	ldw	r2,-25652(gp)
    17e0:	108008c8 	cmpgei	r2,r2,35
    17e4:	10002a1e 	bne	r2,zero,1890 <erase_previous_mouse_position+0x1d4>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    17e8:	00800204 	movi	r2,8
    17ec:	e0bffd15 	stw	r2,-12(fp)
    17f0:	00800684 	movi	r2,26
    17f4:	e0bffc15 	stw	r2,-16(fp)
    17f8:	00800684 	movi	r2,26
    17fc:	e0bffb15 	stw	r2,-20(fp)
    1800:	00800884 	movi	r2,34
    1804:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    1808:	00861fc4 	movi	r2,6271
    180c:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1810:	e0bffd17 	ldw	r2,-12(fp)
    1814:	1085883a 	add	r2,r2,r2
    1818:	1085883a 	add	r2,r2,r2
    181c:	100b883a 	mov	r5,r2
    1820:	e0bffb17 	ldw	r2,-20(fp)
    1824:	1085883a 	add	r2,r2,r2
    1828:	1085883a 	add	r2,r2,r2
    182c:	100d883a 	mov	r6,r2
    1830:	e0bffc17 	ldw	r2,-16(fp)
    1834:	1085883a 	add	r2,r2,r2
    1838:	1085883a 	add	r2,r2,r2
    183c:	100f883a 	mov	r7,r2
    1840:	e0bffa17 	ldw	r2,-24(fp)
    1844:	1085883a 	add	r2,r2,r2
    1848:	1085883a 	add	r2,r2,r2
    184c:	d8800015 	stw	r2,0(sp)
    1850:	e0bff917 	ldw	r2,-28(fp)
    1854:	d8800115 	stw	r2,4(sp)
    1858:	d8000215 	stw	zero,8(sp)
    185c:	e13ffe17 	ldw	r4,-8(fp)
    1860:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
    1864:	e0bffd17 	ldw	r2,-12(fp)
    1868:	10800184 	addi	r2,r2,6
    186c:	100d883a 	mov	r6,r2
    1870:	e0bffb17 	ldw	r2,-20(fp)
    1874:	10800104 	addi	r2,r2,4
    1878:	100f883a 	mov	r7,r2
    187c:	e13fff17 	ldw	r4,-4(fp)
    1880:	01400074 	movhi	r5,1
    1884:	29483d04 	addi	r5,r5,8436
    1888:	000f00c0 	call	f00c <alt_up_char_buffer_string>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
	}
	else if(30 <= x_mouse && x_mouse <= 48 && 26 <= y_mouse && y_mouse <= 34)
    188c:	00005406 	br	19e0 <erase_previous_mouse_position+0x324>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
	}
	else if(52 <= x_mouse && x_mouse <= 70 && 26 <= y_mouse && y_mouse <= 34)
    1890:	d0a6fc17 	ldw	r2,-25616(gp)
    1894:	10800d10 	cmplti	r2,r2,52
    1898:	1000331e 	bne	r2,zero,1968 <erase_previous_mouse_position+0x2ac>
    189c:	d0a6fc17 	ldw	r2,-25616(gp)
    18a0:	108011c8 	cmpgei	r2,r2,71
    18a4:	1000301e 	bne	r2,zero,1968 <erase_previous_mouse_position+0x2ac>
    18a8:	d0a6f317 	ldw	r2,-25652(gp)
    18ac:	10800690 	cmplti	r2,r2,26
    18b0:	10002d1e 	bne	r2,zero,1968 <erase_previous_mouse_position+0x2ac>
    18b4:	d0a6f317 	ldw	r2,-25652(gp)
    18b8:	108008c8 	cmpgei	r2,r2,35
    18bc:	10002a1e 	bne	r2,zero,1968 <erase_previous_mouse_position+0x2ac>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    18c0:	00800204 	movi	r2,8
    18c4:	e0bffd15 	stw	r2,-12(fp)
    18c8:	00800684 	movi	r2,26
    18cc:	e0bffc15 	stw	r2,-16(fp)
    18d0:	00800684 	movi	r2,26
    18d4:	e0bffb15 	stw	r2,-20(fp)
    18d8:	00800884 	movi	r2,34
    18dc:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    18e0:	00861fc4 	movi	r2,6271
    18e4:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    18e8:	e0bffd17 	ldw	r2,-12(fp)
    18ec:	1085883a 	add	r2,r2,r2
    18f0:	1085883a 	add	r2,r2,r2
    18f4:	100b883a 	mov	r5,r2
    18f8:	e0bffb17 	ldw	r2,-20(fp)
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	100d883a 	mov	r6,r2
    1908:	e0bffc17 	ldw	r2,-16(fp)
    190c:	1085883a 	add	r2,r2,r2
    1910:	1085883a 	add	r2,r2,r2
    1914:	100f883a 	mov	r7,r2
    1918:	e0bffa17 	ldw	r2,-24(fp)
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	d8800015 	stw	r2,0(sp)
    1928:	e0bff917 	ldw	r2,-28(fp)
    192c:	d8800115 	stw	r2,4(sp)
    1930:	d8000215 	stw	zero,8(sp)
    1934:	e13ffe17 	ldw	r4,-8(fp)
    1938:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
    193c:	e0bffd17 	ldw	r2,-12(fp)
    1940:	108001c4 	addi	r2,r2,7
    1944:	100d883a 	mov	r6,r2
    1948:	e0bffb17 	ldw	r2,-20(fp)
    194c:	10800104 	addi	r2,r2,4
    1950:	100f883a 	mov	r7,r2
    1954:	e13fff17 	ldw	r4,-4(fp)
    1958:	01400074 	movhi	r5,1
    195c:	29483f04 	addi	r5,r5,8444
    1960:	000f00c0 	call	f00c <alt_up_char_buffer_string>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
	}
	else if(52 <= x_mouse && x_mouse <= 70 && 26 <= y_mouse && y_mouse <= 34)
    1964:	00001e06 	br	19e0 <erase_previous_mouse_position+0x324>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
	}
	else
	{
		color = 0x1863;		// fill the screen with a dark grey color
    1968:	008618c4 	movi	r2,6243
    196c:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_mouse, y_mouse, x_mouse + 0.3,
    1970:	d426fc17 	ldw	r16,-25616(gp)
    1974:	d466f317 	ldw	r17,-25652(gp)
    1978:	d126fc17 	ldw	r4,-25616(gp)
    197c:	00022a80 	call	22a8 <__floatsisf>
    1980:	1007883a 	mov	r3,r2
    1984:	008fa6b4 	movhi	r2,16026
    1988:	10a66684 	addi	r2,r2,-26214
    198c:	1885ff72 	custom	253,r2,r3,r2
    1990:	1009883a 	mov	r4,r2
    1994:	00023400 	call	2340 <__fixsfsi>
    1998:	1025883a 	mov	r18,r2
    199c:	d126f317 	ldw	r4,-25652(gp)
    19a0:	00022a80 	call	22a8 <__floatsisf>
    19a4:	1007883a 	mov	r3,r2
    19a8:	008fa6b4 	movhi	r2,16026
    19ac:	10a66684 	addi	r2,r2,-26214
    19b0:	1885ff72 	custom	253,r2,r3,r2
    19b4:	1009883a 	mov	r4,r2
    19b8:	00023400 	call	2340 <__fixsfsi>
    19bc:	d8800015 	stw	r2,0(sp)
    19c0:	e0bff917 	ldw	r2,-28(fp)
    19c4:	d8800115 	stw	r2,4(sp)
    19c8:	d8000215 	stw	zero,8(sp)
    19cc:	e13ffe17 	ldw	r4,-8(fp)
    19d0:	800b883a 	mov	r5,r16
    19d4:	880d883a 	mov	r6,r17
    19d8:	900f883a 	mov	r7,r18
    19dc:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
				y_mouse + 0.3, color, 0);
	}

}
    19e0:	e037883a 	mov	sp,fp
    19e4:	dfc00417 	ldw	ra,16(sp)
    19e8:	df000317 	ldw	fp,12(sp)
    19ec:	dc800217 	ldw	r18,8(sp)
    19f0:	dc400117 	ldw	r17,4(sp)
    19f4:	dc000017 	ldw	r16,0(sp)
    19f8:	dec00504 	addi	sp,sp,20
    19fc:	f800283a 	ret

00001a00 <setMouseBounds>:
void setMouseBounds(unsigned int x_max, unsigned int y_max)
{
    1a00:	defffd04 	addi	sp,sp,-12
    1a04:	df000215 	stw	fp,8(sp)
    1a08:	df000204 	addi	fp,sp,8
    1a0c:	e13ffe15 	stw	r4,-8(fp)
    1a10:	e17fff15 	stw	r5,-4(fp)
	max_x_mouse = x_max;
    1a14:	e0bffe17 	ldw	r2,-8(fp)
    1a18:	d0a6f815 	stw	r2,-25632(gp)
	max_y_mouse = y_max;
    1a1c:	e0bfff17 	ldw	r2,-4(fp)
    1a20:	d0a6f615 	stw	r2,-25640(gp)
}
    1a24:	e037883a 	mov	sp,fp
    1a28:	df000017 	ldw	fp,0(sp)
    1a2c:	dec00104 	addi	sp,sp,4
    1a30:	f800283a 	ret

00001a34 <getMouseState>:
void getMouseState()
{
    1a34:	defff704 	addi	sp,sp,-36
    1a38:	df000815 	stw	fp,32(sp)
    1a3c:	df000804 	addi	fp,sp,32
	left_button_click = byte1 % 2; /* left button is in byte1[0] */
    1a40:	00800074 	movhi	r2,1
    1a44:	1096c8c4 	addi	r2,r2,23331
    1a48:	10800003 	ldbu	r2,0(r2)
    1a4c:	10803fcc 	andi	r2,r2,255
    1a50:	1080004c 	andi	r2,r2,1
    1a54:	d0a6fa15 	stw	r2,-25624(gp)
	right_button_click = (byte1  >> 1) % 2; /* right button is in byte1[0] */
    1a58:	00800074 	movhi	r2,1
    1a5c:	1096c8c4 	addi	r2,r2,23331
    1a60:	10800003 	ldbu	r2,0(r2)
    1a64:	10803fcc 	andi	r2,r2,255
    1a68:	1004d07a 	srli	r2,r2,1
    1a6c:	10803fcc 	andi	r2,r2,255
    1a70:	1080004c 	andi	r2,r2,1
    1a74:	d0a6f915 	stw	r2,-25628(gp)
	middle_button_click = (byte1 >> 2) % 2; /* middle button is in byte1[0] */
    1a78:	00800074 	movhi	r2,1
    1a7c:	1096c8c4 	addi	r2,r2,23331
    1a80:	10800003 	ldbu	r2,0(r2)
    1a84:	10803fcc 	andi	r2,r2,255
    1a88:	1004d0ba 	srli	r2,r2,2
    1a8c:	10803fcc 	andi	r2,r2,255
    1a90:	1080004c 	andi	r2,r2,1
    1a94:	d0a6fd15 	stw	r2,-25612(gp)

	/* x_sign is in byte1[4], 0 = + and 1 = - */
	int x_sign = ((byte1 >> 4) % 2) ? 1 : 0;
    1a98:	00800074 	movhi	r2,1
    1a9c:	1096c8c4 	addi	r2,r2,23331
    1aa0:	10800003 	ldbu	r2,0(r2)
    1aa4:	10803fcc 	andi	r2,r2,255
    1aa8:	1004d13a 	srli	r2,r2,4
    1aac:	10803fcc 	andi	r2,r2,255
    1ab0:	1080004c 	andi	r2,r2,1
    1ab4:	e0bff915 	stw	r2,-28(fp)
	//x_mouse = x_mouse + byte2;
	x_mouse = !x_sign ? x_mouse + (( byte2)) : x_mouse - (( byte2)); /* x_difference is in byte2 */
    1ab8:	e0bff917 	ldw	r2,-28(fp)
    1abc:	1004c03a 	cmpne	r2,r2,zero
    1ac0:	1000081e 	bne	r2,zero,1ae4 <getMouseState+0xb0>
    1ac4:	00800074 	movhi	r2,1
    1ac8:	1096c804 	addi	r2,r2,23328
    1acc:	10800003 	ldbu	r2,0(r2)
    1ad0:	10c03fcc 	andi	r3,r2,255
    1ad4:	d0a6fc17 	ldw	r2,-25616(gp)
    1ad8:	1887883a 	add	r3,r3,r2
    1adc:	e0ffff15 	stw	r3,-4(fp)
    1ae0:	00000706 	br	1b00 <getMouseState+0xcc>
    1ae4:	d0e6fc17 	ldw	r3,-25616(gp)
    1ae8:	00800074 	movhi	r2,1
    1aec:	1096c804 	addi	r2,r2,23328
    1af0:	10800003 	ldbu	r2,0(r2)
    1af4:	10803fcc 	andi	r2,r2,255
    1af8:	1887c83a 	sub	r3,r3,r2
    1afc:	e0ffff15 	stw	r3,-4(fp)
    1b00:	e0bfff17 	ldw	r2,-4(fp)
    1b04:	d0a6fc15 	stw	r2,-25616(gp)
	x_mouse = (x_mouse >= max_x_mouse) ? max_x_mouse :
    1b08:	d0e6fc17 	ldw	r3,-25616(gp)
    1b0c:	d0a6f817 	ldw	r2,-25632(gp)
    1b10:	18800a0e 	bge	r3,r2,1b3c <getMouseState+0x108>
    1b14:	d0a6fc17 	ldw	r2,-25616(gp)
    1b18:	10800050 	cmplti	r2,r2,1
    1b1c:	1000031e 	bne	r2,zero,1b2c <getMouseState+0xf8>
    1b20:	d0a6fc17 	ldw	r2,-25616(gp)
    1b24:	e0bffd15 	stw	r2,-12(fp)
    1b28:	00000106 	br	1b30 <getMouseState+0xfc>
    1b2c:	e03ffd15 	stw	zero,-12(fp)
    1b30:	e0bffd17 	ldw	r2,-12(fp)
    1b34:	e0bffe15 	stw	r2,-8(fp)
    1b38:	00000206 	br	1b44 <getMouseState+0x110>
    1b3c:	d0a6f817 	ldw	r2,-25632(gp)
    1b40:	e0bffe15 	stw	r2,-8(fp)
    1b44:	e0bffe17 	ldw	r2,-8(fp)
    1b48:	d0a6fc15 	stw	r2,-25616(gp)
			  (x_mouse <= 0) ? 0 :
			   x_mouse;

	/* y_sign is in byte1[5], 0 = + and 1 = - */
	int y_sign = ((byte1 >> 5) % 2) ? 1 : 0;
    1b4c:	00800074 	movhi	r2,1
    1b50:	1096c8c4 	addi	r2,r2,23331
    1b54:	10800003 	ldbu	r2,0(r2)
    1b58:	10803fcc 	andi	r2,r2,255
    1b5c:	1004d17a 	srli	r2,r2,5
    1b60:	10803fcc 	andi	r2,r2,255
    1b64:	1080004c 	andi	r2,r2,1
    1b68:	e0bff815 	stw	r2,-32(fp)
	//y_mouse = y_mouse + byte3;
	y_mouse = !y_sign ? y_mouse + (( byte3)) : y_mouse - ((( byte3 ))); /* y_difference is in byte3 */
    1b6c:	e0bff817 	ldw	r2,-32(fp)
    1b70:	1004c03a 	cmpne	r2,r2,zero
    1b74:	1000081e 	bne	r2,zero,1b98 <getMouseState+0x164>
    1b78:	00800074 	movhi	r2,1
    1b7c:	1096c844 	addi	r2,r2,23329
    1b80:	10800003 	ldbu	r2,0(r2)
    1b84:	10c03fcc 	andi	r3,r2,255
    1b88:	d0a6f317 	ldw	r2,-25652(gp)
    1b8c:	1887883a 	add	r3,r3,r2
    1b90:	e0fffc15 	stw	r3,-16(fp)
    1b94:	00000706 	br	1bb4 <getMouseState+0x180>
    1b98:	d0e6f317 	ldw	r3,-25652(gp)
    1b9c:	00800074 	movhi	r2,1
    1ba0:	1096c844 	addi	r2,r2,23329
    1ba4:	10800003 	ldbu	r2,0(r2)
    1ba8:	10803fcc 	andi	r2,r2,255
    1bac:	1887c83a 	sub	r3,r3,r2
    1bb0:	e0fffc15 	stw	r3,-16(fp)
    1bb4:	e0bffc17 	ldw	r2,-16(fp)
    1bb8:	d0a6f315 	stw	r2,-25652(gp)
	y_mouse = (y_mouse >= max_y_mouse) ? max_y_mouse :
    1bbc:	d0e6f317 	ldw	r3,-25652(gp)
    1bc0:	d0a6f617 	ldw	r2,-25640(gp)
    1bc4:	18800a0e 	bge	r3,r2,1bf0 <getMouseState+0x1bc>
    1bc8:	d0a6f317 	ldw	r2,-25652(gp)
    1bcc:	10800050 	cmplti	r2,r2,1
    1bd0:	1000031e 	bne	r2,zero,1be0 <getMouseState+0x1ac>
    1bd4:	d0a6f317 	ldw	r2,-25652(gp)
    1bd8:	e0bffa15 	stw	r2,-24(fp)
    1bdc:	00000106 	br	1be4 <getMouseState+0x1b0>
    1be0:	e03ffa15 	stw	zero,-24(fp)
    1be4:	e0bffa17 	ldw	r2,-24(fp)
    1be8:	e0bffb15 	stw	r2,-20(fp)
    1bec:	00000206 	br	1bf8 <getMouseState+0x1c4>
    1bf0:	d0a6f617 	ldw	r2,-25640(gp)
    1bf4:	e0bffb15 	stw	r2,-20(fp)
    1bf8:	e0bffb17 	ldw	r2,-20(fp)
    1bfc:	d0a6f315 	stw	r2,-25652(gp)
			  (y_mouse <= 0) ? 0 :
			   y_mouse;
}
    1c00:	e037883a 	mov	sp,fp
    1c04:	df000017 	ldw	fp,0(sp)
    1c08:	dec00104 	addi	sp,sp,4
    1c0c:	f800283a 	ret

00001c10 <print_screen>:
void print_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
    1c10:	defff404 	addi	sp,sp,-48
    1c14:	dfc00b15 	stw	ra,44(sp)
    1c18:	df000a15 	stw	fp,40(sp)
    1c1c:	df000a04 	addi	fp,sp,40
    1c20:	e13ffe15 	stw	r4,-8(fp)
    1c24:	e17fff15 	stw	r5,-4(fp)
	int x1, x2, y1, y2;
	int color = 0x1863;		// fill the screen with a dark grey color
    1c28:	008618c4 	movi	r2,6243
    1c2c:	e0bff915 	stw	r2,-28(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, max_x_mouse,
    1c30:	d1e6f817 	ldw	r7,-25632(gp)
    1c34:	d0a6f617 	ldw	r2,-25640(gp)
    1c38:	d8800015 	stw	r2,0(sp)
    1c3c:	e0bff917 	ldw	r2,-28(fp)
    1c40:	d8800115 	stw	r2,4(sp)
    1c44:	d8000215 	stw	zero,8(sp)
    1c48:	e13ffe17 	ldw	r4,-8(fp)
    1c4c:	000b883a 	mov	r5,zero
    1c50:	000d883a 	mov	r6,zero
    1c54:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
			max_y_mouse, color, 0);

	// draw Record, Play and Echo boxes in the left, middle and right of the screen

	// draw a box in the left of the screen, using character buffer coordinates
	x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    1c58:	00800204 	movi	r2,8
    1c5c:	e0bffd15 	stw	r2,-12(fp)
    1c60:	00800684 	movi	r2,26
    1c64:	e0bffc15 	stw	r2,-16(fp)
    1c68:	00800684 	movi	r2,26
    1c6c:	e0bffb15 	stw	r2,-20(fp)
    1c70:	00800884 	movi	r2,34
    1c74:	e0bffa15 	stw	r2,-24(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x187F;		// a medium blue color
    1c78:	00861fc4 	movi	r2,6271
    1c7c:	e0bff915 	stw	r2,-28(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1c80:	e0bffd17 	ldw	r2,-12(fp)
    1c84:	1085883a 	add	r2,r2,r2
    1c88:	1085883a 	add	r2,r2,r2
    1c8c:	100b883a 	mov	r5,r2
    1c90:	e0bffb17 	ldw	r2,-20(fp)
    1c94:	1085883a 	add	r2,r2,r2
    1c98:	1085883a 	add	r2,r2,r2
    1c9c:	100d883a 	mov	r6,r2
    1ca0:	e0bffc17 	ldw	r2,-16(fp)
    1ca4:	1085883a 	add	r2,r2,r2
    1ca8:	1085883a 	add	r2,r2,r2
    1cac:	100f883a 	mov	r7,r2
    1cb0:	e0bffa17 	ldw	r2,-24(fp)
    1cb4:	1085883a 	add	r2,r2,r2
    1cb8:	1085883a 	add	r2,r2,r2
    1cbc:	d8800015 	stw	r2,0(sp)
    1cc0:	e0bff917 	ldw	r2,-28(fp)
    1cc4:	d8800115 	stw	r2,4(sp)
    1cc8:	d8000215 	stw	zero,8(sp)
    1ccc:	e13ffe17 	ldw	r4,-8(fp)
    1cd0:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
    1cd4:	e0bffd17 	ldw	r2,-12(fp)
    1cd8:	10800184 	addi	r2,r2,6
    1cdc:	100d883a 	mov	r6,r2
    1ce0:	e0bffb17 	ldw	r2,-20(fp)
    1ce4:	10800104 	addi	r2,r2,4
    1ce8:	100f883a 	mov	r7,r2
    1cec:	e13fff17 	ldw	r4,-4(fp)
    1cf0:	01400074 	movhi	r5,1
    1cf4:	29483b04 	addi	r5,r5,8428
    1cf8:	000f00c0 	call	f00c <alt_up_char_buffer_string>
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	x1 = 30; x2 = 48;
    1cfc:	00800784 	movi	r2,30
    1d00:	e0bffd15 	stw	r2,-12(fp)
    1d04:	00800c04 	movi	r2,48
    1d08:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1d0c:	e0bffd17 	ldw	r2,-12(fp)
    1d10:	1085883a 	add	r2,r2,r2
    1d14:	1085883a 	add	r2,r2,r2
    1d18:	100b883a 	mov	r5,r2
    1d1c:	e0bffb17 	ldw	r2,-20(fp)
    1d20:	1085883a 	add	r2,r2,r2
    1d24:	1085883a 	add	r2,r2,r2
    1d28:	100d883a 	mov	r6,r2
    1d2c:	e0bffc17 	ldw	r2,-16(fp)
    1d30:	1085883a 	add	r2,r2,r2
    1d34:	1085883a 	add	r2,r2,r2
    1d38:	100f883a 	mov	r7,r2
    1d3c:	e0bffa17 	ldw	r2,-24(fp)
    1d40:	1085883a 	add	r2,r2,r2
    1d44:	1085883a 	add	r2,r2,r2
    1d48:	d8800015 	stw	r2,0(sp)
    1d4c:	e0bff917 	ldw	r2,-28(fp)
    1d50:	d8800115 	stw	r2,4(sp)
    1d54:	d8000215 	stw	zero,8(sp)
    1d58:	e13ffe17 	ldw	r4,-8(fp)
    1d5c:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 7, y1 + 4);
    1d60:	e0bffd17 	ldw	r2,-12(fp)
    1d64:	108001c4 	addi	r2,r2,7
    1d68:	100d883a 	mov	r6,r2
    1d6c:	e0bffb17 	ldw	r2,-20(fp)
    1d70:	10800104 	addi	r2,r2,4
    1d74:	100f883a 	mov	r7,r2
    1d78:	e13fff17 	ldw	r4,-4(fp)
    1d7c:	01400074 	movhi	r5,1
    1d80:	29483d04 	addi	r5,r5,8436
    1d84:	000f00c0 	call	f00c <alt_up_char_buffer_string>
	// draw a medium-blue box in the right of the screen, using character buffer coordinates
	x1 = 52; x2 = 70;
    1d88:	00800d04 	movi	r2,52
    1d8c:	e0bffd15 	stw	r2,-12(fp)
    1d90:	00801184 	movi	r2,70
    1d94:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	1085883a 	add	r2,r2,r2
    1da0:	1085883a 	add	r2,r2,r2
    1da4:	100b883a 	mov	r5,r2
    1da8:	e0bffb17 	ldw	r2,-20(fp)
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	100d883a 	mov	r6,r2
    1db8:	e0bffc17 	ldw	r2,-16(fp)
    1dbc:	1085883a 	add	r2,r2,r2
    1dc0:	1085883a 	add	r2,r2,r2
    1dc4:	100f883a 	mov	r7,r2
    1dc8:	e0bffa17 	ldw	r2,-24(fp)
    1dcc:	1085883a 	add	r2,r2,r2
    1dd0:	1085883a 	add	r2,r2,r2
    1dd4:	d8800015 	stw	r2,0(sp)
    1dd8:	e0bff917 	ldw	r2,-28(fp)
    1ddc:	d8800115 	stw	r2,4(sp)
    1de0:	d8000215 	stw	zero,8(sp)
    1de4:	e13ffe17 	ldw	r4,-8(fp)
    1de8:	000f5a40 	call	f5a4 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
    1dec:	e0bffd17 	ldw	r2,-12(fp)
    1df0:	108001c4 	addi	r2,r2,7
    1df4:	100d883a 	mov	r6,r2
    1df8:	e0bffb17 	ldw	r2,-20(fp)
    1dfc:	10800104 	addi	r2,r2,4
    1e00:	100f883a 	mov	r7,r2
    1e04:	e13fff17 	ldw	r4,-4(fp)
    1e08:	01400074 	movhi	r5,1
    1e0c:	29483f04 	addi	r5,r5,8444
    1e10:	000f00c0 	call	f00c <alt_up_char_buffer_string>
}
    1e14:	e037883a 	mov	sp,fp
    1e18:	dfc00117 	ldw	ra,4(sp)
    1e1c:	df000017 	ldw	fp,0(sp)
    1e20:	dec00204 	addi	sp,sp,8
    1e24:	f800283a 	ret

00001e28 <denoise_the_noisy_sound>:
void denoise_the_noisy_sound()
{
    1e28:	defff804 	addi	sp,sp,-32
    1e2c:	dfc00715 	stw	ra,28(sp)
    1e30:	df000615 	stw	fp,24(sp)
    1e34:	dc000515 	stw	r16,20(sp)
    1e38:	df000504 	addi	fp,sp,20
	int n;
	for(n = 0; n < BUF_SIZE; n++)
    1e3c:	e03fff15 	stw	zero,-4(fp)
    1e40:	00004506 	br	1f58 <denoise_the_noisy_sound+0x130>
	{
		//printf("%d\n", n);
		float result = 0;
    1e44:	e03ffe15 	stw	zero,-8(fp)
		int k;
		for(k = 0; k <= n && k < number_of_coefficients; k++)
    1e48:	e03ffd15 	stw	zero,-12(fp)
    1e4c:	00001f06 	br	1ecc <denoise_the_noisy_sound+0xa4>
		{
			float record = (float)(record_r_buf[n - k] >> 8);
    1e50:	e0ffff17 	ldw	r3,-4(fp)
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	1885c83a 	sub	r2,r3,r2
    1e5c:	00c003b4 	movhi	r3,14
    1e60:	18e43504 	addi	r3,r3,-28460
    1e64:	1085883a 	add	r2,r2,r2
    1e68:	1085883a 	add	r2,r2,r2
    1e6c:	10c5883a 	add	r2,r2,r3
    1e70:	10800017 	ldw	r2,0(r2)
    1e74:	1008d23a 	srli	r4,r2,8
    1e78:	00024280 	call	2428 <__floatunsisf>
    1e7c:	e0bffc15 	stw	r2,-16(fp)
			float temp = denoise_filter_coefficients[k]  * (record / (2 ^ 23));
    1e80:	e0bffd17 	ldw	r2,-12(fp)
    1e84:	00c00074 	movhi	r3,1
    1e88:	18c91604 	addi	r3,r3,9304
    1e8c:	1085883a 	add	r2,r2,r2
    1e90:	1085883a 	add	r2,r2,r2
    1e94:	10c5883a 	add	r2,r2,r3
    1e98:	11000017 	ldw	r4,0(r2)
    1e9c:	e0fffc17 	ldw	r3,-16(fp)
    1ea0:	00906a34 	movhi	r2,16808
    1ea4:	1885fff2 	custom	255,r2,r3,r2
    1ea8:	2085ff32 	custom	252,r2,r4,r2
    1eac:	e0bffb15 	stw	r2,-20(fp)
			result = result + temp;
    1eb0:	e0fffe17 	ldw	r3,-8(fp)
    1eb4:	e0bffb17 	ldw	r2,-20(fp)
    1eb8:	1885ff72 	custom	253,r2,r3,r2
    1ebc:	e0bffe15 	stw	r2,-8(fp)
	for(n = 0; n < BUF_SIZE; n++)
	{
		//printf("%d\n", n);
		float result = 0;
		int k;
		for(k = 0; k <= n && k < number_of_coefficients; k++)
    1ec0:	e0bffd17 	ldw	r2,-12(fp)
    1ec4:	10800044 	addi	r2,r2,1
    1ec8:	e0bffd15 	stw	r2,-12(fp)
    1ecc:	e0fffd17 	ldw	r3,-12(fp)
    1ed0:	e0bfff17 	ldw	r2,-4(fp)
    1ed4:	10c00316 	blt	r2,r3,1ee4 <denoise_the_noisy_sound+0xbc>
    1ed8:	d0e00017 	ldw	r3,-32768(gp)
    1edc:	e0bffd17 	ldw	r2,-12(fp)
    1ee0:	10ffdb16 	blt	r2,r3,1e50 <denoise_the_noisy_sound+0x28>
		{
			float record = (float)(record_r_buf[n - k] >> 8);
			float temp = denoise_filter_coefficients[k]  * (record / (2 ^ 23));
			result = result + temp;
		}
		play_l_buf[n] = (int)(result * (2 ^ 30));
    1ee4:	e43fff17 	ldw	r16,-4(fp)
    1ee8:	e0fffe17 	ldw	r3,-8(fp)
    1eec:	00907834 	movhi	r2,16864
    1ef0:	1885ff32 	custom	252,r2,r3,r2
    1ef4:	1009883a 	mov	r4,r2
    1ef8:	00023400 	call	2340 <__fixsfsi>
    1efc:	1009883a 	mov	r4,r2
    1f00:	00c001f4 	movhi	r3,7
    1f04:	18dd9504 	addi	r3,r3,30292
    1f08:	8405883a 	add	r2,r16,r16
    1f0c:	1085883a 	add	r2,r2,r2
    1f10:	10c5883a 	add	r2,r2,r3
    1f14:	11000015 	stw	r4,0(r2)
		play_r_buf[n] = (int)(result * (2 ^ 30));
    1f18:	e43fff17 	ldw	r16,-4(fp)
    1f1c:	e0fffe17 	ldw	r3,-8(fp)
    1f20:	00907834 	movhi	r2,16864
    1f24:	1885ff32 	custom	252,r2,r3,r2
    1f28:	1009883a 	mov	r4,r2
    1f2c:	00023400 	call	2340 <__fixsfsi>
    1f30:	1009883a 	mov	r4,r2
    1f34:	00c00534 	movhi	r3,20
    1f38:	18ead504 	addi	r3,r3,-21676
    1f3c:	8405883a 	add	r2,r16,r16
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	10c5883a 	add	r2,r2,r3
    1f48:	11000015 	stw	r4,0(r2)
	alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
}
void denoise_the_noisy_sound()
{
	int n;
	for(n = 0; n < BUF_SIZE; n++)
    1f4c:	e0bfff17 	ldw	r2,-4(fp)
    1f50:	10800044 	addi	r2,r2,1
    1f54:	e0bfff15 	stw	r2,-4(fp)
    1f58:	e0ffff17 	ldw	r3,-4(fp)
    1f5c:	008000b4 	movhi	r2,2
    1f60:	10a1a7c4 	addi	r2,r2,-31073
    1f64:	10ffb70e 	bge	r2,r3,1e44 <denoise_the_noisy_sound+0x1c>
		}
		play_l_buf[n] = (int)(result * (2 ^ 30));
		play_r_buf[n] = (int)(result * (2 ^ 30));
		//printf("%d\n", play_l_buf[n]);
	}
}
    1f68:	e037883a 	mov	sp,fp
    1f6c:	dfc00217 	ldw	ra,8(sp)
    1f70:	df000117 	ldw	fp,4(sp)
    1f74:	dc000017 	ldw	r16,0(sp)
    1f78:	dec00304 	addi	sp,sp,12
    1f7c:	f800283a 	ret

00001f80 <echo_maker>:
void echo_maker(unsigned int l_buf[], unsigned int r_buf[], unsigned int* echol_buf, unsigned int* echor_buf) {
    1f80:	defffa04 	addi	sp,sp,-24
    1f84:	df000515 	stw	fp,20(sp)
    1f88:	df000504 	addi	fp,sp,20
    1f8c:	e13ffc15 	stw	r4,-16(fp)
    1f90:	e17ffd15 	stw	r5,-12(fp)
    1f94:	e1bffe15 	stw	r6,-8(fp)
    1f98:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; i < BUF_SIZE; ++i) {
    1f9c:	e03ffb15 	stw	zero,-20(fp)
    1fa0:	00008b06 	br	21d0 <echo_maker+0x250>
		if (i >= ECHO_INDEX1) {
    1fa4:	e0bffb17 	ldw	r2,-20(fp)
    1fa8:	1080fa10 	cmplti	r2,r2,1000
    1fac:	1000691e 	bne	r2,zero,2154 <echo_maker+0x1d4>
			if (i >= ECHO_INDEX2) {
    1fb0:	e0bffb17 	ldw	r2,-20(fp)
    1fb4:	1084e210 	cmplti	r2,r2,5000
    1fb8:	1000331e 	bne	r2,zero,2088 <echo_maker+0x108>
				echol_buf[i] = l_buf[i] >> 1 + l_buf[i - ECHO_INDEX2] >> 2;
    1fbc:	e0bffb17 	ldw	r2,-20(fp)
    1fc0:	1085883a 	add	r2,r2,r2
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1007883a 	mov	r3,r2
    1fcc:	e0bffe17 	ldw	r2,-8(fp)
    1fd0:	1889883a 	add	r4,r3,r2
    1fd4:	e0bffb17 	ldw	r2,-20(fp)
    1fd8:	1085883a 	add	r2,r2,r2
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1007883a 	mov	r3,r2
    1fe4:	e0bffc17 	ldw	r2,-16(fp)
    1fe8:	1885883a 	add	r2,r3,r2
    1fec:	11400017 	ldw	r5,0(r2)
    1ff0:	e0bffb17 	ldw	r2,-20(fp)
    1ff4:	1085883a 	add	r2,r2,r2
    1ff8:	1085883a 	add	r2,r2,r2
    1ffc:	1007883a 	mov	r3,r2
    2000:	e0bffc17 	ldw	r2,-16(fp)
    2004:	1885883a 	add	r2,r3,r2
    2008:	10ac7804 	addi	r2,r2,-20000
    200c:	10800017 	ldw	r2,0(r2)
    2010:	10800044 	addi	r2,r2,1
    2014:	2884d83a 	srl	r2,r5,r2
    2018:	1004d0ba 	srli	r2,r2,2
    201c:	20800015 	stw	r2,0(r4)
				echor_buf[i] = r_buf[i] >> 1 + r_buf[i - ECHO_INDEX2] >> 2;
    2020:	e0bffb17 	ldw	r2,-20(fp)
    2024:	1085883a 	add	r2,r2,r2
    2028:	1085883a 	add	r2,r2,r2
    202c:	1007883a 	mov	r3,r2
    2030:	e0bfff17 	ldw	r2,-4(fp)
    2034:	1889883a 	add	r4,r3,r2
    2038:	e0bffb17 	ldw	r2,-20(fp)
    203c:	1085883a 	add	r2,r2,r2
    2040:	1085883a 	add	r2,r2,r2
    2044:	1007883a 	mov	r3,r2
    2048:	e0bffd17 	ldw	r2,-12(fp)
    204c:	1885883a 	add	r2,r3,r2
    2050:	11400017 	ldw	r5,0(r2)
    2054:	e0bffb17 	ldw	r2,-20(fp)
    2058:	1085883a 	add	r2,r2,r2
    205c:	1085883a 	add	r2,r2,r2
    2060:	1007883a 	mov	r3,r2
    2064:	e0bffd17 	ldw	r2,-12(fp)
    2068:	1885883a 	add	r2,r3,r2
    206c:	10ac7804 	addi	r2,r2,-20000
    2070:	10800017 	ldw	r2,0(r2)
    2074:	10800044 	addi	r2,r2,1
    2078:	2884d83a 	srl	r2,r5,r2
    207c:	1004d0ba 	srli	r2,r2,2
    2080:	20800015 	stw	r2,0(r4)
    2084:	00004f06 	br	21c4 <echo_maker+0x244>
			}
			else {
				echol_buf[i] = l_buf[i] >> 1 + l_buf[i - ECHO_INDEX1] >> 2;
    2088:	e0bffb17 	ldw	r2,-20(fp)
    208c:	1085883a 	add	r2,r2,r2
    2090:	1085883a 	add	r2,r2,r2
    2094:	1007883a 	mov	r3,r2
    2098:	e0bffe17 	ldw	r2,-8(fp)
    209c:	1889883a 	add	r4,r3,r2
    20a0:	e0bffb17 	ldw	r2,-20(fp)
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	1085883a 	add	r2,r2,r2
    20ac:	1007883a 	mov	r3,r2
    20b0:	e0bffc17 	ldw	r2,-16(fp)
    20b4:	1885883a 	add	r2,r3,r2
    20b8:	11400017 	ldw	r5,0(r2)
    20bc:	e0bffb17 	ldw	r2,-20(fp)
    20c0:	1085883a 	add	r2,r2,r2
    20c4:	1085883a 	add	r2,r2,r2
    20c8:	1007883a 	mov	r3,r2
    20cc:	e0bffc17 	ldw	r2,-16(fp)
    20d0:	1885883a 	add	r2,r3,r2
    20d4:	10bc1804 	addi	r2,r2,-4000
    20d8:	10800017 	ldw	r2,0(r2)
    20dc:	10800044 	addi	r2,r2,1
    20e0:	2884d83a 	srl	r2,r5,r2
    20e4:	1004d0ba 	srli	r2,r2,2
    20e8:	20800015 	stw	r2,0(r4)
				echor_buf[i] = r_buf[i] >> 1 + r_buf[i - ECHO_INDEX1] >> 2;
    20ec:	e0bffb17 	ldw	r2,-20(fp)
    20f0:	1085883a 	add	r2,r2,r2
    20f4:	1085883a 	add	r2,r2,r2
    20f8:	1007883a 	mov	r3,r2
    20fc:	e0bfff17 	ldw	r2,-4(fp)
    2100:	1889883a 	add	r4,r3,r2
    2104:	e0bffb17 	ldw	r2,-20(fp)
    2108:	1085883a 	add	r2,r2,r2
    210c:	1085883a 	add	r2,r2,r2
    2110:	1007883a 	mov	r3,r2
    2114:	e0bffd17 	ldw	r2,-12(fp)
    2118:	1885883a 	add	r2,r3,r2
    211c:	11400017 	ldw	r5,0(r2)
    2120:	e0bffb17 	ldw	r2,-20(fp)
    2124:	1085883a 	add	r2,r2,r2
    2128:	1085883a 	add	r2,r2,r2
    212c:	1007883a 	mov	r3,r2
    2130:	e0bffd17 	ldw	r2,-12(fp)
    2134:	1885883a 	add	r2,r3,r2
    2138:	10bc1804 	addi	r2,r2,-4000
    213c:	10800017 	ldw	r2,0(r2)
    2140:	10800044 	addi	r2,r2,1
    2144:	2884d83a 	srl	r2,r5,r2
    2148:	1004d0ba 	srli	r2,r2,2
    214c:	20800015 	stw	r2,0(r4)
    2150:	00001c06 	br	21c4 <echo_maker+0x244>
			}
		}
		else {
			echol_buf[i] = l_buf[i];
    2154:	e0bffb17 	ldw	r2,-20(fp)
    2158:	1085883a 	add	r2,r2,r2
    215c:	1085883a 	add	r2,r2,r2
    2160:	1007883a 	mov	r3,r2
    2164:	e0bffe17 	ldw	r2,-8(fp)
    2168:	1889883a 	add	r4,r3,r2
    216c:	e0bffb17 	ldw	r2,-20(fp)
    2170:	1085883a 	add	r2,r2,r2
    2174:	1085883a 	add	r2,r2,r2
    2178:	1007883a 	mov	r3,r2
    217c:	e0bffc17 	ldw	r2,-16(fp)
    2180:	1885883a 	add	r2,r3,r2
    2184:	10800017 	ldw	r2,0(r2)
    2188:	20800015 	stw	r2,0(r4)
			echor_buf[i] = r_buf[i];
    218c:	e0bffb17 	ldw	r2,-20(fp)
    2190:	1085883a 	add	r2,r2,r2
    2194:	1085883a 	add	r2,r2,r2
    2198:	1007883a 	mov	r3,r2
    219c:	e0bfff17 	ldw	r2,-4(fp)
    21a0:	1889883a 	add	r4,r3,r2
    21a4:	e0bffb17 	ldw	r2,-20(fp)
    21a8:	1085883a 	add	r2,r2,r2
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	1007883a 	mov	r3,r2
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	1885883a 	add	r2,r3,r2
    21bc:	10800017 	ldw	r2,0(r2)
    21c0:	20800015 	stw	r2,0(r4)
		//printf("%d\n", play_l_buf[n]);
	}
}
void echo_maker(unsigned int l_buf[], unsigned int r_buf[], unsigned int* echol_buf, unsigned int* echor_buf) {
	int i;
	for (i = 0; i < BUF_SIZE; ++i) {
    21c4:	e0bffb17 	ldw	r2,-20(fp)
    21c8:	10800044 	addi	r2,r2,1
    21cc:	e0bffb15 	stw	r2,-20(fp)
    21d0:	e0fffb17 	ldw	r3,-20(fp)
    21d4:	008000b4 	movhi	r2,2
    21d8:	10a1a7c4 	addi	r2,r2,-31073
    21dc:	10ff710e 	bge	r2,r3,1fa4 <echo_maker+0x24>
		else {
			echol_buf[i] = l_buf[i];
			echor_buf[i] = r_buf[i];
		}
	}
}
    21e0:	e037883a 	mov	sp,fp
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00104 	addi	sp,sp,4
    21ec:	f800283a 	ret

000021f0 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    21f0:	defffa04 	addi	sp,sp,-24
    21f4:	dfc00515 	stw	ra,20(sp)
    21f8:	df000415 	stw	fp,16(sp)
    21fc:	df000404 	addi	fp,sp,16
    2200:	e13ffe15 	stw	r4,-8(fp)
    2204:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    2208:	e0bffe17 	ldw	r2,-8(fp)
    220c:	10800517 	ldw	r2,20(r2)
    2210:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    2214:	e0bffe17 	ldw	r2,-8(fp)
    2218:	10800017 	ldw	r2,0(r2)
    221c:	10800a17 	ldw	r2,40(r2)
    2220:	10800304 	addi	r2,r2,12
    2224:	10800037 	ldwio	r2,0(r2)
    2228:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    222c:	e0bffe17 	ldw	r2,-8(fp)
    2230:	10800017 	ldw	r2,0(r2)
    2234:	10800a17 	ldw	r2,40(r2)
    2238:	10800304 	addi	r2,r2,12
    223c:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    2240:	e0bffc17 	ldw	r2,-16(fp)
    2244:	10800098 	cmpnei	r2,r2,2
    2248:	1000081e 	bne	r2,zero,226c <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    224c:	00800074 	movhi	r2,1
    2250:	1096cc04 	addi	r2,r2,23344
    2254:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2258:	e13ffd17 	ldw	r4,-12(fp)
    225c:	000dbec0 	call	dbec <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    2260:	e13ffd17 	ldw	r4,-12(fp)
    2264:	000da3c0 	call	da3c <alt_up_audio_enable_read_interrupt>
    2268:	00000a06 	br	2294 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    226c:	e0bffc17 	ldw	r2,-16(fp)
    2270:	10800118 	cmpnei	r2,r2,4
    2274:	1000071e 	bne	r2,zero,2294 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    2278:	00800074 	movhi	r2,1
    227c:	1096cb04 	addi	r2,r2,23340
    2280:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2284:	e13ffd17 	ldw	r4,-12(fp)
    2288:	000dbec0 	call	dbec <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    228c:	e13ffd17 	ldw	r4,-12(fp)
    2290:	000dad80 	call	dad8 <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    2294:	e037883a 	mov	sp,fp
    2298:	dfc00117 	ldw	ra,4(sp)
    229c:	df000017 	ldw	fp,0(sp)
    22a0:	dec00204 	addi	sp,sp,8
    22a4:	f800283a 	ret

000022a8 <__floatsisf>:
    22a8:	2006d7fa 	srli	r3,r4,31
    22ac:	defffa04 	addi	sp,sp,-24
    22b0:	008000c4 	movi	r2,3
    22b4:	dfc00515 	stw	ra,20(sp)
    22b8:	dc000415 	stw	r16,16(sp)
    22bc:	d8800015 	stw	r2,0(sp)
    22c0:	d8c00115 	stw	r3,4(sp)
    22c4:	2000081e 	bne	r4,zero,22e8 <__floatsisf+0x40>
    22c8:	00800084 	movi	r2,2
    22cc:	d8800015 	stw	r2,0(sp)
    22d0:	d809883a 	mov	r4,sp
    22d4:	00025a00 	call	25a0 <__pack_f>
    22d8:	dfc00517 	ldw	ra,20(sp)
    22dc:	dc000417 	ldw	r16,16(sp)
    22e0:	dec00604 	addi	sp,sp,24
    22e4:	f800283a 	ret
    22e8:	00800784 	movi	r2,30
    22ec:	1807003a 	cmpeq	r3,r3,zero
    22f0:	d8800215 	stw	r2,8(sp)
    22f4:	18000e1e 	bne	r3,zero,2330 <__floatsisf+0x88>
    22f8:	00a00034 	movhi	r2,32768
    22fc:	20800e26 	beq	r4,r2,2338 <__floatsisf+0x90>
    2300:	0121c83a 	sub	r16,zero,r4
    2304:	8009883a 	mov	r4,r16
    2308:	dc000315 	stw	r16,12(sp)
    230c:	00025200 	call	2520 <__clzsi2>
    2310:	117fffc4 	addi	r5,r2,-1
    2314:	017fee0e 	bge	zero,r5,22d0 <__floatsisf+0x28>
    2318:	d8800217 	ldw	r2,8(sp)
    231c:	8146983a 	sll	r3,r16,r5
    2320:	1145c83a 	sub	r2,r2,r5
    2324:	d8c00315 	stw	r3,12(sp)
    2328:	d8800215 	stw	r2,8(sp)
    232c:	003fe806 	br	22d0 <__floatsisf+0x28>
    2330:	2021883a 	mov	r16,r4
    2334:	003ff306 	br	2304 <__floatsisf+0x5c>
    2338:	00b3c034 	movhi	r2,52992
    233c:	003fe606 	br	22d8 <__floatsisf+0x30>

00002340 <__fixsfsi>:
    2340:	defffa04 	addi	sp,sp,-24
    2344:	d9000015 	stw	r4,0(sp)
    2348:	d9400104 	addi	r5,sp,4
    234c:	d809883a 	mov	r4,sp
    2350:	dfc00515 	stw	ra,20(sp)
    2354:	00027000 	call	2700 <__unpack_f>
    2358:	d8c00117 	ldw	r3,4(sp)
    235c:	00800084 	movi	r2,2
    2360:	1880041e 	bne	r3,r2,2374 <__fixsfsi+0x34>
    2364:	0005883a 	mov	r2,zero
    2368:	dfc00517 	ldw	ra,20(sp)
    236c:	dec00604 	addi	sp,sp,24
    2370:	f800283a 	ret
    2374:	00800044 	movi	r2,1
    2378:	10fffa2e 	bgeu	r2,r3,2364 <__fixsfsi+0x24>
    237c:	00800104 	movi	r2,4
    2380:	18800426 	beq	r3,r2,2394 <__fixsfsi+0x54>
    2384:	d8800317 	ldw	r2,12(sp)
    2388:	103ff616 	blt	r2,zero,2364 <__fixsfsi+0x24>
    238c:	00c00784 	movi	r3,30
    2390:	1880070e 	bge	r3,r2,23b0 <__fixsfsi+0x70>
    2394:	d8800217 	ldw	r2,8(sp)
    2398:	10000c1e 	bne	r2,zero,23cc <__fixsfsi+0x8c>
    239c:	00a00034 	movhi	r2,32768
    23a0:	10bfffc4 	addi	r2,r2,-1
    23a4:	dfc00517 	ldw	ra,20(sp)
    23a8:	dec00604 	addi	sp,sp,24
    23ac:	f800283a 	ret
    23b0:	1885c83a 	sub	r2,r3,r2
    23b4:	d9000217 	ldw	r4,8(sp)
    23b8:	d8c00417 	ldw	r3,16(sp)
    23bc:	1884d83a 	srl	r2,r3,r2
    23c0:	203fe926 	beq	r4,zero,2368 <__fixsfsi+0x28>
    23c4:	0085c83a 	sub	r2,zero,r2
    23c8:	003fe706 	br	2368 <__fixsfsi+0x28>
    23cc:	00a00034 	movhi	r2,32768
    23d0:	003fe506 	br	2368 <__fixsfsi+0x28>

000023d4 <__extendsfdf2>:
    23d4:	defff904 	addi	sp,sp,-28
    23d8:	d9000115 	stw	r4,4(sp)
    23dc:	d9400204 	addi	r5,sp,8
    23e0:	d9000104 	addi	r4,sp,4
    23e4:	dfc00615 	stw	ra,24(sp)
    23e8:	00027000 	call	2700 <__unpack_f>
    23ec:	d9c00517 	ldw	r7,20(sp)
    23f0:	0011883a 	mov	r8,zero
    23f4:	400697ba 	slli	r3,r8,30
    23f8:	3812d0ba 	srli	r9,r7,2
    23fc:	380497ba 	slli	r2,r7,30
    2400:	d9000217 	ldw	r4,8(sp)
    2404:	d9400317 	ldw	r5,12(sp)
    2408:	d9800417 	ldw	r6,16(sp)
    240c:	48c6b03a 	or	r3,r9,r3
    2410:	100f883a 	mov	r7,r2
    2414:	d8c00015 	stw	r3,0(sp)
    2418:	00024e80 	call	24e8 <__make_dp>
    241c:	dfc00617 	ldw	ra,24(sp)
    2420:	dec00704 	addi	sp,sp,28
    2424:	f800283a 	ret

00002428 <__floatunsisf>:
    2428:	defff904 	addi	sp,sp,-28
    242c:	dc400515 	stw	r17,20(sp)
    2430:	dc000415 	stw	r16,16(sp)
    2434:	dfc00615 	stw	ra,24(sp)
    2438:	04400784 	movi	r17,30
    243c:	2021883a 	mov	r16,r4
    2440:	d8000115 	stw	zero,4(sp)
    2444:	2000091e 	bne	r4,zero,246c <__floatunsisf+0x44>
    2448:	00800084 	movi	r2,2
    244c:	d8800015 	stw	r2,0(sp)
    2450:	d809883a 	mov	r4,sp
    2454:	00025a00 	call	25a0 <__pack_f>
    2458:	dfc00617 	ldw	ra,24(sp)
    245c:	dc400517 	ldw	r17,20(sp)
    2460:	dc000417 	ldw	r16,16(sp)
    2464:	dec00704 	addi	sp,sp,28
    2468:	f800283a 	ret
    246c:	008000c4 	movi	r2,3
    2470:	d9000315 	stw	r4,12(sp)
    2474:	d8800015 	stw	r2,0(sp)
    2478:	dc400215 	stw	r17,8(sp)
    247c:	00025200 	call	2520 <__clzsi2>
    2480:	117fffc4 	addi	r5,r2,-1
    2484:	0147c83a 	sub	r3,zero,r5
    2488:	00800044 	movi	r2,1
    248c:	10c4983a 	sll	r2,r2,r3
    2490:	80c6d83a 	srl	r3,r16,r3
    2494:	8949c83a 	sub	r4,r17,r5
    2498:	10bfffc4 	addi	r2,r2,-1
    249c:	8084703a 	and	r2,r16,r2
    24a0:	1004c03a 	cmpne	r2,r2,zero
    24a4:	1886b03a 	or	r3,r3,r2
    24a8:	28000c16 	blt	r5,zero,24dc <__floatunsisf+0xb4>
    24ac:	8144983a 	sll	r2,r16,r5
    24b0:	8947c83a 	sub	r3,r17,r5
    24b4:	283fe626 	beq	r5,zero,2450 <__floatunsisf+0x28>
    24b8:	d809883a 	mov	r4,sp
    24bc:	d8800315 	stw	r2,12(sp)
    24c0:	d8c00215 	stw	r3,8(sp)
    24c4:	00025a00 	call	25a0 <__pack_f>
    24c8:	dfc00617 	ldw	ra,24(sp)
    24cc:	dc400517 	ldw	r17,20(sp)
    24d0:	dc000417 	ldw	r16,16(sp)
    24d4:	dec00704 	addi	sp,sp,28
    24d8:	f800283a 	ret
    24dc:	d8c00315 	stw	r3,12(sp)
    24e0:	d9000215 	stw	r4,8(sp)
    24e4:	003fda06 	br	2450 <__floatunsisf+0x28>

000024e8 <__make_dp>:
    24e8:	defff904 	addi	sp,sp,-28
    24ec:	d8c00717 	ldw	r3,28(sp)
    24f0:	d9000015 	stw	r4,0(sp)
    24f4:	d809883a 	mov	r4,sp
    24f8:	dfc00515 	stw	ra,20(sp)
    24fc:	d9c00615 	stw	r7,24(sp)
    2500:	d9400115 	stw	r5,4(sp)
    2504:	d9800215 	stw	r6,8(sp)
    2508:	d8c00415 	stw	r3,16(sp)
    250c:	d9c00315 	stw	r7,12(sp)
    2510:	00027c80 	call	27c8 <__pack_d>
    2514:	dfc00517 	ldw	ra,20(sp)
    2518:	dec00704 	addi	sp,sp,28
    251c:	f800283a 	ret

00002520 <__clzsi2>:
    2520:	00bfffd4 	movui	r2,65535
    2524:	11000e36 	bltu	r2,r4,2560 <__clzsi2+0x40>
    2528:	00803fc4 	movi	r2,255
    252c:	01400204 	movi	r5,8
    2530:	0007883a 	mov	r3,zero
    2534:	11001036 	bltu	r2,r4,2578 <__clzsi2+0x58>
    2538:	000b883a 	mov	r5,zero
    253c:	20c6d83a 	srl	r3,r4,r3
    2540:	00800074 	movhi	r2,1
    2544:	10884104 	addi	r2,r2,8452
    2548:	1887883a 	add	r3,r3,r2
    254c:	18800003 	ldbu	r2,0(r3)
    2550:	00c00804 	movi	r3,32
    2554:	2885883a 	add	r2,r5,r2
    2558:	1885c83a 	sub	r2,r3,r2
    255c:	f800283a 	ret
    2560:	01400404 	movi	r5,16
    2564:	00804034 	movhi	r2,256
    2568:	10bfffc4 	addi	r2,r2,-1
    256c:	2807883a 	mov	r3,r5
    2570:	113ff22e 	bgeu	r2,r4,253c <__clzsi2+0x1c>
    2574:	01400604 	movi	r5,24
    2578:	2807883a 	mov	r3,r5
    257c:	20c6d83a 	srl	r3,r4,r3
    2580:	00800074 	movhi	r2,1
    2584:	10884104 	addi	r2,r2,8452
    2588:	1887883a 	add	r3,r3,r2
    258c:	18800003 	ldbu	r2,0(r3)
    2590:	00c00804 	movi	r3,32
    2594:	2885883a 	add	r2,r5,r2
    2598:	1885c83a 	sub	r2,r3,r2
    259c:	f800283a 	ret

000025a0 <__pack_f>:
    25a0:	20c00017 	ldw	r3,0(r4)
    25a4:	01c00044 	movi	r7,1
    25a8:	21800317 	ldw	r6,12(r4)
    25ac:	21400117 	ldw	r5,4(r4)
    25b0:	38c02d2e 	bgeu	r7,r3,2668 <__pack_f+0xc8>
    25b4:	00800104 	movi	r2,4
    25b8:	18802826 	beq	r3,r2,265c <__pack_f+0xbc>
    25bc:	00800084 	movi	r2,2
    25c0:	18800126 	beq	r3,r2,25c8 <__pack_f+0x28>
    25c4:	3000101e 	bne	r6,zero,2608 <__pack_f+0x68>
    25c8:	000d883a 	mov	r6,zero
    25cc:	0007883a 	mov	r3,zero
    25d0:	19003fcc 	andi	r4,r3,255
    25d4:	200895fa 	slli	r4,r4,23
    25d8:	00c02034 	movhi	r3,128
    25dc:	18ffffc4 	addi	r3,r3,-1
    25e0:	30c6703a 	and	r3,r6,r3
    25e4:	10a0002c 	andhi	r2,r2,32768
    25e8:	10c4b03a 	or	r2,r2,r3
    25ec:	280a97fa 	slli	r5,r5,31
    25f0:	1104b03a 	or	r2,r2,r4
    25f4:	00e00034 	movhi	r3,32768
    25f8:	18ffffc4 	addi	r3,r3,-1
    25fc:	10c4703a 	and	r2,r2,r3
    2600:	1144b03a 	or	r2,r2,r5
    2604:	f800283a 	ret
    2608:	21000217 	ldw	r4,8(r4)
    260c:	00bfe084 	movi	r2,-126
    2610:	20801b16 	blt	r4,r2,2680 <__pack_f+0xe0>
    2614:	00801fc4 	movi	r2,127
    2618:	11001016 	blt	r2,r4,265c <__pack_f+0xbc>
    261c:	308e703a 	and	r7,r6,r2
    2620:	2087883a 	add	r3,r4,r2
    2624:	00801004 	movi	r2,64
    2628:	38800526 	beq	r7,r2,2640 <__pack_f+0xa0>
    262c:	31800fc4 	addi	r6,r6,63
    2630:	30000716 	blt	r6,zero,2650 <__pack_f+0xb0>
    2634:	300490ba 	slli	r2,r6,2
    2638:	100cd27a 	srli	r6,r2,9
    263c:	003fe406 	br	25d0 <__pack_f+0x30>
    2640:	3080200c 	andi	r2,r6,128
    2644:	103ffa26 	beq	r2,zero,2630 <__pack_f+0x90>
    2648:	31cd883a 	add	r6,r6,r7
    264c:	003ff806 	br	2630 <__pack_f+0x90>
    2650:	300cd07a 	srli	r6,r6,1
    2654:	18c00044 	addi	r3,r3,1
    2658:	003ff606 	br	2634 <__pack_f+0x94>
    265c:	000d883a 	mov	r6,zero
    2660:	00ffffc4 	movi	r3,-1
    2664:	003fda06 	br	25d0 <__pack_f+0x30>
    2668:	31800434 	orhi	r6,r6,16
    266c:	00802034 	movhi	r2,128
    2670:	10bfffc4 	addi	r2,r2,-1
    2674:	308c703a 	and	r6,r6,r2
    2678:	00ffffc4 	movi	r3,-1
    267c:	003fd406 	br	25d0 <__pack_f+0x30>
    2680:	1109c83a 	sub	r4,r2,r4
    2684:	00800644 	movi	r2,25
    2688:	11001216 	blt	r2,r4,26d4 <__pack_f+0x134>
    268c:	3904983a 	sll	r2,r7,r4
    2690:	3106d83a 	srl	r3,r6,r4
    2694:	10bfffc4 	addi	r2,r2,-1
    2698:	3084703a 	and	r2,r6,r2
    269c:	1004c03a 	cmpne	r2,r2,zero
    26a0:	1886b03a 	or	r3,r3,r2
    26a4:	19001fcc 	andi	r4,r3,127
    26a8:	00801004 	movi	r2,64
    26ac:	20800c26 	beq	r4,r2,26e0 <__pack_f+0x140>
    26b0:	18c00fc4 	addi	r3,r3,63
    26b4:	00900034 	movhi	r2,16384
    26b8:	10bfffc4 	addi	r2,r2,-1
    26bc:	180cd1fa 	srli	r6,r3,7
    26c0:	10c7803a 	cmpltu	r3,r2,r3
    26c4:	00802034 	movhi	r2,128
    26c8:	10bfffc4 	addi	r2,r2,-1
    26cc:	308c703a 	and	r6,r6,r2
    26d0:	003fbf06 	br	25d0 <__pack_f+0x30>
    26d4:	0007883a 	mov	r3,zero
    26d8:	000d883a 	mov	r6,zero
    26dc:	003ff906 	br	26c4 <__pack_f+0x124>
    26e0:	1880200c 	andi	r2,r3,128
    26e4:	10000126 	beq	r2,zero,26ec <__pack_f+0x14c>
    26e8:	1907883a 	add	r3,r3,r4
    26ec:	180cd1fa 	srli	r6,r3,7
    26f0:	00900034 	movhi	r2,16384
    26f4:	10bfffc4 	addi	r2,r2,-1
    26f8:	10c7803a 	cmpltu	r3,r2,r3
    26fc:	003ff106 	br	26c4 <__pack_f+0x124>

00002700 <__unpack_f>:
    2700:	21800017 	ldw	r6,0(r4)
    2704:	00c02034 	movhi	r3,128
    2708:	18ffffc4 	addi	r3,r3,-1
    270c:	3004d5fa 	srli	r2,r6,23
    2710:	3008d7fa 	srli	r4,r6,31
    2714:	30ce703a 	and	r7,r6,r3
    2718:	10c03fcc 	andi	r3,r2,255
    271c:	29000115 	stw	r4,4(r5)
    2720:	1800131e 	bne	r3,zero,2770 <__unpack_f+0x70>
    2724:	38000f26 	beq	r7,zero,2764 <__unpack_f+0x64>
    2728:	380691fa 	slli	r3,r7,7
    272c:	01bfe084 	movi	r6,-126
    2730:	008000c4 	movi	r2,3
    2734:	01100034 	movhi	r4,16384
    2738:	213fffc4 	addi	r4,r4,-1
    273c:	28800015 	stw	r2,0(r5)
    2740:	29800215 	stw	r6,8(r5)
    2744:	20c00536 	bltu	r4,r3,275c <__unpack_f+0x5c>
    2748:	3005883a 	mov	r2,r6
    274c:	18c7883a 	add	r3,r3,r3
    2750:	10bfffc4 	addi	r2,r2,-1
    2754:	20fffd2e 	bgeu	r4,r3,274c <__unpack_f+0x4c>
    2758:	28800215 	stw	r2,8(r5)
    275c:	28c00315 	stw	r3,12(r5)
    2760:	f800283a 	ret
    2764:	00800084 	movi	r2,2
    2768:	28800015 	stw	r2,0(r5)
    276c:	f800283a 	ret
    2770:	00803fc4 	movi	r2,255
    2774:	18800826 	beq	r3,r2,2798 <__unpack_f+0x98>
    2778:	380491fa 	slli	r2,r7,7
    277c:	18ffe044 	addi	r3,r3,-127
    2780:	28c00215 	stw	r3,8(r5)
    2784:	10900034 	orhi	r2,r2,16384
    2788:	28800315 	stw	r2,12(r5)
    278c:	008000c4 	movi	r2,3
    2790:	28800015 	stw	r2,0(r5)
    2794:	f800283a 	ret
    2798:	3800031e 	bne	r7,zero,27a8 <__unpack_f+0xa8>
    279c:	00800104 	movi	r2,4
    27a0:	28800015 	stw	r2,0(r5)
    27a4:	f800283a 	ret
    27a8:	3080042c 	andhi	r2,r6,16
    27ac:	10000426 	beq	r2,zero,27c0 <__unpack_f+0xc0>
    27b0:	00800044 	movi	r2,1
    27b4:	28800015 	stw	r2,0(r5)
    27b8:	29c00315 	stw	r7,12(r5)
    27bc:	f800283a 	ret
    27c0:	28000015 	stw	zero,0(r5)
    27c4:	003ffc06 	br	27b8 <__unpack_f+0xb8>

000027c8 <__pack_d>:
    27c8:	20c00017 	ldw	r3,0(r4)
    27cc:	defffd04 	addi	sp,sp,-12
    27d0:	dc000015 	stw	r16,0(sp)
    27d4:	dc800215 	stw	r18,8(sp)
    27d8:	dc400115 	stw	r17,4(sp)
    27dc:	00800044 	movi	r2,1
    27e0:	22000317 	ldw	r8,12(r4)
    27e4:	001f883a 	mov	r15,zero
    27e8:	22400417 	ldw	r9,16(r4)
    27ec:	24000117 	ldw	r16,4(r4)
    27f0:	10c0552e 	bgeu	r2,r3,2948 <__pack_d+0x180>
    27f4:	00800104 	movi	r2,4
    27f8:	18804f26 	beq	r3,r2,2938 <__pack_d+0x170>
    27fc:	00800084 	movi	r2,2
    2800:	18800226 	beq	r3,r2,280c <__pack_d+0x44>
    2804:	4244b03a 	or	r2,r8,r9
    2808:	10001a1e 	bne	r2,zero,2874 <__pack_d+0xac>
    280c:	000d883a 	mov	r6,zero
    2810:	000f883a 	mov	r7,zero
    2814:	0011883a 	mov	r8,zero
    2818:	00800434 	movhi	r2,16
    281c:	10bfffc4 	addi	r2,r2,-1
    2820:	301d883a 	mov	r14,r6
    2824:	3884703a 	and	r2,r7,r2
    2828:	400a953a 	slli	r5,r8,20
    282c:	79bffc2c 	andhi	r6,r15,65520
    2830:	308cb03a 	or	r6,r6,r2
    2834:	00e00434 	movhi	r3,32784
    2838:	18ffffc4 	addi	r3,r3,-1
    283c:	800497fa 	slli	r2,r16,31
    2840:	30c6703a 	and	r3,r6,r3
    2844:	1946b03a 	or	r3,r3,r5
    2848:	01600034 	movhi	r5,32768
    284c:	297fffc4 	addi	r5,r5,-1
    2850:	194a703a 	and	r5,r3,r5
    2854:	288ab03a 	or	r5,r5,r2
    2858:	2807883a 	mov	r3,r5
    285c:	7005883a 	mov	r2,r14
    2860:	dc800217 	ldw	r18,8(sp)
    2864:	dc400117 	ldw	r17,4(sp)
    2868:	dc000017 	ldw	r16,0(sp)
    286c:	dec00304 	addi	sp,sp,12
    2870:	f800283a 	ret
    2874:	21000217 	ldw	r4,8(r4)
    2878:	00bf0084 	movi	r2,-1022
    287c:	20803f16 	blt	r4,r2,297c <__pack_d+0x1b4>
    2880:	0080ffc4 	movi	r2,1023
    2884:	11002c16 	blt	r2,r4,2938 <__pack_d+0x170>
    2888:	00803fc4 	movi	r2,255
    288c:	408c703a 	and	r6,r8,r2
    2890:	00802004 	movi	r2,128
    2894:	0007883a 	mov	r3,zero
    2898:	000f883a 	mov	r7,zero
    289c:	2280ffc4 	addi	r10,r4,1023
    28a0:	30801e26 	beq	r6,r2,291c <__pack_d+0x154>
    28a4:	00801fc4 	movi	r2,127
    28a8:	4089883a 	add	r4,r8,r2
    28ac:	220d803a 	cmpltu	r6,r4,r8
    28b0:	324d883a 	add	r6,r6,r9
    28b4:	2011883a 	mov	r8,r4
    28b8:	3013883a 	mov	r9,r6
    28bc:	00880034 	movhi	r2,8192
    28c0:	10bfffc4 	addi	r2,r2,-1
    28c4:	12400d36 	bltu	r2,r9,28fc <__pack_d+0x134>
    28c8:	4804963a 	slli	r2,r9,24
    28cc:	400cd23a 	srli	r6,r8,8
    28d0:	480ed23a 	srli	r7,r9,8
    28d4:	013fffc4 	movi	r4,-1
    28d8:	118cb03a 	or	r6,r2,r6
    28dc:	01400434 	movhi	r5,16
    28e0:	297fffc4 	addi	r5,r5,-1
    28e4:	3104703a 	and	r2,r6,r4
    28e8:	3946703a 	and	r3,r7,r5
    28ec:	5201ffcc 	andi	r8,r10,2047
    28f0:	100d883a 	mov	r6,r2
    28f4:	180f883a 	mov	r7,r3
    28f8:	003fc706 	br	2818 <__pack_d+0x50>
    28fc:	480897fa 	slli	r4,r9,31
    2900:	4004d07a 	srli	r2,r8,1
    2904:	4806d07a 	srli	r3,r9,1
    2908:	52800044 	addi	r10,r10,1
    290c:	2084b03a 	or	r2,r4,r2
    2910:	1011883a 	mov	r8,r2
    2914:	1813883a 	mov	r9,r3
    2918:	003feb06 	br	28c8 <__pack_d+0x100>
    291c:	383fe11e 	bne	r7,zero,28a4 <__pack_d+0xdc>
    2920:	01004004 	movi	r4,256
    2924:	4104703a 	and	r2,r8,r4
    2928:	10c4b03a 	or	r2,r2,r3
    292c:	103fe326 	beq	r2,zero,28bc <__pack_d+0xf4>
    2930:	3005883a 	mov	r2,r6
    2934:	003fdc06 	br	28a8 <__pack_d+0xe0>
    2938:	000d883a 	mov	r6,zero
    293c:	000f883a 	mov	r7,zero
    2940:	0201ffc4 	movi	r8,2047
    2944:	003fb406 	br	2818 <__pack_d+0x50>
    2948:	0005883a 	mov	r2,zero
    294c:	00c00234 	movhi	r3,8
    2950:	408cb03a 	or	r6,r8,r2
    2954:	48ceb03a 	or	r7,r9,r3
    2958:	013fffc4 	movi	r4,-1
    295c:	01400434 	movhi	r5,16
    2960:	297fffc4 	addi	r5,r5,-1
    2964:	3104703a 	and	r2,r6,r4
    2968:	3946703a 	and	r3,r7,r5
    296c:	100d883a 	mov	r6,r2
    2970:	180f883a 	mov	r7,r3
    2974:	0201ffc4 	movi	r8,2047
    2978:	003fa706 	br	2818 <__pack_d+0x50>
    297c:	1109c83a 	sub	r4,r2,r4
    2980:	00800e04 	movi	r2,56
    2984:	11004316 	blt	r2,r4,2a94 <__pack_d+0x2cc>
    2988:	21fff804 	addi	r7,r4,-32
    298c:	38004516 	blt	r7,zero,2aa4 <__pack_d+0x2dc>
    2990:	49d8d83a 	srl	r12,r9,r7
    2994:	001b883a 	mov	r13,zero
    2998:	0023883a 	mov	r17,zero
    299c:	01400044 	movi	r5,1
    29a0:	0025883a 	mov	r18,zero
    29a4:	38004716 	blt	r7,zero,2ac4 <__pack_d+0x2fc>
    29a8:	29d6983a 	sll	r11,r5,r7
    29ac:	0015883a 	mov	r10,zero
    29b0:	00bfffc4 	movi	r2,-1
    29b4:	5089883a 	add	r4,r10,r2
    29b8:	588b883a 	add	r5,r11,r2
    29bc:	228d803a 	cmpltu	r6,r4,r10
    29c0:	314b883a 	add	r5,r6,r5
    29c4:	4104703a 	and	r2,r8,r4
    29c8:	4946703a 	and	r3,r9,r5
    29cc:	10c4b03a 	or	r2,r2,r3
    29d0:	10000226 	beq	r2,zero,29dc <__pack_d+0x214>
    29d4:	04400044 	movi	r17,1
    29d8:	0025883a 	mov	r18,zero
    29dc:	00803fc4 	movi	r2,255
    29e0:	644eb03a 	or	r7,r12,r17
    29e4:	3892703a 	and	r9,r7,r2
    29e8:	00802004 	movi	r2,128
    29ec:	6c90b03a 	or	r8,r13,r18
    29f0:	0015883a 	mov	r10,zero
    29f4:	48801626 	beq	r9,r2,2a50 <__pack_d+0x288>
    29f8:	01001fc4 	movi	r4,127
    29fc:	3905883a 	add	r2,r7,r4
    2a00:	11cd803a 	cmpltu	r6,r2,r7
    2a04:	320d883a 	add	r6,r6,r8
    2a08:	100f883a 	mov	r7,r2
    2a0c:	00840034 	movhi	r2,4096
    2a10:	10bfffc4 	addi	r2,r2,-1
    2a14:	3011883a 	mov	r8,r6
    2a18:	0007883a 	mov	r3,zero
    2a1c:	11801b36 	bltu	r2,r6,2a8c <__pack_d+0x2c4>
    2a20:	4004963a 	slli	r2,r8,24
    2a24:	3808d23a 	srli	r4,r7,8
    2a28:	400ad23a 	srli	r5,r8,8
    2a2c:	1813883a 	mov	r9,r3
    2a30:	1108b03a 	or	r4,r2,r4
    2a34:	00bfffc4 	movi	r2,-1
    2a38:	00c00434 	movhi	r3,16
    2a3c:	18ffffc4 	addi	r3,r3,-1
    2a40:	208c703a 	and	r6,r4,r2
    2a44:	28ce703a 	and	r7,r5,r3
    2a48:	4a01ffcc 	andi	r8,r9,2047
    2a4c:	003f7206 	br	2818 <__pack_d+0x50>
    2a50:	503fe91e 	bne	r10,zero,29f8 <__pack_d+0x230>
    2a54:	01004004 	movi	r4,256
    2a58:	3904703a 	and	r2,r7,r4
    2a5c:	0007883a 	mov	r3,zero
    2a60:	10c4b03a 	or	r2,r2,r3
    2a64:	10000626 	beq	r2,zero,2a80 <__pack_d+0x2b8>
    2a68:	3a45883a 	add	r2,r7,r9
    2a6c:	11cd803a 	cmpltu	r6,r2,r7
    2a70:	320d883a 	add	r6,r6,r8
    2a74:	100f883a 	mov	r7,r2
    2a78:	3011883a 	mov	r8,r6
    2a7c:	0007883a 	mov	r3,zero
    2a80:	00840034 	movhi	r2,4096
    2a84:	10bfffc4 	addi	r2,r2,-1
    2a88:	123fe52e 	bgeu	r2,r8,2a20 <__pack_d+0x258>
    2a8c:	00c00044 	movi	r3,1
    2a90:	003fe306 	br	2a20 <__pack_d+0x258>
    2a94:	0009883a 	mov	r4,zero
    2a98:	0013883a 	mov	r9,zero
    2a9c:	000b883a 	mov	r5,zero
    2aa0:	003fe406 	br	2a34 <__pack_d+0x26c>
    2aa4:	4a47883a 	add	r3,r9,r9
    2aa8:	008007c4 	movi	r2,31
    2aac:	1105c83a 	sub	r2,r2,r4
    2ab0:	1886983a 	sll	r3,r3,r2
    2ab4:	4118d83a 	srl	r12,r8,r4
    2ab8:	491ad83a 	srl	r13,r9,r4
    2abc:	1b18b03a 	or	r12,r3,r12
    2ac0:	003fb506 	br	2998 <__pack_d+0x1d0>
    2ac4:	2806d07a 	srli	r3,r5,1
    2ac8:	008007c4 	movi	r2,31
    2acc:	1105c83a 	sub	r2,r2,r4
    2ad0:	1896d83a 	srl	r11,r3,r2
    2ad4:	2914983a 	sll	r10,r5,r4
    2ad8:	003fb506 	br	29b0 <__pack_d+0x1e8>

00002adc <memcpy>:
    2adc:	01c003c4 	movi	r7,15
    2ae0:	2007883a 	mov	r3,r4
    2ae4:	3980032e 	bgeu	r7,r6,2af4 <memcpy+0x18>
    2ae8:	2904b03a 	or	r2,r5,r4
    2aec:	108000cc 	andi	r2,r2,3
    2af0:	10000926 	beq	r2,zero,2b18 <memcpy+0x3c>
    2af4:	30000626 	beq	r6,zero,2b10 <memcpy+0x34>
    2af8:	30cd883a 	add	r6,r6,r3
    2afc:	28800003 	ldbu	r2,0(r5)
    2b00:	29400044 	addi	r5,r5,1
    2b04:	18800005 	stb	r2,0(r3)
    2b08:	18c00044 	addi	r3,r3,1
    2b0c:	30fffb1e 	bne	r6,r3,2afc <memcpy+0x20>
    2b10:	2005883a 	mov	r2,r4
    2b14:	f800283a 	ret
    2b18:	3811883a 	mov	r8,r7
    2b1c:	200f883a 	mov	r7,r4
    2b20:	28c00017 	ldw	r3,0(r5)
    2b24:	31bffc04 	addi	r6,r6,-16
    2b28:	38c00015 	stw	r3,0(r7)
    2b2c:	28800117 	ldw	r2,4(r5)
    2b30:	38800115 	stw	r2,4(r7)
    2b34:	28c00217 	ldw	r3,8(r5)
    2b38:	38c00215 	stw	r3,8(r7)
    2b3c:	28800317 	ldw	r2,12(r5)
    2b40:	29400404 	addi	r5,r5,16
    2b44:	38800315 	stw	r2,12(r7)
    2b48:	39c00404 	addi	r7,r7,16
    2b4c:	41bff436 	bltu	r8,r6,2b20 <memcpy+0x44>
    2b50:	008000c4 	movi	r2,3
    2b54:	1180072e 	bgeu	r2,r6,2b74 <memcpy+0x98>
    2b58:	1007883a 	mov	r3,r2
    2b5c:	28800017 	ldw	r2,0(r5)
    2b60:	31bfff04 	addi	r6,r6,-4
    2b64:	29400104 	addi	r5,r5,4
    2b68:	38800015 	stw	r2,0(r7)
    2b6c:	39c00104 	addi	r7,r7,4
    2b70:	19bffa36 	bltu	r3,r6,2b5c <memcpy+0x80>
    2b74:	3807883a 	mov	r3,r7
    2b78:	003fde06 	br	2af4 <memcpy+0x18>

00002b7c <memset>:
    2b7c:	008000c4 	movi	r2,3
    2b80:	29403fcc 	andi	r5,r5,255
    2b84:	2007883a 	mov	r3,r4
    2b88:	1180022e 	bgeu	r2,r6,2b94 <memset+0x18>
    2b8c:	2084703a 	and	r2,r4,r2
    2b90:	10000826 	beq	r2,zero,2bb4 <memset+0x38>
    2b94:	30000526 	beq	r6,zero,2bac <memset+0x30>
    2b98:	2805883a 	mov	r2,r5
    2b9c:	30cd883a 	add	r6,r6,r3
    2ba0:	18800005 	stb	r2,0(r3)
    2ba4:	18c00044 	addi	r3,r3,1
    2ba8:	19bffd1e 	bne	r3,r6,2ba0 <memset+0x24>
    2bac:	2005883a 	mov	r2,r4
    2bb0:	f800283a 	ret
    2bb4:	2804923a 	slli	r2,r5,8
    2bb8:	020003c4 	movi	r8,15
    2bbc:	200f883a 	mov	r7,r4
    2bc0:	2884b03a 	or	r2,r5,r2
    2bc4:	1006943a 	slli	r3,r2,16
    2bc8:	10c6b03a 	or	r3,r2,r3
    2bcc:	41800a2e 	bgeu	r8,r6,2bf8 <memset+0x7c>
    2bd0:	4005883a 	mov	r2,r8
    2bd4:	31bffc04 	addi	r6,r6,-16
    2bd8:	38c00015 	stw	r3,0(r7)
    2bdc:	38c00115 	stw	r3,4(r7)
    2be0:	38c00215 	stw	r3,8(r7)
    2be4:	38c00315 	stw	r3,12(r7)
    2be8:	39c00404 	addi	r7,r7,16
    2bec:	11bff936 	bltu	r2,r6,2bd4 <memset+0x58>
    2bf0:	008000c4 	movi	r2,3
    2bf4:	1180052e 	bgeu	r2,r6,2c0c <memset+0x90>
    2bf8:	31bfff04 	addi	r6,r6,-4
    2bfc:	008000c4 	movi	r2,3
    2c00:	38c00015 	stw	r3,0(r7)
    2c04:	39c00104 	addi	r7,r7,4
    2c08:	11bffb36 	bltu	r2,r6,2bf8 <memset+0x7c>
    2c0c:	3807883a 	mov	r3,r7
    2c10:	003fe006 	br	2b94 <memset+0x18>

00002c14 <printf>:
    2c14:	defffb04 	addi	sp,sp,-20
    2c18:	dfc00115 	stw	ra,4(sp)
    2c1c:	d9400215 	stw	r5,8(sp)
    2c20:	d9800315 	stw	r6,12(sp)
    2c24:	d9c00415 	stw	r7,16(sp)
    2c28:	00800074 	movhi	r2,1
    2c2c:	108fde04 	addi	r2,r2,16248
    2c30:	10c00017 	ldw	r3,0(r2)
    2c34:	200b883a 	mov	r5,r4
    2c38:	d8800204 	addi	r2,sp,8
    2c3c:	19000217 	ldw	r4,8(r3)
    2c40:	100d883a 	mov	r6,r2
    2c44:	d8800015 	stw	r2,0(sp)
    2c48:	0004b900 	call	4b90 <__vfprintf_internal>
    2c4c:	dfc00117 	ldw	ra,4(sp)
    2c50:	dec00504 	addi	sp,sp,20
    2c54:	f800283a 	ret

00002c58 <_printf_r>:
    2c58:	defffc04 	addi	sp,sp,-16
    2c5c:	dfc00115 	stw	ra,4(sp)
    2c60:	d9800215 	stw	r6,8(sp)
    2c64:	d9c00315 	stw	r7,12(sp)
    2c68:	280d883a 	mov	r6,r5
    2c6c:	21400217 	ldw	r5,8(r4)
    2c70:	d8c00204 	addi	r3,sp,8
    2c74:	180f883a 	mov	r7,r3
    2c78:	d8c00015 	stw	r3,0(sp)
    2c7c:	0002ce40 	call	2ce4 <___vfprintf_internal_r>
    2c80:	dfc00117 	ldw	ra,4(sp)
    2c84:	dec00404 	addi	sp,sp,16
    2c88:	f800283a 	ret

00002c8c <__sprint_r>:
    2c8c:	30800217 	ldw	r2,8(r6)
    2c90:	defffe04 	addi	sp,sp,-8
    2c94:	dc000015 	stw	r16,0(sp)
    2c98:	dfc00115 	stw	ra,4(sp)
    2c9c:	3021883a 	mov	r16,r6
    2ca0:	0007883a 	mov	r3,zero
    2ca4:	1000061e 	bne	r2,zero,2cc0 <__sprint_r+0x34>
    2ca8:	1805883a 	mov	r2,r3
    2cac:	30000115 	stw	zero,4(r6)
    2cb0:	dfc00117 	ldw	ra,4(sp)
    2cb4:	dc000017 	ldw	r16,0(sp)
    2cb8:	dec00204 	addi	sp,sp,8
    2cbc:	f800283a 	ret
    2cc0:	0006dec0 	call	6dec <__sfvwrite_r>
    2cc4:	1007883a 	mov	r3,r2
    2cc8:	1805883a 	mov	r2,r3
    2ccc:	80000115 	stw	zero,4(r16)
    2cd0:	80000215 	stw	zero,8(r16)
    2cd4:	dfc00117 	ldw	ra,4(sp)
    2cd8:	dc000017 	ldw	r16,0(sp)
    2cdc:	dec00204 	addi	sp,sp,8
    2ce0:	f800283a 	ret

00002ce4 <___vfprintf_internal_r>:
    2ce4:	defea404 	addi	sp,sp,-1392
    2ce8:	dd815815 	stw	r22,1376(sp)
    2cec:	dc015215 	stw	r16,1352(sp)
    2cf0:	d9c15115 	stw	r7,1348(sp)
    2cf4:	dfc15b15 	stw	ra,1388(sp)
    2cf8:	df015a15 	stw	fp,1384(sp)
    2cfc:	ddc15915 	stw	r23,1380(sp)
    2d00:	dd415715 	stw	r21,1372(sp)
    2d04:	dd015615 	stw	r20,1368(sp)
    2d08:	dcc15515 	stw	r19,1364(sp)
    2d0c:	dc815415 	stw	r18,1360(sp)
    2d10:	dc415315 	stw	r17,1356(sp)
    2d14:	282d883a 	mov	r22,r5
    2d18:	3021883a 	mov	r16,r6
    2d1c:	d9014f15 	stw	r4,1340(sp)
    2d20:	00074100 	call	7410 <_localeconv_r>
    2d24:	10800017 	ldw	r2,0(r2)
    2d28:	d9c15117 	ldw	r7,1348(sp)
    2d2c:	d8814915 	stw	r2,1316(sp)
    2d30:	d8814f17 	ldw	r2,1340(sp)
    2d34:	10000226 	beq	r2,zero,2d40 <___vfprintf_internal_r+0x5c>
    2d38:	10800e17 	ldw	r2,56(r2)
    2d3c:	10020d26 	beq	r2,zero,3574 <___vfprintf_internal_r+0x890>
    2d40:	b080030b 	ldhu	r2,12(r22)
    2d44:	1080020c 	andi	r2,r2,8
    2d48:	10020e26 	beq	r2,zero,3584 <___vfprintf_internal_r+0x8a0>
    2d4c:	b0800417 	ldw	r2,16(r22)
    2d50:	10020c26 	beq	r2,zero,3584 <___vfprintf_internal_r+0x8a0>
    2d54:	b200030b 	ldhu	r8,12(r22)
    2d58:	00800284 	movi	r2,10
    2d5c:	40c0068c 	andi	r3,r8,26
    2d60:	18802f1e 	bne	r3,r2,2e20 <___vfprintf_internal_r+0x13c>
    2d64:	b080038f 	ldh	r2,14(r22)
    2d68:	10002d16 	blt	r2,zero,2e20 <___vfprintf_internal_r+0x13c>
    2d6c:	b240038b 	ldhu	r9,14(r22)
    2d70:	b2800717 	ldw	r10,28(r22)
    2d74:	b2c00917 	ldw	r11,36(r22)
    2d78:	d9014f17 	ldw	r4,1340(sp)
    2d7c:	dc402904 	addi	r17,sp,164
    2d80:	d8804004 	addi	r2,sp,256
    2d84:	00c10004 	movi	r3,1024
    2d88:	423fff4c 	andi	r8,r8,65533
    2d8c:	800d883a 	mov	r6,r16
    2d90:	880b883a 	mov	r5,r17
    2d94:	da002c0d 	sth	r8,176(sp)
    2d98:	da402c8d 	sth	r9,178(sp)
    2d9c:	da803015 	stw	r10,192(sp)
    2da0:	dac03215 	stw	r11,200(sp)
    2da4:	d8802d15 	stw	r2,180(sp)
    2da8:	d8c02e15 	stw	r3,184(sp)
    2dac:	d8802915 	stw	r2,164(sp)
    2db0:	d8c02b15 	stw	r3,172(sp)
    2db4:	d8002f15 	stw	zero,188(sp)
    2db8:	0002ce40 	call	2ce4 <___vfprintf_internal_r>
    2dbc:	d8814b15 	stw	r2,1324(sp)
    2dc0:	10000416 	blt	r2,zero,2dd4 <___vfprintf_internal_r+0xf0>
    2dc4:	d9014f17 	ldw	r4,1340(sp)
    2dc8:	880b883a 	mov	r5,r17
    2dcc:	00064bc0 	call	64bc <_fflush_r>
    2dd0:	1002321e 	bne	r2,zero,369c <___vfprintf_internal_r+0x9b8>
    2dd4:	d8802c0b 	ldhu	r2,176(sp)
    2dd8:	1080100c 	andi	r2,r2,64
    2ddc:	10000326 	beq	r2,zero,2dec <___vfprintf_internal_r+0x108>
    2de0:	b080030b 	ldhu	r2,12(r22)
    2de4:	10801014 	ori	r2,r2,64
    2de8:	b080030d 	sth	r2,12(r22)
    2dec:	d8814b17 	ldw	r2,1324(sp)
    2df0:	dfc15b17 	ldw	ra,1388(sp)
    2df4:	df015a17 	ldw	fp,1384(sp)
    2df8:	ddc15917 	ldw	r23,1380(sp)
    2dfc:	dd815817 	ldw	r22,1376(sp)
    2e00:	dd415717 	ldw	r21,1372(sp)
    2e04:	dd015617 	ldw	r20,1368(sp)
    2e08:	dcc15517 	ldw	r19,1364(sp)
    2e0c:	dc815417 	ldw	r18,1360(sp)
    2e10:	dc415317 	ldw	r17,1356(sp)
    2e14:	dc015217 	ldw	r16,1352(sp)
    2e18:	dec15c04 	addi	sp,sp,1392
    2e1c:	f800283a 	ret
    2e20:	0005883a 	mov	r2,zero
    2e24:	0007883a 	mov	r3,zero
    2e28:	dd401904 	addi	r21,sp,100
    2e2c:	d8814215 	stw	r2,1288(sp)
    2e30:	802f883a 	mov	r23,r16
    2e34:	d8c14315 	stw	r3,1292(sp)
    2e38:	d8014b15 	stw	zero,1324(sp)
    2e3c:	d8014815 	stw	zero,1312(sp)
    2e40:	d8014415 	stw	zero,1296(sp)
    2e44:	d8014715 	stw	zero,1308(sp)
    2e48:	dd400c15 	stw	r21,48(sp)
    2e4c:	d8000e15 	stw	zero,56(sp)
    2e50:	d8000d15 	stw	zero,52(sp)
    2e54:	b8800007 	ldb	r2,0(r23)
    2e58:	10001926 	beq	r2,zero,2ec0 <___vfprintf_internal_r+0x1dc>
    2e5c:	00c00944 	movi	r3,37
    2e60:	10c01726 	beq	r2,r3,2ec0 <___vfprintf_internal_r+0x1dc>
    2e64:	b821883a 	mov	r16,r23
    2e68:	00000106 	br	2e70 <___vfprintf_internal_r+0x18c>
    2e6c:	10c00326 	beq	r2,r3,2e7c <___vfprintf_internal_r+0x198>
    2e70:	84000044 	addi	r16,r16,1
    2e74:	80800007 	ldb	r2,0(r16)
    2e78:	103ffc1e 	bne	r2,zero,2e6c <___vfprintf_internal_r+0x188>
    2e7c:	85e7c83a 	sub	r19,r16,r23
    2e80:	98000e26 	beq	r19,zero,2ebc <___vfprintf_internal_r+0x1d8>
    2e84:	dc800e17 	ldw	r18,56(sp)
    2e88:	dc400d17 	ldw	r17,52(sp)
    2e8c:	008001c4 	movi	r2,7
    2e90:	94e5883a 	add	r18,r18,r19
    2e94:	8c400044 	addi	r17,r17,1
    2e98:	adc00015 	stw	r23,0(r21)
    2e9c:	dc800e15 	stw	r18,56(sp)
    2ea0:	acc00115 	stw	r19,4(r21)
    2ea4:	dc400d15 	stw	r17,52(sp)
    2ea8:	14428b16 	blt	r2,r17,38d8 <___vfprintf_internal_r+0xbf4>
    2eac:	ad400204 	addi	r21,r21,8
    2eb0:	d9014b17 	ldw	r4,1324(sp)
    2eb4:	24c9883a 	add	r4,r4,r19
    2eb8:	d9014b15 	stw	r4,1324(sp)
    2ebc:	802f883a 	mov	r23,r16
    2ec0:	b8800007 	ldb	r2,0(r23)
    2ec4:	10013c26 	beq	r2,zero,33b8 <___vfprintf_internal_r+0x6d4>
    2ec8:	bdc00044 	addi	r23,r23,1
    2ecc:	d8000405 	stb	zero,16(sp)
    2ed0:	b8c00007 	ldb	r3,0(r23)
    2ed4:	04ffffc4 	movi	r19,-1
    2ed8:	d8014c15 	stw	zero,1328(sp)
    2edc:	d8014a15 	stw	zero,1320(sp)
    2ee0:	d8c14d15 	stw	r3,1332(sp)
    2ee4:	bdc00044 	addi	r23,r23,1
    2ee8:	d9414d17 	ldw	r5,1332(sp)
    2eec:	00801604 	movi	r2,88
    2ef0:	28fff804 	addi	r3,r5,-32
    2ef4:	10c06036 	bltu	r2,r3,3078 <___vfprintf_internal_r+0x394>
    2ef8:	18c5883a 	add	r2,r3,r3
    2efc:	1085883a 	add	r2,r2,r2
    2f00:	00c00034 	movhi	r3,0
    2f04:	18cbc504 	addi	r3,r3,12052
    2f08:	10c5883a 	add	r2,r2,r3
    2f0c:	11000017 	ldw	r4,0(r2)
    2f10:	2000683a 	jmp	r4
    2f14:	00003e88 	cmpgei	zero,zero,250
    2f18:	00003078 	rdprs	zero,zero,193
    2f1c:	00003078 	rdprs	zero,zero,193
    2f20:	00003e74 	movhi	zero,249
    2f24:	00003078 	rdprs	zero,zero,193
    2f28:	00003078 	rdprs	zero,zero,193
    2f2c:	00003078 	rdprs	zero,zero,193
    2f30:	00003078 	rdprs	zero,zero,193
    2f34:	00003078 	rdprs	zero,zero,193
    2f38:	00003078 	rdprs	zero,zero,193
    2f3c:	00003c54 	movui	zero,241
    2f40:	00003e64 	muli	zero,zero,249
    2f44:	00003078 	rdprs	zero,zero,193
    2f48:	00003c6c 	andhi	zero,zero,241
    2f4c:	00003f00 	call	3f0 <audio_ISR+0xb0>
    2f50:	00003078 	rdprs	zero,zero,193
    2f54:	00003eec 	andhi	zero,zero,251
    2f58:	00003eb4 	movhi	zero,250
    2f5c:	00003eb4 	movhi	zero,250
    2f60:	00003eb4 	movhi	zero,250
    2f64:	00003eb4 	movhi	zero,250
    2f68:	00003eb4 	movhi	zero,250
    2f6c:	00003eb4 	movhi	zero,250
    2f70:	00003eb4 	movhi	zero,250
    2f74:	00003eb4 	movhi	zero,250
    2f78:	00003eb4 	movhi	zero,250
    2f7c:	00003078 	rdprs	zero,zero,193
    2f80:	00003078 	rdprs	zero,zero,193
    2f84:	00003078 	rdprs	zero,zero,193
    2f88:	00003078 	rdprs	zero,zero,193
    2f8c:	00003078 	rdprs	zero,zero,193
    2f90:	00003078 	rdprs	zero,zero,193
    2f94:	00003078 	rdprs	zero,zero,193
    2f98:	00003078 	rdprs	zero,zero,193
    2f9c:	00003078 	rdprs	zero,zero,193
    2fa0:	00003078 	rdprs	zero,zero,193
    2fa4:	000036d0 	cmplti	zero,zero,219
    2fa8:	00003d3c 	xorhi	zero,zero,244
    2fac:	00003078 	rdprs	zero,zero,193
    2fb0:	00003d3c 	xorhi	zero,zero,244
    2fb4:	00003078 	rdprs	zero,zero,193
    2fb8:	00003078 	rdprs	zero,zero,193
    2fbc:	00003078 	rdprs	zero,zero,193
    2fc0:	00003078 	rdprs	zero,zero,193
    2fc4:	00003ea0 	cmpeqi	zero,zero,250
    2fc8:	00003078 	rdprs	zero,zero,193
    2fcc:	00003078 	rdprs	zero,zero,193
    2fd0:	00003784 	movi	zero,222
    2fd4:	00003078 	rdprs	zero,zero,193
    2fd8:	00003078 	rdprs	zero,zero,193
    2fdc:	00003078 	rdprs	zero,zero,193
    2fe0:	00003078 	rdprs	zero,zero,193
    2fe4:	00003078 	rdprs	zero,zero,193
    2fe8:	000037d0 	cmplti	zero,zero,223
    2fec:	00003078 	rdprs	zero,zero,193
    2ff0:	00003078 	rdprs	zero,zero,193
    2ff4:	00003df0 	cmpltui	zero,zero,247
    2ff8:	00003078 	rdprs	zero,zero,193
    2ffc:	00003078 	rdprs	zero,zero,193
    3000:	00003078 	rdprs	zero,zero,193
    3004:	00003078 	rdprs	zero,zero,193
    3008:	00003078 	rdprs	zero,zero,193
    300c:	00003078 	rdprs	zero,zero,193
    3010:	00003078 	rdprs	zero,zero,193
    3014:	00003078 	rdprs	zero,zero,193
    3018:	00003078 	rdprs	zero,zero,193
    301c:	00003078 	rdprs	zero,zero,193
    3020:	00003dc4 	movi	zero,247
    3024:	000036dc 	xori	zero,zero,219
    3028:	00003d3c 	xorhi	zero,zero,244
    302c:	00003d3c 	xorhi	zero,zero,244
    3030:	00003d3c 	xorhi	zero,zero,244
    3034:	00003d28 	cmpgeui	zero,zero,244
    3038:	000036dc 	xori	zero,zero,219
    303c:	00003078 	rdprs	zero,zero,193
    3040:	00003078 	rdprs	zero,zero,193
    3044:	00003cb0 	cmpltui	zero,zero,242
    3048:	00003078 	rdprs	zero,zero,193
    304c:	00003c80 	call	3c8 <audio_ISR+0x88>
    3050:	00003790 	cmplti	zero,zero,222
    3054:	00003ce0 	cmpeqi	zero,zero,243
    3058:	00003ccc 	andi	zero,zero,243
    305c:	00003078 	rdprs	zero,zero,193
    3060:	00003f5c 	xori	zero,zero,253
    3064:	00003078 	rdprs	zero,zero,193
    3068:	000037dc 	xori	zero,zero,223
    306c:	00003078 	rdprs	zero,zero,193
    3070:	00003078 	rdprs	zero,zero,193
    3074:	00003e54 	movui	zero,249
    3078:	d9014d17 	ldw	r4,1332(sp)
    307c:	2000ce26 	beq	r4,zero,33b8 <___vfprintf_internal_r+0x6d4>
    3080:	01400044 	movi	r5,1
    3084:	d9800f04 	addi	r6,sp,60
    3088:	d9c14015 	stw	r7,1280(sp)
    308c:	d9414515 	stw	r5,1300(sp)
    3090:	d9814115 	stw	r6,1284(sp)
    3094:	280f883a 	mov	r7,r5
    3098:	d9000f05 	stb	r4,60(sp)
    309c:	d8000405 	stb	zero,16(sp)
    30a0:	d8014615 	stw	zero,1304(sp)
    30a4:	d8c14c17 	ldw	r3,1328(sp)
    30a8:	1880008c 	andi	r2,r3,2
    30ac:	1005003a 	cmpeq	r2,r2,zero
    30b0:	d8815015 	stw	r2,1344(sp)
    30b4:	1000031e 	bne	r2,zero,30c4 <___vfprintf_internal_r+0x3e0>
    30b8:	d9014517 	ldw	r4,1300(sp)
    30bc:	21000084 	addi	r4,r4,2
    30c0:	d9014515 	stw	r4,1300(sp)
    30c4:	d9414c17 	ldw	r5,1328(sp)
    30c8:	2940210c 	andi	r5,r5,132
    30cc:	d9414e15 	stw	r5,1336(sp)
    30d0:	28002d1e 	bne	r5,zero,3188 <___vfprintf_internal_r+0x4a4>
    30d4:	d9814a17 	ldw	r6,1320(sp)
    30d8:	d8814517 	ldw	r2,1300(sp)
    30dc:	30a1c83a 	sub	r16,r6,r2
    30e0:	0400290e 	bge	zero,r16,3188 <___vfprintf_internal_r+0x4a4>
    30e4:	00800404 	movi	r2,16
    30e8:	1404580e 	bge	r2,r16,424c <___vfprintf_internal_r+0x1568>
    30ec:	dc800e17 	ldw	r18,56(sp)
    30f0:	dc400d17 	ldw	r17,52(sp)
    30f4:	1027883a 	mov	r19,r2
    30f8:	07000074 	movhi	fp,1
    30fc:	e7089c84 	addi	fp,fp,8818
    3100:	050001c4 	movi	r20,7
    3104:	00000306 	br	3114 <___vfprintf_internal_r+0x430>
    3108:	843ffc04 	addi	r16,r16,-16
    310c:	ad400204 	addi	r21,r21,8
    3110:	9c00130e 	bge	r19,r16,3160 <___vfprintf_internal_r+0x47c>
    3114:	94800404 	addi	r18,r18,16
    3118:	8c400044 	addi	r17,r17,1
    311c:	af000015 	stw	fp,0(r21)
    3120:	acc00115 	stw	r19,4(r21)
    3124:	dc800e15 	stw	r18,56(sp)
    3128:	dc400d15 	stw	r17,52(sp)
    312c:	a47ff60e 	bge	r20,r17,3108 <___vfprintf_internal_r+0x424>
    3130:	d9014f17 	ldw	r4,1340(sp)
    3134:	b00b883a 	mov	r5,r22
    3138:	d9800c04 	addi	r6,sp,48
    313c:	d9c15115 	stw	r7,1348(sp)
    3140:	0002c8c0 	call	2c8c <__sprint_r>
    3144:	d9c15117 	ldw	r7,1348(sp)
    3148:	10009e1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    314c:	843ffc04 	addi	r16,r16,-16
    3150:	dc800e17 	ldw	r18,56(sp)
    3154:	dc400d17 	ldw	r17,52(sp)
    3158:	dd401904 	addi	r21,sp,100
    315c:	9c3fed16 	blt	r19,r16,3114 <___vfprintf_internal_r+0x430>
    3160:	9425883a 	add	r18,r18,r16
    3164:	8c400044 	addi	r17,r17,1
    3168:	008001c4 	movi	r2,7
    316c:	af000015 	stw	fp,0(r21)
    3170:	ac000115 	stw	r16,4(r21)
    3174:	dc800e15 	stw	r18,56(sp)
    3178:	dc400d15 	stw	r17,52(sp)
    317c:	1441f516 	blt	r2,r17,3954 <___vfprintf_internal_r+0xc70>
    3180:	ad400204 	addi	r21,r21,8
    3184:	00000206 	br	3190 <___vfprintf_internal_r+0x4ac>
    3188:	dc800e17 	ldw	r18,56(sp)
    318c:	dc400d17 	ldw	r17,52(sp)
    3190:	d8800407 	ldb	r2,16(sp)
    3194:	10000b26 	beq	r2,zero,31c4 <___vfprintf_internal_r+0x4e0>
    3198:	00800044 	movi	r2,1
    319c:	94800044 	addi	r18,r18,1
    31a0:	8c400044 	addi	r17,r17,1
    31a4:	a8800115 	stw	r2,4(r21)
    31a8:	d8c00404 	addi	r3,sp,16
    31ac:	008001c4 	movi	r2,7
    31b0:	a8c00015 	stw	r3,0(r21)
    31b4:	dc800e15 	stw	r18,56(sp)
    31b8:	dc400d15 	stw	r17,52(sp)
    31bc:	1441da16 	blt	r2,r17,3928 <___vfprintf_internal_r+0xc44>
    31c0:	ad400204 	addi	r21,r21,8
    31c4:	d9015017 	ldw	r4,1344(sp)
    31c8:	20000b1e 	bne	r4,zero,31f8 <___vfprintf_internal_r+0x514>
    31cc:	d8800444 	addi	r2,sp,17
    31d0:	94800084 	addi	r18,r18,2
    31d4:	8c400044 	addi	r17,r17,1
    31d8:	a8800015 	stw	r2,0(r21)
    31dc:	00c00084 	movi	r3,2
    31e0:	008001c4 	movi	r2,7
    31e4:	a8c00115 	stw	r3,4(r21)
    31e8:	dc800e15 	stw	r18,56(sp)
    31ec:	dc400d15 	stw	r17,52(sp)
    31f0:	1441c216 	blt	r2,r17,38fc <___vfprintf_internal_r+0xc18>
    31f4:	ad400204 	addi	r21,r21,8
    31f8:	d9414e17 	ldw	r5,1336(sp)
    31fc:	00802004 	movi	r2,128
    3200:	2880b126 	beq	r5,r2,34c8 <___vfprintf_internal_r+0x7e4>
    3204:	d8c14617 	ldw	r3,1304(sp)
    3208:	19e1c83a 	sub	r16,r3,r7
    320c:	0400260e 	bge	zero,r16,32a8 <___vfprintf_internal_r+0x5c4>
    3210:	00800404 	movi	r2,16
    3214:	1403c90e 	bge	r2,r16,413c <___vfprintf_internal_r+0x1458>
    3218:	1027883a 	mov	r19,r2
    321c:	07000074 	movhi	fp,1
    3220:	e7089884 	addi	fp,fp,8802
    3224:	050001c4 	movi	r20,7
    3228:	00000306 	br	3238 <___vfprintf_internal_r+0x554>
    322c:	843ffc04 	addi	r16,r16,-16
    3230:	ad400204 	addi	r21,r21,8
    3234:	9c00130e 	bge	r19,r16,3284 <___vfprintf_internal_r+0x5a0>
    3238:	94800404 	addi	r18,r18,16
    323c:	8c400044 	addi	r17,r17,1
    3240:	af000015 	stw	fp,0(r21)
    3244:	acc00115 	stw	r19,4(r21)
    3248:	dc800e15 	stw	r18,56(sp)
    324c:	dc400d15 	stw	r17,52(sp)
    3250:	a47ff60e 	bge	r20,r17,322c <___vfprintf_internal_r+0x548>
    3254:	d9014f17 	ldw	r4,1340(sp)
    3258:	b00b883a 	mov	r5,r22
    325c:	d9800c04 	addi	r6,sp,48
    3260:	d9c15115 	stw	r7,1348(sp)
    3264:	0002c8c0 	call	2c8c <__sprint_r>
    3268:	d9c15117 	ldw	r7,1348(sp)
    326c:	1000551e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3270:	843ffc04 	addi	r16,r16,-16
    3274:	dc800e17 	ldw	r18,56(sp)
    3278:	dc400d17 	ldw	r17,52(sp)
    327c:	dd401904 	addi	r21,sp,100
    3280:	9c3fed16 	blt	r19,r16,3238 <___vfprintf_internal_r+0x554>
    3284:	9425883a 	add	r18,r18,r16
    3288:	8c400044 	addi	r17,r17,1
    328c:	008001c4 	movi	r2,7
    3290:	af000015 	stw	fp,0(r21)
    3294:	ac000115 	stw	r16,4(r21)
    3298:	dc800e15 	stw	r18,56(sp)
    329c:	dc400d15 	stw	r17,52(sp)
    32a0:	14418216 	blt	r2,r17,38ac <___vfprintf_internal_r+0xbc8>
    32a4:	ad400204 	addi	r21,r21,8
    32a8:	d9014c17 	ldw	r4,1328(sp)
    32ac:	2080400c 	andi	r2,r4,256
    32b0:	10004a1e 	bne	r2,zero,33dc <___vfprintf_internal_r+0x6f8>
    32b4:	d9414117 	ldw	r5,1284(sp)
    32b8:	91e5883a 	add	r18,r18,r7
    32bc:	8c400044 	addi	r17,r17,1
    32c0:	008001c4 	movi	r2,7
    32c4:	a9400015 	stw	r5,0(r21)
    32c8:	a9c00115 	stw	r7,4(r21)
    32cc:	dc800e15 	stw	r18,56(sp)
    32d0:	dc400d15 	stw	r17,52(sp)
    32d4:	14416716 	blt	r2,r17,3874 <___vfprintf_internal_r+0xb90>
    32d8:	a8c00204 	addi	r3,r21,8
    32dc:	d9814c17 	ldw	r6,1328(sp)
    32e0:	3080010c 	andi	r2,r6,4
    32e4:	10002826 	beq	r2,zero,3388 <___vfprintf_internal_r+0x6a4>
    32e8:	d8814a17 	ldw	r2,1320(sp)
    32ec:	d9014517 	ldw	r4,1300(sp)
    32f0:	1121c83a 	sub	r16,r2,r4
    32f4:	0400240e 	bge	zero,r16,3388 <___vfprintf_internal_r+0x6a4>
    32f8:	00800404 	movi	r2,16
    32fc:	14044f0e 	bge	r2,r16,443c <___vfprintf_internal_r+0x1758>
    3300:	dc400d17 	ldw	r17,52(sp)
    3304:	1027883a 	mov	r19,r2
    3308:	07000074 	movhi	fp,1
    330c:	e7089c84 	addi	fp,fp,8818
    3310:	050001c4 	movi	r20,7
    3314:	00000306 	br	3324 <___vfprintf_internal_r+0x640>
    3318:	843ffc04 	addi	r16,r16,-16
    331c:	18c00204 	addi	r3,r3,8
    3320:	9c00110e 	bge	r19,r16,3368 <___vfprintf_internal_r+0x684>
    3324:	94800404 	addi	r18,r18,16
    3328:	8c400044 	addi	r17,r17,1
    332c:	1f000015 	stw	fp,0(r3)
    3330:	1cc00115 	stw	r19,4(r3)
    3334:	dc800e15 	stw	r18,56(sp)
    3338:	dc400d15 	stw	r17,52(sp)
    333c:	a47ff60e 	bge	r20,r17,3318 <___vfprintf_internal_r+0x634>
    3340:	d9014f17 	ldw	r4,1340(sp)
    3344:	b00b883a 	mov	r5,r22
    3348:	d9800c04 	addi	r6,sp,48
    334c:	0002c8c0 	call	2c8c <__sprint_r>
    3350:	10001c1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3354:	843ffc04 	addi	r16,r16,-16
    3358:	dc800e17 	ldw	r18,56(sp)
    335c:	dc400d17 	ldw	r17,52(sp)
    3360:	d8c01904 	addi	r3,sp,100
    3364:	9c3fef16 	blt	r19,r16,3324 <___vfprintf_internal_r+0x640>
    3368:	9425883a 	add	r18,r18,r16
    336c:	8c400044 	addi	r17,r17,1
    3370:	008001c4 	movi	r2,7
    3374:	1f000015 	stw	fp,0(r3)
    3378:	1c000115 	stw	r16,4(r3)
    337c:	dc800e15 	stw	r18,56(sp)
    3380:	dc400d15 	stw	r17,52(sp)
    3384:	1440cb16 	blt	r2,r17,36b4 <___vfprintf_internal_r+0x9d0>
    3388:	d8814a17 	ldw	r2,1320(sp)
    338c:	d9414517 	ldw	r5,1300(sp)
    3390:	1140010e 	bge	r2,r5,3398 <___vfprintf_internal_r+0x6b4>
    3394:	2805883a 	mov	r2,r5
    3398:	d9814b17 	ldw	r6,1324(sp)
    339c:	308d883a 	add	r6,r6,r2
    33a0:	d9814b15 	stw	r6,1324(sp)
    33a4:	90013b1e 	bne	r18,zero,3894 <___vfprintf_internal_r+0xbb0>
    33a8:	d9c14017 	ldw	r7,1280(sp)
    33ac:	dd401904 	addi	r21,sp,100
    33b0:	d8000d15 	stw	zero,52(sp)
    33b4:	003ea706 	br	2e54 <___vfprintf_internal_r+0x170>
    33b8:	d8800e17 	ldw	r2,56(sp)
    33bc:	10053f1e 	bne	r2,zero,48bc <___vfprintf_internal_r+0x1bd8>
    33c0:	d8000d15 	stw	zero,52(sp)
    33c4:	b080030b 	ldhu	r2,12(r22)
    33c8:	1080100c 	andi	r2,r2,64
    33cc:	103e8726 	beq	r2,zero,2dec <___vfprintf_internal_r+0x108>
    33d0:	00bfffc4 	movi	r2,-1
    33d4:	d8814b15 	stw	r2,1324(sp)
    33d8:	003e8406 	br	2dec <___vfprintf_internal_r+0x108>
    33dc:	d9814d17 	ldw	r6,1332(sp)
    33e0:	00801944 	movi	r2,101
    33e4:	11806e16 	blt	r2,r6,35a0 <___vfprintf_internal_r+0x8bc>
    33e8:	d9414717 	ldw	r5,1308(sp)
    33ec:	00c00044 	movi	r3,1
    33f0:	1943430e 	bge	r3,r5,4100 <___vfprintf_internal_r+0x141c>
    33f4:	d8814117 	ldw	r2,1284(sp)
    33f8:	94800044 	addi	r18,r18,1
    33fc:	8c400044 	addi	r17,r17,1
    3400:	a8800015 	stw	r2,0(r21)
    3404:	008001c4 	movi	r2,7
    3408:	a8c00115 	stw	r3,4(r21)
    340c:	dc800e15 	stw	r18,56(sp)
    3410:	dc400d15 	stw	r17,52(sp)
    3414:	1441ca16 	blt	r2,r17,3b40 <___vfprintf_internal_r+0xe5c>
    3418:	a8c00204 	addi	r3,r21,8
    341c:	d9014917 	ldw	r4,1316(sp)
    3420:	00800044 	movi	r2,1
    3424:	94800044 	addi	r18,r18,1
    3428:	8c400044 	addi	r17,r17,1
    342c:	18800115 	stw	r2,4(r3)
    3430:	008001c4 	movi	r2,7
    3434:	19000015 	stw	r4,0(r3)
    3438:	dc800e15 	stw	r18,56(sp)
    343c:	dc400d15 	stw	r17,52(sp)
    3440:	1441b616 	blt	r2,r17,3b1c <___vfprintf_internal_r+0xe38>
    3444:	1cc00204 	addi	r19,r3,8
    3448:	d9014217 	ldw	r4,1288(sp)
    344c:	d9414317 	ldw	r5,1292(sp)
    3450:	000d883a 	mov	r6,zero
    3454:	000f883a 	mov	r7,zero
    3458:	000b4700 	call	b470 <__nedf2>
    345c:	10017426 	beq	r2,zero,3a30 <___vfprintf_internal_r+0xd4c>
    3460:	d9414717 	ldw	r5,1308(sp)
    3464:	d9814117 	ldw	r6,1284(sp)
    3468:	8c400044 	addi	r17,r17,1
    346c:	2c85883a 	add	r2,r5,r18
    3470:	14bfffc4 	addi	r18,r2,-1
    3474:	28bfffc4 	addi	r2,r5,-1
    3478:	30c00044 	addi	r3,r6,1
    347c:	98800115 	stw	r2,4(r19)
    3480:	008001c4 	movi	r2,7
    3484:	98c00015 	stw	r3,0(r19)
    3488:	dc800e15 	stw	r18,56(sp)
    348c:	dc400d15 	stw	r17,52(sp)
    3490:	14418e16 	blt	r2,r17,3acc <___vfprintf_internal_r+0xde8>
    3494:	9cc00204 	addi	r19,r19,8
    3498:	d9414817 	ldw	r5,1312(sp)
    349c:	d8800804 	addi	r2,sp,32
    34a0:	8c400044 	addi	r17,r17,1
    34a4:	9165883a 	add	r18,r18,r5
    34a8:	98800015 	stw	r2,0(r19)
    34ac:	008001c4 	movi	r2,7
    34b0:	99400115 	stw	r5,4(r19)
    34b4:	dc800e15 	stw	r18,56(sp)
    34b8:	dc400d15 	stw	r17,52(sp)
    34bc:	1440ed16 	blt	r2,r17,3874 <___vfprintf_internal_r+0xb90>
    34c0:	98c00204 	addi	r3,r19,8
    34c4:	003f8506 	br	32dc <___vfprintf_internal_r+0x5f8>
    34c8:	d9814a17 	ldw	r6,1320(sp)
    34cc:	d8814517 	ldw	r2,1300(sp)
    34d0:	30a1c83a 	sub	r16,r6,r2
    34d4:	043f4b0e 	bge	zero,r16,3204 <___vfprintf_internal_r+0x520>
    34d8:	00800404 	movi	r2,16
    34dc:	1404340e 	bge	r2,r16,45b0 <___vfprintf_internal_r+0x18cc>
    34e0:	1027883a 	mov	r19,r2
    34e4:	07000074 	movhi	fp,1
    34e8:	e7089884 	addi	fp,fp,8802
    34ec:	050001c4 	movi	r20,7
    34f0:	00000306 	br	3500 <___vfprintf_internal_r+0x81c>
    34f4:	843ffc04 	addi	r16,r16,-16
    34f8:	ad400204 	addi	r21,r21,8
    34fc:	9c00130e 	bge	r19,r16,354c <___vfprintf_internal_r+0x868>
    3500:	94800404 	addi	r18,r18,16
    3504:	8c400044 	addi	r17,r17,1
    3508:	af000015 	stw	fp,0(r21)
    350c:	acc00115 	stw	r19,4(r21)
    3510:	dc800e15 	stw	r18,56(sp)
    3514:	dc400d15 	stw	r17,52(sp)
    3518:	a47ff60e 	bge	r20,r17,34f4 <___vfprintf_internal_r+0x810>
    351c:	d9014f17 	ldw	r4,1340(sp)
    3520:	b00b883a 	mov	r5,r22
    3524:	d9800c04 	addi	r6,sp,48
    3528:	d9c15115 	stw	r7,1348(sp)
    352c:	0002c8c0 	call	2c8c <__sprint_r>
    3530:	d9c15117 	ldw	r7,1348(sp)
    3534:	103fa31e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3538:	843ffc04 	addi	r16,r16,-16
    353c:	dc800e17 	ldw	r18,56(sp)
    3540:	dc400d17 	ldw	r17,52(sp)
    3544:	dd401904 	addi	r21,sp,100
    3548:	9c3fed16 	blt	r19,r16,3500 <___vfprintf_internal_r+0x81c>
    354c:	9425883a 	add	r18,r18,r16
    3550:	8c400044 	addi	r17,r17,1
    3554:	008001c4 	movi	r2,7
    3558:	af000015 	stw	fp,0(r21)
    355c:	ac000115 	stw	r16,4(r21)
    3560:	dc800e15 	stw	r18,56(sp)
    3564:	dc400d15 	stw	r17,52(sp)
    3568:	14416116 	blt	r2,r17,3af0 <___vfprintf_internal_r+0xe0c>
    356c:	ad400204 	addi	r21,r21,8
    3570:	003f2406 	br	3204 <___vfprintf_internal_r+0x520>
    3574:	d9014f17 	ldw	r4,1340(sp)
    3578:	00067540 	call	6754 <__sinit>
    357c:	d9c15117 	ldw	r7,1348(sp)
    3580:	003def06 	br	2d40 <___vfprintf_internal_r+0x5c>
    3584:	d9014f17 	ldw	r4,1340(sp)
    3588:	b00b883a 	mov	r5,r22
    358c:	d9c15115 	stw	r7,1348(sp)
    3590:	0004bb40 	call	4bb4 <__swsetup_r>
    3594:	d9c15117 	ldw	r7,1348(sp)
    3598:	103dee26 	beq	r2,zero,2d54 <___vfprintf_internal_r+0x70>
    359c:	003f8c06 	br	33d0 <___vfprintf_internal_r+0x6ec>
    35a0:	d9014217 	ldw	r4,1288(sp)
    35a4:	d9414317 	ldw	r5,1292(sp)
    35a8:	000d883a 	mov	r6,zero
    35ac:	000f883a 	mov	r7,zero
    35b0:	000b3e80 	call	b3e8 <__eqdf2>
    35b4:	1000f21e 	bne	r2,zero,3980 <___vfprintf_internal_r+0xc9c>
    35b8:	00800074 	movhi	r2,1
    35bc:	10889804 	addi	r2,r2,8800
    35c0:	94800044 	addi	r18,r18,1
    35c4:	8c400044 	addi	r17,r17,1
    35c8:	a8800015 	stw	r2,0(r21)
    35cc:	00c00044 	movi	r3,1
    35d0:	008001c4 	movi	r2,7
    35d4:	a8c00115 	stw	r3,4(r21)
    35d8:	dc800e15 	stw	r18,56(sp)
    35dc:	dc400d15 	stw	r17,52(sp)
    35e0:	1442fa16 	blt	r2,r17,41cc <___vfprintf_internal_r+0x14e8>
    35e4:	a8c00204 	addi	r3,r21,8
    35e8:	d8800517 	ldw	r2,20(sp)
    35ec:	d9014717 	ldw	r4,1308(sp)
    35f0:	11015c0e 	bge	r2,r4,3b64 <___vfprintf_internal_r+0xe80>
    35f4:	dc400d17 	ldw	r17,52(sp)
    35f8:	d9814917 	ldw	r6,1316(sp)
    35fc:	00800044 	movi	r2,1
    3600:	94800044 	addi	r18,r18,1
    3604:	8c400044 	addi	r17,r17,1
    3608:	18800115 	stw	r2,4(r3)
    360c:	008001c4 	movi	r2,7
    3610:	19800015 	stw	r6,0(r3)
    3614:	dc800e15 	stw	r18,56(sp)
    3618:	dc400d15 	stw	r17,52(sp)
    361c:	14431016 	blt	r2,r17,4260 <___vfprintf_internal_r+0x157c>
    3620:	18c00204 	addi	r3,r3,8
    3624:	d8814717 	ldw	r2,1308(sp)
    3628:	143fffc4 	addi	r16,r2,-1
    362c:	043f2b0e 	bge	zero,r16,32dc <___vfprintf_internal_r+0x5f8>
    3630:	00800404 	movi	r2,16
    3634:	1402a20e 	bge	r2,r16,40c0 <___vfprintf_internal_r+0x13dc>
    3638:	dc400d17 	ldw	r17,52(sp)
    363c:	1027883a 	mov	r19,r2
    3640:	07000074 	movhi	fp,1
    3644:	e7089884 	addi	fp,fp,8802
    3648:	050001c4 	movi	r20,7
    364c:	00000306 	br	365c <___vfprintf_internal_r+0x978>
    3650:	18c00204 	addi	r3,r3,8
    3654:	843ffc04 	addi	r16,r16,-16
    3658:	9c029c0e 	bge	r19,r16,40cc <___vfprintf_internal_r+0x13e8>
    365c:	94800404 	addi	r18,r18,16
    3660:	8c400044 	addi	r17,r17,1
    3664:	1f000015 	stw	fp,0(r3)
    3668:	1cc00115 	stw	r19,4(r3)
    366c:	dc800e15 	stw	r18,56(sp)
    3670:	dc400d15 	stw	r17,52(sp)
    3674:	a47ff60e 	bge	r20,r17,3650 <___vfprintf_internal_r+0x96c>
    3678:	d9014f17 	ldw	r4,1340(sp)
    367c:	b00b883a 	mov	r5,r22
    3680:	d9800c04 	addi	r6,sp,48
    3684:	0002c8c0 	call	2c8c <__sprint_r>
    3688:	103f4e1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    368c:	dc800e17 	ldw	r18,56(sp)
    3690:	dc400d17 	ldw	r17,52(sp)
    3694:	d8c01904 	addi	r3,sp,100
    3698:	003fee06 	br	3654 <___vfprintf_internal_r+0x970>
    369c:	d8802c0b 	ldhu	r2,176(sp)
    36a0:	00ffffc4 	movi	r3,-1
    36a4:	d8c14b15 	stw	r3,1324(sp)
    36a8:	1080100c 	andi	r2,r2,64
    36ac:	103dcc1e 	bne	r2,zero,2de0 <___vfprintf_internal_r+0xfc>
    36b0:	003dce06 	br	2dec <___vfprintf_internal_r+0x108>
    36b4:	d9014f17 	ldw	r4,1340(sp)
    36b8:	b00b883a 	mov	r5,r22
    36bc:	d9800c04 	addi	r6,sp,48
    36c0:	0002c8c0 	call	2c8c <__sprint_r>
    36c4:	103f3f1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    36c8:	dc800e17 	ldw	r18,56(sp)
    36cc:	003f2e06 	br	3388 <___vfprintf_internal_r+0x6a4>
    36d0:	d9414c17 	ldw	r5,1328(sp)
    36d4:	29400414 	ori	r5,r5,16
    36d8:	d9414c15 	stw	r5,1328(sp)
    36dc:	d9814c17 	ldw	r6,1328(sp)
    36e0:	3080080c 	andi	r2,r6,32
    36e4:	10014f1e 	bne	r2,zero,3c24 <___vfprintf_internal_r+0xf40>
    36e8:	d8c14c17 	ldw	r3,1328(sp)
    36ec:	1880040c 	andi	r2,r3,16
    36f0:	1002ea1e 	bne	r2,zero,429c <___vfprintf_internal_r+0x15b8>
    36f4:	d9014c17 	ldw	r4,1328(sp)
    36f8:	2080100c 	andi	r2,r4,64
    36fc:	1002e726 	beq	r2,zero,429c <___vfprintf_internal_r+0x15b8>
    3700:	3880000f 	ldh	r2,0(r7)
    3704:	39c00104 	addi	r7,r7,4
    3708:	d9c14015 	stw	r7,1280(sp)
    370c:	1023d7fa 	srai	r17,r2,31
    3710:	1021883a 	mov	r16,r2
    3714:	88037216 	blt	r17,zero,44e0 <___vfprintf_internal_r+0x17fc>
    3718:	01000044 	movi	r4,1
    371c:	98000416 	blt	r19,zero,3730 <___vfprintf_internal_r+0xa4c>
    3720:	d8c14c17 	ldw	r3,1328(sp)
    3724:	00bfdfc4 	movi	r2,-129
    3728:	1886703a 	and	r3,r3,r2
    372c:	d8c14c15 	stw	r3,1328(sp)
    3730:	8444b03a 	or	r2,r16,r17
    3734:	1002261e 	bne	r2,zero,3fd0 <___vfprintf_internal_r+0x12ec>
    3738:	9802251e 	bne	r19,zero,3fd0 <___vfprintf_internal_r+0x12ec>
    373c:	20803fcc 	andi	r2,r4,255
    3740:	10029b26 	beq	r2,zero,41b0 <___vfprintf_internal_r+0x14cc>
    3744:	d8c01904 	addi	r3,sp,100
    3748:	dd000f04 	addi	r20,sp,60
    374c:	d8c14115 	stw	r3,1284(sp)
    3750:	d8c14117 	ldw	r3,1284(sp)
    3754:	dcc14515 	stw	r19,1300(sp)
    3758:	a0c5c83a 	sub	r2,r20,r3
    375c:	11c00a04 	addi	r7,r2,40
    3760:	99c0010e 	bge	r19,r7,3768 <___vfprintf_internal_r+0xa84>
    3764:	d9c14515 	stw	r7,1300(sp)
    3768:	dcc14615 	stw	r19,1304(sp)
    376c:	d8800407 	ldb	r2,16(sp)
    3770:	103e4c26 	beq	r2,zero,30a4 <___vfprintf_internal_r+0x3c0>
    3774:	d8814517 	ldw	r2,1300(sp)
    3778:	10800044 	addi	r2,r2,1
    377c:	d8814515 	stw	r2,1300(sp)
    3780:	003e4806 	br	30a4 <___vfprintf_internal_r+0x3c0>
    3784:	d9814c17 	ldw	r6,1328(sp)
    3788:	31800414 	ori	r6,r6,16
    378c:	d9814c15 	stw	r6,1328(sp)
    3790:	d8c14c17 	ldw	r3,1328(sp)
    3794:	1880080c 	andi	r2,r3,32
    3798:	1001271e 	bne	r2,zero,3c38 <___vfprintf_internal_r+0xf54>
    379c:	d9414c17 	ldw	r5,1328(sp)
    37a0:	2880040c 	andi	r2,r5,16
    37a4:	1002b61e 	bne	r2,zero,4280 <___vfprintf_internal_r+0x159c>
    37a8:	d9814c17 	ldw	r6,1328(sp)
    37ac:	3080100c 	andi	r2,r6,64
    37b0:	1002b326 	beq	r2,zero,4280 <___vfprintf_internal_r+0x159c>
    37b4:	3c00000b 	ldhu	r16,0(r7)
    37b8:	0009883a 	mov	r4,zero
    37bc:	39c00104 	addi	r7,r7,4
    37c0:	0023883a 	mov	r17,zero
    37c4:	d9c14015 	stw	r7,1280(sp)
    37c8:	d8000405 	stb	zero,16(sp)
    37cc:	003fd306 	br	371c <___vfprintf_internal_r+0xa38>
    37d0:	d9014c17 	ldw	r4,1328(sp)
    37d4:	21000414 	ori	r4,r4,16
    37d8:	d9014c15 	stw	r4,1328(sp)
    37dc:	d9414c17 	ldw	r5,1328(sp)
    37e0:	2880080c 	andi	r2,r5,32
    37e4:	1001081e 	bne	r2,zero,3c08 <___vfprintf_internal_r+0xf24>
    37e8:	d8c14c17 	ldw	r3,1328(sp)
    37ec:	1880040c 	andi	r2,r3,16
    37f0:	1002b01e 	bne	r2,zero,42b4 <___vfprintf_internal_r+0x15d0>
    37f4:	d9014c17 	ldw	r4,1328(sp)
    37f8:	2080100c 	andi	r2,r4,64
    37fc:	1002ad26 	beq	r2,zero,42b4 <___vfprintf_internal_r+0x15d0>
    3800:	3c00000b 	ldhu	r16,0(r7)
    3804:	01000044 	movi	r4,1
    3808:	39c00104 	addi	r7,r7,4
    380c:	0023883a 	mov	r17,zero
    3810:	d9c14015 	stw	r7,1280(sp)
    3814:	d8000405 	stb	zero,16(sp)
    3818:	003fc006 	br	371c <___vfprintf_internal_r+0xa38>
    381c:	d9014f17 	ldw	r4,1340(sp)
    3820:	b00b883a 	mov	r5,r22
    3824:	d9800c04 	addi	r6,sp,48
    3828:	0002c8c0 	call	2c8c <__sprint_r>
    382c:	103ee51e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3830:	dc800e17 	ldw	r18,56(sp)
    3834:	d8c01904 	addi	r3,sp,100
    3838:	d9814c17 	ldw	r6,1328(sp)
    383c:	3080004c 	andi	r2,r6,1
    3840:	1005003a 	cmpeq	r2,r2,zero
    3844:	103ea51e 	bne	r2,zero,32dc <___vfprintf_internal_r+0x5f8>
    3848:	00800044 	movi	r2,1
    384c:	dc400d17 	ldw	r17,52(sp)
    3850:	18800115 	stw	r2,4(r3)
    3854:	d8814917 	ldw	r2,1316(sp)
    3858:	94800044 	addi	r18,r18,1
    385c:	8c400044 	addi	r17,r17,1
    3860:	18800015 	stw	r2,0(r3)
    3864:	008001c4 	movi	r2,7
    3868:	dc800e15 	stw	r18,56(sp)
    386c:	dc400d15 	stw	r17,52(sp)
    3870:	14421e0e 	bge	r2,r17,40ec <___vfprintf_internal_r+0x1408>
    3874:	d9014f17 	ldw	r4,1340(sp)
    3878:	b00b883a 	mov	r5,r22
    387c:	d9800c04 	addi	r6,sp,48
    3880:	0002c8c0 	call	2c8c <__sprint_r>
    3884:	103ecf1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3888:	dc800e17 	ldw	r18,56(sp)
    388c:	d8c01904 	addi	r3,sp,100
    3890:	003e9206 	br	32dc <___vfprintf_internal_r+0x5f8>
    3894:	d9014f17 	ldw	r4,1340(sp)
    3898:	b00b883a 	mov	r5,r22
    389c:	d9800c04 	addi	r6,sp,48
    38a0:	0002c8c0 	call	2c8c <__sprint_r>
    38a4:	103ec026 	beq	r2,zero,33a8 <___vfprintf_internal_r+0x6c4>
    38a8:	003ec606 	br	33c4 <___vfprintf_internal_r+0x6e0>
    38ac:	d9014f17 	ldw	r4,1340(sp)
    38b0:	b00b883a 	mov	r5,r22
    38b4:	d9800c04 	addi	r6,sp,48
    38b8:	d9c15115 	stw	r7,1348(sp)
    38bc:	0002c8c0 	call	2c8c <__sprint_r>
    38c0:	d9c15117 	ldw	r7,1348(sp)
    38c4:	103ebf1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    38c8:	dc800e17 	ldw	r18,56(sp)
    38cc:	dc400d17 	ldw	r17,52(sp)
    38d0:	dd401904 	addi	r21,sp,100
    38d4:	003e7406 	br	32a8 <___vfprintf_internal_r+0x5c4>
    38d8:	d9014f17 	ldw	r4,1340(sp)
    38dc:	b00b883a 	mov	r5,r22
    38e0:	d9800c04 	addi	r6,sp,48
    38e4:	d9c15115 	stw	r7,1348(sp)
    38e8:	0002c8c0 	call	2c8c <__sprint_r>
    38ec:	d9c15117 	ldw	r7,1348(sp)
    38f0:	103eb41e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    38f4:	dd401904 	addi	r21,sp,100
    38f8:	003d6d06 	br	2eb0 <___vfprintf_internal_r+0x1cc>
    38fc:	d9014f17 	ldw	r4,1340(sp)
    3900:	b00b883a 	mov	r5,r22
    3904:	d9800c04 	addi	r6,sp,48
    3908:	d9c15115 	stw	r7,1348(sp)
    390c:	0002c8c0 	call	2c8c <__sprint_r>
    3910:	d9c15117 	ldw	r7,1348(sp)
    3914:	103eab1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3918:	dc800e17 	ldw	r18,56(sp)
    391c:	dc400d17 	ldw	r17,52(sp)
    3920:	dd401904 	addi	r21,sp,100
    3924:	003e3406 	br	31f8 <___vfprintf_internal_r+0x514>
    3928:	d9014f17 	ldw	r4,1340(sp)
    392c:	b00b883a 	mov	r5,r22
    3930:	d9800c04 	addi	r6,sp,48
    3934:	d9c15115 	stw	r7,1348(sp)
    3938:	0002c8c0 	call	2c8c <__sprint_r>
    393c:	d9c15117 	ldw	r7,1348(sp)
    3940:	103ea01e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3944:	dc800e17 	ldw	r18,56(sp)
    3948:	dc400d17 	ldw	r17,52(sp)
    394c:	dd401904 	addi	r21,sp,100
    3950:	003e1c06 	br	31c4 <___vfprintf_internal_r+0x4e0>
    3954:	d9014f17 	ldw	r4,1340(sp)
    3958:	b00b883a 	mov	r5,r22
    395c:	d9800c04 	addi	r6,sp,48
    3960:	d9c15115 	stw	r7,1348(sp)
    3964:	0002c8c0 	call	2c8c <__sprint_r>
    3968:	d9c15117 	ldw	r7,1348(sp)
    396c:	103e951e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3970:	dc800e17 	ldw	r18,56(sp)
    3974:	dc400d17 	ldw	r17,52(sp)
    3978:	dd401904 	addi	r21,sp,100
    397c:	003e0406 	br	3190 <___vfprintf_internal_r+0x4ac>
    3980:	d9000517 	ldw	r4,20(sp)
    3984:	0102520e 	bge	zero,r4,42d0 <___vfprintf_internal_r+0x15ec>
    3988:	d9814717 	ldw	r6,1308(sp)
    398c:	21807a16 	blt	r4,r6,3b78 <___vfprintf_internal_r+0xe94>
    3990:	d8814117 	ldw	r2,1284(sp)
    3994:	91a5883a 	add	r18,r18,r6
    3998:	8c400044 	addi	r17,r17,1
    399c:	a8800015 	stw	r2,0(r21)
    39a0:	008001c4 	movi	r2,7
    39a4:	a9800115 	stw	r6,4(r21)
    39a8:	dc800e15 	stw	r18,56(sp)
    39ac:	dc400d15 	stw	r17,52(sp)
    39b0:	1442f616 	blt	r2,r17,458c <___vfprintf_internal_r+0x18a8>
    39b4:	a8c00204 	addi	r3,r21,8
    39b8:	d9414717 	ldw	r5,1308(sp)
    39bc:	2161c83a 	sub	r16,r4,r5
    39c0:	043f9d0e 	bge	zero,r16,3838 <___vfprintf_internal_r+0xb54>
    39c4:	00800404 	movi	r2,16
    39c8:	1402130e 	bge	r2,r16,4218 <___vfprintf_internal_r+0x1534>
    39cc:	dc400d17 	ldw	r17,52(sp)
    39d0:	1027883a 	mov	r19,r2
    39d4:	07000074 	movhi	fp,1
    39d8:	e7089884 	addi	fp,fp,8802
    39dc:	050001c4 	movi	r20,7
    39e0:	00000306 	br	39f0 <___vfprintf_internal_r+0xd0c>
    39e4:	18c00204 	addi	r3,r3,8
    39e8:	843ffc04 	addi	r16,r16,-16
    39ec:	9c020d0e 	bge	r19,r16,4224 <___vfprintf_internal_r+0x1540>
    39f0:	94800404 	addi	r18,r18,16
    39f4:	8c400044 	addi	r17,r17,1
    39f8:	1f000015 	stw	fp,0(r3)
    39fc:	1cc00115 	stw	r19,4(r3)
    3a00:	dc800e15 	stw	r18,56(sp)
    3a04:	dc400d15 	stw	r17,52(sp)
    3a08:	a47ff60e 	bge	r20,r17,39e4 <___vfprintf_internal_r+0xd00>
    3a0c:	d9014f17 	ldw	r4,1340(sp)
    3a10:	b00b883a 	mov	r5,r22
    3a14:	d9800c04 	addi	r6,sp,48
    3a18:	0002c8c0 	call	2c8c <__sprint_r>
    3a1c:	103e691e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3a20:	dc800e17 	ldw	r18,56(sp)
    3a24:	dc400d17 	ldw	r17,52(sp)
    3a28:	d8c01904 	addi	r3,sp,100
    3a2c:	003fee06 	br	39e8 <___vfprintf_internal_r+0xd04>
    3a30:	d8814717 	ldw	r2,1308(sp)
    3a34:	143fffc4 	addi	r16,r2,-1
    3a38:	043e970e 	bge	zero,r16,3498 <___vfprintf_internal_r+0x7b4>
    3a3c:	00800404 	movi	r2,16
    3a40:	1400180e 	bge	r2,r16,3aa4 <___vfprintf_internal_r+0xdc0>
    3a44:	1029883a 	mov	r20,r2
    3a48:	07000074 	movhi	fp,1
    3a4c:	e7089884 	addi	fp,fp,8802
    3a50:	054001c4 	movi	r21,7
    3a54:	00000306 	br	3a64 <___vfprintf_internal_r+0xd80>
    3a58:	9cc00204 	addi	r19,r19,8
    3a5c:	843ffc04 	addi	r16,r16,-16
    3a60:	a400120e 	bge	r20,r16,3aac <___vfprintf_internal_r+0xdc8>
    3a64:	94800404 	addi	r18,r18,16
    3a68:	8c400044 	addi	r17,r17,1
    3a6c:	9f000015 	stw	fp,0(r19)
    3a70:	9d000115 	stw	r20,4(r19)
    3a74:	dc800e15 	stw	r18,56(sp)
    3a78:	dc400d15 	stw	r17,52(sp)
    3a7c:	ac7ff60e 	bge	r21,r17,3a58 <___vfprintf_internal_r+0xd74>
    3a80:	d9014f17 	ldw	r4,1340(sp)
    3a84:	b00b883a 	mov	r5,r22
    3a88:	d9800c04 	addi	r6,sp,48
    3a8c:	0002c8c0 	call	2c8c <__sprint_r>
    3a90:	103e4c1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3a94:	dc800e17 	ldw	r18,56(sp)
    3a98:	dc400d17 	ldw	r17,52(sp)
    3a9c:	dcc01904 	addi	r19,sp,100
    3aa0:	003fee06 	br	3a5c <___vfprintf_internal_r+0xd78>
    3aa4:	07000074 	movhi	fp,1
    3aa8:	e7089884 	addi	fp,fp,8802
    3aac:	9425883a 	add	r18,r18,r16
    3ab0:	8c400044 	addi	r17,r17,1
    3ab4:	008001c4 	movi	r2,7
    3ab8:	9f000015 	stw	fp,0(r19)
    3abc:	9c000115 	stw	r16,4(r19)
    3ac0:	dc800e15 	stw	r18,56(sp)
    3ac4:	dc400d15 	stw	r17,52(sp)
    3ac8:	147e720e 	bge	r2,r17,3494 <___vfprintf_internal_r+0x7b0>
    3acc:	d9014f17 	ldw	r4,1340(sp)
    3ad0:	b00b883a 	mov	r5,r22
    3ad4:	d9800c04 	addi	r6,sp,48
    3ad8:	0002c8c0 	call	2c8c <__sprint_r>
    3adc:	103e391e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3ae0:	dc800e17 	ldw	r18,56(sp)
    3ae4:	dc400d17 	ldw	r17,52(sp)
    3ae8:	dcc01904 	addi	r19,sp,100
    3aec:	003e6a06 	br	3498 <___vfprintf_internal_r+0x7b4>
    3af0:	d9014f17 	ldw	r4,1340(sp)
    3af4:	b00b883a 	mov	r5,r22
    3af8:	d9800c04 	addi	r6,sp,48
    3afc:	d9c15115 	stw	r7,1348(sp)
    3b00:	0002c8c0 	call	2c8c <__sprint_r>
    3b04:	d9c15117 	ldw	r7,1348(sp)
    3b08:	103e2e1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3b0c:	dc800e17 	ldw	r18,56(sp)
    3b10:	dc400d17 	ldw	r17,52(sp)
    3b14:	dd401904 	addi	r21,sp,100
    3b18:	003dba06 	br	3204 <___vfprintf_internal_r+0x520>
    3b1c:	d9014f17 	ldw	r4,1340(sp)
    3b20:	b00b883a 	mov	r5,r22
    3b24:	d9800c04 	addi	r6,sp,48
    3b28:	0002c8c0 	call	2c8c <__sprint_r>
    3b2c:	103e251e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3b30:	dc800e17 	ldw	r18,56(sp)
    3b34:	dc400d17 	ldw	r17,52(sp)
    3b38:	dcc01904 	addi	r19,sp,100
    3b3c:	003e4206 	br	3448 <___vfprintf_internal_r+0x764>
    3b40:	d9014f17 	ldw	r4,1340(sp)
    3b44:	b00b883a 	mov	r5,r22
    3b48:	d9800c04 	addi	r6,sp,48
    3b4c:	0002c8c0 	call	2c8c <__sprint_r>
    3b50:	103e1c1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    3b54:	dc800e17 	ldw	r18,56(sp)
    3b58:	dc400d17 	ldw	r17,52(sp)
    3b5c:	d8c01904 	addi	r3,sp,100
    3b60:	003e2e06 	br	341c <___vfprintf_internal_r+0x738>
    3b64:	d9414c17 	ldw	r5,1328(sp)
    3b68:	2880004c 	andi	r2,r5,1
    3b6c:	1005003a 	cmpeq	r2,r2,zero
    3b70:	103dda1e 	bne	r2,zero,32dc <___vfprintf_internal_r+0x5f8>
    3b74:	003e9f06 	br	35f4 <___vfprintf_internal_r+0x910>
    3b78:	d8c14117 	ldw	r3,1284(sp)
    3b7c:	9125883a 	add	r18,r18,r4
    3b80:	8c400044 	addi	r17,r17,1
    3b84:	008001c4 	movi	r2,7
    3b88:	a8c00015 	stw	r3,0(r21)
    3b8c:	a9000115 	stw	r4,4(r21)
    3b90:	dc800e15 	stw	r18,56(sp)
    3b94:	dc400d15 	stw	r17,52(sp)
    3b98:	14426616 	blt	r2,r17,4534 <___vfprintf_internal_r+0x1850>
    3b9c:	a8c00204 	addi	r3,r21,8
    3ba0:	d9414917 	ldw	r5,1316(sp)
    3ba4:	00800044 	movi	r2,1
    3ba8:	94800044 	addi	r18,r18,1
    3bac:	8c400044 	addi	r17,r17,1
    3bb0:	18800115 	stw	r2,4(r3)
    3bb4:	008001c4 	movi	r2,7
    3bb8:	19400015 	stw	r5,0(r3)
    3bbc:	dc800e15 	stw	r18,56(sp)
    3bc0:	dc400d15 	stw	r17,52(sp)
    3bc4:	2021883a 	mov	r16,r4
    3bc8:	14425016 	blt	r2,r17,450c <___vfprintf_internal_r+0x1828>
    3bcc:	19400204 	addi	r5,r3,8
    3bd0:	d9814717 	ldw	r6,1308(sp)
    3bd4:	8c400044 	addi	r17,r17,1
    3bd8:	dc400d15 	stw	r17,52(sp)
    3bdc:	3107c83a 	sub	r3,r6,r4
    3be0:	d9014117 	ldw	r4,1284(sp)
    3be4:	90e5883a 	add	r18,r18,r3
    3be8:	28c00115 	stw	r3,4(r5)
    3bec:	8105883a 	add	r2,r16,r4
    3bf0:	28800015 	stw	r2,0(r5)
    3bf4:	008001c4 	movi	r2,7
    3bf8:	dc800e15 	stw	r18,56(sp)
    3bfc:	147f1d16 	blt	r2,r17,3874 <___vfprintf_internal_r+0xb90>
    3c00:	28c00204 	addi	r3,r5,8
    3c04:	003db506 	br	32dc <___vfprintf_internal_r+0x5f8>
    3c08:	3c000017 	ldw	r16,0(r7)
    3c0c:	3c400117 	ldw	r17,4(r7)
    3c10:	39800204 	addi	r6,r7,8
    3c14:	01000044 	movi	r4,1
    3c18:	d9814015 	stw	r6,1280(sp)
    3c1c:	d8000405 	stb	zero,16(sp)
    3c20:	003ebe06 	br	371c <___vfprintf_internal_r+0xa38>
    3c24:	3c000017 	ldw	r16,0(r7)
    3c28:	3c400117 	ldw	r17,4(r7)
    3c2c:	38800204 	addi	r2,r7,8
    3c30:	d8814015 	stw	r2,1280(sp)
    3c34:	003eb706 	br	3714 <___vfprintf_internal_r+0xa30>
    3c38:	3c000017 	ldw	r16,0(r7)
    3c3c:	3c400117 	ldw	r17,4(r7)
    3c40:	39000204 	addi	r4,r7,8
    3c44:	d9014015 	stw	r4,1280(sp)
    3c48:	0009883a 	mov	r4,zero
    3c4c:	d8000405 	stb	zero,16(sp)
    3c50:	003eb206 	br	371c <___vfprintf_internal_r+0xa38>
    3c54:	38c00017 	ldw	r3,0(r7)
    3c58:	39c00104 	addi	r7,r7,4
    3c5c:	d8c14a15 	stw	r3,1320(sp)
    3c60:	1800d10e 	bge	r3,zero,3fa8 <___vfprintf_internal_r+0x12c4>
    3c64:	00c7c83a 	sub	r3,zero,r3
    3c68:	d8c14a15 	stw	r3,1320(sp)
    3c6c:	d9014c17 	ldw	r4,1328(sp)
    3c70:	b8c00007 	ldb	r3,0(r23)
    3c74:	21000114 	ori	r4,r4,4
    3c78:	d9014c15 	stw	r4,1328(sp)
    3c7c:	003c9806 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3c80:	d9814c17 	ldw	r6,1328(sp)
    3c84:	3080080c 	andi	r2,r6,32
    3c88:	1001f026 	beq	r2,zero,444c <___vfprintf_internal_r+0x1768>
    3c8c:	d9014b17 	ldw	r4,1324(sp)
    3c90:	38800017 	ldw	r2,0(r7)
    3c94:	39c00104 	addi	r7,r7,4
    3c98:	d9c14015 	stw	r7,1280(sp)
    3c9c:	2007d7fa 	srai	r3,r4,31
    3ca0:	d9c14017 	ldw	r7,1280(sp)
    3ca4:	11000015 	stw	r4,0(r2)
    3ca8:	10c00115 	stw	r3,4(r2)
    3cac:	003c6906 	br	2e54 <___vfprintf_internal_r+0x170>
    3cb0:	b8c00007 	ldb	r3,0(r23)
    3cb4:	00801b04 	movi	r2,108
    3cb8:	18824f26 	beq	r3,r2,45f8 <___vfprintf_internal_r+0x1914>
    3cbc:	d9414c17 	ldw	r5,1328(sp)
    3cc0:	29400414 	ori	r5,r5,16
    3cc4:	d9414c15 	stw	r5,1328(sp)
    3cc8:	003c8506 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3ccc:	d9814c17 	ldw	r6,1328(sp)
    3cd0:	b8c00007 	ldb	r3,0(r23)
    3cd4:	31800814 	ori	r6,r6,32
    3cd8:	d9814c15 	stw	r6,1328(sp)
    3cdc:	003c8006 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3ce0:	d8814c17 	ldw	r2,1328(sp)
    3ce4:	3c000017 	ldw	r16,0(r7)
    3ce8:	00c01e04 	movi	r3,120
    3cec:	10800094 	ori	r2,r2,2
    3cf0:	d8814c15 	stw	r2,1328(sp)
    3cf4:	39c00104 	addi	r7,r7,4
    3cf8:	01400074 	movhi	r5,1
    3cfc:	29488104 	addi	r5,r5,8708
    3d00:	00800c04 	movi	r2,48
    3d04:	0023883a 	mov	r17,zero
    3d08:	01000084 	movi	r4,2
    3d0c:	d9c14015 	stw	r7,1280(sp)
    3d10:	d8c14d15 	stw	r3,1332(sp)
    3d14:	d9414415 	stw	r5,1296(sp)
    3d18:	d8800445 	stb	r2,17(sp)
    3d1c:	d8c00485 	stb	r3,18(sp)
    3d20:	d8000405 	stb	zero,16(sp)
    3d24:	003e7d06 	br	371c <___vfprintf_internal_r+0xa38>
    3d28:	d8814c17 	ldw	r2,1328(sp)
    3d2c:	b8c00007 	ldb	r3,0(r23)
    3d30:	10801014 	ori	r2,r2,64
    3d34:	d8814c15 	stw	r2,1328(sp)
    3d38:	003c6906 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3d3c:	d9414c17 	ldw	r5,1328(sp)
    3d40:	2880020c 	andi	r2,r5,8
    3d44:	1001df26 	beq	r2,zero,44c4 <___vfprintf_internal_r+0x17e0>
    3d48:	39800017 	ldw	r6,0(r7)
    3d4c:	38800204 	addi	r2,r7,8
    3d50:	d8814015 	stw	r2,1280(sp)
    3d54:	d9814215 	stw	r6,1288(sp)
    3d58:	39c00117 	ldw	r7,4(r7)
    3d5c:	d9c14315 	stw	r7,1292(sp)
    3d60:	d9014217 	ldw	r4,1288(sp)
    3d64:	d9414317 	ldw	r5,1292(sp)
    3d68:	000954c0 	call	954c <__isinfd>
    3d6c:	10021726 	beq	r2,zero,45cc <___vfprintf_internal_r+0x18e8>
    3d70:	d9014217 	ldw	r4,1288(sp)
    3d74:	d9414317 	ldw	r5,1292(sp)
    3d78:	000d883a 	mov	r6,zero
    3d7c:	000f883a 	mov	r7,zero
    3d80:	000b6080 	call	b608 <__ltdf2>
    3d84:	1002ca16 	blt	r2,zero,48b0 <___vfprintf_internal_r+0x1bcc>
    3d88:	d9414d17 	ldw	r5,1332(sp)
    3d8c:	008011c4 	movi	r2,71
    3d90:	11420a16 	blt	r2,r5,45bc <___vfprintf_internal_r+0x18d8>
    3d94:	01800074 	movhi	r6,1
    3d98:	31888604 	addi	r6,r6,8728
    3d9c:	d9814115 	stw	r6,1284(sp)
    3da0:	d9014c17 	ldw	r4,1328(sp)
    3da4:	00c000c4 	movi	r3,3
    3da8:	00bfdfc4 	movi	r2,-129
    3dac:	2088703a 	and	r4,r4,r2
    3db0:	180f883a 	mov	r7,r3
    3db4:	d8c14515 	stw	r3,1300(sp)
    3db8:	d9014c15 	stw	r4,1328(sp)
    3dbc:	d8014615 	stw	zero,1304(sp)
    3dc0:	003e6a06 	br	376c <___vfprintf_internal_r+0xa88>
    3dc4:	38800017 	ldw	r2,0(r7)
    3dc8:	00c00044 	movi	r3,1
    3dcc:	39c00104 	addi	r7,r7,4
    3dd0:	d9c14015 	stw	r7,1280(sp)
    3dd4:	d9000f04 	addi	r4,sp,60
    3dd8:	180f883a 	mov	r7,r3
    3ddc:	d8c14515 	stw	r3,1300(sp)
    3de0:	d9014115 	stw	r4,1284(sp)
    3de4:	d8800f05 	stb	r2,60(sp)
    3de8:	d8000405 	stb	zero,16(sp)
    3dec:	003cac06 	br	30a0 <___vfprintf_internal_r+0x3bc>
    3df0:	01400074 	movhi	r5,1
    3df4:	29488c04 	addi	r5,r5,8752
    3df8:	d9414415 	stw	r5,1296(sp)
    3dfc:	d9814c17 	ldw	r6,1328(sp)
    3e00:	3080080c 	andi	r2,r6,32
    3e04:	1000f926 	beq	r2,zero,41ec <___vfprintf_internal_r+0x1508>
    3e08:	3c000017 	ldw	r16,0(r7)
    3e0c:	3c400117 	ldw	r17,4(r7)
    3e10:	38800204 	addi	r2,r7,8
    3e14:	d8814015 	stw	r2,1280(sp)
    3e18:	d9414c17 	ldw	r5,1328(sp)
    3e1c:	2880004c 	andi	r2,r5,1
    3e20:	1005003a 	cmpeq	r2,r2,zero
    3e24:	1000b31e 	bne	r2,zero,40f4 <___vfprintf_internal_r+0x1410>
    3e28:	8444b03a 	or	r2,r16,r17
    3e2c:	1000b126 	beq	r2,zero,40f4 <___vfprintf_internal_r+0x1410>
    3e30:	d9814d17 	ldw	r6,1332(sp)
    3e34:	29400094 	ori	r5,r5,2
    3e38:	00800c04 	movi	r2,48
    3e3c:	01000084 	movi	r4,2
    3e40:	d9414c15 	stw	r5,1328(sp)
    3e44:	d8800445 	stb	r2,17(sp)
    3e48:	d9800485 	stb	r6,18(sp)
    3e4c:	d8000405 	stb	zero,16(sp)
    3e50:	003e3206 	br	371c <___vfprintf_internal_r+0xa38>
    3e54:	01800074 	movhi	r6,1
    3e58:	31888104 	addi	r6,r6,8708
    3e5c:	d9814415 	stw	r6,1296(sp)
    3e60:	003fe606 	br	3dfc <___vfprintf_internal_r+0x1118>
    3e64:	00800ac4 	movi	r2,43
    3e68:	d8800405 	stb	r2,16(sp)
    3e6c:	b8c00007 	ldb	r3,0(r23)
    3e70:	003c1b06 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3e74:	d8814c17 	ldw	r2,1328(sp)
    3e78:	b8c00007 	ldb	r3,0(r23)
    3e7c:	10800054 	ori	r2,r2,1
    3e80:	d8814c15 	stw	r2,1328(sp)
    3e84:	003c1606 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3e88:	d8800407 	ldb	r2,16(sp)
    3e8c:	1000461e 	bne	r2,zero,3fa8 <___vfprintf_internal_r+0x12c4>
    3e90:	00800804 	movi	r2,32
    3e94:	d8800405 	stb	r2,16(sp)
    3e98:	b8c00007 	ldb	r3,0(r23)
    3e9c:	003c1006 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3ea0:	d9814c17 	ldw	r6,1328(sp)
    3ea4:	b8c00007 	ldb	r3,0(r23)
    3ea8:	31800214 	ori	r6,r6,8
    3eac:	d9814c15 	stw	r6,1328(sp)
    3eb0:	003c0b06 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3eb4:	0007883a 	mov	r3,zero
    3eb8:	01000244 	movi	r4,9
    3ebc:	188002a4 	muli	r2,r3,10
    3ec0:	b8c00007 	ldb	r3,0(r23)
    3ec4:	d9814d17 	ldw	r6,1332(sp)
    3ec8:	bdc00044 	addi	r23,r23,1
    3ecc:	d8c14d15 	stw	r3,1332(sp)
    3ed0:	d9414d17 	ldw	r5,1332(sp)
    3ed4:	3085883a 	add	r2,r6,r2
    3ed8:	10fff404 	addi	r3,r2,-48
    3edc:	28bff404 	addi	r2,r5,-48
    3ee0:	20bff62e 	bgeu	r4,r2,3ebc <___vfprintf_internal_r+0x11d8>
    3ee4:	d8c14a15 	stw	r3,1320(sp)
    3ee8:	003bff06 	br	2ee8 <___vfprintf_internal_r+0x204>
    3eec:	d9414c17 	ldw	r5,1328(sp)
    3ef0:	b8c00007 	ldb	r3,0(r23)
    3ef4:	29402014 	ori	r5,r5,128
    3ef8:	d9414c15 	stw	r5,1328(sp)
    3efc:	003bf806 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3f00:	b8c00007 	ldb	r3,0(r23)
    3f04:	00800a84 	movi	r2,42
    3f08:	bdc00044 	addi	r23,r23,1
    3f0c:	18831526 	beq	r3,r2,4b64 <___vfprintf_internal_r+0x1e80>
    3f10:	d8c14d15 	stw	r3,1332(sp)
    3f14:	18bff404 	addi	r2,r3,-48
    3f18:	00c00244 	movi	r3,9
    3f1c:	18827836 	bltu	r3,r2,4900 <___vfprintf_internal_r+0x1c1c>
    3f20:	000d883a 	mov	r6,zero
    3f24:	308002a4 	muli	r2,r6,10
    3f28:	b9800007 	ldb	r6,0(r23)
    3f2c:	d9414d17 	ldw	r5,1332(sp)
    3f30:	bdc00044 	addi	r23,r23,1
    3f34:	d9814d15 	stw	r6,1332(sp)
    3f38:	d9014d17 	ldw	r4,1332(sp)
    3f3c:	1145883a 	add	r2,r2,r5
    3f40:	11bff404 	addi	r6,r2,-48
    3f44:	20bff404 	addi	r2,r4,-48
    3f48:	18bff62e 	bgeu	r3,r2,3f24 <___vfprintf_internal_r+0x1240>
    3f4c:	3027883a 	mov	r19,r6
    3f50:	303be50e 	bge	r6,zero,2ee8 <___vfprintf_internal_r+0x204>
    3f54:	04ffffc4 	movi	r19,-1
    3f58:	003be306 	br	2ee8 <___vfprintf_internal_r+0x204>
    3f5c:	d8000405 	stb	zero,16(sp)
    3f60:	39800017 	ldw	r6,0(r7)
    3f64:	39c00104 	addi	r7,r7,4
    3f68:	d9c14015 	stw	r7,1280(sp)
    3f6c:	d9814115 	stw	r6,1284(sp)
    3f70:	3001c926 	beq	r6,zero,4698 <___vfprintf_internal_r+0x19b4>
    3f74:	98000e16 	blt	r19,zero,3fb0 <___vfprintf_internal_r+0x12cc>
    3f78:	d9014117 	ldw	r4,1284(sp)
    3f7c:	000b883a 	mov	r5,zero
    3f80:	980d883a 	mov	r6,r19
    3f84:	0007da00 	call	7da0 <memchr>
    3f88:	10025926 	beq	r2,zero,48f0 <___vfprintf_internal_r+0x1c0c>
    3f8c:	d8c14117 	ldw	r3,1284(sp)
    3f90:	10cfc83a 	sub	r7,r2,r3
    3f94:	99c19e16 	blt	r19,r7,4610 <___vfprintf_internal_r+0x192c>
    3f98:	d9c14515 	stw	r7,1300(sp)
    3f9c:	38000916 	blt	r7,zero,3fc4 <___vfprintf_internal_r+0x12e0>
    3fa0:	d8014615 	stw	zero,1304(sp)
    3fa4:	003df106 	br	376c <___vfprintf_internal_r+0xa88>
    3fa8:	b8c00007 	ldb	r3,0(r23)
    3fac:	003bcc06 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    3fb0:	d9014117 	ldw	r4,1284(sp)
    3fb4:	00098340 	call	9834 <strlen>
    3fb8:	d8814515 	stw	r2,1300(sp)
    3fbc:	100f883a 	mov	r7,r2
    3fc0:	103ff70e 	bge	r2,zero,3fa0 <___vfprintf_internal_r+0x12bc>
    3fc4:	d8014515 	stw	zero,1300(sp)
    3fc8:	d8014615 	stw	zero,1304(sp)
    3fcc:	003de706 	br	376c <___vfprintf_internal_r+0xa88>
    3fd0:	20c03fcc 	andi	r3,r4,255
    3fd4:	00800044 	movi	r2,1
    3fd8:	18802d26 	beq	r3,r2,4090 <___vfprintf_internal_r+0x13ac>
    3fdc:	18800e36 	bltu	r3,r2,4018 <___vfprintf_internal_r+0x1334>
    3fe0:	00800084 	movi	r2,2
    3fe4:	1880fa26 	beq	r3,r2,43d0 <___vfprintf_internal_r+0x16ec>
    3fe8:	01000074 	movhi	r4,1
    3fec:	21089104 	addi	r4,r4,8772
    3ff0:	00098340 	call	9834 <strlen>
    3ff4:	100f883a 	mov	r7,r2
    3ff8:	dcc14515 	stw	r19,1300(sp)
    3ffc:	9880010e 	bge	r19,r2,4004 <___vfprintf_internal_r+0x1320>
    4000:	d8814515 	stw	r2,1300(sp)
    4004:	00800074 	movhi	r2,1
    4008:	10889104 	addi	r2,r2,8772
    400c:	dcc14615 	stw	r19,1304(sp)
    4010:	d8814115 	stw	r2,1284(sp)
    4014:	003dd506 	br	376c <___vfprintf_internal_r+0xa88>
    4018:	d9401904 	addi	r5,sp,100
    401c:	dd000f04 	addi	r20,sp,60
    4020:	d9414115 	stw	r5,1284(sp)
    4024:	880a977a 	slli	r5,r17,29
    4028:	d9814117 	ldw	r6,1284(sp)
    402c:	8004d0fa 	srli	r2,r16,3
    4030:	8806d0fa 	srli	r3,r17,3
    4034:	810001cc 	andi	r4,r16,7
    4038:	2884b03a 	or	r2,r5,r2
    403c:	31bfffc4 	addi	r6,r6,-1
    4040:	21000c04 	addi	r4,r4,48
    4044:	d9814115 	stw	r6,1284(sp)
    4048:	10cab03a 	or	r5,r2,r3
    404c:	31000005 	stb	r4,0(r6)
    4050:	1021883a 	mov	r16,r2
    4054:	1823883a 	mov	r17,r3
    4058:	283ff21e 	bne	r5,zero,4024 <___vfprintf_internal_r+0x1340>
    405c:	d8c14c17 	ldw	r3,1328(sp)
    4060:	1880004c 	andi	r2,r3,1
    4064:	1005003a 	cmpeq	r2,r2,zero
    4068:	103db91e 	bne	r2,zero,3750 <___vfprintf_internal_r+0xa6c>
    406c:	20803fcc 	andi	r2,r4,255
    4070:	1080201c 	xori	r2,r2,128
    4074:	10bfe004 	addi	r2,r2,-128
    4078:	00c00c04 	movi	r3,48
    407c:	10fdb426 	beq	r2,r3,3750 <___vfprintf_internal_r+0xa6c>
    4080:	31bfffc4 	addi	r6,r6,-1
    4084:	d9814115 	stw	r6,1284(sp)
    4088:	30c00005 	stb	r3,0(r6)
    408c:	003db006 	br	3750 <___vfprintf_internal_r+0xa6c>
    4090:	88800068 	cmpgeui	r2,r17,1
    4094:	10002c1e 	bne	r2,zero,4148 <___vfprintf_internal_r+0x1464>
    4098:	8800021e 	bne	r17,zero,40a4 <___vfprintf_internal_r+0x13c0>
    409c:	00800244 	movi	r2,9
    40a0:	14002936 	bltu	r2,r16,4148 <___vfprintf_internal_r+0x1464>
    40a4:	d90018c4 	addi	r4,sp,99
    40a8:	dd000f04 	addi	r20,sp,60
    40ac:	d9014115 	stw	r4,1284(sp)
    40b0:	d9014117 	ldw	r4,1284(sp)
    40b4:	80800c04 	addi	r2,r16,48
    40b8:	20800005 	stb	r2,0(r4)
    40bc:	003da406 	br	3750 <___vfprintf_internal_r+0xa6c>
    40c0:	dc400d17 	ldw	r17,52(sp)
    40c4:	07000074 	movhi	fp,1
    40c8:	e7089884 	addi	fp,fp,8802
    40cc:	9425883a 	add	r18,r18,r16
    40d0:	8c400044 	addi	r17,r17,1
    40d4:	008001c4 	movi	r2,7
    40d8:	1f000015 	stw	fp,0(r3)
    40dc:	1c000115 	stw	r16,4(r3)
    40e0:	dc800e15 	stw	r18,56(sp)
    40e4:	dc400d15 	stw	r17,52(sp)
    40e8:	147de216 	blt	r2,r17,3874 <___vfprintf_internal_r+0xb90>
    40ec:	18c00204 	addi	r3,r3,8
    40f0:	003c7a06 	br	32dc <___vfprintf_internal_r+0x5f8>
    40f4:	01000084 	movi	r4,2
    40f8:	d8000405 	stb	zero,16(sp)
    40fc:	003d8706 	br	371c <___vfprintf_internal_r+0xa38>
    4100:	d9814c17 	ldw	r6,1328(sp)
    4104:	30c4703a 	and	r2,r6,r3
    4108:	1005003a 	cmpeq	r2,r2,zero
    410c:	103cb926 	beq	r2,zero,33f4 <___vfprintf_internal_r+0x710>
    4110:	d9014117 	ldw	r4,1284(sp)
    4114:	94800044 	addi	r18,r18,1
    4118:	8c400044 	addi	r17,r17,1
    411c:	008001c4 	movi	r2,7
    4120:	a9000015 	stw	r4,0(r21)
    4124:	a8c00115 	stw	r3,4(r21)
    4128:	dc800e15 	stw	r18,56(sp)
    412c:	dc400d15 	stw	r17,52(sp)
    4130:	147e6616 	blt	r2,r17,3acc <___vfprintf_internal_r+0xde8>
    4134:	acc00204 	addi	r19,r21,8
    4138:	003cd706 	br	3498 <___vfprintf_internal_r+0x7b4>
    413c:	07000074 	movhi	fp,1
    4140:	e7089884 	addi	fp,fp,8802
    4144:	003c4f06 	br	3284 <___vfprintf_internal_r+0x5a0>
    4148:	dd000f04 	addi	r20,sp,60
    414c:	dc801904 	addi	r18,sp,100
    4150:	8009883a 	mov	r4,r16
    4154:	880b883a 	mov	r5,r17
    4158:	01800284 	movi	r6,10
    415c:	000f883a 	mov	r7,zero
    4160:	000a3180 	call	a318 <__umoddi3>
    4164:	12000c04 	addi	r8,r2,48
    4168:	94bfffc4 	addi	r18,r18,-1
    416c:	8009883a 	mov	r4,r16
    4170:	880b883a 	mov	r5,r17
    4174:	01800284 	movi	r6,10
    4178:	000f883a 	mov	r7,zero
    417c:	92000005 	stb	r8,0(r18)
    4180:	0009d3c0 	call	9d3c <__udivdi3>
    4184:	1009883a 	mov	r4,r2
    4188:	1021883a 	mov	r16,r2
    418c:	18800068 	cmpgeui	r2,r3,1
    4190:	1823883a 	mov	r17,r3
    4194:	103fee1e 	bne	r2,zero,4150 <___vfprintf_internal_r+0x146c>
    4198:	1800021e 	bne	r3,zero,41a4 <___vfprintf_internal_r+0x14c0>
    419c:	00800244 	movi	r2,9
    41a0:	113feb36 	bltu	r2,r4,4150 <___vfprintf_internal_r+0x146c>
    41a4:	94bfffc4 	addi	r18,r18,-1
    41a8:	dc814115 	stw	r18,1284(sp)
    41ac:	003fc006 	br	40b0 <___vfprintf_internal_r+0x13cc>
    41b0:	d9014c17 	ldw	r4,1328(sp)
    41b4:	2080004c 	andi	r2,r4,1
    41b8:	10009a1e 	bne	r2,zero,4424 <___vfprintf_internal_r+0x1740>
    41bc:	d9401904 	addi	r5,sp,100
    41c0:	dd000f04 	addi	r20,sp,60
    41c4:	d9414115 	stw	r5,1284(sp)
    41c8:	003d6106 	br	3750 <___vfprintf_internal_r+0xa6c>
    41cc:	d9014f17 	ldw	r4,1340(sp)
    41d0:	b00b883a 	mov	r5,r22
    41d4:	d9800c04 	addi	r6,sp,48
    41d8:	0002c8c0 	call	2c8c <__sprint_r>
    41dc:	103c791e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    41e0:	dc800e17 	ldw	r18,56(sp)
    41e4:	d8c01904 	addi	r3,sp,100
    41e8:	003cff06 	br	35e8 <___vfprintf_internal_r+0x904>
    41ec:	d8c14c17 	ldw	r3,1328(sp)
    41f0:	1880040c 	andi	r2,r3,16
    41f4:	1000711e 	bne	r2,zero,43bc <___vfprintf_internal_r+0x16d8>
    41f8:	d9014c17 	ldw	r4,1328(sp)
    41fc:	2080100c 	andi	r2,r4,64
    4200:	10006e26 	beq	r2,zero,43bc <___vfprintf_internal_r+0x16d8>
    4204:	3c00000b 	ldhu	r16,0(r7)
    4208:	0023883a 	mov	r17,zero
    420c:	39c00104 	addi	r7,r7,4
    4210:	d9c14015 	stw	r7,1280(sp)
    4214:	003f0006 	br	3e18 <___vfprintf_internal_r+0x1134>
    4218:	dc400d17 	ldw	r17,52(sp)
    421c:	07000074 	movhi	fp,1
    4220:	e7089884 	addi	fp,fp,8802
    4224:	9425883a 	add	r18,r18,r16
    4228:	8c400044 	addi	r17,r17,1
    422c:	008001c4 	movi	r2,7
    4230:	1f000015 	stw	fp,0(r3)
    4234:	1c000115 	stw	r16,4(r3)
    4238:	dc800e15 	stw	r18,56(sp)
    423c:	dc400d15 	stw	r17,52(sp)
    4240:	147d7616 	blt	r2,r17,381c <___vfprintf_internal_r+0xb38>
    4244:	18c00204 	addi	r3,r3,8
    4248:	003d7b06 	br	3838 <___vfprintf_internal_r+0xb54>
    424c:	dc800e17 	ldw	r18,56(sp)
    4250:	dc400d17 	ldw	r17,52(sp)
    4254:	07000074 	movhi	fp,1
    4258:	e7089c84 	addi	fp,fp,8818
    425c:	003bc006 	br	3160 <___vfprintf_internal_r+0x47c>
    4260:	d9014f17 	ldw	r4,1340(sp)
    4264:	b00b883a 	mov	r5,r22
    4268:	d9800c04 	addi	r6,sp,48
    426c:	0002c8c0 	call	2c8c <__sprint_r>
    4270:	103c541e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4274:	dc800e17 	ldw	r18,56(sp)
    4278:	d8c01904 	addi	r3,sp,100
    427c:	003ce906 	br	3624 <___vfprintf_internal_r+0x940>
    4280:	3c000017 	ldw	r16,0(r7)
    4284:	0009883a 	mov	r4,zero
    4288:	39c00104 	addi	r7,r7,4
    428c:	0023883a 	mov	r17,zero
    4290:	d9c14015 	stw	r7,1280(sp)
    4294:	d8000405 	stb	zero,16(sp)
    4298:	003d2006 	br	371c <___vfprintf_internal_r+0xa38>
    429c:	38800017 	ldw	r2,0(r7)
    42a0:	39c00104 	addi	r7,r7,4
    42a4:	d9c14015 	stw	r7,1280(sp)
    42a8:	1023d7fa 	srai	r17,r2,31
    42ac:	1021883a 	mov	r16,r2
    42b0:	003d1806 	br	3714 <___vfprintf_internal_r+0xa30>
    42b4:	3c000017 	ldw	r16,0(r7)
    42b8:	01000044 	movi	r4,1
    42bc:	39c00104 	addi	r7,r7,4
    42c0:	0023883a 	mov	r17,zero
    42c4:	d9c14015 	stw	r7,1280(sp)
    42c8:	d8000405 	stb	zero,16(sp)
    42cc:	003d1306 	br	371c <___vfprintf_internal_r+0xa38>
    42d0:	00800074 	movhi	r2,1
    42d4:	10889804 	addi	r2,r2,8800
    42d8:	94800044 	addi	r18,r18,1
    42dc:	8c400044 	addi	r17,r17,1
    42e0:	a8800015 	stw	r2,0(r21)
    42e4:	00c00044 	movi	r3,1
    42e8:	008001c4 	movi	r2,7
    42ec:	a8c00115 	stw	r3,4(r21)
    42f0:	dc800e15 	stw	r18,56(sp)
    42f4:	dc400d15 	stw	r17,52(sp)
    42f8:	1440ca16 	blt	r2,r17,4624 <___vfprintf_internal_r+0x1940>
    42fc:	a8c00204 	addi	r3,r21,8
    4300:	2000061e 	bne	r4,zero,431c <___vfprintf_internal_r+0x1638>
    4304:	d9414717 	ldw	r5,1308(sp)
    4308:	2800041e 	bne	r5,zero,431c <___vfprintf_internal_r+0x1638>
    430c:	d9814c17 	ldw	r6,1328(sp)
    4310:	3080004c 	andi	r2,r6,1
    4314:	1005003a 	cmpeq	r2,r2,zero
    4318:	103bf01e 	bne	r2,zero,32dc <___vfprintf_internal_r+0x5f8>
    431c:	00800044 	movi	r2,1
    4320:	dc400d17 	ldw	r17,52(sp)
    4324:	18800115 	stw	r2,4(r3)
    4328:	d8814917 	ldw	r2,1316(sp)
    432c:	94800044 	addi	r18,r18,1
    4330:	8c400044 	addi	r17,r17,1
    4334:	18800015 	stw	r2,0(r3)
    4338:	008001c4 	movi	r2,7
    433c:	dc800e15 	stw	r18,56(sp)
    4340:	dc400d15 	stw	r17,52(sp)
    4344:	1440ca16 	blt	r2,r17,4670 <___vfprintf_internal_r+0x198c>
    4348:	18c00204 	addi	r3,r3,8
    434c:	0121c83a 	sub	r16,zero,r4
    4350:	0400500e 	bge	zero,r16,4494 <___vfprintf_internal_r+0x17b0>
    4354:	00800404 	movi	r2,16
    4358:	1400800e 	bge	r2,r16,455c <___vfprintf_internal_r+0x1878>
    435c:	1027883a 	mov	r19,r2
    4360:	07000074 	movhi	fp,1
    4364:	e7089884 	addi	fp,fp,8802
    4368:	050001c4 	movi	r20,7
    436c:	00000306 	br	437c <___vfprintf_internal_r+0x1698>
    4370:	18c00204 	addi	r3,r3,8
    4374:	843ffc04 	addi	r16,r16,-16
    4378:	9c007a0e 	bge	r19,r16,4564 <___vfprintf_internal_r+0x1880>
    437c:	94800404 	addi	r18,r18,16
    4380:	8c400044 	addi	r17,r17,1
    4384:	1f000015 	stw	fp,0(r3)
    4388:	1cc00115 	stw	r19,4(r3)
    438c:	dc800e15 	stw	r18,56(sp)
    4390:	dc400d15 	stw	r17,52(sp)
    4394:	a47ff60e 	bge	r20,r17,4370 <___vfprintf_internal_r+0x168c>
    4398:	d9014f17 	ldw	r4,1340(sp)
    439c:	b00b883a 	mov	r5,r22
    43a0:	d9800c04 	addi	r6,sp,48
    43a4:	0002c8c0 	call	2c8c <__sprint_r>
    43a8:	103c061e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    43ac:	dc800e17 	ldw	r18,56(sp)
    43b0:	dc400d17 	ldw	r17,52(sp)
    43b4:	d8c01904 	addi	r3,sp,100
    43b8:	003fee06 	br	4374 <___vfprintf_internal_r+0x1690>
    43bc:	3c000017 	ldw	r16,0(r7)
    43c0:	0023883a 	mov	r17,zero
    43c4:	39c00104 	addi	r7,r7,4
    43c8:	d9c14015 	stw	r7,1280(sp)
    43cc:	003e9206 	br	3e18 <___vfprintf_internal_r+0x1134>
    43d0:	d9401904 	addi	r5,sp,100
    43d4:	dd000f04 	addi	r20,sp,60
    43d8:	d9414115 	stw	r5,1284(sp)
    43dc:	d9814417 	ldw	r6,1296(sp)
    43e0:	880a973a 	slli	r5,r17,28
    43e4:	8004d13a 	srli	r2,r16,4
    43e8:	810003cc 	andi	r4,r16,15
    43ec:	3109883a 	add	r4,r6,r4
    43f0:	2884b03a 	or	r2,r5,r2
    43f4:	21400003 	ldbu	r5,0(r4)
    43f8:	d9014117 	ldw	r4,1284(sp)
    43fc:	8806d13a 	srli	r3,r17,4
    4400:	1021883a 	mov	r16,r2
    4404:	213fffc4 	addi	r4,r4,-1
    4408:	d9014115 	stw	r4,1284(sp)
    440c:	d9814117 	ldw	r6,1284(sp)
    4410:	10c8b03a 	or	r4,r2,r3
    4414:	1823883a 	mov	r17,r3
    4418:	31400005 	stb	r5,0(r6)
    441c:	203fef1e 	bne	r4,zero,43dc <___vfprintf_internal_r+0x16f8>
    4420:	003ccb06 	br	3750 <___vfprintf_internal_r+0xa6c>
    4424:	00800c04 	movi	r2,48
    4428:	d98018c4 	addi	r6,sp,99
    442c:	dd000f04 	addi	r20,sp,60
    4430:	d88018c5 	stb	r2,99(sp)
    4434:	d9814115 	stw	r6,1284(sp)
    4438:	003cc506 	br	3750 <___vfprintf_internal_r+0xa6c>
    443c:	dc400d17 	ldw	r17,52(sp)
    4440:	07000074 	movhi	fp,1
    4444:	e7089c84 	addi	fp,fp,8818
    4448:	003bc706 	br	3368 <___vfprintf_internal_r+0x684>
    444c:	d9414c17 	ldw	r5,1328(sp)
    4450:	2880040c 	andi	r2,r5,16
    4454:	10007c26 	beq	r2,zero,4648 <___vfprintf_internal_r+0x1964>
    4458:	38800017 	ldw	r2,0(r7)
    445c:	39c00104 	addi	r7,r7,4
    4460:	d9c14015 	stw	r7,1280(sp)
    4464:	d9814b17 	ldw	r6,1324(sp)
    4468:	d9c14017 	ldw	r7,1280(sp)
    446c:	11800015 	stw	r6,0(r2)
    4470:	003a7806 	br	2e54 <___vfprintf_internal_r+0x170>
    4474:	d9014f17 	ldw	r4,1340(sp)
    4478:	b00b883a 	mov	r5,r22
    447c:	d9800c04 	addi	r6,sp,48
    4480:	0002c8c0 	call	2c8c <__sprint_r>
    4484:	103bcf1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4488:	dc800e17 	ldw	r18,56(sp)
    448c:	dc400d17 	ldw	r17,52(sp)
    4490:	d8c01904 	addi	r3,sp,100
    4494:	d9014717 	ldw	r4,1308(sp)
    4498:	d9414117 	ldw	r5,1284(sp)
    449c:	8c400044 	addi	r17,r17,1
    44a0:	9125883a 	add	r18,r18,r4
    44a4:	008001c4 	movi	r2,7
    44a8:	19400015 	stw	r5,0(r3)
    44ac:	19000115 	stw	r4,4(r3)
    44b0:	dc800e15 	stw	r18,56(sp)
    44b4:	dc400d15 	stw	r17,52(sp)
    44b8:	147cee16 	blt	r2,r17,3874 <___vfprintf_internal_r+0xb90>
    44bc:	18c00204 	addi	r3,r3,8
    44c0:	003b8606 	br	32dc <___vfprintf_internal_r+0x5f8>
    44c4:	38c00017 	ldw	r3,0(r7)
    44c8:	39000204 	addi	r4,r7,8
    44cc:	d9014015 	stw	r4,1280(sp)
    44d0:	d8c14215 	stw	r3,1288(sp)
    44d4:	39c00117 	ldw	r7,4(r7)
    44d8:	d9c14315 	stw	r7,1292(sp)
    44dc:	003e2006 	br	3d60 <___vfprintf_internal_r+0x107c>
    44e0:	0005883a 	mov	r2,zero
    44e4:	1409c83a 	sub	r4,r2,r16
    44e8:	1105803a 	cmpltu	r2,r2,r4
    44ec:	044bc83a 	sub	r5,zero,r17
    44f0:	2885c83a 	sub	r2,r5,r2
    44f4:	2021883a 	mov	r16,r4
    44f8:	1023883a 	mov	r17,r2
    44fc:	01000044 	movi	r4,1
    4500:	00800b44 	movi	r2,45
    4504:	d8800405 	stb	r2,16(sp)
    4508:	003c8406 	br	371c <___vfprintf_internal_r+0xa38>
    450c:	d9014f17 	ldw	r4,1340(sp)
    4510:	b00b883a 	mov	r5,r22
    4514:	d9800c04 	addi	r6,sp,48
    4518:	0002c8c0 	call	2c8c <__sprint_r>
    451c:	103ba91e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4520:	dc800e17 	ldw	r18,56(sp)
    4524:	dc400d17 	ldw	r17,52(sp)
    4528:	d9000517 	ldw	r4,20(sp)
    452c:	d9401904 	addi	r5,sp,100
    4530:	003da706 	br	3bd0 <___vfprintf_internal_r+0xeec>
    4534:	d9014f17 	ldw	r4,1340(sp)
    4538:	b00b883a 	mov	r5,r22
    453c:	d9800c04 	addi	r6,sp,48
    4540:	0002c8c0 	call	2c8c <__sprint_r>
    4544:	103b9f1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4548:	dc800e17 	ldw	r18,56(sp)
    454c:	dc400d17 	ldw	r17,52(sp)
    4550:	d9000517 	ldw	r4,20(sp)
    4554:	d8c01904 	addi	r3,sp,100
    4558:	003d9106 	br	3ba0 <___vfprintf_internal_r+0xebc>
    455c:	07000074 	movhi	fp,1
    4560:	e7089884 	addi	fp,fp,8802
    4564:	9425883a 	add	r18,r18,r16
    4568:	8c400044 	addi	r17,r17,1
    456c:	008001c4 	movi	r2,7
    4570:	1f000015 	stw	fp,0(r3)
    4574:	1c000115 	stw	r16,4(r3)
    4578:	dc800e15 	stw	r18,56(sp)
    457c:	dc400d15 	stw	r17,52(sp)
    4580:	147fbc16 	blt	r2,r17,4474 <___vfprintf_internal_r+0x1790>
    4584:	18c00204 	addi	r3,r3,8
    4588:	003fc206 	br	4494 <___vfprintf_internal_r+0x17b0>
    458c:	d9014f17 	ldw	r4,1340(sp)
    4590:	b00b883a 	mov	r5,r22
    4594:	d9800c04 	addi	r6,sp,48
    4598:	0002c8c0 	call	2c8c <__sprint_r>
    459c:	103b891e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    45a0:	dc800e17 	ldw	r18,56(sp)
    45a4:	d9000517 	ldw	r4,20(sp)
    45a8:	d8c01904 	addi	r3,sp,100
    45ac:	003d0206 	br	39b8 <___vfprintf_internal_r+0xcd4>
    45b0:	07000074 	movhi	fp,1
    45b4:	e7089884 	addi	fp,fp,8802
    45b8:	003be406 	br	354c <___vfprintf_internal_r+0x868>
    45bc:	00800074 	movhi	r2,1
    45c0:	10888704 	addi	r2,r2,8732
    45c4:	d8814115 	stw	r2,1284(sp)
    45c8:	003df506 	br	3da0 <___vfprintf_internal_r+0x10bc>
    45cc:	d9014217 	ldw	r4,1288(sp)
    45d0:	d9414317 	ldw	r5,1292(sp)
    45d4:	000958c0 	call	958c <__isnand>
    45d8:	10003926 	beq	r2,zero,46c0 <___vfprintf_internal_r+0x19dc>
    45dc:	d9414d17 	ldw	r5,1332(sp)
    45e0:	008011c4 	movi	r2,71
    45e4:	1140ce16 	blt	r2,r5,4920 <___vfprintf_internal_r+0x1c3c>
    45e8:	01800074 	movhi	r6,1
    45ec:	31888804 	addi	r6,r6,8736
    45f0:	d9814115 	stw	r6,1284(sp)
    45f4:	003dea06 	br	3da0 <___vfprintf_internal_r+0x10bc>
    45f8:	d9014c17 	ldw	r4,1328(sp)
    45fc:	bdc00044 	addi	r23,r23,1
    4600:	b8c00007 	ldb	r3,0(r23)
    4604:	21000814 	ori	r4,r4,32
    4608:	d9014c15 	stw	r4,1328(sp)
    460c:	003a3406 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    4610:	dcc14515 	stw	r19,1300(sp)
    4614:	98011016 	blt	r19,zero,4a58 <___vfprintf_internal_r+0x1d74>
    4618:	980f883a 	mov	r7,r19
    461c:	d8014615 	stw	zero,1304(sp)
    4620:	003c5206 	br	376c <___vfprintf_internal_r+0xa88>
    4624:	d9014f17 	ldw	r4,1340(sp)
    4628:	b00b883a 	mov	r5,r22
    462c:	d9800c04 	addi	r6,sp,48
    4630:	0002c8c0 	call	2c8c <__sprint_r>
    4634:	103b631e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4638:	dc800e17 	ldw	r18,56(sp)
    463c:	d9000517 	ldw	r4,20(sp)
    4640:	d8c01904 	addi	r3,sp,100
    4644:	003f2e06 	br	4300 <___vfprintf_internal_r+0x161c>
    4648:	d8c14c17 	ldw	r3,1328(sp)
    464c:	1880100c 	andi	r2,r3,64
    4650:	1000a026 	beq	r2,zero,48d4 <___vfprintf_internal_r+0x1bf0>
    4654:	38800017 	ldw	r2,0(r7)
    4658:	39c00104 	addi	r7,r7,4
    465c:	d9c14015 	stw	r7,1280(sp)
    4660:	d9014b17 	ldw	r4,1324(sp)
    4664:	d9c14017 	ldw	r7,1280(sp)
    4668:	1100000d 	sth	r4,0(r2)
    466c:	0039f906 	br	2e54 <___vfprintf_internal_r+0x170>
    4670:	d9014f17 	ldw	r4,1340(sp)
    4674:	b00b883a 	mov	r5,r22
    4678:	d9800c04 	addi	r6,sp,48
    467c:	0002c8c0 	call	2c8c <__sprint_r>
    4680:	103b501e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    4684:	dc800e17 	ldw	r18,56(sp)
    4688:	dc400d17 	ldw	r17,52(sp)
    468c:	d9000517 	ldw	r4,20(sp)
    4690:	d8c01904 	addi	r3,sp,100
    4694:	003f2d06 	br	434c <___vfprintf_internal_r+0x1668>
    4698:	00800184 	movi	r2,6
    469c:	14c09a36 	bltu	r2,r19,4908 <___vfprintf_internal_r+0x1c24>
    46a0:	dcc14515 	stw	r19,1300(sp)
    46a4:	9800010e 	bge	r19,zero,46ac <___vfprintf_internal_r+0x19c8>
    46a8:	d8014515 	stw	zero,1300(sp)
    46ac:	00800074 	movhi	r2,1
    46b0:	10888a04 	addi	r2,r2,8744
    46b4:	980f883a 	mov	r7,r19
    46b8:	d8814115 	stw	r2,1284(sp)
    46bc:	003a7806 	br	30a0 <___vfprintf_internal_r+0x3bc>
    46c0:	00bfffc4 	movi	r2,-1
    46c4:	9880e226 	beq	r19,r2,4a50 <___vfprintf_internal_r+0x1d6c>
    46c8:	d9414d17 	ldw	r5,1332(sp)
    46cc:	008019c4 	movi	r2,103
    46d0:	2880dc26 	beq	r5,r2,4a44 <___vfprintf_internal_r+0x1d60>
    46d4:	008011c4 	movi	r2,71
    46d8:	2880da26 	beq	r5,r2,4a44 <___vfprintf_internal_r+0x1d60>
    46dc:	d9414c17 	ldw	r5,1328(sp)
    46e0:	d9014317 	ldw	r4,1292(sp)
    46e4:	d9814217 	ldw	r6,1288(sp)
    46e8:	29404014 	ori	r5,r5,256
    46ec:	d9414c15 	stw	r5,1328(sp)
    46f0:	2000cc16 	blt	r4,zero,4a24 <___vfprintf_internal_r+0x1d40>
    46f4:	3021883a 	mov	r16,r6
    46f8:	2023883a 	mov	r17,r4
    46fc:	0039883a 	mov	fp,zero
    4700:	d9414d17 	ldw	r5,1332(sp)
    4704:	00801984 	movi	r2,102
    4708:	2880b726 	beq	r5,r2,49e8 <___vfprintf_internal_r+0x1d04>
    470c:	00801184 	movi	r2,70
    4710:	2880b526 	beq	r5,r2,49e8 <___vfprintf_internal_r+0x1d04>
    4714:	00801944 	movi	r2,101
    4718:	2880c826 	beq	r5,r2,4a3c <___vfprintf_internal_r+0x1d58>
    471c:	00801144 	movi	r2,69
    4720:	2880c626 	beq	r5,r2,4a3c <___vfprintf_internal_r+0x1d58>
    4724:	9829883a 	mov	r20,r19
    4728:	d9014f17 	ldw	r4,1340(sp)
    472c:	d8800504 	addi	r2,sp,20
    4730:	880d883a 	mov	r6,r17
    4734:	d8800115 	stw	r2,4(sp)
    4738:	d8c00604 	addi	r3,sp,24
    473c:	d8800704 	addi	r2,sp,28
    4740:	800b883a 	mov	r5,r16
    4744:	01c00084 	movi	r7,2
    4748:	d8c00215 	stw	r3,8(sp)
    474c:	d8800315 	stw	r2,12(sp)
    4750:	dd000015 	stw	r20,0(sp)
    4754:	0004f080 	call	4f08 <_dtoa_r>
    4758:	d9814d17 	ldw	r6,1332(sp)
    475c:	d8814115 	stw	r2,1284(sp)
    4760:	008019c4 	movi	r2,103
    4764:	30809526 	beq	r6,r2,49bc <___vfprintf_internal_r+0x1cd8>
    4768:	d8c14d17 	ldw	r3,1332(sp)
    476c:	008011c4 	movi	r2,71
    4770:	18809226 	beq	r3,r2,49bc <___vfprintf_internal_r+0x1cd8>
    4774:	d9414117 	ldw	r5,1284(sp)
    4778:	d9814d17 	ldw	r6,1332(sp)
    477c:	00801984 	movi	r2,102
    4780:	2d25883a 	add	r18,r5,r20
    4784:	30808626 	beq	r6,r2,49a0 <___vfprintf_internal_r+0x1cbc>
    4788:	00801184 	movi	r2,70
    478c:	30808426 	beq	r6,r2,49a0 <___vfprintf_internal_r+0x1cbc>
    4790:	000d883a 	mov	r6,zero
    4794:	000f883a 	mov	r7,zero
    4798:	880b883a 	mov	r5,r17
    479c:	8009883a 	mov	r4,r16
    47a0:	000b3e80 	call	b3e8 <__eqdf2>
    47a4:	1000751e 	bne	r2,zero,497c <___vfprintf_internal_r+0x1c98>
    47a8:	9005883a 	mov	r2,r18
    47ac:	dc800715 	stw	r18,28(sp)
    47b0:	d9014117 	ldw	r4,1284(sp)
    47b4:	d9414d17 	ldw	r5,1332(sp)
    47b8:	00c019c4 	movi	r3,103
    47bc:	1125c83a 	sub	r18,r2,r4
    47c0:	28c06826 	beq	r5,r3,4964 <___vfprintf_internal_r+0x1c80>
    47c4:	008011c4 	movi	r2,71
    47c8:	28806626 	beq	r5,r2,4964 <___vfprintf_internal_r+0x1c80>
    47cc:	d9000517 	ldw	r4,20(sp)
    47d0:	d8c14d17 	ldw	r3,1332(sp)
    47d4:	00801944 	movi	r2,101
    47d8:	10c05516 	blt	r2,r3,4930 <___vfprintf_internal_r+0x1c4c>
    47dc:	213fffc4 	addi	r4,r4,-1
    47e0:	d9000515 	stw	r4,20(sp)
    47e4:	d8c00805 	stb	r3,32(sp)
    47e8:	2021883a 	mov	r16,r4
    47ec:	2000c116 	blt	r4,zero,4af4 <___vfprintf_internal_r+0x1e10>
    47f0:	00800ac4 	movi	r2,43
    47f4:	d8800845 	stb	r2,33(sp)
    47f8:	00800244 	movi	r2,9
    47fc:	1400af0e 	bge	r2,r16,4abc <___vfprintf_internal_r+0x1dd8>
    4800:	1027883a 	mov	r19,r2
    4804:	dc400b84 	addi	r17,sp,46
    4808:	8009883a 	mov	r4,r16
    480c:	01400284 	movi	r5,10
    4810:	000bad00 	call	bad0 <__modsi3>
    4814:	10800c04 	addi	r2,r2,48
    4818:	8c7fffc4 	addi	r17,r17,-1
    481c:	8009883a 	mov	r4,r16
    4820:	01400284 	movi	r5,10
    4824:	88800005 	stb	r2,0(r17)
    4828:	000ba700 	call	ba70 <__divsi3>
    482c:	1021883a 	mov	r16,r2
    4830:	98bff516 	blt	r19,r2,4808 <___vfprintf_internal_r+0x1b24>
    4834:	10c00c04 	addi	r3,r2,48
    4838:	d88009c4 	addi	r2,sp,39
    483c:	108001c4 	addi	r2,r2,7
    4840:	897fffc4 	addi	r5,r17,-1
    4844:	88ffffc5 	stb	r3,-1(r17)
    4848:	2880a72e 	bgeu	r5,r2,4ae8 <___vfprintf_internal_r+0x1e04>
    484c:	1009883a 	mov	r4,r2
    4850:	d9800804 	addi	r6,sp,32
    4854:	d8c00884 	addi	r3,sp,34
    4858:	28800003 	ldbu	r2,0(r5)
    485c:	29400044 	addi	r5,r5,1
    4860:	18800005 	stb	r2,0(r3)
    4864:	18c00044 	addi	r3,r3,1
    4868:	293ffb36 	bltu	r5,r4,4858 <___vfprintf_internal_r+0x1b74>
    486c:	1987c83a 	sub	r3,r3,r6
    4870:	00800044 	movi	r2,1
    4874:	d8c14815 	stw	r3,1312(sp)
    4878:	90cf883a 	add	r7,r18,r3
    487c:	1480960e 	bge	r2,r18,4ad8 <___vfprintf_internal_r+0x1df4>
    4880:	39c00044 	addi	r7,r7,1
    4884:	d9c14515 	stw	r7,1300(sp)
    4888:	38003416 	blt	r7,zero,495c <___vfprintf_internal_r+0x1c78>
    488c:	e0803fcc 	andi	r2,fp,255
    4890:	1080201c 	xori	r2,r2,128
    4894:	10bfe004 	addi	r2,r2,-128
    4898:	10004e26 	beq	r2,zero,49d4 <___vfprintf_internal_r+0x1cf0>
    489c:	00800b44 	movi	r2,45
    48a0:	dc814715 	stw	r18,1308(sp)
    48a4:	d8014615 	stw	zero,1304(sp)
    48a8:	d8800405 	stb	r2,16(sp)
    48ac:	003bb106 	br	3774 <___vfprintf_internal_r+0xa90>
    48b0:	00800b44 	movi	r2,45
    48b4:	d8800405 	stb	r2,16(sp)
    48b8:	003d3306 	br	3d88 <___vfprintf_internal_r+0x10a4>
    48bc:	d9014f17 	ldw	r4,1340(sp)
    48c0:	b00b883a 	mov	r5,r22
    48c4:	d9800c04 	addi	r6,sp,48
    48c8:	0002c8c0 	call	2c8c <__sprint_r>
    48cc:	103abd1e 	bne	r2,zero,33c4 <___vfprintf_internal_r+0x6e0>
    48d0:	003abb06 	br	33c0 <___vfprintf_internal_r+0x6dc>
    48d4:	38800017 	ldw	r2,0(r7)
    48d8:	39c00104 	addi	r7,r7,4
    48dc:	d9c14015 	stw	r7,1280(sp)
    48e0:	d9414b17 	ldw	r5,1324(sp)
    48e4:	d9c14017 	ldw	r7,1280(sp)
    48e8:	11400015 	stw	r5,0(r2)
    48ec:	00395906 	br	2e54 <___vfprintf_internal_r+0x170>
    48f0:	980f883a 	mov	r7,r19
    48f4:	dcc14515 	stw	r19,1300(sp)
    48f8:	d8014615 	stw	zero,1304(sp)
    48fc:	003b9b06 	br	376c <___vfprintf_internal_r+0xa88>
    4900:	0027883a 	mov	r19,zero
    4904:	00397806 	br	2ee8 <___vfprintf_internal_r+0x204>
    4908:	00c00074 	movhi	r3,1
    490c:	18c88a04 	addi	r3,r3,8744
    4910:	100f883a 	mov	r7,r2
    4914:	d8814515 	stw	r2,1300(sp)
    4918:	d8c14115 	stw	r3,1284(sp)
    491c:	0039e006 	br	30a0 <___vfprintf_internal_r+0x3bc>
    4920:	00800074 	movhi	r2,1
    4924:	10888904 	addi	r2,r2,8740
    4928:	d8814115 	stw	r2,1284(sp)
    492c:	003d1c06 	br	3da0 <___vfprintf_internal_r+0x10bc>
    4930:	d9414d17 	ldw	r5,1332(sp)
    4934:	00801984 	movi	r2,102
    4938:	28804926 	beq	r5,r2,4a60 <___vfprintf_internal_r+0x1d7c>
    493c:	200f883a 	mov	r7,r4
    4940:	24805716 	blt	r4,r18,4aa0 <___vfprintf_internal_r+0x1dbc>
    4944:	d9414c17 	ldw	r5,1328(sp)
    4948:	2880004c 	andi	r2,r5,1
    494c:	10000126 	beq	r2,zero,4954 <___vfprintf_internal_r+0x1c70>
    4950:	21c00044 	addi	r7,r4,1
    4954:	d9c14515 	stw	r7,1300(sp)
    4958:	383fcc0e 	bge	r7,zero,488c <___vfprintf_internal_r+0x1ba8>
    495c:	d8014515 	stw	zero,1300(sp)
    4960:	003fca06 	br	488c <___vfprintf_internal_r+0x1ba8>
    4964:	d9000517 	ldw	r4,20(sp)
    4968:	00bfff04 	movi	r2,-4
    496c:	1100480e 	bge	r2,r4,4a90 <___vfprintf_internal_r+0x1dac>
    4970:	99004716 	blt	r19,r4,4a90 <___vfprintf_internal_r+0x1dac>
    4974:	d8c14d15 	stw	r3,1332(sp)
    4978:	003ff006 	br	493c <___vfprintf_internal_r+0x1c58>
    497c:	d8800717 	ldw	r2,28(sp)
    4980:	14bf8b2e 	bgeu	r2,r18,47b0 <___vfprintf_internal_r+0x1acc>
    4984:	9007883a 	mov	r3,r18
    4988:	01000c04 	movi	r4,48
    498c:	11000005 	stb	r4,0(r2)
    4990:	10800044 	addi	r2,r2,1
    4994:	d8800715 	stw	r2,28(sp)
    4998:	18bffc1e 	bne	r3,r2,498c <___vfprintf_internal_r+0x1ca8>
    499c:	003f8406 	br	47b0 <___vfprintf_internal_r+0x1acc>
    49a0:	d8814117 	ldw	r2,1284(sp)
    49a4:	10c00007 	ldb	r3,0(r2)
    49a8:	00800c04 	movi	r2,48
    49ac:	18805b26 	beq	r3,r2,4b1c <___vfprintf_internal_r+0x1e38>
    49b0:	d9000517 	ldw	r4,20(sp)
    49b4:	9125883a 	add	r18,r18,r4
    49b8:	003f7506 	br	4790 <___vfprintf_internal_r+0x1aac>
    49bc:	d9014c17 	ldw	r4,1328(sp)
    49c0:	2080004c 	andi	r2,r4,1
    49c4:	1005003a 	cmpeq	r2,r2,zero
    49c8:	103f6a26 	beq	r2,zero,4774 <___vfprintf_internal_r+0x1a90>
    49cc:	d8800717 	ldw	r2,28(sp)
    49d0:	003f7706 	br	47b0 <___vfprintf_internal_r+0x1acc>
    49d4:	d9c14515 	stw	r7,1300(sp)
    49d8:	38004d16 	blt	r7,zero,4b10 <___vfprintf_internal_r+0x1e2c>
    49dc:	dc814715 	stw	r18,1308(sp)
    49e0:	d8014615 	stw	zero,1304(sp)
    49e4:	003b6106 	br	376c <___vfprintf_internal_r+0xa88>
    49e8:	d9014f17 	ldw	r4,1340(sp)
    49ec:	d8800504 	addi	r2,sp,20
    49f0:	d8800115 	stw	r2,4(sp)
    49f4:	d8c00604 	addi	r3,sp,24
    49f8:	d8800704 	addi	r2,sp,28
    49fc:	800b883a 	mov	r5,r16
    4a00:	880d883a 	mov	r6,r17
    4a04:	01c000c4 	movi	r7,3
    4a08:	d8c00215 	stw	r3,8(sp)
    4a0c:	d8800315 	stw	r2,12(sp)
    4a10:	dcc00015 	stw	r19,0(sp)
    4a14:	9829883a 	mov	r20,r19
    4a18:	0004f080 	call	4f08 <_dtoa_r>
    4a1c:	d8814115 	stw	r2,1284(sp)
    4a20:	003f5106 	br	4768 <___vfprintf_internal_r+0x1a84>
    4a24:	d8c14217 	ldw	r3,1288(sp)
    4a28:	d9014317 	ldw	r4,1292(sp)
    4a2c:	07000b44 	movi	fp,45
    4a30:	1821883a 	mov	r16,r3
    4a34:	2460003c 	xorhi	r17,r4,32768
    4a38:	003f3106 	br	4700 <___vfprintf_internal_r+0x1a1c>
    4a3c:	9d000044 	addi	r20,r19,1
    4a40:	003f3906 	br	4728 <___vfprintf_internal_r+0x1a44>
    4a44:	983f251e 	bne	r19,zero,46dc <___vfprintf_internal_r+0x19f8>
    4a48:	04c00044 	movi	r19,1
    4a4c:	003f2306 	br	46dc <___vfprintf_internal_r+0x19f8>
    4a50:	04c00184 	movi	r19,6
    4a54:	003f2106 	br	46dc <___vfprintf_internal_r+0x19f8>
    4a58:	d8014515 	stw	zero,1300(sp)
    4a5c:	003eee06 	br	4618 <___vfprintf_internal_r+0x1934>
    4a60:	200f883a 	mov	r7,r4
    4a64:	0100370e 	bge	zero,r4,4b44 <___vfprintf_internal_r+0x1e60>
    4a68:	9800031e 	bne	r19,zero,4a78 <___vfprintf_internal_r+0x1d94>
    4a6c:	d9814c17 	ldw	r6,1328(sp)
    4a70:	3080004c 	andi	r2,r6,1
    4a74:	103fb726 	beq	r2,zero,4954 <___vfprintf_internal_r+0x1c70>
    4a78:	20800044 	addi	r2,r4,1
    4a7c:	98a7883a 	add	r19,r19,r2
    4a80:	dcc14515 	stw	r19,1300(sp)
    4a84:	980f883a 	mov	r7,r19
    4a88:	983f800e 	bge	r19,zero,488c <___vfprintf_internal_r+0x1ba8>
    4a8c:	003fb306 	br	495c <___vfprintf_internal_r+0x1c78>
    4a90:	d9814d17 	ldw	r6,1332(sp)
    4a94:	31bfff84 	addi	r6,r6,-2
    4a98:	d9814d15 	stw	r6,1332(sp)
    4a9c:	003f4c06 	br	47d0 <___vfprintf_internal_r+0x1aec>
    4aa0:	0100180e 	bge	zero,r4,4b04 <___vfprintf_internal_r+0x1e20>
    4aa4:	00800044 	movi	r2,1
    4aa8:	1485883a 	add	r2,r2,r18
    4aac:	d8814515 	stw	r2,1300(sp)
    4ab0:	100f883a 	mov	r7,r2
    4ab4:	103f750e 	bge	r2,zero,488c <___vfprintf_internal_r+0x1ba8>
    4ab8:	003fa806 	br	495c <___vfprintf_internal_r+0x1c78>
    4abc:	80c00c04 	addi	r3,r16,48
    4ac0:	00800c04 	movi	r2,48
    4ac4:	d8c008c5 	stb	r3,35(sp)
    4ac8:	d9800804 	addi	r6,sp,32
    4acc:	d8c00904 	addi	r3,sp,36
    4ad0:	d8800885 	stb	r2,34(sp)
    4ad4:	003f6506 	br	486c <___vfprintf_internal_r+0x1b88>
    4ad8:	d9014c17 	ldw	r4,1328(sp)
    4adc:	2084703a 	and	r2,r4,r2
    4ae0:	103f9c26 	beq	r2,zero,4954 <___vfprintf_internal_r+0x1c70>
    4ae4:	003f6606 	br	4880 <___vfprintf_internal_r+0x1b9c>
    4ae8:	d9800804 	addi	r6,sp,32
    4aec:	d8c00884 	addi	r3,sp,34
    4af0:	003f5e06 	br	486c <___vfprintf_internal_r+0x1b88>
    4af4:	00800b44 	movi	r2,45
    4af8:	0121c83a 	sub	r16,zero,r4
    4afc:	d8800845 	stb	r2,33(sp)
    4b00:	003f3d06 	br	47f8 <___vfprintf_internal_r+0x1b14>
    4b04:	00800084 	movi	r2,2
    4b08:	1105c83a 	sub	r2,r2,r4
    4b0c:	003fe606 	br	4aa8 <___vfprintf_internal_r+0x1dc4>
    4b10:	d8014515 	stw	zero,1300(sp)
    4b14:	dc814715 	stw	r18,1308(sp)
    4b18:	003fb106 	br	49e0 <___vfprintf_internal_r+0x1cfc>
    4b1c:	000d883a 	mov	r6,zero
    4b20:	000f883a 	mov	r7,zero
    4b24:	8009883a 	mov	r4,r16
    4b28:	880b883a 	mov	r5,r17
    4b2c:	000b4700 	call	b470 <__nedf2>
    4b30:	103f9f26 	beq	r2,zero,49b0 <___vfprintf_internal_r+0x1ccc>
    4b34:	00800044 	movi	r2,1
    4b38:	1509c83a 	sub	r4,r2,r20
    4b3c:	d9000515 	stw	r4,20(sp)
    4b40:	003f9b06 	br	49b0 <___vfprintf_internal_r+0x1ccc>
    4b44:	98000d1e 	bne	r19,zero,4b7c <___vfprintf_internal_r+0x1e98>
    4b48:	d8c14c17 	ldw	r3,1328(sp)
    4b4c:	1880004c 	andi	r2,r3,1
    4b50:	10000a1e 	bne	r2,zero,4b7c <___vfprintf_internal_r+0x1e98>
    4b54:	01000044 	movi	r4,1
    4b58:	200f883a 	mov	r7,r4
    4b5c:	d9014515 	stw	r4,1300(sp)
    4b60:	003f4a06 	br	488c <___vfprintf_internal_r+0x1ba8>
    4b64:	3cc00017 	ldw	r19,0(r7)
    4b68:	39c00104 	addi	r7,r7,4
    4b6c:	983d0e0e 	bge	r19,zero,3fa8 <___vfprintf_internal_r+0x12c4>
    4b70:	b8c00007 	ldb	r3,0(r23)
    4b74:	04ffffc4 	movi	r19,-1
    4b78:	0038d906 	br	2ee0 <___vfprintf_internal_r+0x1fc>
    4b7c:	9cc00084 	addi	r19,r19,2
    4b80:	dcc14515 	stw	r19,1300(sp)
    4b84:	980f883a 	mov	r7,r19
    4b88:	983f400e 	bge	r19,zero,488c <___vfprintf_internal_r+0x1ba8>
    4b8c:	003f7306 	br	495c <___vfprintf_internal_r+0x1c78>

00004b90 <__vfprintf_internal>:
    4b90:	00800074 	movhi	r2,1
    4b94:	108fde04 	addi	r2,r2,16248
    4b98:	2013883a 	mov	r9,r4
    4b9c:	11000017 	ldw	r4,0(r2)
    4ba0:	2805883a 	mov	r2,r5
    4ba4:	300f883a 	mov	r7,r6
    4ba8:	480b883a 	mov	r5,r9
    4bac:	100d883a 	mov	r6,r2
    4bb0:	0002ce41 	jmpi	2ce4 <___vfprintf_internal_r>

00004bb4 <__swsetup_r>:
    4bb4:	00800074 	movhi	r2,1
    4bb8:	108fde04 	addi	r2,r2,16248
    4bbc:	10c00017 	ldw	r3,0(r2)
    4bc0:	defffd04 	addi	sp,sp,-12
    4bc4:	dc400115 	stw	r17,4(sp)
    4bc8:	dc000015 	stw	r16,0(sp)
    4bcc:	dfc00215 	stw	ra,8(sp)
    4bd0:	2023883a 	mov	r17,r4
    4bd4:	2821883a 	mov	r16,r5
    4bd8:	18000226 	beq	r3,zero,4be4 <__swsetup_r+0x30>
    4bdc:	18800e17 	ldw	r2,56(r3)
    4be0:	10001f26 	beq	r2,zero,4c60 <__swsetup_r+0xac>
    4be4:	8100030b 	ldhu	r4,12(r16)
    4be8:	2080020c 	andi	r2,r4,8
    4bec:	10002826 	beq	r2,zero,4c90 <__swsetup_r+0xdc>
    4bf0:	81400417 	ldw	r5,16(r16)
    4bf4:	28001d26 	beq	r5,zero,4c6c <__swsetup_r+0xb8>
    4bf8:	2080004c 	andi	r2,r4,1
    4bfc:	1005003a 	cmpeq	r2,r2,zero
    4c00:	10000b26 	beq	r2,zero,4c30 <__swsetup_r+0x7c>
    4c04:	2080008c 	andi	r2,r4,2
    4c08:	10001226 	beq	r2,zero,4c54 <__swsetup_r+0xa0>
    4c0c:	0005883a 	mov	r2,zero
    4c10:	80800215 	stw	r2,8(r16)
    4c14:	28000b26 	beq	r5,zero,4c44 <__swsetup_r+0x90>
    4c18:	0005883a 	mov	r2,zero
    4c1c:	dfc00217 	ldw	ra,8(sp)
    4c20:	dc400117 	ldw	r17,4(sp)
    4c24:	dc000017 	ldw	r16,0(sp)
    4c28:	dec00304 	addi	sp,sp,12
    4c2c:	f800283a 	ret
    4c30:	80800517 	ldw	r2,20(r16)
    4c34:	80000215 	stw	zero,8(r16)
    4c38:	0085c83a 	sub	r2,zero,r2
    4c3c:	80800615 	stw	r2,24(r16)
    4c40:	283ff51e 	bne	r5,zero,4c18 <__swsetup_r+0x64>
    4c44:	2080200c 	andi	r2,r4,128
    4c48:	103ff326 	beq	r2,zero,4c18 <__swsetup_r+0x64>
    4c4c:	00bfffc4 	movi	r2,-1
    4c50:	003ff206 	br	4c1c <__swsetup_r+0x68>
    4c54:	80800517 	ldw	r2,20(r16)
    4c58:	80800215 	stw	r2,8(r16)
    4c5c:	003fed06 	br	4c14 <__swsetup_r+0x60>
    4c60:	1809883a 	mov	r4,r3
    4c64:	00067540 	call	6754 <__sinit>
    4c68:	003fde06 	br	4be4 <__swsetup_r+0x30>
    4c6c:	20c0a00c 	andi	r3,r4,640
    4c70:	00808004 	movi	r2,512
    4c74:	18bfe026 	beq	r3,r2,4bf8 <__swsetup_r+0x44>
    4c78:	8809883a 	mov	r4,r17
    4c7c:	800b883a 	mov	r5,r16
    4c80:	00074cc0 	call	74cc <__smakebuf_r>
    4c84:	8100030b 	ldhu	r4,12(r16)
    4c88:	81400417 	ldw	r5,16(r16)
    4c8c:	003fda06 	br	4bf8 <__swsetup_r+0x44>
    4c90:	2080040c 	andi	r2,r4,16
    4c94:	103fed26 	beq	r2,zero,4c4c <__swsetup_r+0x98>
    4c98:	2080010c 	andi	r2,r4,4
    4c9c:	10001226 	beq	r2,zero,4ce8 <__swsetup_r+0x134>
    4ca0:	81400c17 	ldw	r5,48(r16)
    4ca4:	28000526 	beq	r5,zero,4cbc <__swsetup_r+0x108>
    4ca8:	80801004 	addi	r2,r16,64
    4cac:	28800226 	beq	r5,r2,4cb8 <__swsetup_r+0x104>
    4cb0:	8809883a 	mov	r4,r17
    4cb4:	0006ad80 	call	6ad8 <_free_r>
    4cb8:	80000c15 	stw	zero,48(r16)
    4cbc:	8080030b 	ldhu	r2,12(r16)
    4cc0:	81400417 	ldw	r5,16(r16)
    4cc4:	80000115 	stw	zero,4(r16)
    4cc8:	10bff6cc 	andi	r2,r2,65499
    4ccc:	8080030d 	sth	r2,12(r16)
    4cd0:	81400015 	stw	r5,0(r16)
    4cd4:	8080030b 	ldhu	r2,12(r16)
    4cd8:	10800214 	ori	r2,r2,8
    4cdc:	113fffcc 	andi	r4,r2,65535
    4ce0:	8080030d 	sth	r2,12(r16)
    4ce4:	003fc306 	br	4bf4 <__swsetup_r+0x40>
    4ce8:	81400417 	ldw	r5,16(r16)
    4cec:	003ff906 	br	4cd4 <__swsetup_r+0x120>

00004cf0 <quorem>:
    4cf0:	28c00417 	ldw	r3,16(r5)
    4cf4:	20800417 	ldw	r2,16(r4)
    4cf8:	defff604 	addi	sp,sp,-40
    4cfc:	ddc00715 	stw	r23,28(sp)
    4d00:	dd400515 	stw	r21,20(sp)
    4d04:	dfc00915 	stw	ra,36(sp)
    4d08:	df000815 	stw	fp,32(sp)
    4d0c:	dd800615 	stw	r22,24(sp)
    4d10:	dd000415 	stw	r20,16(sp)
    4d14:	dcc00315 	stw	r19,12(sp)
    4d18:	dc800215 	stw	r18,8(sp)
    4d1c:	dc400115 	stw	r17,4(sp)
    4d20:	dc000015 	stw	r16,0(sp)
    4d24:	202f883a 	mov	r23,r4
    4d28:	282b883a 	mov	r21,r5
    4d2c:	10c07416 	blt	r2,r3,4f00 <quorem+0x210>
    4d30:	1c7fffc4 	addi	r17,r3,-1
    4d34:	8c45883a 	add	r2,r17,r17
    4d38:	1085883a 	add	r2,r2,r2
    4d3c:	2c000504 	addi	r16,r5,20
    4d40:	24c00504 	addi	r19,r4,20
    4d44:	14ed883a 	add	r22,r2,r19
    4d48:	80a5883a 	add	r18,r16,r2
    4d4c:	b7000017 	ldw	fp,0(r22)
    4d50:	91400017 	ldw	r5,0(r18)
    4d54:	e009883a 	mov	r4,fp
    4d58:	29400044 	addi	r5,r5,1
    4d5c:	000bb300 	call	bb30 <__udivsi3>
    4d60:	1029883a 	mov	r20,r2
    4d64:	10003c1e 	bne	r2,zero,4e58 <quorem+0x168>
    4d68:	a80b883a 	mov	r5,r21
    4d6c:	b809883a 	mov	r4,r23
    4d70:	00080c00 	call	80c0 <__mcmp>
    4d74:	10002b16 	blt	r2,zero,4e24 <quorem+0x134>
    4d78:	a5000044 	addi	r20,r20,1
    4d7c:	980f883a 	mov	r7,r19
    4d80:	0011883a 	mov	r8,zero
    4d84:	0009883a 	mov	r4,zero
    4d88:	81400017 	ldw	r5,0(r16)
    4d8c:	38c00017 	ldw	r3,0(r7)
    4d90:	84000104 	addi	r16,r16,4
    4d94:	28bfffcc 	andi	r2,r5,65535
    4d98:	2085883a 	add	r2,r4,r2
    4d9c:	11bfffcc 	andi	r6,r2,65535
    4da0:	193fffcc 	andi	r4,r3,65535
    4da4:	1004d43a 	srli	r2,r2,16
    4da8:	280ad43a 	srli	r5,r5,16
    4dac:	2189c83a 	sub	r4,r4,r6
    4db0:	2209883a 	add	r4,r4,r8
    4db4:	1806d43a 	srli	r3,r3,16
    4db8:	288b883a 	add	r5,r5,r2
    4dbc:	200dd43a 	srai	r6,r4,16
    4dc0:	28bfffcc 	andi	r2,r5,65535
    4dc4:	1887c83a 	sub	r3,r3,r2
    4dc8:	1987883a 	add	r3,r3,r6
    4dcc:	3900000d 	sth	r4,0(r7)
    4dd0:	38c0008d 	sth	r3,2(r7)
    4dd4:	2808d43a 	srli	r4,r5,16
    4dd8:	39c00104 	addi	r7,r7,4
    4ddc:	1811d43a 	srai	r8,r3,16
    4de0:	943fe92e 	bgeu	r18,r16,4d88 <quorem+0x98>
    4de4:	8c45883a 	add	r2,r17,r17
    4de8:	1085883a 	add	r2,r2,r2
    4dec:	9885883a 	add	r2,r19,r2
    4df0:	10c00017 	ldw	r3,0(r2)
    4df4:	18000b1e 	bne	r3,zero,4e24 <quorem+0x134>
    4df8:	113fff04 	addi	r4,r2,-4
    4dfc:	9900082e 	bgeu	r19,r4,4e20 <quorem+0x130>
    4e00:	10bfff17 	ldw	r2,-4(r2)
    4e04:	10000326 	beq	r2,zero,4e14 <quorem+0x124>
    4e08:	00000506 	br	4e20 <quorem+0x130>
    4e0c:	20800017 	ldw	r2,0(r4)
    4e10:	1000031e 	bne	r2,zero,4e20 <quorem+0x130>
    4e14:	213fff04 	addi	r4,r4,-4
    4e18:	8c7fffc4 	addi	r17,r17,-1
    4e1c:	993ffb36 	bltu	r19,r4,4e0c <quorem+0x11c>
    4e20:	bc400415 	stw	r17,16(r23)
    4e24:	a005883a 	mov	r2,r20
    4e28:	dfc00917 	ldw	ra,36(sp)
    4e2c:	df000817 	ldw	fp,32(sp)
    4e30:	ddc00717 	ldw	r23,28(sp)
    4e34:	dd800617 	ldw	r22,24(sp)
    4e38:	dd400517 	ldw	r21,20(sp)
    4e3c:	dd000417 	ldw	r20,16(sp)
    4e40:	dcc00317 	ldw	r19,12(sp)
    4e44:	dc800217 	ldw	r18,8(sp)
    4e48:	dc400117 	ldw	r17,4(sp)
    4e4c:	dc000017 	ldw	r16,0(sp)
    4e50:	dec00a04 	addi	sp,sp,40
    4e54:	f800283a 	ret
    4e58:	980f883a 	mov	r7,r19
    4e5c:	8011883a 	mov	r8,r16
    4e60:	0013883a 	mov	r9,zero
    4e64:	000d883a 	mov	r6,zero
    4e68:	40c00017 	ldw	r3,0(r8)
    4e6c:	39000017 	ldw	r4,0(r7)
    4e70:	42000104 	addi	r8,r8,4
    4e74:	18bfffcc 	andi	r2,r3,65535
    4e78:	a085383a 	mul	r2,r20,r2
    4e7c:	1806d43a 	srli	r3,r3,16
    4e80:	217fffcc 	andi	r5,r4,65535
    4e84:	3085883a 	add	r2,r6,r2
    4e88:	11bfffcc 	andi	r6,r2,65535
    4e8c:	a0c7383a 	mul	r3,r20,r3
    4e90:	1004d43a 	srli	r2,r2,16
    4e94:	298bc83a 	sub	r5,r5,r6
    4e98:	2a4b883a 	add	r5,r5,r9
    4e9c:	2008d43a 	srli	r4,r4,16
    4ea0:	1887883a 	add	r3,r3,r2
    4ea4:	280dd43a 	srai	r6,r5,16
    4ea8:	18bfffcc 	andi	r2,r3,65535
    4eac:	2089c83a 	sub	r4,r4,r2
    4eb0:	2189883a 	add	r4,r4,r6
    4eb4:	3900008d 	sth	r4,2(r7)
    4eb8:	3940000d 	sth	r5,0(r7)
    4ebc:	180cd43a 	srli	r6,r3,16
    4ec0:	39c00104 	addi	r7,r7,4
    4ec4:	2013d43a 	srai	r9,r4,16
    4ec8:	923fe72e 	bgeu	r18,r8,4e68 <quorem+0x178>
    4ecc:	e03fa61e 	bne	fp,zero,4d68 <quorem+0x78>
    4ed0:	b0ffff04 	addi	r3,r22,-4
    4ed4:	98c0082e 	bgeu	r19,r3,4ef8 <quorem+0x208>
    4ed8:	b0bfff17 	ldw	r2,-4(r22)
    4edc:	10000326 	beq	r2,zero,4eec <quorem+0x1fc>
    4ee0:	00000506 	br	4ef8 <quorem+0x208>
    4ee4:	18800017 	ldw	r2,0(r3)
    4ee8:	1000031e 	bne	r2,zero,4ef8 <quorem+0x208>
    4eec:	18ffff04 	addi	r3,r3,-4
    4ef0:	8c7fffc4 	addi	r17,r17,-1
    4ef4:	98fffb36 	bltu	r19,r3,4ee4 <quorem+0x1f4>
    4ef8:	bc400415 	stw	r17,16(r23)
    4efc:	003f9a06 	br	4d68 <quorem+0x78>
    4f00:	0005883a 	mov	r2,zero
    4f04:	003fc806 	br	4e28 <quorem+0x138>

00004f08 <_dtoa_r>:
    4f08:	22001017 	ldw	r8,64(r4)
    4f0c:	deffda04 	addi	sp,sp,-152
    4f10:	dd402115 	stw	r21,132(sp)
    4f14:	dd002015 	stw	r20,128(sp)
    4f18:	dc801e15 	stw	r18,120(sp)
    4f1c:	dc401d15 	stw	r17,116(sp)
    4f20:	dfc02515 	stw	ra,148(sp)
    4f24:	df002415 	stw	fp,144(sp)
    4f28:	ddc02315 	stw	r23,140(sp)
    4f2c:	dd802215 	stw	r22,136(sp)
    4f30:	dcc01f15 	stw	r19,124(sp)
    4f34:	dc001c15 	stw	r16,112(sp)
    4f38:	d9001615 	stw	r4,88(sp)
    4f3c:	3023883a 	mov	r17,r6
    4f40:	2829883a 	mov	r20,r5
    4f44:	d9c01715 	stw	r7,92(sp)
    4f48:	dc802817 	ldw	r18,160(sp)
    4f4c:	302b883a 	mov	r21,r6
    4f50:	40000a26 	beq	r8,zero,4f7c <_dtoa_r+0x74>
    4f54:	20801117 	ldw	r2,68(r4)
    4f58:	400b883a 	mov	r5,r8
    4f5c:	40800115 	stw	r2,4(r8)
    4f60:	20c01117 	ldw	r3,68(r4)
    4f64:	00800044 	movi	r2,1
    4f68:	10c4983a 	sll	r2,r2,r3
    4f6c:	40800215 	stw	r2,8(r8)
    4f70:	0007f640 	call	7f64 <_Bfree>
    4f74:	d8c01617 	ldw	r3,88(sp)
    4f78:	18001015 	stw	zero,64(r3)
    4f7c:	8800a316 	blt	r17,zero,520c <_dtoa_r+0x304>
    4f80:	90000015 	stw	zero,0(r18)
    4f84:	a8dffc2c 	andhi	r3,r21,32752
    4f88:	009ffc34 	movhi	r2,32752
    4f8c:	18809126 	beq	r3,r2,51d4 <_dtoa_r+0x2cc>
    4f90:	000d883a 	mov	r6,zero
    4f94:	000f883a 	mov	r7,zero
    4f98:	a009883a 	mov	r4,r20
    4f9c:	a80b883a 	mov	r5,r21
    4fa0:	dd001215 	stw	r20,72(sp)
    4fa4:	dd401315 	stw	r21,76(sp)
    4fa8:	000b4700 	call	b470 <__nedf2>
    4fac:	1000171e 	bne	r2,zero,500c <_dtoa_r+0x104>
    4fb0:	d9802717 	ldw	r6,156(sp)
    4fb4:	00800044 	movi	r2,1
    4fb8:	30800015 	stw	r2,0(r6)
    4fbc:	d8802917 	ldw	r2,164(sp)
    4fc0:	10029b26 	beq	r2,zero,5a30 <_dtoa_r+0xb28>
    4fc4:	d9002917 	ldw	r4,164(sp)
    4fc8:	00800074 	movhi	r2,1
    4fcc:	10889844 	addi	r2,r2,8801
    4fd0:	10ffffc4 	addi	r3,r2,-1
    4fd4:	20800015 	stw	r2,0(r4)
    4fd8:	1805883a 	mov	r2,r3
    4fdc:	dfc02517 	ldw	ra,148(sp)
    4fe0:	df002417 	ldw	fp,144(sp)
    4fe4:	ddc02317 	ldw	r23,140(sp)
    4fe8:	dd802217 	ldw	r22,136(sp)
    4fec:	dd402117 	ldw	r21,132(sp)
    4ff0:	dd002017 	ldw	r20,128(sp)
    4ff4:	dcc01f17 	ldw	r19,124(sp)
    4ff8:	dc801e17 	ldw	r18,120(sp)
    4ffc:	dc401d17 	ldw	r17,116(sp)
    5000:	dc001c17 	ldw	r16,112(sp)
    5004:	dec02604 	addi	sp,sp,152
    5008:	f800283a 	ret
    500c:	d9001617 	ldw	r4,88(sp)
    5010:	d9401217 	ldw	r5,72(sp)
    5014:	d8800104 	addi	r2,sp,4
    5018:	a80d883a 	mov	r6,r21
    501c:	d9c00204 	addi	r7,sp,8
    5020:	d8800015 	stw	r2,0(sp)
    5024:	00085a00 	call	85a0 <__d2b>
    5028:	d8800715 	stw	r2,28(sp)
    502c:	a804d53a 	srli	r2,r21,20
    5030:	1101ffcc 	andi	r4,r2,2047
    5034:	20008626 	beq	r4,zero,5250 <_dtoa_r+0x348>
    5038:	d8c01217 	ldw	r3,72(sp)
    503c:	00800434 	movhi	r2,16
    5040:	10bfffc4 	addi	r2,r2,-1
    5044:	ddc00117 	ldw	r23,4(sp)
    5048:	a884703a 	and	r2,r21,r2
    504c:	1811883a 	mov	r8,r3
    5050:	124ffc34 	orhi	r9,r2,16368
    5054:	25bf0044 	addi	r22,r4,-1023
    5058:	d8000815 	stw	zero,32(sp)
    505c:	0005883a 	mov	r2,zero
    5060:	00cffe34 	movhi	r3,16376
    5064:	480b883a 	mov	r5,r9
    5068:	4009883a 	mov	r4,r8
    506c:	180f883a 	mov	r7,r3
    5070:	100d883a 	mov	r6,r2
    5074:	000acd80 	call	acd8 <__subdf3>
    5078:	0218dbf4 	movhi	r8,25455
    507c:	4210d844 	addi	r8,r8,17249
    5080:	024ff4f4 	movhi	r9,16339
    5084:	4a61e9c4 	addi	r9,r9,-30809
    5088:	480f883a 	mov	r7,r9
    508c:	400d883a 	mov	r6,r8
    5090:	180b883a 	mov	r5,r3
    5094:	1009883a 	mov	r4,r2
    5098:	000adcc0 	call	adcc <__muldf3>
    509c:	0222d874 	movhi	r8,35681
    50a0:	42322cc4 	addi	r8,r8,-14157
    50a4:	024ff1f4 	movhi	r9,16327
    50a8:	4a628a04 	addi	r9,r9,-30168
    50ac:	480f883a 	mov	r7,r9
    50b0:	400d883a 	mov	r6,r8
    50b4:	180b883a 	mov	r5,r3
    50b8:	1009883a 	mov	r4,r2
    50bc:	000ad580 	call	ad58 <__adddf3>
    50c0:	b009883a 	mov	r4,r22
    50c4:	1021883a 	mov	r16,r2
    50c8:	1823883a 	mov	r17,r3
    50cc:	000b6900 	call	b690 <__floatsidf>
    50d0:	021427f4 	movhi	r8,20639
    50d4:	421e7ec4 	addi	r8,r8,31227
    50d8:	024ff4f4 	movhi	r9,16339
    50dc:	4a5104c4 	addi	r9,r9,17427
    50e0:	480f883a 	mov	r7,r9
    50e4:	400d883a 	mov	r6,r8
    50e8:	180b883a 	mov	r5,r3
    50ec:	1009883a 	mov	r4,r2
    50f0:	000adcc0 	call	adcc <__muldf3>
    50f4:	180f883a 	mov	r7,r3
    50f8:	880b883a 	mov	r5,r17
    50fc:	100d883a 	mov	r6,r2
    5100:	8009883a 	mov	r4,r16
    5104:	000ad580 	call	ad58 <__adddf3>
    5108:	1009883a 	mov	r4,r2
    510c:	180b883a 	mov	r5,r3
    5110:	1021883a 	mov	r16,r2
    5114:	1823883a 	mov	r17,r3
    5118:	000b7880 	call	b788 <__fixdfsi>
    511c:	000d883a 	mov	r6,zero
    5120:	000f883a 	mov	r7,zero
    5124:	8009883a 	mov	r4,r16
    5128:	880b883a 	mov	r5,r17
    512c:	d8800d15 	stw	r2,52(sp)
    5130:	000b6080 	call	b608 <__ltdf2>
    5134:	10031716 	blt	r2,zero,5d94 <_dtoa_r+0xe8c>
    5138:	d8c00d17 	ldw	r3,52(sp)
    513c:	00800584 	movi	r2,22
    5140:	10c1482e 	bgeu	r2,r3,5664 <_dtoa_r+0x75c>
    5144:	01000044 	movi	r4,1
    5148:	d9000c15 	stw	r4,48(sp)
    514c:	bd85c83a 	sub	r2,r23,r22
    5150:	11bfffc4 	addi	r6,r2,-1
    5154:	30030b16 	blt	r6,zero,5d84 <_dtoa_r+0xe7c>
    5158:	d9800a15 	stw	r6,40(sp)
    515c:	d8001115 	stw	zero,68(sp)
    5160:	d8c00d17 	ldw	r3,52(sp)
    5164:	1802ff16 	blt	r3,zero,5d64 <_dtoa_r+0xe5c>
    5168:	d9000a17 	ldw	r4,40(sp)
    516c:	d8c00915 	stw	r3,36(sp)
    5170:	d8001015 	stw	zero,64(sp)
    5174:	20c9883a 	add	r4,r4,r3
    5178:	d9000a15 	stw	r4,40(sp)
    517c:	d9001717 	ldw	r4,92(sp)
    5180:	00800244 	movi	r2,9
    5184:	11004636 	bltu	r2,r4,52a0 <_dtoa_r+0x398>
    5188:	00800144 	movi	r2,5
    518c:	11020416 	blt	r2,r4,59a0 <_dtoa_r+0xa98>
    5190:	04400044 	movi	r17,1
    5194:	d8c01717 	ldw	r3,92(sp)
    5198:	00800144 	movi	r2,5
    519c:	10c1ed36 	bltu	r2,r3,5954 <_dtoa_r+0xa4c>
    51a0:	18c5883a 	add	r2,r3,r3
    51a4:	1085883a 	add	r2,r2,r2
    51a8:	00c00034 	movhi	r3,0
    51ac:	18d46f04 	addi	r3,r3,20924
    51b0:	10c5883a 	add	r2,r2,r3
    51b4:	11000017 	ldw	r4,0(r2)
    51b8:	2000683a 	jmp	r4
    51bc:	000052a8 	cmpgeui	zero,zero,330
    51c0:	000052a8 	cmpgeui	zero,zero,330
    51c4:	00005ca8 	cmpgeui	zero,zero,370
    51c8:	00005c80 	call	5c8 <interval_timer_ISR+0x8>
    51cc:	00005cc4 	movi	zero,371
    51d0:	00005cd0 	cmplti	zero,zero,371
    51d4:	d9002717 	ldw	r4,156(sp)
    51d8:	0089c3c4 	movi	r2,9999
    51dc:	20800015 	stw	r2,0(r4)
    51e0:	a0001026 	beq	r20,zero,5224 <_dtoa_r+0x31c>
    51e4:	00c00074 	movhi	r3,1
    51e8:	18c8a404 	addi	r3,r3,8848
    51ec:	d9802917 	ldw	r6,164(sp)
    51f0:	303f7926 	beq	r6,zero,4fd8 <_dtoa_r+0xd0>
    51f4:	188000c7 	ldb	r2,3(r3)
    51f8:	190000c4 	addi	r4,r3,3
    51fc:	1000101e 	bne	r2,zero,5240 <_dtoa_r+0x338>
    5200:	d8802917 	ldw	r2,164(sp)
    5204:	11000015 	stw	r4,0(r2)
    5208:	003f7306 	br	4fd8 <_dtoa_r+0xd0>
    520c:	00a00034 	movhi	r2,32768
    5210:	10bfffc4 	addi	r2,r2,-1
    5214:	00c00044 	movi	r3,1
    5218:	88aa703a 	and	r21,r17,r2
    521c:	90c00015 	stw	r3,0(r18)
    5220:	003f5806 	br	4f84 <_dtoa_r+0x7c>
    5224:	00800434 	movhi	r2,16
    5228:	10bfffc4 	addi	r2,r2,-1
    522c:	a884703a 	and	r2,r21,r2
    5230:	103fec1e 	bne	r2,zero,51e4 <_dtoa_r+0x2dc>
    5234:	00c00074 	movhi	r3,1
    5238:	18c8a104 	addi	r3,r3,8836
    523c:	003feb06 	br	51ec <_dtoa_r+0x2e4>
    5240:	d8802917 	ldw	r2,164(sp)
    5244:	19000204 	addi	r4,r3,8
    5248:	11000015 	stw	r4,0(r2)
    524c:	003f6206 	br	4fd8 <_dtoa_r+0xd0>
    5250:	ddc00117 	ldw	r23,4(sp)
    5254:	d8800217 	ldw	r2,8(sp)
    5258:	01000804 	movi	r4,32
    525c:	b8c10c84 	addi	r3,r23,1074
    5260:	18a3883a 	add	r17,r3,r2
    5264:	2441b80e 	bge	r4,r17,5948 <_dtoa_r+0xa40>
    5268:	00c01004 	movi	r3,64
    526c:	1c47c83a 	sub	r3,r3,r17
    5270:	88bff804 	addi	r2,r17,-32
    5274:	a8c6983a 	sll	r3,r21,r3
    5278:	a084d83a 	srl	r2,r20,r2
    527c:	1888b03a 	or	r4,r3,r2
    5280:	000b8600 	call	b860 <__floatunsidf>
    5284:	1011883a 	mov	r8,r2
    5288:	00bf8434 	movhi	r2,65040
    528c:	01000044 	movi	r4,1
    5290:	10d3883a 	add	r9,r2,r3
    5294:	8dbef344 	addi	r22,r17,-1075
    5298:	d9000815 	stw	r4,32(sp)
    529c:	003f6f06 	br	505c <_dtoa_r+0x154>
    52a0:	d8001715 	stw	zero,92(sp)
    52a4:	04400044 	movi	r17,1
    52a8:	00bfffc4 	movi	r2,-1
    52ac:	00c00044 	movi	r3,1
    52b0:	d8800e15 	stw	r2,56(sp)
    52b4:	d8002615 	stw	zero,152(sp)
    52b8:	d8800f15 	stw	r2,60(sp)
    52bc:	d8c00b15 	stw	r3,44(sp)
    52c0:	1021883a 	mov	r16,r2
    52c4:	d8801617 	ldw	r2,88(sp)
    52c8:	10001115 	stw	zero,68(r2)
    52cc:	d8801617 	ldw	r2,88(sp)
    52d0:	11401117 	ldw	r5,68(r2)
    52d4:	1009883a 	mov	r4,r2
    52d8:	00084e40 	call	84e4 <_Balloc>
    52dc:	d8c01617 	ldw	r3,88(sp)
    52e0:	d8800515 	stw	r2,20(sp)
    52e4:	18801015 	stw	r2,64(r3)
    52e8:	00800384 	movi	r2,14
    52ec:	14006836 	bltu	r2,r16,5490 <_dtoa_r+0x588>
    52f0:	8805003a 	cmpeq	r2,r17,zero
    52f4:	1000661e 	bne	r2,zero,5490 <_dtoa_r+0x588>
    52f8:	d9000d17 	ldw	r4,52(sp)
    52fc:	0102300e 	bge	zero,r4,5bc0 <_dtoa_r+0xcb8>
    5300:	208003cc 	andi	r2,r4,15
    5304:	100490fa 	slli	r2,r2,3
    5308:	2025d13a 	srai	r18,r4,4
    530c:	00c00074 	movhi	r3,1
    5310:	18c8b604 	addi	r3,r3,8920
    5314:	10c5883a 	add	r2,r2,r3
    5318:	90c0040c 	andi	r3,r18,16
    531c:	14000017 	ldw	r16,0(r2)
    5320:	14400117 	ldw	r17,4(r2)
    5324:	18036a1e 	bne	r3,zero,60d0 <_dtoa_r+0x11c8>
    5328:	05800084 	movi	r22,2
    532c:	90001026 	beq	r18,zero,5370 <_dtoa_r+0x468>
    5330:	04c00074 	movhi	r19,1
    5334:	9cc8e804 	addi	r19,r19,9120
    5338:	9080004c 	andi	r2,r18,1
    533c:	1005003a 	cmpeq	r2,r2,zero
    5340:	1000081e 	bne	r2,zero,5364 <_dtoa_r+0x45c>
    5344:	99800017 	ldw	r6,0(r19)
    5348:	99c00117 	ldw	r7,4(r19)
    534c:	880b883a 	mov	r5,r17
    5350:	8009883a 	mov	r4,r16
    5354:	000adcc0 	call	adcc <__muldf3>
    5358:	1021883a 	mov	r16,r2
    535c:	b5800044 	addi	r22,r22,1
    5360:	1823883a 	mov	r17,r3
    5364:	9025d07a 	srai	r18,r18,1
    5368:	9cc00204 	addi	r19,r19,8
    536c:	903ff21e 	bne	r18,zero,5338 <_dtoa_r+0x430>
    5370:	a80b883a 	mov	r5,r21
    5374:	a009883a 	mov	r4,r20
    5378:	880f883a 	mov	r7,r17
    537c:	800d883a 	mov	r6,r16
    5380:	000b1900 	call	b190 <__divdf3>
    5384:	1029883a 	mov	r20,r2
    5388:	182b883a 	mov	r21,r3
    538c:	d8c00c17 	ldw	r3,48(sp)
    5390:	1805003a 	cmpeq	r2,r3,zero
    5394:	1000081e 	bne	r2,zero,53b8 <_dtoa_r+0x4b0>
    5398:	0005883a 	mov	r2,zero
    539c:	00cffc34 	movhi	r3,16368
    53a0:	180f883a 	mov	r7,r3
    53a4:	a009883a 	mov	r4,r20
    53a8:	a80b883a 	mov	r5,r21
    53ac:	100d883a 	mov	r6,r2
    53b0:	000b6080 	call	b608 <__ltdf2>
    53b4:	1003fe16 	blt	r2,zero,63b0 <_dtoa_r+0x14a8>
    53b8:	b009883a 	mov	r4,r22
    53bc:	000b6900 	call	b690 <__floatsidf>
    53c0:	180b883a 	mov	r5,r3
    53c4:	1009883a 	mov	r4,r2
    53c8:	a00d883a 	mov	r6,r20
    53cc:	a80f883a 	mov	r7,r21
    53d0:	000adcc0 	call	adcc <__muldf3>
    53d4:	0011883a 	mov	r8,zero
    53d8:	02500734 	movhi	r9,16412
    53dc:	1009883a 	mov	r4,r2
    53e0:	180b883a 	mov	r5,r3
    53e4:	480f883a 	mov	r7,r9
    53e8:	400d883a 	mov	r6,r8
    53ec:	000ad580 	call	ad58 <__adddf3>
    53f0:	d9000f17 	ldw	r4,60(sp)
    53f4:	102d883a 	mov	r22,r2
    53f8:	00bf3034 	movhi	r2,64704
    53fc:	18b9883a 	add	fp,r3,r2
    5400:	e02f883a 	mov	r23,fp
    5404:	20028f1e 	bne	r4,zero,5e44 <_dtoa_r+0xf3c>
    5408:	0005883a 	mov	r2,zero
    540c:	00d00534 	movhi	r3,16404
    5410:	a009883a 	mov	r4,r20
    5414:	a80b883a 	mov	r5,r21
    5418:	180f883a 	mov	r7,r3
    541c:	100d883a 	mov	r6,r2
    5420:	000acd80 	call	acd8 <__subdf3>
    5424:	1009883a 	mov	r4,r2
    5428:	e00f883a 	mov	r7,fp
    542c:	180b883a 	mov	r5,r3
    5430:	b00d883a 	mov	r6,r22
    5434:	1025883a 	mov	r18,r2
    5438:	1827883a 	mov	r19,r3
    543c:	000b4f80 	call	b4f8 <__gtdf2>
    5440:	00834f16 	blt	zero,r2,6180 <_dtoa_r+0x1278>
    5444:	e0e0003c 	xorhi	r3,fp,32768
    5448:	9009883a 	mov	r4,r18
    544c:	980b883a 	mov	r5,r19
    5450:	180f883a 	mov	r7,r3
    5454:	b00d883a 	mov	r6,r22
    5458:	000b6080 	call	b608 <__ltdf2>
    545c:	1000080e 	bge	r2,zero,5480 <_dtoa_r+0x578>
    5460:	0027883a 	mov	r19,zero
    5464:	0025883a 	mov	r18,zero
    5468:	d8802617 	ldw	r2,152(sp)
    546c:	df000517 	ldw	fp,20(sp)
    5470:	d8000615 	stw	zero,24(sp)
    5474:	0084303a 	nor	r2,zero,r2
    5478:	d8800d15 	stw	r2,52(sp)
    547c:	00019b06 	br	5aec <_dtoa_r+0xbe4>
    5480:	d9801217 	ldw	r6,72(sp)
    5484:	d8801317 	ldw	r2,76(sp)
    5488:	3029883a 	mov	r20,r6
    548c:	102b883a 	mov	r21,r2
    5490:	d8c00217 	ldw	r3,8(sp)
    5494:	18008516 	blt	r3,zero,56ac <_dtoa_r+0x7a4>
    5498:	d9000d17 	ldw	r4,52(sp)
    549c:	00800384 	movi	r2,14
    54a0:	11008216 	blt	r2,r4,56ac <_dtoa_r+0x7a4>
    54a4:	200490fa 	slli	r2,r4,3
    54a8:	d9802617 	ldw	r6,152(sp)
    54ac:	00c00074 	movhi	r3,1
    54b0:	18c8b604 	addi	r3,r3,8920
    54b4:	10c5883a 	add	r2,r2,r3
    54b8:	14800017 	ldw	r18,0(r2)
    54bc:	14c00117 	ldw	r19,4(r2)
    54c0:	30031e16 	blt	r6,zero,613c <_dtoa_r+0x1234>
    54c4:	d9000517 	ldw	r4,20(sp)
    54c8:	d8c00f17 	ldw	r3,60(sp)
    54cc:	a823883a 	mov	r17,r21
    54d0:	a021883a 	mov	r16,r20
    54d4:	192b883a 	add	r21,r3,r4
    54d8:	2039883a 	mov	fp,r4
    54dc:	00000f06 	br	551c <_dtoa_r+0x614>
    54e0:	0005883a 	mov	r2,zero
    54e4:	00d00934 	movhi	r3,16420
    54e8:	5009883a 	mov	r4,r10
    54ec:	580b883a 	mov	r5,r11
    54f0:	180f883a 	mov	r7,r3
    54f4:	100d883a 	mov	r6,r2
    54f8:	000adcc0 	call	adcc <__muldf3>
    54fc:	180b883a 	mov	r5,r3
    5500:	000d883a 	mov	r6,zero
    5504:	000f883a 	mov	r7,zero
    5508:	1009883a 	mov	r4,r2
    550c:	1021883a 	mov	r16,r2
    5510:	1823883a 	mov	r17,r3
    5514:	000b4700 	call	b470 <__nedf2>
    5518:	10004526 	beq	r2,zero,5630 <_dtoa_r+0x728>
    551c:	900d883a 	mov	r6,r18
    5520:	980f883a 	mov	r7,r19
    5524:	8009883a 	mov	r4,r16
    5528:	880b883a 	mov	r5,r17
    552c:	000b1900 	call	b190 <__divdf3>
    5530:	180b883a 	mov	r5,r3
    5534:	1009883a 	mov	r4,r2
    5538:	000b7880 	call	b788 <__fixdfsi>
    553c:	1009883a 	mov	r4,r2
    5540:	1029883a 	mov	r20,r2
    5544:	000b6900 	call	b690 <__floatsidf>
    5548:	180f883a 	mov	r7,r3
    554c:	9009883a 	mov	r4,r18
    5550:	980b883a 	mov	r5,r19
    5554:	100d883a 	mov	r6,r2
    5558:	000adcc0 	call	adcc <__muldf3>
    555c:	180f883a 	mov	r7,r3
    5560:	880b883a 	mov	r5,r17
    5564:	8009883a 	mov	r4,r16
    5568:	100d883a 	mov	r6,r2
    556c:	000acd80 	call	acd8 <__subdf3>
    5570:	1015883a 	mov	r10,r2
    5574:	a0800c04 	addi	r2,r20,48
    5578:	e0800005 	stb	r2,0(fp)
    557c:	e7000044 	addi	fp,fp,1
    5580:	1817883a 	mov	r11,r3
    5584:	e57fd61e 	bne	fp,r21,54e0 <_dtoa_r+0x5d8>
    5588:	500d883a 	mov	r6,r10
    558c:	180f883a 	mov	r7,r3
    5590:	5009883a 	mov	r4,r10
    5594:	180b883a 	mov	r5,r3
    5598:	000ad580 	call	ad58 <__adddf3>
    559c:	100d883a 	mov	r6,r2
    55a0:	9009883a 	mov	r4,r18
    55a4:	980b883a 	mov	r5,r19
    55a8:	180f883a 	mov	r7,r3
    55ac:	1021883a 	mov	r16,r2
    55b0:	1823883a 	mov	r17,r3
    55b4:	000b6080 	call	b608 <__ltdf2>
    55b8:	10000816 	blt	r2,zero,55dc <_dtoa_r+0x6d4>
    55bc:	980b883a 	mov	r5,r19
    55c0:	800d883a 	mov	r6,r16
    55c4:	880f883a 	mov	r7,r17
    55c8:	9009883a 	mov	r4,r18
    55cc:	000b3e80 	call	b3e8 <__eqdf2>
    55d0:	1000171e 	bne	r2,zero,5630 <_dtoa_r+0x728>
    55d4:	a080004c 	andi	r2,r20,1
    55d8:	10001526 	beq	r2,zero,5630 <_dtoa_r+0x728>
    55dc:	d8800d17 	ldw	r2,52(sp)
    55e0:	d8800415 	stw	r2,16(sp)
    55e4:	e009883a 	mov	r4,fp
    55e8:	213fffc4 	addi	r4,r4,-1
    55ec:	20c00007 	ldb	r3,0(r4)
    55f0:	00800e44 	movi	r2,57
    55f4:	1880081e 	bne	r3,r2,5618 <_dtoa_r+0x710>
    55f8:	d8800517 	ldw	r2,20(sp)
    55fc:	113ffa1e 	bne	r2,r4,55e8 <_dtoa_r+0x6e0>
    5600:	d8c00417 	ldw	r3,16(sp)
    5604:	d9800517 	ldw	r6,20(sp)
    5608:	00800c04 	movi	r2,48
    560c:	18c00044 	addi	r3,r3,1
    5610:	d8c00415 	stw	r3,16(sp)
    5614:	30800005 	stb	r2,0(r6)
    5618:	20800003 	ldbu	r2,0(r4)
    561c:	d8c00417 	ldw	r3,16(sp)
    5620:	27000044 	addi	fp,r4,1
    5624:	10800044 	addi	r2,r2,1
    5628:	d8c00d15 	stw	r3,52(sp)
    562c:	20800005 	stb	r2,0(r4)
    5630:	d9001617 	ldw	r4,88(sp)
    5634:	d9400717 	ldw	r5,28(sp)
    5638:	0007f640 	call	7f64 <_Bfree>
    563c:	e0000005 	stb	zero,0(fp)
    5640:	d9800d17 	ldw	r6,52(sp)
    5644:	d8c02717 	ldw	r3,156(sp)
    5648:	d9002917 	ldw	r4,164(sp)
    564c:	30800044 	addi	r2,r6,1
    5650:	18800015 	stw	r2,0(r3)
    5654:	20029c26 	beq	r4,zero,60c8 <_dtoa_r+0x11c0>
    5658:	d8c00517 	ldw	r3,20(sp)
    565c:	27000015 	stw	fp,0(r4)
    5660:	003e5d06 	br	4fd8 <_dtoa_r+0xd0>
    5664:	d9800d17 	ldw	r6,52(sp)
    5668:	00c00074 	movhi	r3,1
    566c:	18c8b604 	addi	r3,r3,8920
    5670:	d9001217 	ldw	r4,72(sp)
    5674:	300490fa 	slli	r2,r6,3
    5678:	d9401317 	ldw	r5,76(sp)
    567c:	10c5883a 	add	r2,r2,r3
    5680:	12000017 	ldw	r8,0(r2)
    5684:	12400117 	ldw	r9,4(r2)
    5688:	400d883a 	mov	r6,r8
    568c:	480f883a 	mov	r7,r9
    5690:	000b6080 	call	b608 <__ltdf2>
    5694:	1000030e 	bge	r2,zero,56a4 <_dtoa_r+0x79c>
    5698:	d8800d17 	ldw	r2,52(sp)
    569c:	10bfffc4 	addi	r2,r2,-1
    56a0:	d8800d15 	stw	r2,52(sp)
    56a4:	d8000c15 	stw	zero,48(sp)
    56a8:	003ea806 	br	514c <_dtoa_r+0x244>
    56ac:	d9000b17 	ldw	r4,44(sp)
    56b0:	202cc03a 	cmpne	r22,r4,zero
    56b4:	b000c71e 	bne	r22,zero,59d4 <_dtoa_r+0xacc>
    56b8:	dc001117 	ldw	r16,68(sp)
    56bc:	dc801017 	ldw	r18,64(sp)
    56c0:	0027883a 	mov	r19,zero
    56c4:	04000b0e 	bge	zero,r16,56f4 <_dtoa_r+0x7ec>
    56c8:	d8c00a17 	ldw	r3,40(sp)
    56cc:	00c0090e 	bge	zero,r3,56f4 <_dtoa_r+0x7ec>
    56d0:	8005883a 	mov	r2,r16
    56d4:	1c011316 	blt	r3,r16,5b24 <_dtoa_r+0xc1c>
    56d8:	d9000a17 	ldw	r4,40(sp)
    56dc:	d9801117 	ldw	r6,68(sp)
    56e0:	80a1c83a 	sub	r16,r16,r2
    56e4:	2089c83a 	sub	r4,r4,r2
    56e8:	308dc83a 	sub	r6,r6,r2
    56ec:	d9000a15 	stw	r4,40(sp)
    56f0:	d9801115 	stw	r6,68(sp)
    56f4:	d8801017 	ldw	r2,64(sp)
    56f8:	0080150e 	bge	zero,r2,5750 <_dtoa_r+0x848>
    56fc:	d8c00b17 	ldw	r3,44(sp)
    5700:	1805003a 	cmpeq	r2,r3,zero
    5704:	1001c91e 	bne	r2,zero,5e2c <_dtoa_r+0xf24>
    5708:	04800e0e 	bge	zero,r18,5744 <_dtoa_r+0x83c>
    570c:	d9001617 	ldw	r4,88(sp)
    5710:	980b883a 	mov	r5,r19
    5714:	900d883a 	mov	r6,r18
    5718:	0008d180 	call	8d18 <__pow5mult>
    571c:	d9001617 	ldw	r4,88(sp)
    5720:	d9800717 	ldw	r6,28(sp)
    5724:	100b883a 	mov	r5,r2
    5728:	1027883a 	mov	r19,r2
    572c:	00089f40 	call	89f4 <__multiply>
    5730:	d9001617 	ldw	r4,88(sp)
    5734:	d9400717 	ldw	r5,28(sp)
    5738:	1023883a 	mov	r17,r2
    573c:	0007f640 	call	7f64 <_Bfree>
    5740:	dc400715 	stw	r17,28(sp)
    5744:	d9001017 	ldw	r4,64(sp)
    5748:	248dc83a 	sub	r6,r4,r18
    574c:	30010e1e 	bne	r6,zero,5b88 <_dtoa_r+0xc80>
    5750:	d9001617 	ldw	r4,88(sp)
    5754:	04400044 	movi	r17,1
    5758:	880b883a 	mov	r5,r17
    575c:	0008bdc0 	call	8bdc <__i2b>
    5760:	d9800917 	ldw	r6,36(sp)
    5764:	1025883a 	mov	r18,r2
    5768:	0180040e 	bge	zero,r6,577c <_dtoa_r+0x874>
    576c:	d9001617 	ldw	r4,88(sp)
    5770:	100b883a 	mov	r5,r2
    5774:	0008d180 	call	8d18 <__pow5mult>
    5778:	1025883a 	mov	r18,r2
    577c:	d8801717 	ldw	r2,92(sp)
    5780:	8880f30e 	bge	r17,r2,5b50 <_dtoa_r+0xc48>
    5784:	0023883a 	mov	r17,zero
    5788:	d9800917 	ldw	r6,36(sp)
    578c:	30019e1e 	bne	r6,zero,5e08 <_dtoa_r+0xf00>
    5790:	00c00044 	movi	r3,1
    5794:	d9000a17 	ldw	r4,40(sp)
    5798:	20c5883a 	add	r2,r4,r3
    579c:	10c007cc 	andi	r3,r2,31
    57a0:	1800841e 	bne	r3,zero,59b4 <_dtoa_r+0xaac>
    57a4:	00800704 	movi	r2,28
    57a8:	d9000a17 	ldw	r4,40(sp)
    57ac:	d9801117 	ldw	r6,68(sp)
    57b0:	80a1883a 	add	r16,r16,r2
    57b4:	2089883a 	add	r4,r4,r2
    57b8:	308d883a 	add	r6,r6,r2
    57bc:	d9000a15 	stw	r4,40(sp)
    57c0:	d9801115 	stw	r6,68(sp)
    57c4:	d8801117 	ldw	r2,68(sp)
    57c8:	0080050e 	bge	zero,r2,57e0 <_dtoa_r+0x8d8>
    57cc:	d9400717 	ldw	r5,28(sp)
    57d0:	d9001617 	ldw	r4,88(sp)
    57d4:	100d883a 	mov	r6,r2
    57d8:	00088a80 	call	88a8 <__lshift>
    57dc:	d8800715 	stw	r2,28(sp)
    57e0:	d8c00a17 	ldw	r3,40(sp)
    57e4:	00c0050e 	bge	zero,r3,57fc <_dtoa_r+0x8f4>
    57e8:	d9001617 	ldw	r4,88(sp)
    57ec:	900b883a 	mov	r5,r18
    57f0:	180d883a 	mov	r6,r3
    57f4:	00088a80 	call	88a8 <__lshift>
    57f8:	1025883a 	mov	r18,r2
    57fc:	d9000c17 	ldw	r4,48(sp)
    5800:	2005003a 	cmpeq	r2,r4,zero
    5804:	10016f26 	beq	r2,zero,5dc4 <_dtoa_r+0xebc>
    5808:	d9000f17 	ldw	r4,60(sp)
    580c:	0102170e 	bge	zero,r4,606c <_dtoa_r+0x1164>
    5810:	d9800b17 	ldw	r6,44(sp)
    5814:	3005003a 	cmpeq	r2,r6,zero
    5818:	1000881e 	bne	r2,zero,5a3c <_dtoa_r+0xb34>
    581c:	0400050e 	bge	zero,r16,5834 <_dtoa_r+0x92c>
    5820:	d9001617 	ldw	r4,88(sp)
    5824:	980b883a 	mov	r5,r19
    5828:	800d883a 	mov	r6,r16
    582c:	00088a80 	call	88a8 <__lshift>
    5830:	1027883a 	mov	r19,r2
    5834:	8804c03a 	cmpne	r2,r17,zero
    5838:	1002541e 	bne	r2,zero,618c <_dtoa_r+0x1284>
    583c:	980b883a 	mov	r5,r19
    5840:	dd800517 	ldw	r22,20(sp)
    5844:	dcc00615 	stw	r19,24(sp)
    5848:	a700004c 	andi	fp,r20,1
    584c:	2827883a 	mov	r19,r5
    5850:	d9000717 	ldw	r4,28(sp)
    5854:	900b883a 	mov	r5,r18
    5858:	0004cf00 	call	4cf0 <quorem>
    585c:	d9000717 	ldw	r4,28(sp)
    5860:	d9400617 	ldw	r5,24(sp)
    5864:	1023883a 	mov	r17,r2
    5868:	8dc00c04 	addi	r23,r17,48
    586c:	00080c00 	call	80c0 <__mcmp>
    5870:	d9001617 	ldw	r4,88(sp)
    5874:	900b883a 	mov	r5,r18
    5878:	980d883a 	mov	r6,r19
    587c:	1029883a 	mov	r20,r2
    5880:	000871c0 	call	871c <__mdiff>
    5884:	102b883a 	mov	r21,r2
    5888:	10800317 	ldw	r2,12(r2)
    588c:	1001281e 	bne	r2,zero,5d30 <_dtoa_r+0xe28>
    5890:	d9000717 	ldw	r4,28(sp)
    5894:	a80b883a 	mov	r5,r21
    5898:	00080c00 	call	80c0 <__mcmp>
    589c:	d9001617 	ldw	r4,88(sp)
    58a0:	1021883a 	mov	r16,r2
    58a4:	a80b883a 	mov	r5,r21
    58a8:	0007f640 	call	7f64 <_Bfree>
    58ac:	8000041e 	bne	r16,zero,58c0 <_dtoa_r+0x9b8>
    58b0:	d8801717 	ldw	r2,92(sp)
    58b4:	1000021e 	bne	r2,zero,58c0 <_dtoa_r+0x9b8>
    58b8:	e004c03a 	cmpne	r2,fp,zero
    58bc:	10011726 	beq	r2,zero,5d1c <_dtoa_r+0xe14>
    58c0:	a0010616 	blt	r20,zero,5cdc <_dtoa_r+0xdd4>
    58c4:	a000041e 	bne	r20,zero,58d8 <_dtoa_r+0x9d0>
    58c8:	d8c01717 	ldw	r3,92(sp)
    58cc:	1800021e 	bne	r3,zero,58d8 <_dtoa_r+0x9d0>
    58d0:	e004c03a 	cmpne	r2,fp,zero
    58d4:	10010126 	beq	r2,zero,5cdc <_dtoa_r+0xdd4>
    58d8:	04023d16 	blt	zero,r16,61d0 <_dtoa_r+0x12c8>
    58dc:	b5c00005 	stb	r23,0(r22)
    58e0:	d9800517 	ldw	r6,20(sp)
    58e4:	d9000f17 	ldw	r4,60(sp)
    58e8:	b5800044 	addi	r22,r22,1
    58ec:	3105883a 	add	r2,r6,r4
    58f0:	b0806526 	beq	r22,r2,5a88 <_dtoa_r+0xb80>
    58f4:	d9400717 	ldw	r5,28(sp)
    58f8:	d9001617 	ldw	r4,88(sp)
    58fc:	01800284 	movi	r6,10
    5900:	000f883a 	mov	r7,zero
    5904:	0008c180 	call	8c18 <__multadd>
    5908:	d8800715 	stw	r2,28(sp)
    590c:	d8800617 	ldw	r2,24(sp)
    5910:	14c10c26 	beq	r2,r19,5d44 <_dtoa_r+0xe3c>
    5914:	d9400617 	ldw	r5,24(sp)
    5918:	d9001617 	ldw	r4,88(sp)
    591c:	01800284 	movi	r6,10
    5920:	000f883a 	mov	r7,zero
    5924:	0008c180 	call	8c18 <__multadd>
    5928:	d9001617 	ldw	r4,88(sp)
    592c:	980b883a 	mov	r5,r19
    5930:	01800284 	movi	r6,10
    5934:	000f883a 	mov	r7,zero
    5938:	d8800615 	stw	r2,24(sp)
    593c:	0008c180 	call	8c18 <__multadd>
    5940:	1027883a 	mov	r19,r2
    5944:	003fc206 	br	5850 <_dtoa_r+0x948>
    5948:	2445c83a 	sub	r2,r4,r17
    594c:	a088983a 	sll	r4,r20,r2
    5950:	003e4b06 	br	5280 <_dtoa_r+0x378>
    5954:	01bfffc4 	movi	r6,-1
    5958:	00800044 	movi	r2,1
    595c:	d9800e15 	stw	r6,56(sp)
    5960:	d9800f15 	stw	r6,60(sp)
    5964:	d8800b15 	stw	r2,44(sp)
    5968:	d8c01617 	ldw	r3,88(sp)
    596c:	008005c4 	movi	r2,23
    5970:	18001115 	stw	zero,68(r3)
    5974:	1580082e 	bgeu	r2,r22,5998 <_dtoa_r+0xa90>
    5978:	00c00104 	movi	r3,4
    597c:	0009883a 	mov	r4,zero
    5980:	18c7883a 	add	r3,r3,r3
    5984:	18800504 	addi	r2,r3,20
    5988:	21000044 	addi	r4,r4,1
    598c:	b0bffc2e 	bgeu	r22,r2,5980 <_dtoa_r+0xa78>
    5990:	d9801617 	ldw	r6,88(sp)
    5994:	31001115 	stw	r4,68(r6)
    5998:	dc000f17 	ldw	r16,60(sp)
    599c:	003e4b06 	br	52cc <_dtoa_r+0x3c4>
    59a0:	d9801717 	ldw	r6,92(sp)
    59a4:	0023883a 	mov	r17,zero
    59a8:	31bfff04 	addi	r6,r6,-4
    59ac:	d9801715 	stw	r6,92(sp)
    59b0:	003df806 	br	5194 <_dtoa_r+0x28c>
    59b4:	00800804 	movi	r2,32
    59b8:	10c9c83a 	sub	r4,r2,r3
    59bc:	00c00104 	movi	r3,4
    59c0:	19005a16 	blt	r3,r4,5b2c <_dtoa_r+0xc24>
    59c4:	008000c4 	movi	r2,3
    59c8:	113f7e16 	blt	r2,r4,57c4 <_dtoa_r+0x8bc>
    59cc:	20800704 	addi	r2,r4,28
    59d0:	003f7506 	br	57a8 <_dtoa_r+0x8a0>
    59d4:	d9801717 	ldw	r6,92(sp)
    59d8:	00800044 	movi	r2,1
    59dc:	1180a10e 	bge	r2,r6,5c64 <_dtoa_r+0xd5c>
    59e0:	d9800f17 	ldw	r6,60(sp)
    59e4:	d8c01017 	ldw	r3,64(sp)
    59e8:	30bfffc4 	addi	r2,r6,-1
    59ec:	1881c616 	blt	r3,r2,6108 <_dtoa_r+0x1200>
    59f0:	18a5c83a 	sub	r18,r3,r2
    59f4:	d8800f17 	ldw	r2,60(sp)
    59f8:	10026216 	blt	r2,zero,6384 <_dtoa_r+0x147c>
    59fc:	dc001117 	ldw	r16,68(sp)
    5a00:	1007883a 	mov	r3,r2
    5a04:	d9800a17 	ldw	r6,40(sp)
    5a08:	d8801117 	ldw	r2,68(sp)
    5a0c:	d9001617 	ldw	r4,88(sp)
    5a10:	30cd883a 	add	r6,r6,r3
    5a14:	10c5883a 	add	r2,r2,r3
    5a18:	01400044 	movi	r5,1
    5a1c:	d9800a15 	stw	r6,40(sp)
    5a20:	d8801115 	stw	r2,68(sp)
    5a24:	0008bdc0 	call	8bdc <__i2b>
    5a28:	1027883a 	mov	r19,r2
    5a2c:	003f2506 	br	56c4 <_dtoa_r+0x7bc>
    5a30:	00c00074 	movhi	r3,1
    5a34:	18c89804 	addi	r3,r3,8800
    5a38:	003d6706 	br	4fd8 <_dtoa_r+0xd0>
    5a3c:	dd800517 	ldw	r22,20(sp)
    5a40:	04000044 	movi	r16,1
    5a44:	00000706 	br	5a64 <_dtoa_r+0xb5c>
    5a48:	d9400717 	ldw	r5,28(sp)
    5a4c:	d9001617 	ldw	r4,88(sp)
    5a50:	01800284 	movi	r6,10
    5a54:	000f883a 	mov	r7,zero
    5a58:	0008c180 	call	8c18 <__multadd>
    5a5c:	d8800715 	stw	r2,28(sp)
    5a60:	84000044 	addi	r16,r16,1
    5a64:	d9000717 	ldw	r4,28(sp)
    5a68:	900b883a 	mov	r5,r18
    5a6c:	0004cf00 	call	4cf0 <quorem>
    5a70:	15c00c04 	addi	r23,r2,48
    5a74:	b5c00005 	stb	r23,0(r22)
    5a78:	d8c00f17 	ldw	r3,60(sp)
    5a7c:	b5800044 	addi	r22,r22,1
    5a80:	80fff116 	blt	r16,r3,5a48 <_dtoa_r+0xb40>
    5a84:	d8000615 	stw	zero,24(sp)
    5a88:	d9400717 	ldw	r5,28(sp)
    5a8c:	d9001617 	ldw	r4,88(sp)
    5a90:	01800044 	movi	r6,1
    5a94:	00088a80 	call	88a8 <__lshift>
    5a98:	1009883a 	mov	r4,r2
    5a9c:	900b883a 	mov	r5,r18
    5aa0:	d8800715 	stw	r2,28(sp)
    5aa4:	00080c00 	call	80c0 <__mcmp>
    5aa8:	00803c0e 	bge	zero,r2,5b9c <_dtoa_r+0xc94>
    5aac:	b009883a 	mov	r4,r22
    5ab0:	213fffc4 	addi	r4,r4,-1
    5ab4:	21400003 	ldbu	r5,0(r4)
    5ab8:	00800e44 	movi	r2,57
    5abc:	28c03fcc 	andi	r3,r5,255
    5ac0:	18c0201c 	xori	r3,r3,128
    5ac4:	18ffe004 	addi	r3,r3,-128
    5ac8:	1881981e 	bne	r3,r2,612c <_dtoa_r+0x1224>
    5acc:	d9800517 	ldw	r6,20(sp)
    5ad0:	21bff71e 	bne	r4,r6,5ab0 <_dtoa_r+0xba8>
    5ad4:	d8800d17 	ldw	r2,52(sp)
    5ad8:	37000044 	addi	fp,r6,1
    5adc:	10800044 	addi	r2,r2,1
    5ae0:	d8800d15 	stw	r2,52(sp)
    5ae4:	00800c44 	movi	r2,49
    5ae8:	30800005 	stb	r2,0(r6)
    5aec:	d9001617 	ldw	r4,88(sp)
    5af0:	900b883a 	mov	r5,r18
    5af4:	0007f640 	call	7f64 <_Bfree>
    5af8:	983ecd26 	beq	r19,zero,5630 <_dtoa_r+0x728>
    5afc:	d8c00617 	ldw	r3,24(sp)
    5b00:	18000426 	beq	r3,zero,5b14 <_dtoa_r+0xc0c>
    5b04:	1cc00326 	beq	r3,r19,5b14 <_dtoa_r+0xc0c>
    5b08:	d9001617 	ldw	r4,88(sp)
    5b0c:	180b883a 	mov	r5,r3
    5b10:	0007f640 	call	7f64 <_Bfree>
    5b14:	d9001617 	ldw	r4,88(sp)
    5b18:	980b883a 	mov	r5,r19
    5b1c:	0007f640 	call	7f64 <_Bfree>
    5b20:	003ec306 	br	5630 <_dtoa_r+0x728>
    5b24:	1805883a 	mov	r2,r3
    5b28:	003eeb06 	br	56d8 <_dtoa_r+0x7d0>
    5b2c:	d9800a17 	ldw	r6,40(sp)
    5b30:	d8c01117 	ldw	r3,68(sp)
    5b34:	20bfff04 	addi	r2,r4,-4
    5b38:	308d883a 	add	r6,r6,r2
    5b3c:	1887883a 	add	r3,r3,r2
    5b40:	80a1883a 	add	r16,r16,r2
    5b44:	d9800a15 	stw	r6,40(sp)
    5b48:	d8c01115 	stw	r3,68(sp)
    5b4c:	003f1d06 	br	57c4 <_dtoa_r+0x8bc>
    5b50:	a03f0c1e 	bne	r20,zero,5784 <_dtoa_r+0x87c>
    5b54:	00800434 	movhi	r2,16
    5b58:	10bfffc4 	addi	r2,r2,-1
    5b5c:	a884703a 	and	r2,r21,r2
    5b60:	103f081e 	bne	r2,zero,5784 <_dtoa_r+0x87c>
    5b64:	a89ffc2c 	andhi	r2,r21,32752
    5b68:	103f0626 	beq	r2,zero,5784 <_dtoa_r+0x87c>
    5b6c:	d8c01117 	ldw	r3,68(sp)
    5b70:	d9000a17 	ldw	r4,40(sp)
    5b74:	18c00044 	addi	r3,r3,1
    5b78:	21000044 	addi	r4,r4,1
    5b7c:	d8c01115 	stw	r3,68(sp)
    5b80:	d9000a15 	stw	r4,40(sp)
    5b84:	003f0006 	br	5788 <_dtoa_r+0x880>
    5b88:	d9400717 	ldw	r5,28(sp)
    5b8c:	d9001617 	ldw	r4,88(sp)
    5b90:	0008d180 	call	8d18 <__pow5mult>
    5b94:	d8800715 	stw	r2,28(sp)
    5b98:	003eed06 	br	5750 <_dtoa_r+0x848>
    5b9c:	1000021e 	bne	r2,zero,5ba8 <_dtoa_r+0xca0>
    5ba0:	b880004c 	andi	r2,r23,1
    5ba4:	103fc11e 	bne	r2,zero,5aac <_dtoa_r+0xba4>
    5ba8:	b5bfffc4 	addi	r22,r22,-1
    5bac:	b0c00007 	ldb	r3,0(r22)
    5bb0:	00800c04 	movi	r2,48
    5bb4:	18bffc26 	beq	r3,r2,5ba8 <_dtoa_r+0xca0>
    5bb8:	b7000044 	addi	fp,r22,1
    5bbc:	003fcb06 	br	5aec <_dtoa_r+0xbe4>
    5bc0:	d9800d17 	ldw	r6,52(sp)
    5bc4:	018fc83a 	sub	r7,zero,r6
    5bc8:	3801f726 	beq	r7,zero,63a8 <_dtoa_r+0x14a0>
    5bcc:	398003cc 	andi	r6,r7,15
    5bd0:	300c90fa 	slli	r6,r6,3
    5bd4:	01400074 	movhi	r5,1
    5bd8:	2948b604 	addi	r5,r5,8920
    5bdc:	d9001217 	ldw	r4,72(sp)
    5be0:	314d883a 	add	r6,r6,r5
    5be4:	30c00117 	ldw	r3,4(r6)
    5be8:	30800017 	ldw	r2,0(r6)
    5bec:	d9401317 	ldw	r5,76(sp)
    5bf0:	3821d13a 	srai	r16,r7,4
    5bf4:	100d883a 	mov	r6,r2
    5bf8:	180f883a 	mov	r7,r3
    5bfc:	000adcc0 	call	adcc <__muldf3>
    5c00:	1011883a 	mov	r8,r2
    5c04:	1813883a 	mov	r9,r3
    5c08:	1029883a 	mov	r20,r2
    5c0c:	182b883a 	mov	r21,r3
    5c10:	8001e526 	beq	r16,zero,63a8 <_dtoa_r+0x14a0>
    5c14:	05800084 	movi	r22,2
    5c18:	04400074 	movhi	r17,1
    5c1c:	8c48e804 	addi	r17,r17,9120
    5c20:	8080004c 	andi	r2,r16,1
    5c24:	1005003a 	cmpeq	r2,r2,zero
    5c28:	1000081e 	bne	r2,zero,5c4c <_dtoa_r+0xd44>
    5c2c:	89800017 	ldw	r6,0(r17)
    5c30:	89c00117 	ldw	r7,4(r17)
    5c34:	480b883a 	mov	r5,r9
    5c38:	4009883a 	mov	r4,r8
    5c3c:	000adcc0 	call	adcc <__muldf3>
    5c40:	1011883a 	mov	r8,r2
    5c44:	b5800044 	addi	r22,r22,1
    5c48:	1813883a 	mov	r9,r3
    5c4c:	8021d07a 	srai	r16,r16,1
    5c50:	8c400204 	addi	r17,r17,8
    5c54:	803ff21e 	bne	r16,zero,5c20 <_dtoa_r+0xd18>
    5c58:	4029883a 	mov	r20,r8
    5c5c:	482b883a 	mov	r21,r9
    5c60:	003dca06 	br	538c <_dtoa_r+0x484>
    5c64:	d9000817 	ldw	r4,32(sp)
    5c68:	2005003a 	cmpeq	r2,r4,zero
    5c6c:	1001f61e 	bne	r2,zero,6448 <_dtoa_r+0x1540>
    5c70:	dc001117 	ldw	r16,68(sp)
    5c74:	dc801017 	ldw	r18,64(sp)
    5c78:	18c10cc4 	addi	r3,r3,1075
    5c7c:	003f6106 	br	5a04 <_dtoa_r+0xafc>
    5c80:	d8000b15 	stw	zero,44(sp)
    5c84:	d9802617 	ldw	r6,152(sp)
    5c88:	d8c00d17 	ldw	r3,52(sp)
    5c8c:	30800044 	addi	r2,r6,1
    5c90:	18ad883a 	add	r22,r3,r2
    5c94:	b13fffc4 	addi	r4,r22,-1
    5c98:	d9000e15 	stw	r4,56(sp)
    5c9c:	0581f60e 	bge	zero,r22,6478 <_dtoa_r+0x1570>
    5ca0:	dd800f15 	stw	r22,60(sp)
    5ca4:	003f3006 	br	5968 <_dtoa_r+0xa60>
    5ca8:	d8000b15 	stw	zero,44(sp)
    5cac:	d9002617 	ldw	r4,152(sp)
    5cb0:	0101eb0e 	bge	zero,r4,6460 <_dtoa_r+0x1558>
    5cb4:	202d883a 	mov	r22,r4
    5cb8:	d9000e15 	stw	r4,56(sp)
    5cbc:	d9000f15 	stw	r4,60(sp)
    5cc0:	003f2906 	br	5968 <_dtoa_r+0xa60>
    5cc4:	01800044 	movi	r6,1
    5cc8:	d9800b15 	stw	r6,44(sp)
    5ccc:	003ff706 	br	5cac <_dtoa_r+0xda4>
    5cd0:	01000044 	movi	r4,1
    5cd4:	d9000b15 	stw	r4,44(sp)
    5cd8:	003fea06 	br	5c84 <_dtoa_r+0xd7c>
    5cdc:	04000c0e 	bge	zero,r16,5d10 <_dtoa_r+0xe08>
    5ce0:	d9400717 	ldw	r5,28(sp)
    5ce4:	d9001617 	ldw	r4,88(sp)
    5ce8:	01800044 	movi	r6,1
    5cec:	00088a80 	call	88a8 <__lshift>
    5cf0:	1009883a 	mov	r4,r2
    5cf4:	900b883a 	mov	r5,r18
    5cf8:	d8800715 	stw	r2,28(sp)
    5cfc:	00080c00 	call	80c0 <__mcmp>
    5d00:	0081e00e 	bge	zero,r2,6484 <_dtoa_r+0x157c>
    5d04:	bdc00044 	addi	r23,r23,1
    5d08:	00800e84 	movi	r2,58
    5d0c:	b881a226 	beq	r23,r2,6398 <_dtoa_r+0x1490>
    5d10:	b7000044 	addi	fp,r22,1
    5d14:	b5c00005 	stb	r23,0(r22)
    5d18:	003f7406 	br	5aec <_dtoa_r+0xbe4>
    5d1c:	00800e44 	movi	r2,57
    5d20:	b8819d26 	beq	r23,r2,6398 <_dtoa_r+0x1490>
    5d24:	053ffa0e 	bge	zero,r20,5d10 <_dtoa_r+0xe08>
    5d28:	8dc00c44 	addi	r23,r17,49
    5d2c:	003ff806 	br	5d10 <_dtoa_r+0xe08>
    5d30:	d9001617 	ldw	r4,88(sp)
    5d34:	a80b883a 	mov	r5,r21
    5d38:	04000044 	movi	r16,1
    5d3c:	0007f640 	call	7f64 <_Bfree>
    5d40:	003edf06 	br	58c0 <_dtoa_r+0x9b8>
    5d44:	d9001617 	ldw	r4,88(sp)
    5d48:	980b883a 	mov	r5,r19
    5d4c:	01800284 	movi	r6,10
    5d50:	000f883a 	mov	r7,zero
    5d54:	0008c180 	call	8c18 <__multadd>
    5d58:	1027883a 	mov	r19,r2
    5d5c:	d8800615 	stw	r2,24(sp)
    5d60:	003ebb06 	br	5850 <_dtoa_r+0x948>
    5d64:	d9801117 	ldw	r6,68(sp)
    5d68:	d8800d17 	ldw	r2,52(sp)
    5d6c:	d8000915 	stw	zero,36(sp)
    5d70:	308dc83a 	sub	r6,r6,r2
    5d74:	0087c83a 	sub	r3,zero,r2
    5d78:	d9801115 	stw	r6,68(sp)
    5d7c:	d8c01015 	stw	r3,64(sp)
    5d80:	003cfe06 	br	517c <_dtoa_r+0x274>
    5d84:	018dc83a 	sub	r6,zero,r6
    5d88:	d9801115 	stw	r6,68(sp)
    5d8c:	d8000a15 	stw	zero,40(sp)
    5d90:	003cf306 	br	5160 <_dtoa_r+0x258>
    5d94:	d9000d17 	ldw	r4,52(sp)
    5d98:	000b6900 	call	b690 <__floatsidf>
    5d9c:	880b883a 	mov	r5,r17
    5da0:	8009883a 	mov	r4,r16
    5da4:	180f883a 	mov	r7,r3
    5da8:	100d883a 	mov	r6,r2
    5dac:	000b4700 	call	b470 <__nedf2>
    5db0:	103ce126 	beq	r2,zero,5138 <_dtoa_r+0x230>
    5db4:	d9800d17 	ldw	r6,52(sp)
    5db8:	31bfffc4 	addi	r6,r6,-1
    5dbc:	d9800d15 	stw	r6,52(sp)
    5dc0:	003cdd06 	br	5138 <_dtoa_r+0x230>
    5dc4:	d9000717 	ldw	r4,28(sp)
    5dc8:	900b883a 	mov	r5,r18
    5dcc:	00080c00 	call	80c0 <__mcmp>
    5dd0:	103e8d0e 	bge	r2,zero,5808 <_dtoa_r+0x900>
    5dd4:	d9400717 	ldw	r5,28(sp)
    5dd8:	d9001617 	ldw	r4,88(sp)
    5ddc:	01800284 	movi	r6,10
    5de0:	000f883a 	mov	r7,zero
    5de4:	0008c180 	call	8c18 <__multadd>
    5de8:	d9800d17 	ldw	r6,52(sp)
    5dec:	d8800715 	stw	r2,28(sp)
    5df0:	31bfffc4 	addi	r6,r6,-1
    5df4:	d9800d15 	stw	r6,52(sp)
    5df8:	b001a71e 	bne	r22,zero,6498 <_dtoa_r+0x1590>
    5dfc:	d8800e17 	ldw	r2,56(sp)
    5e00:	d8800f15 	stw	r2,60(sp)
    5e04:	003e8006 	br	5808 <_dtoa_r+0x900>
    5e08:	90800417 	ldw	r2,16(r18)
    5e0c:	1085883a 	add	r2,r2,r2
    5e10:	1085883a 	add	r2,r2,r2
    5e14:	1485883a 	add	r2,r2,r18
    5e18:	11000417 	ldw	r4,16(r2)
    5e1c:	0007f8c0 	call	7f8c <__hi0bits>
    5e20:	00c00804 	movi	r3,32
    5e24:	1887c83a 	sub	r3,r3,r2
    5e28:	003e5a06 	br	5794 <_dtoa_r+0x88c>
    5e2c:	d9400717 	ldw	r5,28(sp)
    5e30:	d9801017 	ldw	r6,64(sp)
    5e34:	d9001617 	ldw	r4,88(sp)
    5e38:	0008d180 	call	8d18 <__pow5mult>
    5e3c:	d8800715 	stw	r2,28(sp)
    5e40:	003e4306 	br	5750 <_dtoa_r+0x848>
    5e44:	d9800f17 	ldw	r6,60(sp)
    5e48:	d8800d17 	ldw	r2,52(sp)
    5e4c:	d9800315 	stw	r6,12(sp)
    5e50:	d8800415 	stw	r2,16(sp)
    5e54:	d8c00b17 	ldw	r3,44(sp)
    5e58:	1805003a 	cmpeq	r2,r3,zero
    5e5c:	1000e21e 	bne	r2,zero,61e8 <_dtoa_r+0x12e0>
    5e60:	d9000317 	ldw	r4,12(sp)
    5e64:	0005883a 	mov	r2,zero
    5e68:	00cff834 	movhi	r3,16352
    5e6c:	200c90fa 	slli	r6,r4,3
    5e70:	01000074 	movhi	r4,1
    5e74:	2108b604 	addi	r4,r4,8920
    5e78:	180b883a 	mov	r5,r3
    5e7c:	310d883a 	add	r6,r6,r4
    5e80:	327fff17 	ldw	r9,-4(r6)
    5e84:	323ffe17 	ldw	r8,-8(r6)
    5e88:	1009883a 	mov	r4,r2
    5e8c:	480f883a 	mov	r7,r9
    5e90:	400d883a 	mov	r6,r8
    5e94:	000b1900 	call	b190 <__divdf3>
    5e98:	180b883a 	mov	r5,r3
    5e9c:	b00d883a 	mov	r6,r22
    5ea0:	b80f883a 	mov	r7,r23
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	000acd80 	call	acd8 <__subdf3>
    5eac:	a80b883a 	mov	r5,r21
    5eb0:	a009883a 	mov	r4,r20
    5eb4:	d8c01915 	stw	r3,100(sp)
    5eb8:	d8801815 	stw	r2,96(sp)
    5ebc:	000b7880 	call	b788 <__fixdfsi>
    5ec0:	1009883a 	mov	r4,r2
    5ec4:	1027883a 	mov	r19,r2
    5ec8:	000b6900 	call	b690 <__floatsidf>
    5ecc:	a80b883a 	mov	r5,r21
    5ed0:	a009883a 	mov	r4,r20
    5ed4:	180f883a 	mov	r7,r3
    5ed8:	100d883a 	mov	r6,r2
    5edc:	000acd80 	call	acd8 <__subdf3>
    5ee0:	d9801817 	ldw	r6,96(sp)
    5ee4:	1823883a 	mov	r17,r3
    5ee8:	d8801415 	stw	r2,80(sp)
    5eec:	302d883a 	mov	r22,r6
    5ef0:	d9800517 	ldw	r6,20(sp)
    5ef4:	9cc00c04 	addi	r19,r19,48
    5ef8:	dc401515 	stw	r17,84(sp)
    5efc:	d8c01917 	ldw	r3,100(sp)
    5f00:	34c00005 	stb	r19,0(r6)
    5f04:	d8800517 	ldw	r2,20(sp)
    5f08:	d9401917 	ldw	r5,100(sp)
    5f0c:	d9801417 	ldw	r6,80(sp)
    5f10:	b009883a 	mov	r4,r22
    5f14:	880f883a 	mov	r7,r17
    5f18:	182f883a 	mov	r23,r3
    5f1c:	17000044 	addi	fp,r2,1
    5f20:	000b4f80 	call	b4f8 <__gtdf2>
    5f24:	00804e16 	blt	zero,r2,6060 <_dtoa_r+0x1158>
    5f28:	d9801417 	ldw	r6,80(sp)
    5f2c:	0005883a 	mov	r2,zero
    5f30:	00cffc34 	movhi	r3,16368
    5f34:	180b883a 	mov	r5,r3
    5f38:	880f883a 	mov	r7,r17
    5f3c:	1009883a 	mov	r4,r2
    5f40:	000acd80 	call	acd8 <__subdf3>
    5f44:	d9401917 	ldw	r5,100(sp)
    5f48:	180f883a 	mov	r7,r3
    5f4c:	b009883a 	mov	r4,r22
    5f50:	100d883a 	mov	r6,r2
    5f54:	000b4f80 	call	b4f8 <__gtdf2>
    5f58:	00bda216 	blt	zero,r2,55e4 <_dtoa_r+0x6dc>
    5f5c:	d8c00317 	ldw	r3,12(sp)
    5f60:	00800044 	movi	r2,1
    5f64:	10c01216 	blt	r2,r3,5fb0 <_dtoa_r+0x10a8>
    5f68:	003d4506 	br	5480 <_dtoa_r+0x578>
    5f6c:	d9801417 	ldw	r6,80(sp)
    5f70:	0005883a 	mov	r2,zero
    5f74:	00cffc34 	movhi	r3,16368
    5f78:	180b883a 	mov	r5,r3
    5f7c:	880f883a 	mov	r7,r17
    5f80:	1009883a 	mov	r4,r2
    5f84:	000acd80 	call	acd8 <__subdf3>
    5f88:	d9c01b17 	ldw	r7,108(sp)
    5f8c:	180b883a 	mov	r5,r3
    5f90:	1009883a 	mov	r4,r2
    5f94:	b00d883a 	mov	r6,r22
    5f98:	000b6080 	call	b608 <__ltdf2>
    5f9c:	103d9116 	blt	r2,zero,55e4 <_dtoa_r+0x6dc>
    5fa0:	d9800517 	ldw	r6,20(sp)
    5fa4:	d9000317 	ldw	r4,12(sp)
    5fa8:	3105883a 	add	r2,r6,r4
    5fac:	e0bd3426 	beq	fp,r2,5480 <_dtoa_r+0x578>
    5fb0:	04500934 	movhi	r17,16420
    5fb4:	0021883a 	mov	r16,zero
    5fb8:	b80b883a 	mov	r5,r23
    5fbc:	b009883a 	mov	r4,r22
    5fc0:	800d883a 	mov	r6,r16
    5fc4:	880f883a 	mov	r7,r17
    5fc8:	000adcc0 	call	adcc <__muldf3>
    5fcc:	d9401517 	ldw	r5,84(sp)
    5fd0:	d9001417 	ldw	r4,80(sp)
    5fd4:	880f883a 	mov	r7,r17
    5fd8:	000d883a 	mov	r6,zero
    5fdc:	d8801a15 	stw	r2,104(sp)
    5fe0:	d8c01b15 	stw	r3,108(sp)
    5fe4:	000adcc0 	call	adcc <__muldf3>
    5fe8:	180b883a 	mov	r5,r3
    5fec:	1009883a 	mov	r4,r2
    5ff0:	1823883a 	mov	r17,r3
    5ff4:	1021883a 	mov	r16,r2
    5ff8:	000b7880 	call	b788 <__fixdfsi>
    5ffc:	1009883a 	mov	r4,r2
    6000:	102b883a 	mov	r21,r2
    6004:	000b6900 	call	b690 <__floatsidf>
    6008:	880b883a 	mov	r5,r17
    600c:	8009883a 	mov	r4,r16
    6010:	180f883a 	mov	r7,r3
    6014:	100d883a 	mov	r6,r2
    6018:	000acd80 	call	acd8 <__subdf3>
    601c:	1021883a 	mov	r16,r2
    6020:	d9001b17 	ldw	r4,108(sp)
    6024:	1823883a 	mov	r17,r3
    6028:	dc001415 	stw	r16,80(sp)
    602c:	ad400c04 	addi	r21,r21,48
    6030:	dc401515 	stw	r17,84(sp)
    6034:	d8801a17 	ldw	r2,104(sp)
    6038:	e5400005 	stb	r21,0(fp)
    603c:	202f883a 	mov	r23,r4
    6040:	d9c01b17 	ldw	r7,108(sp)
    6044:	d9001417 	ldw	r4,80(sp)
    6048:	880b883a 	mov	r5,r17
    604c:	100d883a 	mov	r6,r2
    6050:	102d883a 	mov	r22,r2
    6054:	e7000044 	addi	fp,fp,1
    6058:	000b6080 	call	b608 <__ltdf2>
    605c:	103fc30e 	bge	r2,zero,5f6c <_dtoa_r+0x1064>
    6060:	d9000417 	ldw	r4,16(sp)
    6064:	d9000d15 	stw	r4,52(sp)
    6068:	003d7106 	br	5630 <_dtoa_r+0x728>
    606c:	d9801717 	ldw	r6,92(sp)
    6070:	00800084 	movi	r2,2
    6074:	11bde60e 	bge	r2,r6,5810 <_dtoa_r+0x908>
    6078:	203cfb1e 	bne	r4,zero,5468 <_dtoa_r+0x560>
    607c:	d9001617 	ldw	r4,88(sp)
    6080:	900b883a 	mov	r5,r18
    6084:	01800144 	movi	r6,5
    6088:	000f883a 	mov	r7,zero
    608c:	0008c180 	call	8c18 <__multadd>
    6090:	d9000717 	ldw	r4,28(sp)
    6094:	100b883a 	mov	r5,r2
    6098:	1025883a 	mov	r18,r2
    609c:	00080c00 	call	80c0 <__mcmp>
    60a0:	00bcf10e 	bge	zero,r2,5468 <_dtoa_r+0x560>
    60a4:	d8c00d17 	ldw	r3,52(sp)
    60a8:	d9000517 	ldw	r4,20(sp)
    60ac:	d8000615 	stw	zero,24(sp)
    60b0:	18c00044 	addi	r3,r3,1
    60b4:	d8c00d15 	stw	r3,52(sp)
    60b8:	00800c44 	movi	r2,49
    60bc:	27000044 	addi	fp,r4,1
    60c0:	20800005 	stb	r2,0(r4)
    60c4:	003e8906 	br	5aec <_dtoa_r+0xbe4>
    60c8:	d8c00517 	ldw	r3,20(sp)
    60cc:	003bc206 	br	4fd8 <_dtoa_r+0xd0>
    60d0:	01800074 	movhi	r6,1
    60d4:	3188e804 	addi	r6,r6,9120
    60d8:	30c00917 	ldw	r3,36(r6)
    60dc:	30800817 	ldw	r2,32(r6)
    60e0:	d9001217 	ldw	r4,72(sp)
    60e4:	d9401317 	ldw	r5,76(sp)
    60e8:	180f883a 	mov	r7,r3
    60ec:	100d883a 	mov	r6,r2
    60f0:	000b1900 	call	b190 <__divdf3>
    60f4:	948003cc 	andi	r18,r18,15
    60f8:	058000c4 	movi	r22,3
    60fc:	1029883a 	mov	r20,r2
    6100:	182b883a 	mov	r21,r3
    6104:	003c8906 	br	532c <_dtoa_r+0x424>
    6108:	d9001017 	ldw	r4,64(sp)
    610c:	d9800917 	ldw	r6,36(sp)
    6110:	0025883a 	mov	r18,zero
    6114:	1105c83a 	sub	r2,r2,r4
    6118:	2089883a 	add	r4,r4,r2
    611c:	308d883a 	add	r6,r6,r2
    6120:	d9001015 	stw	r4,64(sp)
    6124:	d9800915 	stw	r6,36(sp)
    6128:	003e3206 	br	59f4 <_dtoa_r+0xaec>
    612c:	28800044 	addi	r2,r5,1
    6130:	27000044 	addi	fp,r4,1
    6134:	20800005 	stb	r2,0(r4)
    6138:	003e6c06 	br	5aec <_dtoa_r+0xbe4>
    613c:	d8800f17 	ldw	r2,60(sp)
    6140:	00bce016 	blt	zero,r2,54c4 <_dtoa_r+0x5bc>
    6144:	d9800f17 	ldw	r6,60(sp)
    6148:	303cc51e 	bne	r6,zero,5460 <_dtoa_r+0x558>
    614c:	0005883a 	mov	r2,zero
    6150:	00d00534 	movhi	r3,16404
    6154:	980b883a 	mov	r5,r19
    6158:	180f883a 	mov	r7,r3
    615c:	9009883a 	mov	r4,r18
    6160:	100d883a 	mov	r6,r2
    6164:	000adcc0 	call	adcc <__muldf3>
    6168:	180b883a 	mov	r5,r3
    616c:	a80f883a 	mov	r7,r21
    6170:	1009883a 	mov	r4,r2
    6174:	a00d883a 	mov	r6,r20
    6178:	000b5800 	call	b580 <__gedf2>
    617c:	103cb80e 	bge	r2,zero,5460 <_dtoa_r+0x558>
    6180:	0027883a 	mov	r19,zero
    6184:	0025883a 	mov	r18,zero
    6188:	003fc606 	br	60a4 <_dtoa_r+0x119c>
    618c:	99400117 	ldw	r5,4(r19)
    6190:	d9001617 	ldw	r4,88(sp)
    6194:	00084e40 	call	84e4 <_Balloc>
    6198:	99800417 	ldw	r6,16(r19)
    619c:	11000304 	addi	r4,r2,12
    61a0:	99400304 	addi	r5,r19,12
    61a4:	318d883a 	add	r6,r6,r6
    61a8:	318d883a 	add	r6,r6,r6
    61ac:	31800204 	addi	r6,r6,8
    61b0:	1023883a 	mov	r17,r2
    61b4:	0002adc0 	call	2adc <memcpy>
    61b8:	d9001617 	ldw	r4,88(sp)
    61bc:	880b883a 	mov	r5,r17
    61c0:	01800044 	movi	r6,1
    61c4:	00088a80 	call	88a8 <__lshift>
    61c8:	100b883a 	mov	r5,r2
    61cc:	003d9c06 	br	5840 <_dtoa_r+0x938>
    61d0:	00800e44 	movi	r2,57
    61d4:	b8807026 	beq	r23,r2,6398 <_dtoa_r+0x1490>
    61d8:	b8800044 	addi	r2,r23,1
    61dc:	b7000044 	addi	fp,r22,1
    61e0:	b0800005 	stb	r2,0(r22)
    61e4:	003e4106 	br	5aec <_dtoa_r+0xbe4>
    61e8:	d8800317 	ldw	r2,12(sp)
    61ec:	01800074 	movhi	r6,1
    61f0:	3188b604 	addi	r6,r6,8920
    61f4:	b009883a 	mov	r4,r22
    61f8:	100e90fa 	slli	r7,r2,3
    61fc:	b80b883a 	mov	r5,r23
    6200:	398f883a 	add	r7,r7,r6
    6204:	38bffe17 	ldw	r2,-8(r7)
    6208:	d9800517 	ldw	r6,20(sp)
    620c:	38ffff17 	ldw	r3,-4(r7)
    6210:	37000044 	addi	fp,r6,1
    6214:	180f883a 	mov	r7,r3
    6218:	100d883a 	mov	r6,r2
    621c:	000adcc0 	call	adcc <__muldf3>
    6220:	a80b883a 	mov	r5,r21
    6224:	a009883a 	mov	r4,r20
    6228:	182f883a 	mov	r23,r3
    622c:	102d883a 	mov	r22,r2
    6230:	000b7880 	call	b788 <__fixdfsi>
    6234:	1009883a 	mov	r4,r2
    6238:	1027883a 	mov	r19,r2
    623c:	000b6900 	call	b690 <__floatsidf>
    6240:	a80b883a 	mov	r5,r21
    6244:	a009883a 	mov	r4,r20
    6248:	180f883a 	mov	r7,r3
    624c:	100d883a 	mov	r6,r2
    6250:	000acd80 	call	acd8 <__subdf3>
    6254:	180b883a 	mov	r5,r3
    6258:	d8c00517 	ldw	r3,20(sp)
    625c:	9cc00c04 	addi	r19,r19,48
    6260:	1009883a 	mov	r4,r2
    6264:	1cc00005 	stb	r19,0(r3)
    6268:	2021883a 	mov	r16,r4
    626c:	d9000317 	ldw	r4,12(sp)
    6270:	00800044 	movi	r2,1
    6274:	2823883a 	mov	r17,r5
    6278:	20802226 	beq	r4,r2,6304 <_dtoa_r+0x13fc>
    627c:	1029883a 	mov	r20,r2
    6280:	0005883a 	mov	r2,zero
    6284:	00d00934 	movhi	r3,16420
    6288:	180f883a 	mov	r7,r3
    628c:	100d883a 	mov	r6,r2
    6290:	880b883a 	mov	r5,r17
    6294:	8009883a 	mov	r4,r16
    6298:	000adcc0 	call	adcc <__muldf3>
    629c:	180b883a 	mov	r5,r3
    62a0:	1009883a 	mov	r4,r2
    62a4:	1823883a 	mov	r17,r3
    62a8:	1021883a 	mov	r16,r2
    62ac:	000b7880 	call	b788 <__fixdfsi>
    62b0:	1009883a 	mov	r4,r2
    62b4:	102b883a 	mov	r21,r2
    62b8:	000b6900 	call	b690 <__floatsidf>
    62bc:	880b883a 	mov	r5,r17
    62c0:	8009883a 	mov	r4,r16
    62c4:	180f883a 	mov	r7,r3
    62c8:	100d883a 	mov	r6,r2
    62cc:	000acd80 	call	acd8 <__subdf3>
    62d0:	180b883a 	mov	r5,r3
    62d4:	d8c00517 	ldw	r3,20(sp)
    62d8:	1009883a 	mov	r4,r2
    62dc:	ad400c04 	addi	r21,r21,48
    62e0:	1d05883a 	add	r2,r3,r20
    62e4:	15400005 	stb	r21,0(r2)
    62e8:	2021883a 	mov	r16,r4
    62ec:	d9000317 	ldw	r4,12(sp)
    62f0:	a5000044 	addi	r20,r20,1
    62f4:	2823883a 	mov	r17,r5
    62f8:	a13fe11e 	bne	r20,r4,6280 <_dtoa_r+0x1378>
    62fc:	e505883a 	add	r2,fp,r20
    6300:	173fffc4 	addi	fp,r2,-1
    6304:	0025883a 	mov	r18,zero
    6308:	04cff834 	movhi	r19,16352
    630c:	b009883a 	mov	r4,r22
    6310:	b80b883a 	mov	r5,r23
    6314:	900d883a 	mov	r6,r18
    6318:	980f883a 	mov	r7,r19
    631c:	000ad580 	call	ad58 <__adddf3>
    6320:	180b883a 	mov	r5,r3
    6324:	1009883a 	mov	r4,r2
    6328:	800d883a 	mov	r6,r16
    632c:	880f883a 	mov	r7,r17
    6330:	000b6080 	call	b608 <__ltdf2>
    6334:	103cab16 	blt	r2,zero,55e4 <_dtoa_r+0x6dc>
    6338:	0009883a 	mov	r4,zero
    633c:	980b883a 	mov	r5,r19
    6340:	b80f883a 	mov	r7,r23
    6344:	b00d883a 	mov	r6,r22
    6348:	000acd80 	call	acd8 <__subdf3>
    634c:	180b883a 	mov	r5,r3
    6350:	880f883a 	mov	r7,r17
    6354:	1009883a 	mov	r4,r2
    6358:	800d883a 	mov	r6,r16
    635c:	000b4f80 	call	b4f8 <__gtdf2>
    6360:	00bc470e 	bge	zero,r2,5480 <_dtoa_r+0x578>
    6364:	00c00c04 	movi	r3,48
    6368:	e73fffc4 	addi	fp,fp,-1
    636c:	e0800007 	ldb	r2,0(fp)
    6370:	10fffd26 	beq	r2,r3,6368 <_dtoa_r+0x1460>
    6374:	d9800417 	ldw	r6,16(sp)
    6378:	e7000044 	addi	fp,fp,1
    637c:	d9800d15 	stw	r6,52(sp)
    6380:	003cab06 	br	5630 <_dtoa_r+0x728>
    6384:	d8c00f17 	ldw	r3,60(sp)
    6388:	d9001117 	ldw	r4,68(sp)
    638c:	20e1c83a 	sub	r16,r4,r3
    6390:	0007883a 	mov	r3,zero
    6394:	003d9b06 	br	5a04 <_dtoa_r+0xafc>
    6398:	00800e44 	movi	r2,57
    639c:	b0800005 	stb	r2,0(r22)
    63a0:	b5800044 	addi	r22,r22,1
    63a4:	003dc106 	br	5aac <_dtoa_r+0xba4>
    63a8:	05800084 	movi	r22,2
    63ac:	003bf706 	br	538c <_dtoa_r+0x484>
    63b0:	d9000f17 	ldw	r4,60(sp)
    63b4:	013c000e 	bge	zero,r4,53b8 <_dtoa_r+0x4b0>
    63b8:	d9800e17 	ldw	r6,56(sp)
    63bc:	01bc300e 	bge	zero,r6,5480 <_dtoa_r+0x578>
    63c0:	0005883a 	mov	r2,zero
    63c4:	00d00934 	movhi	r3,16420
    63c8:	a80b883a 	mov	r5,r21
    63cc:	180f883a 	mov	r7,r3
    63d0:	a009883a 	mov	r4,r20
    63d4:	100d883a 	mov	r6,r2
    63d8:	000adcc0 	call	adcc <__muldf3>
    63dc:	b1000044 	addi	r4,r22,1
    63e0:	1021883a 	mov	r16,r2
    63e4:	1823883a 	mov	r17,r3
    63e8:	000b6900 	call	b690 <__floatsidf>
    63ec:	880b883a 	mov	r5,r17
    63f0:	8009883a 	mov	r4,r16
    63f4:	180f883a 	mov	r7,r3
    63f8:	100d883a 	mov	r6,r2
    63fc:	000adcc0 	call	adcc <__muldf3>
    6400:	0011883a 	mov	r8,zero
    6404:	02500734 	movhi	r9,16412
    6408:	180b883a 	mov	r5,r3
    640c:	480f883a 	mov	r7,r9
    6410:	1009883a 	mov	r4,r2
    6414:	400d883a 	mov	r6,r8
    6418:	000ad580 	call	ad58 <__adddf3>
    641c:	102d883a 	mov	r22,r2
    6420:	00bf3034 	movhi	r2,64704
    6424:	10ef883a 	add	r23,r2,r3
    6428:	d8800d17 	ldw	r2,52(sp)
    642c:	d8c00e17 	ldw	r3,56(sp)
    6430:	8029883a 	mov	r20,r16
    6434:	10bfffc4 	addi	r2,r2,-1
    6438:	882b883a 	mov	r21,r17
    643c:	d8800415 	stw	r2,16(sp)
    6440:	d8c00315 	stw	r3,12(sp)
    6444:	003e8306 	br	5e54 <_dtoa_r+0xf4c>
    6448:	d8800117 	ldw	r2,4(sp)
    644c:	dc001117 	ldw	r16,68(sp)
    6450:	dc801017 	ldw	r18,64(sp)
    6454:	00c00d84 	movi	r3,54
    6458:	1887c83a 	sub	r3,r3,r2
    645c:	003d6906 	br	5a04 <_dtoa_r+0xafc>
    6460:	01800044 	movi	r6,1
    6464:	3021883a 	mov	r16,r6
    6468:	d9800f15 	stw	r6,60(sp)
    646c:	d9802615 	stw	r6,152(sp)
    6470:	d9800e15 	stw	r6,56(sp)
    6474:	003b9306 	br	52c4 <_dtoa_r+0x3bc>
    6478:	b021883a 	mov	r16,r22
    647c:	dd800f15 	stw	r22,60(sp)
    6480:	003b9006 	br	52c4 <_dtoa_r+0x3bc>
    6484:	103e221e 	bne	r2,zero,5d10 <_dtoa_r+0xe08>
    6488:	b880004c 	andi	r2,r23,1
    648c:	1005003a 	cmpeq	r2,r2,zero
    6490:	103e1f1e 	bne	r2,zero,5d10 <_dtoa_r+0xe08>
    6494:	003e1b06 	br	5d04 <_dtoa_r+0xdfc>
    6498:	d9001617 	ldw	r4,88(sp)
    649c:	980b883a 	mov	r5,r19
    64a0:	01800284 	movi	r6,10
    64a4:	000f883a 	mov	r7,zero
    64a8:	0008c180 	call	8c18 <__multadd>
    64ac:	d8c00e17 	ldw	r3,56(sp)
    64b0:	1027883a 	mov	r19,r2
    64b4:	d8c00f15 	stw	r3,60(sp)
    64b8:	003cd306 	br	5808 <_dtoa_r+0x900>

000064bc <_fflush_r>:
    64bc:	defffb04 	addi	sp,sp,-20
    64c0:	dcc00315 	stw	r19,12(sp)
    64c4:	dc800215 	stw	r18,8(sp)
    64c8:	dfc00415 	stw	ra,16(sp)
    64cc:	dc400115 	stw	r17,4(sp)
    64d0:	dc000015 	stw	r16,0(sp)
    64d4:	2027883a 	mov	r19,r4
    64d8:	2825883a 	mov	r18,r5
    64dc:	20000226 	beq	r4,zero,64e8 <_fflush_r+0x2c>
    64e0:	20800e17 	ldw	r2,56(r4)
    64e4:	10005626 	beq	r2,zero,6640 <_fflush_r+0x184>
    64e8:	9100030b 	ldhu	r4,12(r18)
    64ec:	20ffffcc 	andi	r3,r4,65535
    64f0:	18e0001c 	xori	r3,r3,32768
    64f4:	18e00004 	addi	r3,r3,-32768
    64f8:	1880020c 	andi	r2,r3,8
    64fc:	1000261e 	bne	r2,zero,6598 <_fflush_r+0xdc>
    6500:	90c00117 	ldw	r3,4(r18)
    6504:	20820014 	ori	r2,r4,2048
    6508:	9080030d 	sth	r2,12(r18)
    650c:	1009883a 	mov	r4,r2
    6510:	00c0400e 	bge	zero,r3,6614 <_fflush_r+0x158>
    6514:	92000a17 	ldw	r8,40(r18)
    6518:	40004026 	beq	r8,zero,661c <_fflush_r+0x160>
    651c:	2084000c 	andi	r2,r4,4096
    6520:	10005326 	beq	r2,zero,6670 <_fflush_r+0x1b4>
    6524:	94001417 	ldw	r16,80(r18)
    6528:	9080030b 	ldhu	r2,12(r18)
    652c:	1080010c 	andi	r2,r2,4
    6530:	1000481e 	bne	r2,zero,6654 <_fflush_r+0x198>
    6534:	91400717 	ldw	r5,28(r18)
    6538:	9809883a 	mov	r4,r19
    653c:	800d883a 	mov	r6,r16
    6540:	000f883a 	mov	r7,zero
    6544:	403ee83a 	callr	r8
    6548:	8080261e 	bne	r16,r2,65e4 <_fflush_r+0x128>
    654c:	9080030b 	ldhu	r2,12(r18)
    6550:	91000417 	ldw	r4,16(r18)
    6554:	90000115 	stw	zero,4(r18)
    6558:	10bdffcc 	andi	r2,r2,63487
    655c:	10ffffcc 	andi	r3,r2,65535
    6560:	18c4000c 	andi	r3,r3,4096
    6564:	9080030d 	sth	r2,12(r18)
    6568:	91000015 	stw	r4,0(r18)
    656c:	18002b26 	beq	r3,zero,661c <_fflush_r+0x160>
    6570:	0007883a 	mov	r3,zero
    6574:	1805883a 	mov	r2,r3
    6578:	94001415 	stw	r16,80(r18)
    657c:	dfc00417 	ldw	ra,16(sp)
    6580:	dcc00317 	ldw	r19,12(sp)
    6584:	dc800217 	ldw	r18,8(sp)
    6588:	dc400117 	ldw	r17,4(sp)
    658c:	dc000017 	ldw	r16,0(sp)
    6590:	dec00504 	addi	sp,sp,20
    6594:	f800283a 	ret
    6598:	94400417 	ldw	r17,16(r18)
    659c:	88001f26 	beq	r17,zero,661c <_fflush_r+0x160>
    65a0:	90800017 	ldw	r2,0(r18)
    65a4:	18c000cc 	andi	r3,r3,3
    65a8:	94400015 	stw	r17,0(r18)
    65ac:	1461c83a 	sub	r16,r2,r17
    65b0:	18002526 	beq	r3,zero,6648 <_fflush_r+0x18c>
    65b4:	0005883a 	mov	r2,zero
    65b8:	90800215 	stw	r2,8(r18)
    65bc:	0400170e 	bge	zero,r16,661c <_fflush_r+0x160>
    65c0:	90c00917 	ldw	r3,36(r18)
    65c4:	91400717 	ldw	r5,28(r18)
    65c8:	880d883a 	mov	r6,r17
    65cc:	800f883a 	mov	r7,r16
    65d0:	9809883a 	mov	r4,r19
    65d4:	183ee83a 	callr	r3
    65d8:	88a3883a 	add	r17,r17,r2
    65dc:	80a1c83a 	sub	r16,r16,r2
    65e0:	00bff616 	blt	zero,r2,65bc <_fflush_r+0x100>
    65e4:	9080030b 	ldhu	r2,12(r18)
    65e8:	00ffffc4 	movi	r3,-1
    65ec:	10801014 	ori	r2,r2,64
    65f0:	9080030d 	sth	r2,12(r18)
    65f4:	1805883a 	mov	r2,r3
    65f8:	dfc00417 	ldw	ra,16(sp)
    65fc:	dcc00317 	ldw	r19,12(sp)
    6600:	dc800217 	ldw	r18,8(sp)
    6604:	dc400117 	ldw	r17,4(sp)
    6608:	dc000017 	ldw	r16,0(sp)
    660c:	dec00504 	addi	sp,sp,20
    6610:	f800283a 	ret
    6614:	90800f17 	ldw	r2,60(r18)
    6618:	00bfbe16 	blt	zero,r2,6514 <_fflush_r+0x58>
    661c:	0007883a 	mov	r3,zero
    6620:	1805883a 	mov	r2,r3
    6624:	dfc00417 	ldw	ra,16(sp)
    6628:	dcc00317 	ldw	r19,12(sp)
    662c:	dc800217 	ldw	r18,8(sp)
    6630:	dc400117 	ldw	r17,4(sp)
    6634:	dc000017 	ldw	r16,0(sp)
    6638:	dec00504 	addi	sp,sp,20
    663c:	f800283a 	ret
    6640:	00067540 	call	6754 <__sinit>
    6644:	003fa806 	br	64e8 <_fflush_r+0x2c>
    6648:	90800517 	ldw	r2,20(r18)
    664c:	90800215 	stw	r2,8(r18)
    6650:	003fda06 	br	65bc <_fflush_r+0x100>
    6654:	90800117 	ldw	r2,4(r18)
    6658:	90c00c17 	ldw	r3,48(r18)
    665c:	80a1c83a 	sub	r16,r16,r2
    6660:	183fb426 	beq	r3,zero,6534 <_fflush_r+0x78>
    6664:	90800f17 	ldw	r2,60(r18)
    6668:	80a1c83a 	sub	r16,r16,r2
    666c:	003fb106 	br	6534 <_fflush_r+0x78>
    6670:	91400717 	ldw	r5,28(r18)
    6674:	9809883a 	mov	r4,r19
    6678:	000d883a 	mov	r6,zero
    667c:	01c00044 	movi	r7,1
    6680:	403ee83a 	callr	r8
    6684:	1021883a 	mov	r16,r2
    6688:	00bfffc4 	movi	r2,-1
    668c:	80800226 	beq	r16,r2,6698 <_fflush_r+0x1dc>
    6690:	92000a17 	ldw	r8,40(r18)
    6694:	003fa406 	br	6528 <_fflush_r+0x6c>
    6698:	98c00017 	ldw	r3,0(r19)
    669c:	00800744 	movi	r2,29
    66a0:	18bfde26 	beq	r3,r2,661c <_fflush_r+0x160>
    66a4:	9080030b 	ldhu	r2,12(r18)
    66a8:	8007883a 	mov	r3,r16
    66ac:	10801014 	ori	r2,r2,64
    66b0:	9080030d 	sth	r2,12(r18)
    66b4:	003fcf06 	br	65f4 <_fflush_r+0x138>

000066b8 <fflush>:
    66b8:	01400034 	movhi	r5,0
    66bc:	29592f04 	addi	r5,r5,25788
    66c0:	2007883a 	mov	r3,r4
    66c4:	20000526 	beq	r4,zero,66dc <fflush+0x24>
    66c8:	00800074 	movhi	r2,1
    66cc:	108fde04 	addi	r2,r2,16248
    66d0:	11000017 	ldw	r4,0(r2)
    66d4:	180b883a 	mov	r5,r3
    66d8:	00064bc1 	jmpi	64bc <_fflush_r>
    66dc:	00800074 	movhi	r2,1
    66e0:	108fdf04 	addi	r2,r2,16252
    66e4:	11000017 	ldw	r4,0(r2)
    66e8:	00072881 	jmpi	7288 <_fwalk_reent>

000066ec <std>:
    66ec:	00800074 	movhi	r2,1
    66f0:	10a58b04 	addi	r2,r2,-27092
    66f4:	20800b15 	stw	r2,44(r4)
    66f8:	00800074 	movhi	r2,1
    66fc:	10a5c604 	addi	r2,r2,-26856
    6700:	20800815 	stw	r2,32(r4)
    6704:	00c00074 	movhi	r3,1
    6708:	18e5a704 	addi	r3,r3,-26980
    670c:	00800074 	movhi	r2,1
    6710:	10a58d04 	addi	r2,r2,-27084
    6714:	2140030d 	sth	r5,12(r4)
    6718:	2180038d 	sth	r6,14(r4)
    671c:	20c00915 	stw	r3,36(r4)
    6720:	20800a15 	stw	r2,40(r4)
    6724:	20000015 	stw	zero,0(r4)
    6728:	20000115 	stw	zero,4(r4)
    672c:	20000215 	stw	zero,8(r4)
    6730:	20000415 	stw	zero,16(r4)
    6734:	20000515 	stw	zero,20(r4)
    6738:	20000615 	stw	zero,24(r4)
    673c:	21000715 	stw	r4,28(r4)
    6740:	f800283a 	ret

00006744 <__sfp_lock_acquire>:
    6744:	f800283a 	ret

00006748 <__sfp_lock_release>:
    6748:	f800283a 	ret

0000674c <__sinit_lock_acquire>:
    674c:	f800283a 	ret

00006750 <__sinit_lock_release>:
    6750:	f800283a 	ret

00006754 <__sinit>:
    6754:	20800e17 	ldw	r2,56(r4)
    6758:	defffd04 	addi	sp,sp,-12
    675c:	dc400115 	stw	r17,4(sp)
    6760:	dc000015 	stw	r16,0(sp)
    6764:	dfc00215 	stw	ra,8(sp)
    6768:	04400044 	movi	r17,1
    676c:	01400104 	movi	r5,4
    6770:	000d883a 	mov	r6,zero
    6774:	2021883a 	mov	r16,r4
    6778:	2200bb04 	addi	r8,r4,748
    677c:	200f883a 	mov	r7,r4
    6780:	10000526 	beq	r2,zero,6798 <__sinit+0x44>
    6784:	dfc00217 	ldw	ra,8(sp)
    6788:	dc400117 	ldw	r17,4(sp)
    678c:	dc000017 	ldw	r16,0(sp)
    6790:	dec00304 	addi	sp,sp,12
    6794:	f800283a 	ret
    6798:	21000117 	ldw	r4,4(r4)
    679c:	00800034 	movhi	r2,0
    67a0:	109a0e04 	addi	r2,r2,26680
    67a4:	00c000c4 	movi	r3,3
    67a8:	80800f15 	stw	r2,60(r16)
    67ac:	80c0b915 	stw	r3,740(r16)
    67b0:	8200ba15 	stw	r8,744(r16)
    67b4:	84400e15 	stw	r17,56(r16)
    67b8:	8000b815 	stw	zero,736(r16)
    67bc:	00066ec0 	call	66ec <std>
    67c0:	81000217 	ldw	r4,8(r16)
    67c4:	880d883a 	mov	r6,r17
    67c8:	800f883a 	mov	r7,r16
    67cc:	01400284 	movi	r5,10
    67d0:	00066ec0 	call	66ec <std>
    67d4:	81000317 	ldw	r4,12(r16)
    67d8:	800f883a 	mov	r7,r16
    67dc:	01400484 	movi	r5,18
    67e0:	01800084 	movi	r6,2
    67e4:	dfc00217 	ldw	ra,8(sp)
    67e8:	dc400117 	ldw	r17,4(sp)
    67ec:	dc000017 	ldw	r16,0(sp)
    67f0:	dec00304 	addi	sp,sp,12
    67f4:	00066ec1 	jmpi	66ec <std>

000067f8 <__fp_lock>:
    67f8:	0005883a 	mov	r2,zero
    67fc:	f800283a 	ret

00006800 <__fp_unlock>:
    6800:	0005883a 	mov	r2,zero
    6804:	f800283a 	ret

00006808 <__fp_unlock_all>:
    6808:	00800074 	movhi	r2,1
    680c:	108fde04 	addi	r2,r2,16248
    6810:	11000017 	ldw	r4,0(r2)
    6814:	01400034 	movhi	r5,0
    6818:	295a0004 	addi	r5,r5,26624
    681c:	00073501 	jmpi	7350 <_fwalk>

00006820 <__fp_lock_all>:
    6820:	00800074 	movhi	r2,1
    6824:	108fde04 	addi	r2,r2,16248
    6828:	11000017 	ldw	r4,0(r2)
    682c:	01400034 	movhi	r5,0
    6830:	2959fe04 	addi	r5,r5,26616
    6834:	00073501 	jmpi	7350 <_fwalk>

00006838 <_cleanup_r>:
    6838:	01400074 	movhi	r5,1
    683c:	2966d504 	addi	r5,r5,-25772
    6840:	00073501 	jmpi	7350 <_fwalk>

00006844 <_cleanup>:
    6844:	00800074 	movhi	r2,1
    6848:	108fdf04 	addi	r2,r2,16252
    684c:	11000017 	ldw	r4,0(r2)
    6850:	00068381 	jmpi	6838 <_cleanup_r>

00006854 <__sfmoreglue>:
    6854:	defffc04 	addi	sp,sp,-16
    6858:	dc400115 	stw	r17,4(sp)
    685c:	2c401724 	muli	r17,r5,92
    6860:	dc800215 	stw	r18,8(sp)
    6864:	2825883a 	mov	r18,r5
    6868:	89400304 	addi	r5,r17,12
    686c:	dc000015 	stw	r16,0(sp)
    6870:	dfc00315 	stw	ra,12(sp)
    6874:	00076600 	call	7660 <_malloc_r>
    6878:	0021883a 	mov	r16,zero
    687c:	880d883a 	mov	r6,r17
    6880:	000b883a 	mov	r5,zero
    6884:	10000626 	beq	r2,zero,68a0 <__sfmoreglue+0x4c>
    6888:	11000304 	addi	r4,r2,12
    688c:	14800115 	stw	r18,4(r2)
    6890:	10000015 	stw	zero,0(r2)
    6894:	11000215 	stw	r4,8(r2)
    6898:	1021883a 	mov	r16,r2
    689c:	0002b7c0 	call	2b7c <memset>
    68a0:	8005883a 	mov	r2,r16
    68a4:	dfc00317 	ldw	ra,12(sp)
    68a8:	dc800217 	ldw	r18,8(sp)
    68ac:	dc400117 	ldw	r17,4(sp)
    68b0:	dc000017 	ldw	r16,0(sp)
    68b4:	dec00404 	addi	sp,sp,16
    68b8:	f800283a 	ret

000068bc <__sfp>:
    68bc:	defffd04 	addi	sp,sp,-12
    68c0:	00800074 	movhi	r2,1
    68c4:	108fdf04 	addi	r2,r2,16252
    68c8:	dc000015 	stw	r16,0(sp)
    68cc:	14000017 	ldw	r16,0(r2)
    68d0:	dc400115 	stw	r17,4(sp)
    68d4:	dfc00215 	stw	ra,8(sp)
    68d8:	80800e17 	ldw	r2,56(r16)
    68dc:	2023883a 	mov	r17,r4
    68e0:	10002626 	beq	r2,zero,697c <__sfp+0xc0>
    68e4:	8400b804 	addi	r16,r16,736
    68e8:	80800117 	ldw	r2,4(r16)
    68ec:	81000217 	ldw	r4,8(r16)
    68f0:	10ffffc4 	addi	r3,r2,-1
    68f4:	18000916 	blt	r3,zero,691c <__sfp+0x60>
    68f8:	2080030f 	ldh	r2,12(r4)
    68fc:	10000b26 	beq	r2,zero,692c <__sfp+0x70>
    6900:	017fffc4 	movi	r5,-1
    6904:	00000206 	br	6910 <__sfp+0x54>
    6908:	2080030f 	ldh	r2,12(r4)
    690c:	10000726 	beq	r2,zero,692c <__sfp+0x70>
    6910:	18ffffc4 	addi	r3,r3,-1
    6914:	21001704 	addi	r4,r4,92
    6918:	197ffb1e 	bne	r3,r5,6908 <__sfp+0x4c>
    691c:	80800017 	ldw	r2,0(r16)
    6920:	10001926 	beq	r2,zero,6988 <__sfp+0xcc>
    6924:	1021883a 	mov	r16,r2
    6928:	003fef06 	br	68e8 <__sfp+0x2c>
    692c:	00bfffc4 	movi	r2,-1
    6930:	00c00044 	movi	r3,1
    6934:	2080038d 	sth	r2,14(r4)
    6938:	20c0030d 	sth	r3,12(r4)
    693c:	20000015 	stw	zero,0(r4)
    6940:	20000215 	stw	zero,8(r4)
    6944:	20000115 	stw	zero,4(r4)
    6948:	20000415 	stw	zero,16(r4)
    694c:	20000515 	stw	zero,20(r4)
    6950:	20000615 	stw	zero,24(r4)
    6954:	20000c15 	stw	zero,48(r4)
    6958:	20000d15 	stw	zero,52(r4)
    695c:	20001115 	stw	zero,68(r4)
    6960:	20001215 	stw	zero,72(r4)
    6964:	2005883a 	mov	r2,r4
    6968:	dfc00217 	ldw	ra,8(sp)
    696c:	dc400117 	ldw	r17,4(sp)
    6970:	dc000017 	ldw	r16,0(sp)
    6974:	dec00304 	addi	sp,sp,12
    6978:	f800283a 	ret
    697c:	8009883a 	mov	r4,r16
    6980:	00067540 	call	6754 <__sinit>
    6984:	003fd706 	br	68e4 <__sfp+0x28>
    6988:	8809883a 	mov	r4,r17
    698c:	01400104 	movi	r5,4
    6990:	00068540 	call	6854 <__sfmoreglue>
    6994:	80800015 	stw	r2,0(r16)
    6998:	103fe21e 	bne	r2,zero,6924 <__sfp+0x68>
    699c:	00800304 	movi	r2,12
    69a0:	0009883a 	mov	r4,zero
    69a4:	88800015 	stw	r2,0(r17)
    69a8:	003fee06 	br	6964 <__sfp+0xa8>

000069ac <_malloc_trim_r>:
    69ac:	defffb04 	addi	sp,sp,-20
    69b0:	dcc00315 	stw	r19,12(sp)
    69b4:	04c00074 	movhi	r19,1
    69b8:	9cca5904 	addi	r19,r19,10596
    69bc:	dc800215 	stw	r18,8(sp)
    69c0:	dc400115 	stw	r17,4(sp)
    69c4:	dc000015 	stw	r16,0(sp)
    69c8:	2823883a 	mov	r17,r5
    69cc:	2025883a 	mov	r18,r4
    69d0:	dfc00415 	stw	ra,16(sp)
    69d4:	000c61c0 	call	c61c <__malloc_lock>
    69d8:	98800217 	ldw	r2,8(r19)
    69dc:	9009883a 	mov	r4,r18
    69e0:	000b883a 	mov	r5,zero
    69e4:	10c00117 	ldw	r3,4(r2)
    69e8:	00bfff04 	movi	r2,-4
    69ec:	18a0703a 	and	r16,r3,r2
    69f0:	8463c83a 	sub	r17,r16,r17
    69f4:	8c43fbc4 	addi	r17,r17,4079
    69f8:	8822d33a 	srli	r17,r17,12
    69fc:	0083ffc4 	movi	r2,4095
    6a00:	8c7fffc4 	addi	r17,r17,-1
    6a04:	8822933a 	slli	r17,r17,12
    6a08:	1440060e 	bge	r2,r17,6a24 <_malloc_trim_r+0x78>
    6a0c:	00095bc0 	call	95bc <_sbrk_r>
    6a10:	98c00217 	ldw	r3,8(r19)
    6a14:	9009883a 	mov	r4,r18
    6a18:	044bc83a 	sub	r5,zero,r17
    6a1c:	80c7883a 	add	r3,r16,r3
    6a20:	10c00926 	beq	r2,r3,6a48 <_malloc_trim_r+0x9c>
    6a24:	000c63c0 	call	c63c <__malloc_unlock>
    6a28:	0005883a 	mov	r2,zero
    6a2c:	dfc00417 	ldw	ra,16(sp)
    6a30:	dcc00317 	ldw	r19,12(sp)
    6a34:	dc800217 	ldw	r18,8(sp)
    6a38:	dc400117 	ldw	r17,4(sp)
    6a3c:	dc000017 	ldw	r16,0(sp)
    6a40:	dec00504 	addi	sp,sp,20
    6a44:	f800283a 	ret
    6a48:	9009883a 	mov	r4,r18
    6a4c:	00095bc0 	call	95bc <_sbrk_r>
    6a50:	844dc83a 	sub	r6,r16,r17
    6a54:	00ffffc4 	movi	r3,-1
    6a58:	9009883a 	mov	r4,r18
    6a5c:	000b883a 	mov	r5,zero
    6a60:	01c00074 	movhi	r7,1
    6a64:	39d6eb04 	addi	r7,r7,23468
    6a68:	31800054 	ori	r6,r6,1
    6a6c:	10c00926 	beq	r2,r3,6a94 <_malloc_trim_r+0xe8>
    6a70:	38800017 	ldw	r2,0(r7)
    6a74:	98c00217 	ldw	r3,8(r19)
    6a78:	9009883a 	mov	r4,r18
    6a7c:	1445c83a 	sub	r2,r2,r17
    6a80:	38800015 	stw	r2,0(r7)
    6a84:	19800115 	stw	r6,4(r3)
    6a88:	000c63c0 	call	c63c <__malloc_unlock>
    6a8c:	00800044 	movi	r2,1
    6a90:	003fe606 	br	6a2c <_malloc_trim_r+0x80>
    6a94:	00095bc0 	call	95bc <_sbrk_r>
    6a98:	99800217 	ldw	r6,8(r19)
    6a9c:	100f883a 	mov	r7,r2
    6aa0:	9009883a 	mov	r4,r18
    6aa4:	1187c83a 	sub	r3,r2,r6
    6aa8:	008003c4 	movi	r2,15
    6aac:	19400054 	ori	r5,r3,1
    6ab0:	10ffdc0e 	bge	r2,r3,6a24 <_malloc_trim_r+0x78>
    6ab4:	00800074 	movhi	r2,1
    6ab8:	108fe304 	addi	r2,r2,16268
    6abc:	10c00017 	ldw	r3,0(r2)
    6ac0:	00800074 	movhi	r2,1
    6ac4:	1096eb04 	addi	r2,r2,23468
    6ac8:	31400115 	stw	r5,4(r6)
    6acc:	38c7c83a 	sub	r3,r7,r3
    6ad0:	10c00015 	stw	r3,0(r2)
    6ad4:	003fd306 	br	6a24 <_malloc_trim_r+0x78>

00006ad8 <_free_r>:
    6ad8:	defffd04 	addi	sp,sp,-12
    6adc:	dc400115 	stw	r17,4(sp)
    6ae0:	dc000015 	stw	r16,0(sp)
    6ae4:	dfc00215 	stw	ra,8(sp)
    6ae8:	2821883a 	mov	r16,r5
    6aec:	2023883a 	mov	r17,r4
    6af0:	28005a26 	beq	r5,zero,6c5c <_free_r+0x184>
    6af4:	000c61c0 	call	c61c <__malloc_lock>
    6af8:	823ffe04 	addi	r8,r16,-8
    6afc:	41400117 	ldw	r5,4(r8)
    6b00:	00bfff84 	movi	r2,-2
    6b04:	02800074 	movhi	r10,1
    6b08:	528a5904 	addi	r10,r10,10596
    6b0c:	288e703a 	and	r7,r5,r2
    6b10:	41cd883a 	add	r6,r8,r7
    6b14:	30c00117 	ldw	r3,4(r6)
    6b18:	51000217 	ldw	r4,8(r10)
    6b1c:	00bfff04 	movi	r2,-4
    6b20:	1892703a 	and	r9,r3,r2
    6b24:	5017883a 	mov	r11,r10
    6b28:	31006726 	beq	r6,r4,6cc8 <_free_r+0x1f0>
    6b2c:	2880004c 	andi	r2,r5,1
    6b30:	1005003a 	cmpeq	r2,r2,zero
    6b34:	32400115 	stw	r9,4(r6)
    6b38:	10001a1e 	bne	r2,zero,6ba4 <_free_r+0xcc>
    6b3c:	000b883a 	mov	r5,zero
    6b40:	3247883a 	add	r3,r6,r9
    6b44:	18800117 	ldw	r2,4(r3)
    6b48:	1080004c 	andi	r2,r2,1
    6b4c:	1000231e 	bne	r2,zero,6bdc <_free_r+0x104>
    6b50:	280ac03a 	cmpne	r5,r5,zero
    6b54:	3a4f883a 	add	r7,r7,r9
    6b58:	2800451e 	bne	r5,zero,6c70 <_free_r+0x198>
    6b5c:	31000217 	ldw	r4,8(r6)
    6b60:	00800074 	movhi	r2,1
    6b64:	108a5b04 	addi	r2,r2,10604
    6b68:	20807b26 	beq	r4,r2,6d58 <_free_r+0x280>
    6b6c:	30800317 	ldw	r2,12(r6)
    6b70:	3a07883a 	add	r3,r7,r8
    6b74:	19c00015 	stw	r7,0(r3)
    6b78:	11000215 	stw	r4,8(r2)
    6b7c:	20800315 	stw	r2,12(r4)
    6b80:	38800054 	ori	r2,r7,1
    6b84:	40800115 	stw	r2,4(r8)
    6b88:	28001a26 	beq	r5,zero,6bf4 <_free_r+0x11c>
    6b8c:	8809883a 	mov	r4,r17
    6b90:	dfc00217 	ldw	ra,8(sp)
    6b94:	dc400117 	ldw	r17,4(sp)
    6b98:	dc000017 	ldw	r16,0(sp)
    6b9c:	dec00304 	addi	sp,sp,12
    6ba0:	000c63c1 	jmpi	c63c <__malloc_unlock>
    6ba4:	80bffe17 	ldw	r2,-8(r16)
    6ba8:	50c00204 	addi	r3,r10,8
    6bac:	4091c83a 	sub	r8,r8,r2
    6bb0:	41000217 	ldw	r4,8(r8)
    6bb4:	388f883a 	add	r7,r7,r2
    6bb8:	20c06126 	beq	r4,r3,6d40 <_free_r+0x268>
    6bbc:	40800317 	ldw	r2,12(r8)
    6bc0:	3247883a 	add	r3,r6,r9
    6bc4:	000b883a 	mov	r5,zero
    6bc8:	11000215 	stw	r4,8(r2)
    6bcc:	20800315 	stw	r2,12(r4)
    6bd0:	18800117 	ldw	r2,4(r3)
    6bd4:	1080004c 	andi	r2,r2,1
    6bd8:	103fdd26 	beq	r2,zero,6b50 <_free_r+0x78>
    6bdc:	38800054 	ori	r2,r7,1
    6be0:	3a07883a 	add	r3,r7,r8
    6be4:	280ac03a 	cmpne	r5,r5,zero
    6be8:	40800115 	stw	r2,4(r8)
    6bec:	19c00015 	stw	r7,0(r3)
    6bf0:	283fe61e 	bne	r5,zero,6b8c <_free_r+0xb4>
    6bf4:	00807fc4 	movi	r2,511
    6bf8:	11c01f2e 	bgeu	r2,r7,6c78 <_free_r+0x1a0>
    6bfc:	3806d27a 	srli	r3,r7,9
    6c00:	1800481e 	bne	r3,zero,6d24 <_free_r+0x24c>
    6c04:	3804d0fa 	srli	r2,r7,3
    6c08:	100690fa 	slli	r3,r2,3
    6c0c:	1acd883a 	add	r6,r3,r11
    6c10:	31400217 	ldw	r5,8(r6)
    6c14:	31405926 	beq	r6,r5,6d7c <_free_r+0x2a4>
    6c18:	28800117 	ldw	r2,4(r5)
    6c1c:	00ffff04 	movi	r3,-4
    6c20:	10c4703a 	and	r2,r2,r3
    6c24:	3880022e 	bgeu	r7,r2,6c30 <_free_r+0x158>
    6c28:	29400217 	ldw	r5,8(r5)
    6c2c:	317ffa1e 	bne	r6,r5,6c18 <_free_r+0x140>
    6c30:	29800317 	ldw	r6,12(r5)
    6c34:	41800315 	stw	r6,12(r8)
    6c38:	41400215 	stw	r5,8(r8)
    6c3c:	8809883a 	mov	r4,r17
    6c40:	2a000315 	stw	r8,12(r5)
    6c44:	32000215 	stw	r8,8(r6)
    6c48:	dfc00217 	ldw	ra,8(sp)
    6c4c:	dc400117 	ldw	r17,4(sp)
    6c50:	dc000017 	ldw	r16,0(sp)
    6c54:	dec00304 	addi	sp,sp,12
    6c58:	000c63c1 	jmpi	c63c <__malloc_unlock>
    6c5c:	dfc00217 	ldw	ra,8(sp)
    6c60:	dc400117 	ldw	r17,4(sp)
    6c64:	dc000017 	ldw	r16,0(sp)
    6c68:	dec00304 	addi	sp,sp,12
    6c6c:	f800283a 	ret
    6c70:	31000217 	ldw	r4,8(r6)
    6c74:	003fbd06 	br	6b6c <_free_r+0x94>
    6c78:	3806d0fa 	srli	r3,r7,3
    6c7c:	00800044 	movi	r2,1
    6c80:	51400117 	ldw	r5,4(r10)
    6c84:	180890fa 	slli	r4,r3,3
    6c88:	1807d0ba 	srai	r3,r3,2
    6c8c:	22c9883a 	add	r4,r4,r11
    6c90:	21800217 	ldw	r6,8(r4)
    6c94:	10c4983a 	sll	r2,r2,r3
    6c98:	41000315 	stw	r4,12(r8)
    6c9c:	41800215 	stw	r6,8(r8)
    6ca0:	288ab03a 	or	r5,r5,r2
    6ca4:	22000215 	stw	r8,8(r4)
    6ca8:	8809883a 	mov	r4,r17
    6cac:	51400115 	stw	r5,4(r10)
    6cb0:	32000315 	stw	r8,12(r6)
    6cb4:	dfc00217 	ldw	ra,8(sp)
    6cb8:	dc400117 	ldw	r17,4(sp)
    6cbc:	dc000017 	ldw	r16,0(sp)
    6cc0:	dec00304 	addi	sp,sp,12
    6cc4:	000c63c1 	jmpi	c63c <__malloc_unlock>
    6cc8:	2880004c 	andi	r2,r5,1
    6ccc:	3a4d883a 	add	r6,r7,r9
    6cd0:	1000071e 	bne	r2,zero,6cf0 <_free_r+0x218>
    6cd4:	80bffe17 	ldw	r2,-8(r16)
    6cd8:	4091c83a 	sub	r8,r8,r2
    6cdc:	41000317 	ldw	r4,12(r8)
    6ce0:	40c00217 	ldw	r3,8(r8)
    6ce4:	308d883a 	add	r6,r6,r2
    6ce8:	20c00215 	stw	r3,8(r4)
    6cec:	19000315 	stw	r4,12(r3)
    6cf0:	00800074 	movhi	r2,1
    6cf4:	108fe204 	addi	r2,r2,16264
    6cf8:	11000017 	ldw	r4,0(r2)
    6cfc:	30c00054 	ori	r3,r6,1
    6d00:	52000215 	stw	r8,8(r10)
    6d04:	40c00115 	stw	r3,4(r8)
    6d08:	313fa036 	bltu	r6,r4,6b8c <_free_r+0xb4>
    6d0c:	00800074 	movhi	r2,1
    6d10:	1096df04 	addi	r2,r2,23420
    6d14:	11400017 	ldw	r5,0(r2)
    6d18:	8809883a 	mov	r4,r17
    6d1c:	00069ac0 	call	69ac <_malloc_trim_r>
    6d20:	003f9a06 	br	6b8c <_free_r+0xb4>
    6d24:	00800104 	movi	r2,4
    6d28:	10c0072e 	bgeu	r2,r3,6d48 <_free_r+0x270>
    6d2c:	00800504 	movi	r2,20
    6d30:	10c01936 	bltu	r2,r3,6d98 <_free_r+0x2c0>
    6d34:	188016c4 	addi	r2,r3,91
    6d38:	100690fa 	slli	r3,r2,3
    6d3c:	003fb306 	br	6c0c <_free_r+0x134>
    6d40:	01400044 	movi	r5,1
    6d44:	003f7e06 	br	6b40 <_free_r+0x68>
    6d48:	3804d1ba 	srli	r2,r7,6
    6d4c:	10800e04 	addi	r2,r2,56
    6d50:	100690fa 	slli	r3,r2,3
    6d54:	003fad06 	br	6c0c <_free_r+0x134>
    6d58:	22000315 	stw	r8,12(r4)
    6d5c:	22000215 	stw	r8,8(r4)
    6d60:	3a05883a 	add	r2,r7,r8
    6d64:	38c00054 	ori	r3,r7,1
    6d68:	11c00015 	stw	r7,0(r2)
    6d6c:	41000215 	stw	r4,8(r8)
    6d70:	40c00115 	stw	r3,4(r8)
    6d74:	41000315 	stw	r4,12(r8)
    6d78:	003f8406 	br	6b8c <_free_r+0xb4>
    6d7c:	1005d0ba 	srai	r2,r2,2
    6d80:	00c00044 	movi	r3,1
    6d84:	51000117 	ldw	r4,4(r10)
    6d88:	1886983a 	sll	r3,r3,r2
    6d8c:	20c8b03a 	or	r4,r4,r3
    6d90:	51000115 	stw	r4,4(r10)
    6d94:	003fa706 	br	6c34 <_free_r+0x15c>
    6d98:	00801504 	movi	r2,84
    6d9c:	10c00436 	bltu	r2,r3,6db0 <_free_r+0x2d8>
    6da0:	3804d33a 	srli	r2,r7,12
    6da4:	10801b84 	addi	r2,r2,110
    6da8:	100690fa 	slli	r3,r2,3
    6dac:	003f9706 	br	6c0c <_free_r+0x134>
    6db0:	00805504 	movi	r2,340
    6db4:	10c00436 	bltu	r2,r3,6dc8 <_free_r+0x2f0>
    6db8:	3804d3fa 	srli	r2,r7,15
    6dbc:	10801dc4 	addi	r2,r2,119
    6dc0:	100690fa 	slli	r3,r2,3
    6dc4:	003f9106 	br	6c0c <_free_r+0x134>
    6dc8:	00815504 	movi	r2,1364
    6dcc:	10c0032e 	bgeu	r2,r3,6ddc <_free_r+0x304>
    6dd0:	00801f84 	movi	r2,126
    6dd4:	00c0fc04 	movi	r3,1008
    6dd8:	003f8c06 	br	6c0c <_free_r+0x134>
    6ddc:	3804d4ba 	srli	r2,r7,18
    6de0:	10801f04 	addi	r2,r2,124
    6de4:	100690fa 	slli	r3,r2,3
    6de8:	003f8806 	br	6c0c <_free_r+0x134>

00006dec <__sfvwrite_r>:
    6dec:	30800217 	ldw	r2,8(r6)
    6df0:	defff504 	addi	sp,sp,-44
    6df4:	df000915 	stw	fp,36(sp)
    6df8:	dd800715 	stw	r22,28(sp)
    6dfc:	dc800315 	stw	r18,12(sp)
    6e00:	dfc00a15 	stw	ra,40(sp)
    6e04:	ddc00815 	stw	r23,32(sp)
    6e08:	dd400615 	stw	r21,24(sp)
    6e0c:	dd000515 	stw	r20,20(sp)
    6e10:	dcc00415 	stw	r19,16(sp)
    6e14:	dc400215 	stw	r17,8(sp)
    6e18:	dc000115 	stw	r16,4(sp)
    6e1c:	302d883a 	mov	r22,r6
    6e20:	2039883a 	mov	fp,r4
    6e24:	2825883a 	mov	r18,r5
    6e28:	10001c26 	beq	r2,zero,6e9c <__sfvwrite_r+0xb0>
    6e2c:	29c0030b 	ldhu	r7,12(r5)
    6e30:	3880020c 	andi	r2,r7,8
    6e34:	10002726 	beq	r2,zero,6ed4 <__sfvwrite_r+0xe8>
    6e38:	28800417 	ldw	r2,16(r5)
    6e3c:	10002526 	beq	r2,zero,6ed4 <__sfvwrite_r+0xe8>
    6e40:	3880008c 	andi	r2,r7,2
    6e44:	b5400017 	ldw	r21,0(r22)
    6e48:	10002826 	beq	r2,zero,6eec <__sfvwrite_r+0x100>
    6e4c:	0021883a 	mov	r16,zero
    6e50:	0023883a 	mov	r17,zero
    6e54:	880d883a 	mov	r6,r17
    6e58:	e009883a 	mov	r4,fp
    6e5c:	00810004 	movi	r2,1024
    6e60:	80006e26 	beq	r16,zero,701c <__sfvwrite_r+0x230>
    6e64:	800f883a 	mov	r7,r16
    6e68:	91400717 	ldw	r5,28(r18)
    6e6c:	1400012e 	bgeu	r2,r16,6e74 <__sfvwrite_r+0x88>
    6e70:	100f883a 	mov	r7,r2
    6e74:	90c00917 	ldw	r3,36(r18)
    6e78:	183ee83a 	callr	r3
    6e7c:	1007883a 	mov	r3,r2
    6e80:	80a1c83a 	sub	r16,r16,r2
    6e84:	88a3883a 	add	r17,r17,r2
    6e88:	00806d0e 	bge	zero,r2,7040 <__sfvwrite_r+0x254>
    6e8c:	b0800217 	ldw	r2,8(r22)
    6e90:	10c5c83a 	sub	r2,r2,r3
    6e94:	b0800215 	stw	r2,8(r22)
    6e98:	103fee1e 	bne	r2,zero,6e54 <__sfvwrite_r+0x68>
    6e9c:	0009883a 	mov	r4,zero
    6ea0:	2005883a 	mov	r2,r4
    6ea4:	dfc00a17 	ldw	ra,40(sp)
    6ea8:	df000917 	ldw	fp,36(sp)
    6eac:	ddc00817 	ldw	r23,32(sp)
    6eb0:	dd800717 	ldw	r22,28(sp)
    6eb4:	dd400617 	ldw	r21,24(sp)
    6eb8:	dd000517 	ldw	r20,20(sp)
    6ebc:	dcc00417 	ldw	r19,16(sp)
    6ec0:	dc800317 	ldw	r18,12(sp)
    6ec4:	dc400217 	ldw	r17,8(sp)
    6ec8:	dc000117 	ldw	r16,4(sp)
    6ecc:	dec00b04 	addi	sp,sp,44
    6ed0:	f800283a 	ret
    6ed4:	0004bb40 	call	4bb4 <__swsetup_r>
    6ed8:	1000e41e 	bne	r2,zero,726c <__sfvwrite_r+0x480>
    6edc:	91c0030b 	ldhu	r7,12(r18)
    6ee0:	b5400017 	ldw	r21,0(r22)
    6ee4:	3880008c 	andi	r2,r7,2
    6ee8:	103fd81e 	bne	r2,zero,6e4c <__sfvwrite_r+0x60>
    6eec:	3880004c 	andi	r2,r7,1
    6ef0:	1005003a 	cmpeq	r2,r2,zero
    6ef4:	10005726 	beq	r2,zero,7054 <__sfvwrite_r+0x268>
    6ef8:	0029883a 	mov	r20,zero
    6efc:	002f883a 	mov	r23,zero
    6f00:	a0004226 	beq	r20,zero,700c <__sfvwrite_r+0x220>
    6f04:	3880800c 	andi	r2,r7,512
    6f08:	94000217 	ldw	r16,8(r18)
    6f0c:	10008b26 	beq	r2,zero,713c <__sfvwrite_r+0x350>
    6f10:	800d883a 	mov	r6,r16
    6f14:	a400a536 	bltu	r20,r16,71ac <__sfvwrite_r+0x3c0>
    6f18:	3881200c 	andi	r2,r7,1152
    6f1c:	10002726 	beq	r2,zero,6fbc <__sfvwrite_r+0x1d0>
    6f20:	90800517 	ldw	r2,20(r18)
    6f24:	92000417 	ldw	r8,16(r18)
    6f28:	91400017 	ldw	r5,0(r18)
    6f2c:	1087883a 	add	r3,r2,r2
    6f30:	1887883a 	add	r3,r3,r2
    6f34:	1808d7fa 	srli	r4,r3,31
    6f38:	2a21c83a 	sub	r16,r5,r8
    6f3c:	80800044 	addi	r2,r16,1
    6f40:	20c9883a 	add	r4,r4,r3
    6f44:	2027d07a 	srai	r19,r4,1
    6f48:	a085883a 	add	r2,r20,r2
    6f4c:	980d883a 	mov	r6,r19
    6f50:	9880022e 	bgeu	r19,r2,6f5c <__sfvwrite_r+0x170>
    6f54:	1027883a 	mov	r19,r2
    6f58:	100d883a 	mov	r6,r2
    6f5c:	3881000c 	andi	r2,r7,1024
    6f60:	1000b826 	beq	r2,zero,7244 <__sfvwrite_r+0x458>
    6f64:	300b883a 	mov	r5,r6
    6f68:	e009883a 	mov	r4,fp
    6f6c:	00076600 	call	7660 <_malloc_r>
    6f70:	10003126 	beq	r2,zero,7038 <__sfvwrite_r+0x24c>
    6f74:	91400417 	ldw	r5,16(r18)
    6f78:	1009883a 	mov	r4,r2
    6f7c:	800d883a 	mov	r6,r16
    6f80:	1023883a 	mov	r17,r2
    6f84:	0002adc0 	call	2adc <memcpy>
    6f88:	90c0030b 	ldhu	r3,12(r18)
    6f8c:	00beffc4 	movi	r2,-1025
    6f90:	1886703a 	and	r3,r3,r2
    6f94:	18c02014 	ori	r3,r3,128
    6f98:	90c0030d 	sth	r3,12(r18)
    6f9c:	9c07c83a 	sub	r3,r19,r16
    6fa0:	8c05883a 	add	r2,r17,r16
    6fa4:	a00d883a 	mov	r6,r20
    6fa8:	a021883a 	mov	r16,r20
    6fac:	90800015 	stw	r2,0(r18)
    6fb0:	90c00215 	stw	r3,8(r18)
    6fb4:	94400415 	stw	r17,16(r18)
    6fb8:	94c00515 	stw	r19,20(r18)
    6fbc:	91000017 	ldw	r4,0(r18)
    6fc0:	b80b883a 	mov	r5,r23
    6fc4:	a023883a 	mov	r17,r20
    6fc8:	0007e840 	call	7e84 <memmove>
    6fcc:	90c00217 	ldw	r3,8(r18)
    6fd0:	90800017 	ldw	r2,0(r18)
    6fd4:	a027883a 	mov	r19,r20
    6fd8:	1c07c83a 	sub	r3,r3,r16
    6fdc:	1405883a 	add	r2,r2,r16
    6fe0:	90c00215 	stw	r3,8(r18)
    6fe4:	a021883a 	mov	r16,r20
    6fe8:	90800015 	stw	r2,0(r18)
    6fec:	b0800217 	ldw	r2,8(r22)
    6ff0:	1405c83a 	sub	r2,r2,r16
    6ff4:	b0800215 	stw	r2,8(r22)
    6ff8:	103fa826 	beq	r2,zero,6e9c <__sfvwrite_r+0xb0>
    6ffc:	a469c83a 	sub	r20,r20,r17
    7000:	91c0030b 	ldhu	r7,12(r18)
    7004:	bcef883a 	add	r23,r23,r19
    7008:	a03fbe1e 	bne	r20,zero,6f04 <__sfvwrite_r+0x118>
    700c:	adc00017 	ldw	r23,0(r21)
    7010:	ad000117 	ldw	r20,4(r21)
    7014:	ad400204 	addi	r21,r21,8
    7018:	003fb906 	br	6f00 <__sfvwrite_r+0x114>
    701c:	ac400017 	ldw	r17,0(r21)
    7020:	ac000117 	ldw	r16,4(r21)
    7024:	ad400204 	addi	r21,r21,8
    7028:	003f8a06 	br	6e54 <__sfvwrite_r+0x68>
    702c:	91400417 	ldw	r5,16(r18)
    7030:	e009883a 	mov	r4,fp
    7034:	0006ad80 	call	6ad8 <_free_r>
    7038:	00800304 	movi	r2,12
    703c:	e0800015 	stw	r2,0(fp)
    7040:	9080030b 	ldhu	r2,12(r18)
    7044:	013fffc4 	movi	r4,-1
    7048:	10801014 	ori	r2,r2,64
    704c:	9080030d 	sth	r2,12(r18)
    7050:	003f9306 	br	6ea0 <__sfvwrite_r+0xb4>
    7054:	0027883a 	mov	r19,zero
    7058:	002f883a 	mov	r23,zero
    705c:	d8000015 	stw	zero,0(sp)
    7060:	0029883a 	mov	r20,zero
    7064:	98001e26 	beq	r19,zero,70e0 <__sfvwrite_r+0x2f4>
    7068:	d8c00017 	ldw	r3,0(sp)
    706c:	1804c03a 	cmpne	r2,r3,zero
    7070:	10005e26 	beq	r2,zero,71ec <__sfvwrite_r+0x400>
    7074:	9821883a 	mov	r16,r19
    7078:	a4c0012e 	bgeu	r20,r19,7080 <__sfvwrite_r+0x294>
    707c:	a021883a 	mov	r16,r20
    7080:	91000017 	ldw	r4,0(r18)
    7084:	90800417 	ldw	r2,16(r18)
    7088:	91800217 	ldw	r6,8(r18)
    708c:	91c00517 	ldw	r7,20(r18)
    7090:	1100022e 	bgeu	r2,r4,709c <__sfvwrite_r+0x2b0>
    7094:	31e3883a 	add	r17,r6,r7
    7098:	8c001616 	blt	r17,r16,70f4 <__sfvwrite_r+0x308>
    709c:	81c03816 	blt	r16,r7,7180 <__sfvwrite_r+0x394>
    70a0:	90c00917 	ldw	r3,36(r18)
    70a4:	91400717 	ldw	r5,28(r18)
    70a8:	e009883a 	mov	r4,fp
    70ac:	b80d883a 	mov	r6,r23
    70b0:	183ee83a 	callr	r3
    70b4:	1023883a 	mov	r17,r2
    70b8:	00bfe10e 	bge	zero,r2,7040 <__sfvwrite_r+0x254>
    70bc:	a469c83a 	sub	r20,r20,r17
    70c0:	a0001826 	beq	r20,zero,7124 <__sfvwrite_r+0x338>
    70c4:	b0800217 	ldw	r2,8(r22)
    70c8:	1445c83a 	sub	r2,r2,r17
    70cc:	b0800215 	stw	r2,8(r22)
    70d0:	103f7226 	beq	r2,zero,6e9c <__sfvwrite_r+0xb0>
    70d4:	9c67c83a 	sub	r19,r19,r17
    70d8:	bc6f883a 	add	r23,r23,r17
    70dc:	983fe21e 	bne	r19,zero,7068 <__sfvwrite_r+0x27c>
    70e0:	adc00017 	ldw	r23,0(r21)
    70e4:	acc00117 	ldw	r19,4(r21)
    70e8:	ad400204 	addi	r21,r21,8
    70ec:	d8000015 	stw	zero,0(sp)
    70f0:	003fdc06 	br	7064 <__sfvwrite_r+0x278>
    70f4:	b80b883a 	mov	r5,r23
    70f8:	880d883a 	mov	r6,r17
    70fc:	0007e840 	call	7e84 <memmove>
    7100:	90c00017 	ldw	r3,0(r18)
    7104:	e009883a 	mov	r4,fp
    7108:	900b883a 	mov	r5,r18
    710c:	1c47883a 	add	r3,r3,r17
    7110:	90c00015 	stw	r3,0(r18)
    7114:	00064bc0 	call	64bc <_fflush_r>
    7118:	103fc91e 	bne	r2,zero,7040 <__sfvwrite_r+0x254>
    711c:	a469c83a 	sub	r20,r20,r17
    7120:	a03fe81e 	bne	r20,zero,70c4 <__sfvwrite_r+0x2d8>
    7124:	e009883a 	mov	r4,fp
    7128:	900b883a 	mov	r5,r18
    712c:	00064bc0 	call	64bc <_fflush_r>
    7130:	103fc31e 	bne	r2,zero,7040 <__sfvwrite_r+0x254>
    7134:	d8000015 	stw	zero,0(sp)
    7138:	003fe206 	br	70c4 <__sfvwrite_r+0x2d8>
    713c:	91000017 	ldw	r4,0(r18)
    7140:	90800417 	ldw	r2,16(r18)
    7144:	1100022e 	bgeu	r2,r4,7150 <__sfvwrite_r+0x364>
    7148:	8023883a 	mov	r17,r16
    714c:	85003136 	bltu	r16,r20,7214 <__sfvwrite_r+0x428>
    7150:	91c00517 	ldw	r7,20(r18)
    7154:	a1c01836 	bltu	r20,r7,71b8 <__sfvwrite_r+0x3cc>
    7158:	90c00917 	ldw	r3,36(r18)
    715c:	91400717 	ldw	r5,28(r18)
    7160:	e009883a 	mov	r4,fp
    7164:	b80d883a 	mov	r6,r23
    7168:	183ee83a 	callr	r3
    716c:	1021883a 	mov	r16,r2
    7170:	00bfb30e 	bge	zero,r2,7040 <__sfvwrite_r+0x254>
    7174:	1023883a 	mov	r17,r2
    7178:	1027883a 	mov	r19,r2
    717c:	003f9b06 	br	6fec <__sfvwrite_r+0x200>
    7180:	b80b883a 	mov	r5,r23
    7184:	800d883a 	mov	r6,r16
    7188:	0007e840 	call	7e84 <memmove>
    718c:	90c00217 	ldw	r3,8(r18)
    7190:	90800017 	ldw	r2,0(r18)
    7194:	8023883a 	mov	r17,r16
    7198:	1c07c83a 	sub	r3,r3,r16
    719c:	1405883a 	add	r2,r2,r16
    71a0:	90c00215 	stw	r3,8(r18)
    71a4:	90800015 	stw	r2,0(r18)
    71a8:	003fc406 	br	70bc <__sfvwrite_r+0x2d0>
    71ac:	a00d883a 	mov	r6,r20
    71b0:	a021883a 	mov	r16,r20
    71b4:	003f8106 	br	6fbc <__sfvwrite_r+0x1d0>
    71b8:	b80b883a 	mov	r5,r23
    71bc:	a00d883a 	mov	r6,r20
    71c0:	0007e840 	call	7e84 <memmove>
    71c4:	90c00217 	ldw	r3,8(r18)
    71c8:	90800017 	ldw	r2,0(r18)
    71cc:	a021883a 	mov	r16,r20
    71d0:	1d07c83a 	sub	r3,r3,r20
    71d4:	1505883a 	add	r2,r2,r20
    71d8:	a023883a 	mov	r17,r20
    71dc:	a027883a 	mov	r19,r20
    71e0:	90c00215 	stw	r3,8(r18)
    71e4:	90800015 	stw	r2,0(r18)
    71e8:	003f8006 	br	6fec <__sfvwrite_r+0x200>
    71ec:	b809883a 	mov	r4,r23
    71f0:	01400284 	movi	r5,10
    71f4:	980d883a 	mov	r6,r19
    71f8:	0007da00 	call	7da0 <memchr>
    71fc:	10001726 	beq	r2,zero,725c <__sfvwrite_r+0x470>
    7200:	15c5c83a 	sub	r2,r2,r23
    7204:	15000044 	addi	r20,r2,1
    7208:	00800044 	movi	r2,1
    720c:	d8800015 	stw	r2,0(sp)
    7210:	003f9806 	br	7074 <__sfvwrite_r+0x288>
    7214:	b80b883a 	mov	r5,r23
    7218:	800d883a 	mov	r6,r16
    721c:	0007e840 	call	7e84 <memmove>
    7220:	90c00017 	ldw	r3,0(r18)
    7224:	e009883a 	mov	r4,fp
    7228:	900b883a 	mov	r5,r18
    722c:	1c07883a 	add	r3,r3,r16
    7230:	90c00015 	stw	r3,0(r18)
    7234:	8027883a 	mov	r19,r16
    7238:	00064bc0 	call	64bc <_fflush_r>
    723c:	103f6b26 	beq	r2,zero,6fec <__sfvwrite_r+0x200>
    7240:	003f7f06 	br	7040 <__sfvwrite_r+0x254>
    7244:	400b883a 	mov	r5,r8
    7248:	e009883a 	mov	r4,fp
    724c:	0008f580 	call	8f58 <_realloc_r>
    7250:	103f7626 	beq	r2,zero,702c <__sfvwrite_r+0x240>
    7254:	1023883a 	mov	r17,r2
    7258:	003f5006 	br	6f9c <__sfvwrite_r+0x1b0>
    725c:	00c00044 	movi	r3,1
    7260:	9d000044 	addi	r20,r19,1
    7264:	d8c00015 	stw	r3,0(sp)
    7268:	003f8206 	br	7074 <__sfvwrite_r+0x288>
    726c:	9080030b 	ldhu	r2,12(r18)
    7270:	00c00244 	movi	r3,9
    7274:	013fffc4 	movi	r4,-1
    7278:	10801014 	ori	r2,r2,64
    727c:	9080030d 	sth	r2,12(r18)
    7280:	e0c00015 	stw	r3,0(fp)
    7284:	003f0606 	br	6ea0 <__sfvwrite_r+0xb4>

00007288 <_fwalk_reent>:
    7288:	defff704 	addi	sp,sp,-36
    728c:	dcc00315 	stw	r19,12(sp)
    7290:	24c0b804 	addi	r19,r4,736
    7294:	dd800615 	stw	r22,24(sp)
    7298:	dd400515 	stw	r21,20(sp)
    729c:	dfc00815 	stw	ra,32(sp)
    72a0:	ddc00715 	stw	r23,28(sp)
    72a4:	dd000415 	stw	r20,16(sp)
    72a8:	dc800215 	stw	r18,8(sp)
    72ac:	dc400115 	stw	r17,4(sp)
    72b0:	dc000015 	stw	r16,0(sp)
    72b4:	202b883a 	mov	r21,r4
    72b8:	282d883a 	mov	r22,r5
    72bc:	00067440 	call	6744 <__sfp_lock_acquire>
    72c0:	98002126 	beq	r19,zero,7348 <_fwalk_reent+0xc0>
    72c4:	002f883a 	mov	r23,zero
    72c8:	9c800117 	ldw	r18,4(r19)
    72cc:	9c000217 	ldw	r16,8(r19)
    72d0:	90bfffc4 	addi	r2,r18,-1
    72d4:	10000d16 	blt	r2,zero,730c <_fwalk_reent+0x84>
    72d8:	0023883a 	mov	r17,zero
    72dc:	053fffc4 	movi	r20,-1
    72e0:	8080030f 	ldh	r2,12(r16)
    72e4:	8c400044 	addi	r17,r17,1
    72e8:	10000626 	beq	r2,zero,7304 <_fwalk_reent+0x7c>
    72ec:	8080038f 	ldh	r2,14(r16)
    72f0:	800b883a 	mov	r5,r16
    72f4:	a809883a 	mov	r4,r21
    72f8:	15000226 	beq	r2,r20,7304 <_fwalk_reent+0x7c>
    72fc:	b03ee83a 	callr	r22
    7300:	b8aeb03a 	or	r23,r23,r2
    7304:	84001704 	addi	r16,r16,92
    7308:	947ff51e 	bne	r18,r17,72e0 <_fwalk_reent+0x58>
    730c:	9cc00017 	ldw	r19,0(r19)
    7310:	983fed1e 	bne	r19,zero,72c8 <_fwalk_reent+0x40>
    7314:	00067480 	call	6748 <__sfp_lock_release>
    7318:	b805883a 	mov	r2,r23
    731c:	dfc00817 	ldw	ra,32(sp)
    7320:	ddc00717 	ldw	r23,28(sp)
    7324:	dd800617 	ldw	r22,24(sp)
    7328:	dd400517 	ldw	r21,20(sp)
    732c:	dd000417 	ldw	r20,16(sp)
    7330:	dcc00317 	ldw	r19,12(sp)
    7334:	dc800217 	ldw	r18,8(sp)
    7338:	dc400117 	ldw	r17,4(sp)
    733c:	dc000017 	ldw	r16,0(sp)
    7340:	dec00904 	addi	sp,sp,36
    7344:	f800283a 	ret
    7348:	002f883a 	mov	r23,zero
    734c:	003ff106 	br	7314 <_fwalk_reent+0x8c>

00007350 <_fwalk>:
    7350:	defff804 	addi	sp,sp,-32
    7354:	dcc00315 	stw	r19,12(sp)
    7358:	24c0b804 	addi	r19,r4,736
    735c:	dd400515 	stw	r21,20(sp)
    7360:	dfc00715 	stw	ra,28(sp)
    7364:	dd800615 	stw	r22,24(sp)
    7368:	dd000415 	stw	r20,16(sp)
    736c:	dc800215 	stw	r18,8(sp)
    7370:	dc400115 	stw	r17,4(sp)
    7374:	dc000015 	stw	r16,0(sp)
    7378:	282b883a 	mov	r21,r5
    737c:	00067440 	call	6744 <__sfp_lock_acquire>
    7380:	98001f26 	beq	r19,zero,7400 <_fwalk+0xb0>
    7384:	002d883a 	mov	r22,zero
    7388:	9c800117 	ldw	r18,4(r19)
    738c:	9c000217 	ldw	r16,8(r19)
    7390:	90bfffc4 	addi	r2,r18,-1
    7394:	10000c16 	blt	r2,zero,73c8 <_fwalk+0x78>
    7398:	0023883a 	mov	r17,zero
    739c:	053fffc4 	movi	r20,-1
    73a0:	8080030f 	ldh	r2,12(r16)
    73a4:	8c400044 	addi	r17,r17,1
    73a8:	10000526 	beq	r2,zero,73c0 <_fwalk+0x70>
    73ac:	8080038f 	ldh	r2,14(r16)
    73b0:	8009883a 	mov	r4,r16
    73b4:	15000226 	beq	r2,r20,73c0 <_fwalk+0x70>
    73b8:	a83ee83a 	callr	r21
    73bc:	b0acb03a 	or	r22,r22,r2
    73c0:	84001704 	addi	r16,r16,92
    73c4:	947ff61e 	bne	r18,r17,73a0 <_fwalk+0x50>
    73c8:	9cc00017 	ldw	r19,0(r19)
    73cc:	983fee1e 	bne	r19,zero,7388 <_fwalk+0x38>
    73d0:	00067480 	call	6748 <__sfp_lock_release>
    73d4:	b005883a 	mov	r2,r22
    73d8:	dfc00717 	ldw	ra,28(sp)
    73dc:	dd800617 	ldw	r22,24(sp)
    73e0:	dd400517 	ldw	r21,20(sp)
    73e4:	dd000417 	ldw	r20,16(sp)
    73e8:	dcc00317 	ldw	r19,12(sp)
    73ec:	dc800217 	ldw	r18,8(sp)
    73f0:	dc400117 	ldw	r17,4(sp)
    73f4:	dc000017 	ldw	r16,0(sp)
    73f8:	dec00804 	addi	sp,sp,32
    73fc:	f800283a 	ret
    7400:	002d883a 	mov	r22,zero
    7404:	003ff206 	br	73d0 <_fwalk+0x80>

00007408 <__locale_charset>:
    7408:	d0a00417 	ldw	r2,-32752(gp)
    740c:	f800283a 	ret

00007410 <_localeconv_r>:
    7410:	00800074 	movhi	r2,1
    7414:	1088aa04 	addi	r2,r2,8872
    7418:	f800283a 	ret

0000741c <localeconv>:
    741c:	00800074 	movhi	r2,1
    7420:	108fde04 	addi	r2,r2,16248
    7424:	11000017 	ldw	r4,0(r2)
    7428:	00074101 	jmpi	7410 <_localeconv_r>

0000742c <_setlocale_r>:
    742c:	defffc04 	addi	sp,sp,-16
    7430:	00c00074 	movhi	r3,1
    7434:	18c8a504 	addi	r3,r3,8852
    7438:	dc800215 	stw	r18,8(sp)
    743c:	dc400115 	stw	r17,4(sp)
    7440:	dc000015 	stw	r16,0(sp)
    7444:	2023883a 	mov	r17,r4
    7448:	2825883a 	mov	r18,r5
    744c:	dfc00315 	stw	ra,12(sp)
    7450:	3021883a 	mov	r16,r6
    7454:	3009883a 	mov	r4,r6
    7458:	180b883a 	mov	r5,r3
    745c:	30000926 	beq	r6,zero,7484 <_setlocale_r+0x58>
    7460:	00097780 	call	9778 <strcmp>
    7464:	8009883a 	mov	r4,r16
    7468:	01400074 	movhi	r5,1
    746c:	29489004 	addi	r5,r5,8768
    7470:	10000b1e 	bne	r2,zero,74a0 <_setlocale_r+0x74>
    7474:	8c000d15 	stw	r16,52(r17)
    7478:	8c800c15 	stw	r18,48(r17)
    747c:	00c00074 	movhi	r3,1
    7480:	18c8a504 	addi	r3,r3,8852
    7484:	1805883a 	mov	r2,r3
    7488:	dfc00317 	ldw	ra,12(sp)
    748c:	dc800217 	ldw	r18,8(sp)
    7490:	dc400117 	ldw	r17,4(sp)
    7494:	dc000017 	ldw	r16,0(sp)
    7498:	dec00404 	addi	sp,sp,16
    749c:	f800283a 	ret
    74a0:	00097780 	call	9778 <strcmp>
    74a4:	0007883a 	mov	r3,zero
    74a8:	103ff226 	beq	r2,zero,7474 <_setlocale_r+0x48>
    74ac:	003ff506 	br	7484 <_setlocale_r+0x58>

000074b0 <setlocale>:
    74b0:	01800074 	movhi	r6,1
    74b4:	318fde04 	addi	r6,r6,16248
    74b8:	2007883a 	mov	r3,r4
    74bc:	31000017 	ldw	r4,0(r6)
    74c0:	280d883a 	mov	r6,r5
    74c4:	180b883a 	mov	r5,r3
    74c8:	000742c1 	jmpi	742c <_setlocale_r>

000074cc <__smakebuf_r>:
    74cc:	2880030b 	ldhu	r2,12(r5)
    74d0:	deffed04 	addi	sp,sp,-76
    74d4:	dc401015 	stw	r17,64(sp)
    74d8:	1080008c 	andi	r2,r2,2
    74dc:	dc000f15 	stw	r16,60(sp)
    74e0:	dfc01215 	stw	ra,72(sp)
    74e4:	dc801115 	stw	r18,68(sp)
    74e8:	2821883a 	mov	r16,r5
    74ec:	2023883a 	mov	r17,r4
    74f0:	10000b26 	beq	r2,zero,7520 <__smakebuf_r+0x54>
    74f4:	28c010c4 	addi	r3,r5,67
    74f8:	00800044 	movi	r2,1
    74fc:	28800515 	stw	r2,20(r5)
    7500:	28c00415 	stw	r3,16(r5)
    7504:	28c00015 	stw	r3,0(r5)
    7508:	dfc01217 	ldw	ra,72(sp)
    750c:	dc801117 	ldw	r18,68(sp)
    7510:	dc401017 	ldw	r17,64(sp)
    7514:	dc000f17 	ldw	r16,60(sp)
    7518:	dec01304 	addi	sp,sp,76
    751c:	f800283a 	ret
    7520:	2940038f 	ldh	r5,14(r5)
    7524:	28002116 	blt	r5,zero,75ac <__smakebuf_r+0xe0>
    7528:	d80d883a 	mov	r6,sp
    752c:	0009b680 	call	9b68 <_fstat_r>
    7530:	10001e16 	blt	r2,zero,75ac <__smakebuf_r+0xe0>
    7534:	d8800117 	ldw	r2,4(sp)
    7538:	00e00014 	movui	r3,32768
    753c:	113c000c 	andi	r4,r2,61440
    7540:	20c03126 	beq	r4,r3,7608 <__smakebuf_r+0x13c>
    7544:	8080030b 	ldhu	r2,12(r16)
    7548:	00c80004 	movi	r3,8192
    754c:	10820014 	ori	r2,r2,2048
    7550:	8080030d 	sth	r2,12(r16)
    7554:	20c01e26 	beq	r4,r3,75d0 <__smakebuf_r+0x104>
    7558:	04810004 	movi	r18,1024
    755c:	8809883a 	mov	r4,r17
    7560:	900b883a 	mov	r5,r18
    7564:	00076600 	call	7660 <_malloc_r>
    7568:	1009883a 	mov	r4,r2
    756c:	10003126 	beq	r2,zero,7634 <__smakebuf_r+0x168>
    7570:	80c0030b 	ldhu	r3,12(r16)
    7574:	00800034 	movhi	r2,0
    7578:	109a0e04 	addi	r2,r2,26680
    757c:	88800f15 	stw	r2,60(r17)
    7580:	18c02014 	ori	r3,r3,128
    7584:	84800515 	stw	r18,20(r16)
    7588:	80c0030d 	sth	r3,12(r16)
    758c:	81000415 	stw	r4,16(r16)
    7590:	81000015 	stw	r4,0(r16)
    7594:	dfc01217 	ldw	ra,72(sp)
    7598:	dc801117 	ldw	r18,68(sp)
    759c:	dc401017 	ldw	r17,64(sp)
    75a0:	dc000f17 	ldw	r16,60(sp)
    75a4:	dec01304 	addi	sp,sp,76
    75a8:	f800283a 	ret
    75ac:	80c0030b 	ldhu	r3,12(r16)
    75b0:	1880200c 	andi	r2,r3,128
    75b4:	10000426 	beq	r2,zero,75c8 <__smakebuf_r+0xfc>
    75b8:	04801004 	movi	r18,64
    75bc:	18820014 	ori	r2,r3,2048
    75c0:	8080030d 	sth	r2,12(r16)
    75c4:	003fe506 	br	755c <__smakebuf_r+0x90>
    75c8:	04810004 	movi	r18,1024
    75cc:	003ffb06 	br	75bc <__smakebuf_r+0xf0>
    75d0:	8140038f 	ldh	r5,14(r16)
    75d4:	8809883a 	mov	r4,r17
    75d8:	0009bdc0 	call	9bdc <_isatty_r>
    75dc:	103fde26 	beq	r2,zero,7558 <__smakebuf_r+0x8c>
    75e0:	8080030b 	ldhu	r2,12(r16)
    75e4:	80c010c4 	addi	r3,r16,67
    75e8:	04810004 	movi	r18,1024
    75ec:	10800054 	ori	r2,r2,1
    75f0:	8080030d 	sth	r2,12(r16)
    75f4:	00800044 	movi	r2,1
    75f8:	80c00415 	stw	r3,16(r16)
    75fc:	80800515 	stw	r2,20(r16)
    7600:	80c00015 	stw	r3,0(r16)
    7604:	003fd506 	br	755c <__smakebuf_r+0x90>
    7608:	80c00a17 	ldw	r3,40(r16)
    760c:	00800074 	movhi	r2,1
    7610:	10a58d04 	addi	r2,r2,-27084
    7614:	18bfcb1e 	bne	r3,r2,7544 <__smakebuf_r+0x78>
    7618:	8080030b 	ldhu	r2,12(r16)
    761c:	00c10004 	movi	r3,1024
    7620:	1825883a 	mov	r18,r3
    7624:	10c4b03a 	or	r2,r2,r3
    7628:	8080030d 	sth	r2,12(r16)
    762c:	80c01315 	stw	r3,76(r16)
    7630:	003fca06 	br	755c <__smakebuf_r+0x90>
    7634:	8100030b 	ldhu	r4,12(r16)
    7638:	2080800c 	andi	r2,r4,512
    763c:	103fb21e 	bne	r2,zero,7508 <__smakebuf_r+0x3c>
    7640:	80c010c4 	addi	r3,r16,67
    7644:	21000094 	ori	r4,r4,2
    7648:	00800044 	movi	r2,1
    764c:	80800515 	stw	r2,20(r16)
    7650:	8100030d 	sth	r4,12(r16)
    7654:	80c00415 	stw	r3,16(r16)
    7658:	80c00015 	stw	r3,0(r16)
    765c:	003faa06 	br	7508 <__smakebuf_r+0x3c>

00007660 <_malloc_r>:
    7660:	defff604 	addi	sp,sp,-40
    7664:	28c002c4 	addi	r3,r5,11
    7668:	00800584 	movi	r2,22
    766c:	dc800215 	stw	r18,8(sp)
    7670:	dfc00915 	stw	ra,36(sp)
    7674:	df000815 	stw	fp,32(sp)
    7678:	ddc00715 	stw	r23,28(sp)
    767c:	dd800615 	stw	r22,24(sp)
    7680:	dd400515 	stw	r21,20(sp)
    7684:	dd000415 	stw	r20,16(sp)
    7688:	dcc00315 	stw	r19,12(sp)
    768c:	dc400115 	stw	r17,4(sp)
    7690:	dc000015 	stw	r16,0(sp)
    7694:	2025883a 	mov	r18,r4
    7698:	10c01236 	bltu	r2,r3,76e4 <_malloc_r+0x84>
    769c:	04400404 	movi	r17,16
    76a0:	8940142e 	bgeu	r17,r5,76f4 <_malloc_r+0x94>
    76a4:	00800304 	movi	r2,12
    76a8:	0007883a 	mov	r3,zero
    76ac:	90800015 	stw	r2,0(r18)
    76b0:	1805883a 	mov	r2,r3
    76b4:	dfc00917 	ldw	ra,36(sp)
    76b8:	df000817 	ldw	fp,32(sp)
    76bc:	ddc00717 	ldw	r23,28(sp)
    76c0:	dd800617 	ldw	r22,24(sp)
    76c4:	dd400517 	ldw	r21,20(sp)
    76c8:	dd000417 	ldw	r20,16(sp)
    76cc:	dcc00317 	ldw	r19,12(sp)
    76d0:	dc800217 	ldw	r18,8(sp)
    76d4:	dc400117 	ldw	r17,4(sp)
    76d8:	dc000017 	ldw	r16,0(sp)
    76dc:	dec00a04 	addi	sp,sp,40
    76e0:	f800283a 	ret
    76e4:	00bffe04 	movi	r2,-8
    76e8:	18a2703a 	and	r17,r3,r2
    76ec:	883fed16 	blt	r17,zero,76a4 <_malloc_r+0x44>
    76f0:	897fec36 	bltu	r17,r5,76a4 <_malloc_r+0x44>
    76f4:	9009883a 	mov	r4,r18
    76f8:	000c61c0 	call	c61c <__malloc_lock>
    76fc:	00807dc4 	movi	r2,503
    7700:	14402b2e 	bgeu	r2,r17,77b0 <_malloc_r+0x150>
    7704:	8806d27a 	srli	r3,r17,9
    7708:	18003f1e 	bne	r3,zero,7808 <_malloc_r+0x1a8>
    770c:	880cd0fa 	srli	r6,r17,3
    7710:	300490fa 	slli	r2,r6,3
    7714:	02c00074 	movhi	r11,1
    7718:	5aca5904 	addi	r11,r11,10596
    771c:	12cb883a 	add	r5,r2,r11
    7720:	2c000317 	ldw	r16,12(r5)
    7724:	580f883a 	mov	r7,r11
    7728:	2c00041e 	bne	r5,r16,773c <_malloc_r+0xdc>
    772c:	00000a06 	br	7758 <_malloc_r+0xf8>
    7730:	1800860e 	bge	r3,zero,794c <_malloc_r+0x2ec>
    7734:	84000317 	ldw	r16,12(r16)
    7738:	2c000726 	beq	r5,r16,7758 <_malloc_r+0xf8>
    773c:	80800117 	ldw	r2,4(r16)
    7740:	00ffff04 	movi	r3,-4
    7744:	10c8703a 	and	r4,r2,r3
    7748:	2447c83a 	sub	r3,r4,r17
    774c:	008003c4 	movi	r2,15
    7750:	10fff70e 	bge	r2,r3,7730 <_malloc_r+0xd0>
    7754:	31bfffc4 	addi	r6,r6,-1
    7758:	32400044 	addi	r9,r6,1
    775c:	02800074 	movhi	r10,1
    7760:	528a5b04 	addi	r10,r10,10604
    7764:	54000217 	ldw	r16,8(r10)
    7768:	8280a026 	beq	r16,r10,79ec <_malloc_r+0x38c>
    776c:	80800117 	ldw	r2,4(r16)
    7770:	00ffff04 	movi	r3,-4
    7774:	10ca703a 	and	r5,r2,r3
    7778:	2c4dc83a 	sub	r6,r5,r17
    777c:	008003c4 	movi	r2,15
    7780:	11808316 	blt	r2,r6,7990 <_malloc_r+0x330>
    7784:	52800315 	stw	r10,12(r10)
    7788:	52800215 	stw	r10,8(r10)
    778c:	30002916 	blt	r6,zero,7834 <_malloc_r+0x1d4>
    7790:	8147883a 	add	r3,r16,r5
    7794:	18800117 	ldw	r2,4(r3)
    7798:	9009883a 	mov	r4,r18
    779c:	10800054 	ori	r2,r2,1
    77a0:	18800115 	stw	r2,4(r3)
    77a4:	000c63c0 	call	c63c <__malloc_unlock>
    77a8:	80c00204 	addi	r3,r16,8
    77ac:	003fc006 	br	76b0 <_malloc_r+0x50>
    77b0:	02c00074 	movhi	r11,1
    77b4:	5aca5904 	addi	r11,r11,10596
    77b8:	8ac5883a 	add	r2,r17,r11
    77bc:	14000317 	ldw	r16,12(r2)
    77c0:	580f883a 	mov	r7,r11
    77c4:	8806d0fa 	srli	r3,r17,3
    77c8:	14006c26 	beq	r2,r16,797c <_malloc_r+0x31c>
    77cc:	80c00117 	ldw	r3,4(r16)
    77d0:	00bfff04 	movi	r2,-4
    77d4:	81800317 	ldw	r6,12(r16)
    77d8:	1886703a 	and	r3,r3,r2
    77dc:	80c7883a 	add	r3,r16,r3
    77e0:	18800117 	ldw	r2,4(r3)
    77e4:	81400217 	ldw	r5,8(r16)
    77e8:	9009883a 	mov	r4,r18
    77ec:	10800054 	ori	r2,r2,1
    77f0:	18800115 	stw	r2,4(r3)
    77f4:	31400215 	stw	r5,8(r6)
    77f8:	29800315 	stw	r6,12(r5)
    77fc:	000c63c0 	call	c63c <__malloc_unlock>
    7800:	80c00204 	addi	r3,r16,8
    7804:	003faa06 	br	76b0 <_malloc_r+0x50>
    7808:	00800104 	movi	r2,4
    780c:	10c0052e 	bgeu	r2,r3,7824 <_malloc_r+0x1c4>
    7810:	00800504 	movi	r2,20
    7814:	10c07836 	bltu	r2,r3,79f8 <_malloc_r+0x398>
    7818:	198016c4 	addi	r6,r3,91
    781c:	300490fa 	slli	r2,r6,3
    7820:	003fbc06 	br	7714 <_malloc_r+0xb4>
    7824:	8804d1ba 	srli	r2,r17,6
    7828:	11800e04 	addi	r6,r2,56
    782c:	300490fa 	slli	r2,r6,3
    7830:	003fb806 	br	7714 <_malloc_r+0xb4>
    7834:	00807fc4 	movi	r2,511
    7838:	1140bb36 	bltu	r2,r5,7b28 <_malloc_r+0x4c8>
    783c:	2806d0fa 	srli	r3,r5,3
    7840:	573ffe04 	addi	fp,r10,-8
    7844:	00800044 	movi	r2,1
    7848:	180890fa 	slli	r4,r3,3
    784c:	1807d0ba 	srai	r3,r3,2
    7850:	e1c00117 	ldw	r7,4(fp)
    7854:	5909883a 	add	r4,r11,r4
    7858:	21400217 	ldw	r5,8(r4)
    785c:	10c4983a 	sll	r2,r2,r3
    7860:	81000315 	stw	r4,12(r16)
    7864:	81400215 	stw	r5,8(r16)
    7868:	388eb03a 	or	r7,r7,r2
    786c:	2c000315 	stw	r16,12(r5)
    7870:	24000215 	stw	r16,8(r4)
    7874:	e1c00115 	stw	r7,4(fp)
    7878:	4807883a 	mov	r3,r9
    787c:	4800cd16 	blt	r9,zero,7bb4 <_malloc_r+0x554>
    7880:	1807d0ba 	srai	r3,r3,2
    7884:	00800044 	movi	r2,1
    7888:	10c8983a 	sll	r4,r2,r3
    788c:	39004436 	bltu	r7,r4,79a0 <_malloc_r+0x340>
    7890:	21c4703a 	and	r2,r4,r7
    7894:	10000a1e 	bne	r2,zero,78c0 <_malloc_r+0x260>
    7898:	2109883a 	add	r4,r4,r4
    789c:	00bfff04 	movi	r2,-4
    78a0:	4884703a 	and	r2,r9,r2
    78a4:	3906703a 	and	r3,r7,r4
    78a8:	12400104 	addi	r9,r2,4
    78ac:	1800041e 	bne	r3,zero,78c0 <_malloc_r+0x260>
    78b0:	2109883a 	add	r4,r4,r4
    78b4:	3904703a 	and	r2,r7,r4
    78b8:	4a400104 	addi	r9,r9,4
    78bc:	103ffc26 	beq	r2,zero,78b0 <_malloc_r+0x250>
    78c0:	480490fa 	slli	r2,r9,3
    78c4:	4819883a 	mov	r12,r9
    78c8:	023fff04 	movi	r8,-4
    78cc:	589b883a 	add	r13,r11,r2
    78d0:	6807883a 	mov	r3,r13
    78d4:	014003c4 	movi	r5,15
    78d8:	1c000317 	ldw	r16,12(r3)
    78dc:	1c00041e 	bne	r3,r16,78f0 <_malloc_r+0x290>
    78e0:	0000a706 	br	7b80 <_malloc_r+0x520>
    78e4:	3000ab0e 	bge	r6,zero,7b94 <_malloc_r+0x534>
    78e8:	84000317 	ldw	r16,12(r16)
    78ec:	1c00a426 	beq	r3,r16,7b80 <_malloc_r+0x520>
    78f0:	80800117 	ldw	r2,4(r16)
    78f4:	1204703a 	and	r2,r2,r8
    78f8:	144dc83a 	sub	r6,r2,r17
    78fc:	29bff90e 	bge	r5,r6,78e4 <_malloc_r+0x284>
    7900:	81000317 	ldw	r4,12(r16)
    7904:	80c00217 	ldw	r3,8(r16)
    7908:	89400054 	ori	r5,r17,1
    790c:	8445883a 	add	r2,r16,r17
    7910:	20c00215 	stw	r3,8(r4)
    7914:	19000315 	stw	r4,12(r3)
    7918:	81400115 	stw	r5,4(r16)
    791c:	1187883a 	add	r3,r2,r6
    7920:	31000054 	ori	r4,r6,1
    7924:	50800315 	stw	r2,12(r10)
    7928:	50800215 	stw	r2,8(r10)
    792c:	19800015 	stw	r6,0(r3)
    7930:	11000115 	stw	r4,4(r2)
    7934:	12800215 	stw	r10,8(r2)
    7938:	12800315 	stw	r10,12(r2)
    793c:	9009883a 	mov	r4,r18
    7940:	000c63c0 	call	c63c <__malloc_unlock>
    7944:	80c00204 	addi	r3,r16,8
    7948:	003f5906 	br	76b0 <_malloc_r+0x50>
    794c:	8109883a 	add	r4,r16,r4
    7950:	20800117 	ldw	r2,4(r4)
    7954:	80c00217 	ldw	r3,8(r16)
    7958:	81400317 	ldw	r5,12(r16)
    795c:	10800054 	ori	r2,r2,1
    7960:	20800115 	stw	r2,4(r4)
    7964:	28c00215 	stw	r3,8(r5)
    7968:	19400315 	stw	r5,12(r3)
    796c:	9009883a 	mov	r4,r18
    7970:	000c63c0 	call	c63c <__malloc_unlock>
    7974:	80c00204 	addi	r3,r16,8
    7978:	003f4d06 	br	76b0 <_malloc_r+0x50>
    797c:	80800204 	addi	r2,r16,8
    7980:	14000317 	ldw	r16,12(r2)
    7984:	143f911e 	bne	r2,r16,77cc <_malloc_r+0x16c>
    7988:	1a400084 	addi	r9,r3,2
    798c:	003f7306 	br	775c <_malloc_r+0xfc>
    7990:	88c00054 	ori	r3,r17,1
    7994:	8445883a 	add	r2,r16,r17
    7998:	80c00115 	stw	r3,4(r16)
    799c:	003fdf06 	br	791c <_malloc_r+0x2bc>
    79a0:	e4000217 	ldw	r16,8(fp)
    79a4:	00bfff04 	movi	r2,-4
    79a8:	80c00117 	ldw	r3,4(r16)
    79ac:	802d883a 	mov	r22,r16
    79b0:	18aa703a 	and	r21,r3,r2
    79b4:	ac401636 	bltu	r21,r17,7a10 <_malloc_r+0x3b0>
    79b8:	ac49c83a 	sub	r4,r21,r17
    79bc:	008003c4 	movi	r2,15
    79c0:	1100130e 	bge	r2,r4,7a10 <_malloc_r+0x3b0>
    79c4:	88800054 	ori	r2,r17,1
    79c8:	8447883a 	add	r3,r16,r17
    79cc:	80800115 	stw	r2,4(r16)
    79d0:	20800054 	ori	r2,r4,1
    79d4:	18800115 	stw	r2,4(r3)
    79d8:	e0c00215 	stw	r3,8(fp)
    79dc:	9009883a 	mov	r4,r18
    79e0:	000c63c0 	call	c63c <__malloc_unlock>
    79e4:	80c00204 	addi	r3,r16,8
    79e8:	003f3106 	br	76b0 <_malloc_r+0x50>
    79ec:	39c00117 	ldw	r7,4(r7)
    79f0:	573ffe04 	addi	fp,r10,-8
    79f4:	003fa006 	br	7878 <_malloc_r+0x218>
    79f8:	00801504 	movi	r2,84
    79fc:	10c06736 	bltu	r2,r3,7b9c <_malloc_r+0x53c>
    7a00:	8804d33a 	srli	r2,r17,12
    7a04:	11801b84 	addi	r6,r2,110
    7a08:	300490fa 	slli	r2,r6,3
    7a0c:	003f4106 	br	7714 <_malloc_r+0xb4>
    7a10:	d0a70217 	ldw	r2,-25592(gp)
    7a14:	d0e00617 	ldw	r3,-32744(gp)
    7a18:	053fffc4 	movi	r20,-1
    7a1c:	10800404 	addi	r2,r2,16
    7a20:	88a7883a 	add	r19,r17,r2
    7a24:	1d000326 	beq	r3,r20,7a34 <_malloc_r+0x3d4>
    7a28:	98c3ffc4 	addi	r3,r19,4095
    7a2c:	00bc0004 	movi	r2,-4096
    7a30:	18a6703a 	and	r19,r3,r2
    7a34:	9009883a 	mov	r4,r18
    7a38:	980b883a 	mov	r5,r19
    7a3c:	00095bc0 	call	95bc <_sbrk_r>
    7a40:	1009883a 	mov	r4,r2
    7a44:	15000426 	beq	r2,r20,7a58 <_malloc_r+0x3f8>
    7a48:	854b883a 	add	r5,r16,r21
    7a4c:	1029883a 	mov	r20,r2
    7a50:	11405a2e 	bgeu	r2,r5,7bbc <_malloc_r+0x55c>
    7a54:	87000c26 	beq	r16,fp,7a88 <_malloc_r+0x428>
    7a58:	e4000217 	ldw	r16,8(fp)
    7a5c:	80c00117 	ldw	r3,4(r16)
    7a60:	00bfff04 	movi	r2,-4
    7a64:	1884703a 	and	r2,r3,r2
    7a68:	14400336 	bltu	r2,r17,7a78 <_malloc_r+0x418>
    7a6c:	1449c83a 	sub	r4,r2,r17
    7a70:	008003c4 	movi	r2,15
    7a74:	113fd316 	blt	r2,r4,79c4 <_malloc_r+0x364>
    7a78:	9009883a 	mov	r4,r18
    7a7c:	000c63c0 	call	c63c <__malloc_unlock>
    7a80:	0007883a 	mov	r3,zero
    7a84:	003f0a06 	br	76b0 <_malloc_r+0x50>
    7a88:	05c00074 	movhi	r23,1
    7a8c:	bdd6eb04 	addi	r23,r23,23468
    7a90:	b8800017 	ldw	r2,0(r23)
    7a94:	988d883a 	add	r6,r19,r2
    7a98:	b9800015 	stw	r6,0(r23)
    7a9c:	d0e00617 	ldw	r3,-32744(gp)
    7aa0:	00bfffc4 	movi	r2,-1
    7aa4:	18808e26 	beq	r3,r2,7ce0 <_malloc_r+0x680>
    7aa8:	2145c83a 	sub	r2,r4,r5
    7aac:	3085883a 	add	r2,r6,r2
    7ab0:	b8800015 	stw	r2,0(r23)
    7ab4:	20c001cc 	andi	r3,r4,7
    7ab8:	18005f1e 	bne	r3,zero,7c38 <_malloc_r+0x5d8>
    7abc:	000b883a 	mov	r5,zero
    7ac0:	a4c5883a 	add	r2,r20,r19
    7ac4:	1083ffcc 	andi	r2,r2,4095
    7ac8:	00c40004 	movi	r3,4096
    7acc:	1887c83a 	sub	r3,r3,r2
    7ad0:	28e7883a 	add	r19,r5,r3
    7ad4:	9009883a 	mov	r4,r18
    7ad8:	980b883a 	mov	r5,r19
    7adc:	00095bc0 	call	95bc <_sbrk_r>
    7ae0:	1007883a 	mov	r3,r2
    7ae4:	00bfffc4 	movi	r2,-1
    7ae8:	18807a26 	beq	r3,r2,7cd4 <_malloc_r+0x674>
    7aec:	1d05c83a 	sub	r2,r3,r20
    7af0:	9885883a 	add	r2,r19,r2
    7af4:	10c00054 	ori	r3,r2,1
    7af8:	b8800017 	ldw	r2,0(r23)
    7afc:	a021883a 	mov	r16,r20
    7b00:	a0c00115 	stw	r3,4(r20)
    7b04:	9885883a 	add	r2,r19,r2
    7b08:	b8800015 	stw	r2,0(r23)
    7b0c:	e5000215 	stw	r20,8(fp)
    7b10:	b7003626 	beq	r22,fp,7bec <_malloc_r+0x58c>
    7b14:	018003c4 	movi	r6,15
    7b18:	35404b36 	bltu	r6,r21,7c48 <_malloc_r+0x5e8>
    7b1c:	00800044 	movi	r2,1
    7b20:	a0800115 	stw	r2,4(r20)
    7b24:	003fcd06 	br	7a5c <_malloc_r+0x3fc>
    7b28:	2808d27a 	srli	r4,r5,9
    7b2c:	2000371e 	bne	r4,zero,7c0c <_malloc_r+0x5ac>
    7b30:	2808d0fa 	srli	r4,r5,3
    7b34:	200690fa 	slli	r3,r4,3
    7b38:	1ad1883a 	add	r8,r3,r11
    7b3c:	41800217 	ldw	r6,8(r8)
    7b40:	41805b26 	beq	r8,r6,7cb0 <_malloc_r+0x650>
    7b44:	30800117 	ldw	r2,4(r6)
    7b48:	00ffff04 	movi	r3,-4
    7b4c:	10c4703a 	and	r2,r2,r3
    7b50:	2880022e 	bgeu	r5,r2,7b5c <_malloc_r+0x4fc>
    7b54:	31800217 	ldw	r6,8(r6)
    7b58:	41bffa1e 	bne	r8,r6,7b44 <_malloc_r+0x4e4>
    7b5c:	32000317 	ldw	r8,12(r6)
    7b60:	39c00117 	ldw	r7,4(r7)
    7b64:	82000315 	stw	r8,12(r16)
    7b68:	81800215 	stw	r6,8(r16)
    7b6c:	07000074 	movhi	fp,1
    7b70:	e70a5904 	addi	fp,fp,10596
    7b74:	34000315 	stw	r16,12(r6)
    7b78:	44000215 	stw	r16,8(r8)
    7b7c:	003f3e06 	br	7878 <_malloc_r+0x218>
    7b80:	63000044 	addi	r12,r12,1
    7b84:	608000cc 	andi	r2,r12,3
    7b88:	10005d26 	beq	r2,zero,7d00 <_malloc_r+0x6a0>
    7b8c:	18c00204 	addi	r3,r3,8
    7b90:	003f5106 	br	78d8 <_malloc_r+0x278>
    7b94:	8089883a 	add	r4,r16,r2
    7b98:	003f6d06 	br	7950 <_malloc_r+0x2f0>
    7b9c:	00805504 	movi	r2,340
    7ba0:	10c02036 	bltu	r2,r3,7c24 <_malloc_r+0x5c4>
    7ba4:	8804d3fa 	srli	r2,r17,15
    7ba8:	11801dc4 	addi	r6,r2,119
    7bac:	300490fa 	slli	r2,r6,3
    7bb0:	003ed806 	br	7714 <_malloc_r+0xb4>
    7bb4:	48c000c4 	addi	r3,r9,3
    7bb8:	003f3106 	br	7880 <_malloc_r+0x220>
    7bbc:	05c00074 	movhi	r23,1
    7bc0:	bdd6eb04 	addi	r23,r23,23468
    7bc4:	b8800017 	ldw	r2,0(r23)
    7bc8:	988d883a 	add	r6,r19,r2
    7bcc:	b9800015 	stw	r6,0(r23)
    7bd0:	293fb21e 	bne	r5,r4,7a9c <_malloc_r+0x43c>
    7bd4:	2083ffcc 	andi	r2,r4,4095
    7bd8:	103fb01e 	bne	r2,zero,7a9c <_malloc_r+0x43c>
    7bdc:	e4000217 	ldw	r16,8(fp)
    7be0:	9d45883a 	add	r2,r19,r21
    7be4:	10800054 	ori	r2,r2,1
    7be8:	80800115 	stw	r2,4(r16)
    7bec:	b8c00017 	ldw	r3,0(r23)
    7bf0:	d0a70317 	ldw	r2,-25588(gp)
    7bf4:	10c0012e 	bgeu	r2,r3,7bfc <_malloc_r+0x59c>
    7bf8:	d0e70315 	stw	r3,-25588(gp)
    7bfc:	d0a70417 	ldw	r2,-25584(gp)
    7c00:	10ff962e 	bgeu	r2,r3,7a5c <_malloc_r+0x3fc>
    7c04:	d0e70415 	stw	r3,-25584(gp)
    7c08:	003f9406 	br	7a5c <_malloc_r+0x3fc>
    7c0c:	00800104 	movi	r2,4
    7c10:	11001e36 	bltu	r2,r4,7c8c <_malloc_r+0x62c>
    7c14:	2804d1ba 	srli	r2,r5,6
    7c18:	11000e04 	addi	r4,r2,56
    7c1c:	200690fa 	slli	r3,r4,3
    7c20:	003fc506 	br	7b38 <_malloc_r+0x4d8>
    7c24:	00815504 	movi	r2,1364
    7c28:	10c01d2e 	bgeu	r2,r3,7ca0 <_malloc_r+0x640>
    7c2c:	01801f84 	movi	r6,126
    7c30:	0080fc04 	movi	r2,1008
    7c34:	003eb706 	br	7714 <_malloc_r+0xb4>
    7c38:	00800204 	movi	r2,8
    7c3c:	10cbc83a 	sub	r5,r2,r3
    7c40:	2169883a 	add	r20,r4,r5
    7c44:	003f9e06 	br	7ac0 <_malloc_r+0x460>
    7c48:	00bffe04 	movi	r2,-8
    7c4c:	a93ffd04 	addi	r4,r21,-12
    7c50:	2088703a 	and	r4,r4,r2
    7c54:	b10b883a 	add	r5,r22,r4
    7c58:	00c00144 	movi	r3,5
    7c5c:	28c00215 	stw	r3,8(r5)
    7c60:	28c00115 	stw	r3,4(r5)
    7c64:	b0800117 	ldw	r2,4(r22)
    7c68:	1080004c 	andi	r2,r2,1
    7c6c:	2084b03a 	or	r2,r4,r2
    7c70:	b0800115 	stw	r2,4(r22)
    7c74:	313fdd2e 	bgeu	r6,r4,7bec <_malloc_r+0x58c>
    7c78:	b1400204 	addi	r5,r22,8
    7c7c:	9009883a 	mov	r4,r18
    7c80:	0006ad80 	call	6ad8 <_free_r>
    7c84:	e4000217 	ldw	r16,8(fp)
    7c88:	003fd806 	br	7bec <_malloc_r+0x58c>
    7c8c:	00800504 	movi	r2,20
    7c90:	11001536 	bltu	r2,r4,7ce8 <_malloc_r+0x688>
    7c94:	210016c4 	addi	r4,r4,91
    7c98:	200690fa 	slli	r3,r4,3
    7c9c:	003fa606 	br	7b38 <_malloc_r+0x4d8>
    7ca0:	8804d4ba 	srli	r2,r17,18
    7ca4:	11801f04 	addi	r6,r2,124
    7ca8:	300490fa 	slli	r2,r6,3
    7cac:	003e9906 	br	7714 <_malloc_r+0xb4>
    7cb0:	2009d0ba 	srai	r4,r4,2
    7cb4:	01400074 	movhi	r5,1
    7cb8:	294a5904 	addi	r5,r5,10596
    7cbc:	00c00044 	movi	r3,1
    7cc0:	28800117 	ldw	r2,4(r5)
    7cc4:	1906983a 	sll	r3,r3,r4
    7cc8:	10c4b03a 	or	r2,r2,r3
    7ccc:	28800115 	stw	r2,4(r5)
    7cd0:	003fa306 	br	7b60 <_malloc_r+0x500>
    7cd4:	0027883a 	mov	r19,zero
    7cd8:	00c00044 	movi	r3,1
    7cdc:	003f8606 	br	7af8 <_malloc_r+0x498>
    7ce0:	d1200615 	stw	r4,-32744(gp)
    7ce4:	003f7306 	br	7ab4 <_malloc_r+0x454>
    7ce8:	00801504 	movi	r2,84
    7cec:	11001936 	bltu	r2,r4,7d54 <_malloc_r+0x6f4>
    7cf0:	2804d33a 	srli	r2,r5,12
    7cf4:	11001b84 	addi	r4,r2,110
    7cf8:	200690fa 	slli	r3,r4,3
    7cfc:	003f8e06 	br	7b38 <_malloc_r+0x4d8>
    7d00:	480b883a 	mov	r5,r9
    7d04:	6807883a 	mov	r3,r13
    7d08:	288000cc 	andi	r2,r5,3
    7d0c:	18fffe04 	addi	r3,r3,-8
    7d10:	297fffc4 	addi	r5,r5,-1
    7d14:	10001526 	beq	r2,zero,7d6c <_malloc_r+0x70c>
    7d18:	18800217 	ldw	r2,8(r3)
    7d1c:	10fffa26 	beq	r2,r3,7d08 <_malloc_r+0x6a8>
    7d20:	2109883a 	add	r4,r4,r4
    7d24:	393f1e36 	bltu	r7,r4,79a0 <_malloc_r+0x340>
    7d28:	203f1d26 	beq	r4,zero,79a0 <_malloc_r+0x340>
    7d2c:	21c4703a 	and	r2,r4,r7
    7d30:	10000226 	beq	r2,zero,7d3c <_malloc_r+0x6dc>
    7d34:	6013883a 	mov	r9,r12
    7d38:	003ee106 	br	78c0 <_malloc_r+0x260>
    7d3c:	2109883a 	add	r4,r4,r4
    7d40:	3904703a 	and	r2,r7,r4
    7d44:	63000104 	addi	r12,r12,4
    7d48:	103ffc26 	beq	r2,zero,7d3c <_malloc_r+0x6dc>
    7d4c:	6013883a 	mov	r9,r12
    7d50:	003edb06 	br	78c0 <_malloc_r+0x260>
    7d54:	00805504 	movi	r2,340
    7d58:	11000836 	bltu	r2,r4,7d7c <_malloc_r+0x71c>
    7d5c:	2804d3fa 	srli	r2,r5,15
    7d60:	11001dc4 	addi	r4,r2,119
    7d64:	200690fa 	slli	r3,r4,3
    7d68:	003f7306 	br	7b38 <_malloc_r+0x4d8>
    7d6c:	0104303a 	nor	r2,zero,r4
    7d70:	388e703a 	and	r7,r7,r2
    7d74:	e1c00115 	stw	r7,4(fp)
    7d78:	003fe906 	br	7d20 <_malloc_r+0x6c0>
    7d7c:	00815504 	movi	r2,1364
    7d80:	1100032e 	bgeu	r2,r4,7d90 <_malloc_r+0x730>
    7d84:	01001f84 	movi	r4,126
    7d88:	00c0fc04 	movi	r3,1008
    7d8c:	003f6a06 	br	7b38 <_malloc_r+0x4d8>
    7d90:	2804d4ba 	srli	r2,r5,18
    7d94:	11001f04 	addi	r4,r2,124
    7d98:	200690fa 	slli	r3,r4,3
    7d9c:	003f6606 	br	7b38 <_malloc_r+0x4d8>

00007da0 <memchr>:
    7da0:	008000c4 	movi	r2,3
    7da4:	29403fcc 	andi	r5,r5,255
    7da8:	2007883a 	mov	r3,r4
    7dac:	1180022e 	bgeu	r2,r6,7db8 <memchr+0x18>
    7db0:	2084703a 	and	r2,r4,r2
    7db4:	10000b26 	beq	r2,zero,7de4 <memchr+0x44>
    7db8:	313fffc4 	addi	r4,r6,-1
    7dbc:	3000051e 	bne	r6,zero,7dd4 <memchr+0x34>
    7dc0:	00002c06 	br	7e74 <memchr+0xd4>
    7dc4:	213fffc4 	addi	r4,r4,-1
    7dc8:	00bfffc4 	movi	r2,-1
    7dcc:	18c00044 	addi	r3,r3,1
    7dd0:	20802826 	beq	r4,r2,7e74 <memchr+0xd4>
    7dd4:	18800003 	ldbu	r2,0(r3)
    7dd8:	28bffa1e 	bne	r5,r2,7dc4 <memchr+0x24>
    7ddc:	1805883a 	mov	r2,r3
    7de0:	f800283a 	ret
    7de4:	0011883a 	mov	r8,zero
    7de8:	0007883a 	mov	r3,zero
    7dec:	01c00104 	movi	r7,4
    7df0:	4004923a 	slli	r2,r8,8
    7df4:	18c00044 	addi	r3,r3,1
    7df8:	1151883a 	add	r8,r2,r5
    7dfc:	19fffc1e 	bne	r3,r7,7df0 <memchr+0x50>
    7e00:	02bfbff4 	movhi	r10,65279
    7e04:	52bfbfc4 	addi	r10,r10,-257
    7e08:	02602074 	movhi	r9,32897
    7e0c:	4a602004 	addi	r9,r9,-32640
    7e10:	02c000c4 	movi	r11,3
    7e14:	20800017 	ldw	r2,0(r4)
    7e18:	31bfff04 	addi	r6,r6,-4
    7e1c:	200f883a 	mov	r7,r4
    7e20:	1204f03a 	xor	r2,r2,r8
    7e24:	1287883a 	add	r3,r2,r10
    7e28:	1a46703a 	and	r3,r3,r9
    7e2c:	0084303a 	nor	r2,zero,r2
    7e30:	10c4703a 	and	r2,r2,r3
    7e34:	10000b26 	beq	r2,zero,7e64 <memchr+0xc4>
    7e38:	20800003 	ldbu	r2,0(r4)
    7e3c:	28800f26 	beq	r5,r2,7e7c <memchr+0xdc>
    7e40:	20800043 	ldbu	r2,1(r4)
    7e44:	21c00044 	addi	r7,r4,1
    7e48:	28800c26 	beq	r5,r2,7e7c <memchr+0xdc>
    7e4c:	20800083 	ldbu	r2,2(r4)
    7e50:	21c00084 	addi	r7,r4,2
    7e54:	28800926 	beq	r5,r2,7e7c <memchr+0xdc>
    7e58:	208000c3 	ldbu	r2,3(r4)
    7e5c:	21c000c4 	addi	r7,r4,3
    7e60:	28800626 	beq	r5,r2,7e7c <memchr+0xdc>
    7e64:	21000104 	addi	r4,r4,4
    7e68:	59bfea36 	bltu	r11,r6,7e14 <memchr+0x74>
    7e6c:	2007883a 	mov	r3,r4
    7e70:	003fd106 	br	7db8 <memchr+0x18>
    7e74:	0005883a 	mov	r2,zero
    7e78:	f800283a 	ret
    7e7c:	3805883a 	mov	r2,r7
    7e80:	f800283a 	ret

00007e84 <memmove>:
    7e84:	2807883a 	mov	r3,r5
    7e88:	2011883a 	mov	r8,r4
    7e8c:	29000c2e 	bgeu	r5,r4,7ec0 <memmove+0x3c>
    7e90:	298f883a 	add	r7,r5,r6
    7e94:	21c00a2e 	bgeu	r4,r7,7ec0 <memmove+0x3c>
    7e98:	30000726 	beq	r6,zero,7eb8 <memmove+0x34>
    7e9c:	2187883a 	add	r3,r4,r6
    7ea0:	198dc83a 	sub	r6,r3,r6
    7ea4:	39ffffc4 	addi	r7,r7,-1
    7ea8:	38800003 	ldbu	r2,0(r7)
    7eac:	18ffffc4 	addi	r3,r3,-1
    7eb0:	18800005 	stb	r2,0(r3)
    7eb4:	19bffb1e 	bne	r3,r6,7ea4 <memmove+0x20>
    7eb8:	2005883a 	mov	r2,r4
    7ebc:	f800283a 	ret
    7ec0:	01c003c4 	movi	r7,15
    7ec4:	39800a36 	bltu	r7,r6,7ef0 <memmove+0x6c>
    7ec8:	303ffb26 	beq	r6,zero,7eb8 <memmove+0x34>
    7ecc:	400f883a 	mov	r7,r8
    7ed0:	320d883a 	add	r6,r6,r8
    7ed4:	28800003 	ldbu	r2,0(r5)
    7ed8:	29400044 	addi	r5,r5,1
    7edc:	38800005 	stb	r2,0(r7)
    7ee0:	39c00044 	addi	r7,r7,1
    7ee4:	39bffb1e 	bne	r7,r6,7ed4 <memmove+0x50>
    7ee8:	2005883a 	mov	r2,r4
    7eec:	f800283a 	ret
    7ef0:	1904b03a 	or	r2,r3,r4
    7ef4:	108000cc 	andi	r2,r2,3
    7ef8:	103ff31e 	bne	r2,zero,7ec8 <memmove+0x44>
    7efc:	3811883a 	mov	r8,r7
    7f00:	180b883a 	mov	r5,r3
    7f04:	200f883a 	mov	r7,r4
    7f08:	28c00017 	ldw	r3,0(r5)
    7f0c:	31bffc04 	addi	r6,r6,-16
    7f10:	38c00015 	stw	r3,0(r7)
    7f14:	28800117 	ldw	r2,4(r5)
    7f18:	38800115 	stw	r2,4(r7)
    7f1c:	28c00217 	ldw	r3,8(r5)
    7f20:	38c00215 	stw	r3,8(r7)
    7f24:	28800317 	ldw	r2,12(r5)
    7f28:	29400404 	addi	r5,r5,16
    7f2c:	38800315 	stw	r2,12(r7)
    7f30:	39c00404 	addi	r7,r7,16
    7f34:	41bff436 	bltu	r8,r6,7f08 <memmove+0x84>
    7f38:	008000c4 	movi	r2,3
    7f3c:	1180072e 	bgeu	r2,r6,7f5c <memmove+0xd8>
    7f40:	1007883a 	mov	r3,r2
    7f44:	28800017 	ldw	r2,0(r5)
    7f48:	31bfff04 	addi	r6,r6,-4
    7f4c:	29400104 	addi	r5,r5,4
    7f50:	38800015 	stw	r2,0(r7)
    7f54:	39c00104 	addi	r7,r7,4
    7f58:	19bffa36 	bltu	r3,r6,7f44 <memmove+0xc0>
    7f5c:	3811883a 	mov	r8,r7
    7f60:	003fd906 	br	7ec8 <memmove+0x44>

00007f64 <_Bfree>:
    7f64:	28000826 	beq	r5,zero,7f88 <_Bfree+0x24>
    7f68:	28800117 	ldw	r2,4(r5)
    7f6c:	21001317 	ldw	r4,76(r4)
    7f70:	1085883a 	add	r2,r2,r2
    7f74:	1085883a 	add	r2,r2,r2
    7f78:	1105883a 	add	r2,r2,r4
    7f7c:	10c00017 	ldw	r3,0(r2)
    7f80:	28c00015 	stw	r3,0(r5)
    7f84:	11400015 	stw	r5,0(r2)
    7f88:	f800283a 	ret

00007f8c <__hi0bits>:
    7f8c:	20bfffec 	andhi	r2,r4,65535
    7f90:	10001426 	beq	r2,zero,7fe4 <__hi0bits+0x58>
    7f94:	0007883a 	mov	r3,zero
    7f98:	20bfc02c 	andhi	r2,r4,65280
    7f9c:	1000021e 	bne	r2,zero,7fa8 <__hi0bits+0x1c>
    7fa0:	2008923a 	slli	r4,r4,8
    7fa4:	18c00204 	addi	r3,r3,8
    7fa8:	20bc002c 	andhi	r2,r4,61440
    7fac:	1000021e 	bne	r2,zero,7fb8 <__hi0bits+0x2c>
    7fb0:	2008913a 	slli	r4,r4,4
    7fb4:	18c00104 	addi	r3,r3,4
    7fb8:	20b0002c 	andhi	r2,r4,49152
    7fbc:	1000031e 	bne	r2,zero,7fcc <__hi0bits+0x40>
    7fc0:	2105883a 	add	r2,r4,r4
    7fc4:	18c00084 	addi	r3,r3,2
    7fc8:	1089883a 	add	r4,r2,r2
    7fcc:	20000316 	blt	r4,zero,7fdc <__hi0bits+0x50>
    7fd0:	2090002c 	andhi	r2,r4,16384
    7fd4:	10000626 	beq	r2,zero,7ff0 <__hi0bits+0x64>
    7fd8:	18c00044 	addi	r3,r3,1
    7fdc:	1805883a 	mov	r2,r3
    7fe0:	f800283a 	ret
    7fe4:	2008943a 	slli	r4,r4,16
    7fe8:	00c00404 	movi	r3,16
    7fec:	003fea06 	br	7f98 <__hi0bits+0xc>
    7ff0:	00c00804 	movi	r3,32
    7ff4:	1805883a 	mov	r2,r3
    7ff8:	f800283a 	ret

00007ffc <__lo0bits>:
    7ffc:	20c00017 	ldw	r3,0(r4)
    8000:	188001cc 	andi	r2,r3,7
    8004:	10000a26 	beq	r2,zero,8030 <__lo0bits+0x34>
    8008:	1880004c 	andi	r2,r3,1
    800c:	1005003a 	cmpeq	r2,r2,zero
    8010:	10002126 	beq	r2,zero,8098 <__lo0bits+0x9c>
    8014:	1880008c 	andi	r2,r3,2
    8018:	1000251e 	bne	r2,zero,80b0 <__lo0bits+0xb4>
    801c:	1804d0ba 	srli	r2,r3,2
    8020:	01400084 	movi	r5,2
    8024:	20800015 	stw	r2,0(r4)
    8028:	2805883a 	mov	r2,r5
    802c:	f800283a 	ret
    8030:	18bfffcc 	andi	r2,r3,65535
    8034:	10001526 	beq	r2,zero,808c <__lo0bits+0x90>
    8038:	000b883a 	mov	r5,zero
    803c:	18803fcc 	andi	r2,r3,255
    8040:	1000021e 	bne	r2,zero,804c <__lo0bits+0x50>
    8044:	1806d23a 	srli	r3,r3,8
    8048:	29400204 	addi	r5,r5,8
    804c:	188003cc 	andi	r2,r3,15
    8050:	1000021e 	bne	r2,zero,805c <__lo0bits+0x60>
    8054:	1806d13a 	srli	r3,r3,4
    8058:	29400104 	addi	r5,r5,4
    805c:	188000cc 	andi	r2,r3,3
    8060:	1000021e 	bne	r2,zero,806c <__lo0bits+0x70>
    8064:	1806d0ba 	srli	r3,r3,2
    8068:	29400084 	addi	r5,r5,2
    806c:	1880004c 	andi	r2,r3,1
    8070:	1000031e 	bne	r2,zero,8080 <__lo0bits+0x84>
    8074:	1806d07a 	srli	r3,r3,1
    8078:	18000a26 	beq	r3,zero,80a4 <__lo0bits+0xa8>
    807c:	29400044 	addi	r5,r5,1
    8080:	2805883a 	mov	r2,r5
    8084:	20c00015 	stw	r3,0(r4)
    8088:	f800283a 	ret
    808c:	1806d43a 	srli	r3,r3,16
    8090:	01400404 	movi	r5,16
    8094:	003fe906 	br	803c <__lo0bits+0x40>
    8098:	000b883a 	mov	r5,zero
    809c:	2805883a 	mov	r2,r5
    80a0:	f800283a 	ret
    80a4:	01400804 	movi	r5,32
    80a8:	2805883a 	mov	r2,r5
    80ac:	f800283a 	ret
    80b0:	1804d07a 	srli	r2,r3,1
    80b4:	01400044 	movi	r5,1
    80b8:	20800015 	stw	r2,0(r4)
    80bc:	003fda06 	br	8028 <__lo0bits+0x2c>

000080c0 <__mcmp>:
    80c0:	20800417 	ldw	r2,16(r4)
    80c4:	28c00417 	ldw	r3,16(r5)
    80c8:	10cfc83a 	sub	r7,r2,r3
    80cc:	38000c1e 	bne	r7,zero,8100 <__mcmp+0x40>
    80d0:	18c5883a 	add	r2,r3,r3
    80d4:	1085883a 	add	r2,r2,r2
    80d8:	10c00504 	addi	r3,r2,20
    80dc:	21000504 	addi	r4,r4,20
    80e0:	28cb883a 	add	r5,r5,r3
    80e4:	2085883a 	add	r2,r4,r2
    80e8:	10bfff04 	addi	r2,r2,-4
    80ec:	297fff04 	addi	r5,r5,-4
    80f0:	11800017 	ldw	r6,0(r2)
    80f4:	28c00017 	ldw	r3,0(r5)
    80f8:	30c0031e 	bne	r6,r3,8108 <__mcmp+0x48>
    80fc:	20bffa36 	bltu	r4,r2,80e8 <__mcmp+0x28>
    8100:	3805883a 	mov	r2,r7
    8104:	f800283a 	ret
    8108:	30c00336 	bltu	r6,r3,8118 <__mcmp+0x58>
    810c:	01c00044 	movi	r7,1
    8110:	3805883a 	mov	r2,r7
    8114:	f800283a 	ret
    8118:	01ffffc4 	movi	r7,-1
    811c:	003ff806 	br	8100 <__mcmp+0x40>

00008120 <__ulp>:
    8120:	295ffc2c 	andhi	r5,r5,32752
    8124:	013f3034 	movhi	r4,64704
    8128:	290b883a 	add	r5,r5,r4
    812c:	0145c83a 	sub	r2,zero,r5
    8130:	1007d53a 	srai	r3,r2,20
    8134:	000d883a 	mov	r6,zero
    8138:	0140040e 	bge	zero,r5,814c <__ulp+0x2c>
    813c:	280f883a 	mov	r7,r5
    8140:	3807883a 	mov	r3,r7
    8144:	3005883a 	mov	r2,r6
    8148:	f800283a 	ret
    814c:	008004c4 	movi	r2,19
    8150:	193ffb04 	addi	r4,r3,-20
    8154:	10c00c0e 	bge	r2,r3,8188 <__ulp+0x68>
    8158:	008007c4 	movi	r2,31
    815c:	1107c83a 	sub	r3,r2,r4
    8160:	00800784 	movi	r2,30
    8164:	01400044 	movi	r5,1
    8168:	11000216 	blt	r2,r4,8174 <__ulp+0x54>
    816c:	00800044 	movi	r2,1
    8170:	10ca983a 	sll	r5,r2,r3
    8174:	000f883a 	mov	r7,zero
    8178:	280d883a 	mov	r6,r5
    817c:	3807883a 	mov	r3,r7
    8180:	3005883a 	mov	r2,r6
    8184:	f800283a 	ret
    8188:	00800234 	movhi	r2,8
    818c:	10cfd83a 	sra	r7,r2,r3
    8190:	000d883a 	mov	r6,zero
    8194:	3005883a 	mov	r2,r6
    8198:	3807883a 	mov	r3,r7
    819c:	f800283a 	ret

000081a0 <__b2d>:
    81a0:	20800417 	ldw	r2,16(r4)
    81a4:	defff904 	addi	sp,sp,-28
    81a8:	dd000415 	stw	r20,16(sp)
    81ac:	1085883a 	add	r2,r2,r2
    81b0:	25000504 	addi	r20,r4,20
    81b4:	1085883a 	add	r2,r2,r2
    81b8:	dc000015 	stw	r16,0(sp)
    81bc:	a0a1883a 	add	r16,r20,r2
    81c0:	dd400515 	stw	r21,20(sp)
    81c4:	857fff17 	ldw	r21,-4(r16)
    81c8:	dc400115 	stw	r17,4(sp)
    81cc:	dfc00615 	stw	ra,24(sp)
    81d0:	a809883a 	mov	r4,r21
    81d4:	2823883a 	mov	r17,r5
    81d8:	dcc00315 	stw	r19,12(sp)
    81dc:	dc800215 	stw	r18,8(sp)
    81e0:	0007f8c0 	call	7f8c <__hi0bits>
    81e4:	100b883a 	mov	r5,r2
    81e8:	00800804 	movi	r2,32
    81ec:	1145c83a 	sub	r2,r2,r5
    81f0:	88800015 	stw	r2,0(r17)
    81f4:	00800284 	movi	r2,10
    81f8:	80ffff04 	addi	r3,r16,-4
    81fc:	11401416 	blt	r2,r5,8250 <__b2d+0xb0>
    8200:	008002c4 	movi	r2,11
    8204:	1149c83a 	sub	r4,r2,r5
    8208:	a0c02736 	bltu	r20,r3,82a8 <__b2d+0x108>
    820c:	000d883a 	mov	r6,zero
    8210:	28800544 	addi	r2,r5,21
    8214:	a906d83a 	srl	r3,r21,r4
    8218:	a884983a 	sll	r2,r21,r2
    821c:	1ccffc34 	orhi	r19,r3,16368
    8220:	11a4b03a 	or	r18,r2,r6
    8224:	9005883a 	mov	r2,r18
    8228:	9807883a 	mov	r3,r19
    822c:	dfc00617 	ldw	ra,24(sp)
    8230:	dd400517 	ldw	r21,20(sp)
    8234:	dd000417 	ldw	r20,16(sp)
    8238:	dcc00317 	ldw	r19,12(sp)
    823c:	dc800217 	ldw	r18,8(sp)
    8240:	dc400117 	ldw	r17,4(sp)
    8244:	dc000017 	ldw	r16,0(sp)
    8248:	dec00704 	addi	sp,sp,28
    824c:	f800283a 	ret
    8250:	a0c00e36 	bltu	r20,r3,828c <__b2d+0xec>
    8254:	293ffd44 	addi	r4,r5,-11
    8258:	000d883a 	mov	r6,zero
    825c:	20000f26 	beq	r4,zero,829c <__b2d+0xfc>
    8260:	00800804 	movi	r2,32
    8264:	110bc83a 	sub	r5,r2,r4
    8268:	a0c01236 	bltu	r20,r3,82b4 <__b2d+0x114>
    826c:	000f883a 	mov	r7,zero
    8270:	a904983a 	sll	r2,r21,r4
    8274:	3146d83a 	srl	r3,r6,r5
    8278:	3108983a 	sll	r4,r6,r4
    827c:	108ffc34 	orhi	r2,r2,16368
    8280:	18a6b03a 	or	r19,r3,r2
    8284:	3924b03a 	or	r18,r7,r4
    8288:	003fe606 	br	8224 <__b2d+0x84>
    828c:	293ffd44 	addi	r4,r5,-11
    8290:	81bffe17 	ldw	r6,-8(r16)
    8294:	80fffe04 	addi	r3,r16,-8
    8298:	203ff11e 	bne	r4,zero,8260 <__b2d+0xc0>
    829c:	accffc34 	orhi	r19,r21,16368
    82a0:	3025883a 	mov	r18,r6
    82a4:	003fdf06 	br	8224 <__b2d+0x84>
    82a8:	18bfff17 	ldw	r2,-4(r3)
    82ac:	110cd83a 	srl	r6,r2,r4
    82b0:	003fd706 	br	8210 <__b2d+0x70>
    82b4:	18bfff17 	ldw	r2,-4(r3)
    82b8:	114ed83a 	srl	r7,r2,r5
    82bc:	003fec06 	br	8270 <__b2d+0xd0>

000082c0 <__ratio>:
    82c0:	defff904 	addi	sp,sp,-28
    82c4:	dc400215 	stw	r17,8(sp)
    82c8:	2823883a 	mov	r17,r5
    82cc:	d80b883a 	mov	r5,sp
    82d0:	dfc00615 	stw	ra,24(sp)
    82d4:	dd000515 	stw	r20,20(sp)
    82d8:	dcc00415 	stw	r19,16(sp)
    82dc:	dc800315 	stw	r18,12(sp)
    82e0:	2025883a 	mov	r18,r4
    82e4:	00081a00 	call	81a0 <__b2d>
    82e8:	8809883a 	mov	r4,r17
    82ec:	d9400104 	addi	r5,sp,4
    82f0:	1027883a 	mov	r19,r2
    82f4:	1829883a 	mov	r20,r3
    82f8:	00081a00 	call	81a0 <__b2d>
    82fc:	89000417 	ldw	r4,16(r17)
    8300:	91c00417 	ldw	r7,16(r18)
    8304:	d9800117 	ldw	r6,4(sp)
    8308:	180b883a 	mov	r5,r3
    830c:	390fc83a 	sub	r7,r7,r4
    8310:	1009883a 	mov	r4,r2
    8314:	d8800017 	ldw	r2,0(sp)
    8318:	380e917a 	slli	r7,r7,5
    831c:	2011883a 	mov	r8,r4
    8320:	1185c83a 	sub	r2,r2,r6
    8324:	11c5883a 	add	r2,r2,r7
    8328:	1006953a 	slli	r3,r2,20
    832c:	2813883a 	mov	r9,r5
    8330:	00800d0e 	bge	zero,r2,8368 <__ratio+0xa8>
    8334:	1d29883a 	add	r20,r3,r20
    8338:	a00b883a 	mov	r5,r20
    833c:	480f883a 	mov	r7,r9
    8340:	9809883a 	mov	r4,r19
    8344:	400d883a 	mov	r6,r8
    8348:	000b1900 	call	b190 <__divdf3>
    834c:	dfc00617 	ldw	ra,24(sp)
    8350:	dd000517 	ldw	r20,20(sp)
    8354:	dcc00417 	ldw	r19,16(sp)
    8358:	dc800317 	ldw	r18,12(sp)
    835c:	dc400217 	ldw	r17,8(sp)
    8360:	dec00704 	addi	sp,sp,28
    8364:	f800283a 	ret
    8368:	28d3c83a 	sub	r9,r5,r3
    836c:	003ff206 	br	8338 <__ratio+0x78>

00008370 <_mprec_log10>:
    8370:	defffe04 	addi	sp,sp,-8
    8374:	008005c4 	movi	r2,23
    8378:	dc000015 	stw	r16,0(sp)
    837c:	dfc00115 	stw	ra,4(sp)
    8380:	2021883a 	mov	r16,r4
    8384:	11000c16 	blt	r2,r4,83b8 <_mprec_log10+0x48>
    8388:	200490fa 	slli	r2,r4,3
    838c:	00c00074 	movhi	r3,1
    8390:	18c8b604 	addi	r3,r3,8920
    8394:	10c5883a 	add	r2,r2,r3
    8398:	12400117 	ldw	r9,4(r2)
    839c:	12000017 	ldw	r8,0(r2)
    83a0:	4807883a 	mov	r3,r9
    83a4:	4005883a 	mov	r2,r8
    83a8:	dfc00117 	ldw	ra,4(sp)
    83ac:	dc000017 	ldw	r16,0(sp)
    83b0:	dec00204 	addi	sp,sp,8
    83b4:	f800283a 	ret
    83b8:	0011883a 	mov	r8,zero
    83bc:	024ffc34 	movhi	r9,16368
    83c0:	0005883a 	mov	r2,zero
    83c4:	00d00934 	movhi	r3,16420
    83c8:	480b883a 	mov	r5,r9
    83cc:	4009883a 	mov	r4,r8
    83d0:	180f883a 	mov	r7,r3
    83d4:	100d883a 	mov	r6,r2
    83d8:	000adcc0 	call	adcc <__muldf3>
    83dc:	843fffc4 	addi	r16,r16,-1
    83e0:	1011883a 	mov	r8,r2
    83e4:	1813883a 	mov	r9,r3
    83e8:	803ff51e 	bne	r16,zero,83c0 <_mprec_log10+0x50>
    83ec:	4005883a 	mov	r2,r8
    83f0:	4807883a 	mov	r3,r9
    83f4:	dfc00117 	ldw	ra,4(sp)
    83f8:	dc000017 	ldw	r16,0(sp)
    83fc:	dec00204 	addi	sp,sp,8
    8400:	f800283a 	ret

00008404 <__copybits>:
    8404:	297fffc4 	addi	r5,r5,-1
    8408:	30800417 	ldw	r2,16(r6)
    840c:	280bd17a 	srai	r5,r5,5
    8410:	31800504 	addi	r6,r6,20
    8414:	1085883a 	add	r2,r2,r2
    8418:	294b883a 	add	r5,r5,r5
    841c:	294b883a 	add	r5,r5,r5
    8420:	1085883a 	add	r2,r2,r2
    8424:	290b883a 	add	r5,r5,r4
    8428:	3087883a 	add	r3,r6,r2
    842c:	29400104 	addi	r5,r5,4
    8430:	30c0052e 	bgeu	r6,r3,8448 <__copybits+0x44>
    8434:	30800017 	ldw	r2,0(r6)
    8438:	31800104 	addi	r6,r6,4
    843c:	20800015 	stw	r2,0(r4)
    8440:	21000104 	addi	r4,r4,4
    8444:	30fffb36 	bltu	r6,r3,8434 <__copybits+0x30>
    8448:	2140032e 	bgeu	r4,r5,8458 <__copybits+0x54>
    844c:	20000015 	stw	zero,0(r4)
    8450:	21000104 	addi	r4,r4,4
    8454:	217ffd36 	bltu	r4,r5,844c <__copybits+0x48>
    8458:	f800283a 	ret

0000845c <__any_on>:
    845c:	20800417 	ldw	r2,16(r4)
    8460:	2807d17a 	srai	r3,r5,5
    8464:	21000504 	addi	r4,r4,20
    8468:	10c00d0e 	bge	r2,r3,84a0 <__any_on+0x44>
    846c:	1085883a 	add	r2,r2,r2
    8470:	1085883a 	add	r2,r2,r2
    8474:	208d883a 	add	r6,r4,r2
    8478:	2180182e 	bgeu	r4,r6,84dc <__any_on+0x80>
    847c:	30bfff17 	ldw	r2,-4(r6)
    8480:	30ffff04 	addi	r3,r6,-4
    8484:	1000041e 	bne	r2,zero,8498 <__any_on+0x3c>
    8488:	20c0142e 	bgeu	r4,r3,84dc <__any_on+0x80>
    848c:	18ffff04 	addi	r3,r3,-4
    8490:	18800017 	ldw	r2,0(r3)
    8494:	103ffc26 	beq	r2,zero,8488 <__any_on+0x2c>
    8498:	00800044 	movi	r2,1
    849c:	f800283a 	ret
    84a0:	18800a0e 	bge	r3,r2,84cc <__any_on+0x70>
    84a4:	294007cc 	andi	r5,r5,31
    84a8:	28000826 	beq	r5,zero,84cc <__any_on+0x70>
    84ac:	18c5883a 	add	r2,r3,r3
    84b0:	1085883a 	add	r2,r2,r2
    84b4:	208d883a 	add	r6,r4,r2
    84b8:	30c00017 	ldw	r3,0(r6)
    84bc:	1944d83a 	srl	r2,r3,r5
    84c0:	1144983a 	sll	r2,r2,r5
    84c4:	18bff41e 	bne	r3,r2,8498 <__any_on+0x3c>
    84c8:	003feb06 	br	8478 <__any_on+0x1c>
    84cc:	18c5883a 	add	r2,r3,r3
    84d0:	1085883a 	add	r2,r2,r2
    84d4:	208d883a 	add	r6,r4,r2
    84d8:	003fe706 	br	8478 <__any_on+0x1c>
    84dc:	0005883a 	mov	r2,zero
    84e0:	f800283a 	ret

000084e4 <_Balloc>:
    84e4:	20c01317 	ldw	r3,76(r4)
    84e8:	defffb04 	addi	sp,sp,-20
    84ec:	dcc00315 	stw	r19,12(sp)
    84f0:	dc800215 	stw	r18,8(sp)
    84f4:	dfc00415 	stw	ra,16(sp)
    84f8:	2825883a 	mov	r18,r5
    84fc:	dc400115 	stw	r17,4(sp)
    8500:	dc000015 	stw	r16,0(sp)
    8504:	2027883a 	mov	r19,r4
    8508:	01800404 	movi	r6,16
    850c:	01400104 	movi	r5,4
    8510:	18001726 	beq	r3,zero,8570 <_Balloc+0x8c>
    8514:	01400044 	movi	r5,1
    8518:	9485883a 	add	r2,r18,r18
    851c:	2ca2983a 	sll	r17,r5,r18
    8520:	1085883a 	add	r2,r2,r2
    8524:	10c7883a 	add	r3,r2,r3
    8528:	1c000017 	ldw	r16,0(r3)
    852c:	8c4d883a 	add	r6,r17,r17
    8530:	318d883a 	add	r6,r6,r6
    8534:	9809883a 	mov	r4,r19
    8538:	31800504 	addi	r6,r6,20
    853c:	80001226 	beq	r16,zero,8588 <_Balloc+0xa4>
    8540:	80800017 	ldw	r2,0(r16)
    8544:	18800015 	stw	r2,0(r3)
    8548:	80000415 	stw	zero,16(r16)
    854c:	80000315 	stw	zero,12(r16)
    8550:	8005883a 	mov	r2,r16
    8554:	dfc00417 	ldw	ra,16(sp)
    8558:	dcc00317 	ldw	r19,12(sp)
    855c:	dc800217 	ldw	r18,8(sp)
    8560:	dc400117 	ldw	r17,4(sp)
    8564:	dc000017 	ldw	r16,0(sp)
    8568:	dec00504 	addi	sp,sp,20
    856c:	f800283a 	ret
    8570:	00099200 	call	9920 <_calloc_r>
    8574:	1007883a 	mov	r3,r2
    8578:	0021883a 	mov	r16,zero
    857c:	98801315 	stw	r2,76(r19)
    8580:	103fe41e 	bne	r2,zero,8514 <_Balloc+0x30>
    8584:	003ff206 	br	8550 <_Balloc+0x6c>
    8588:	00099200 	call	9920 <_calloc_r>
    858c:	103ff026 	beq	r2,zero,8550 <_Balloc+0x6c>
    8590:	1021883a 	mov	r16,r2
    8594:	14800115 	stw	r18,4(r2)
    8598:	14400215 	stw	r17,8(r2)
    859c:	003fea06 	br	8548 <_Balloc+0x64>

000085a0 <__d2b>:
    85a0:	defff504 	addi	sp,sp,-44
    85a4:	dcc00515 	stw	r19,20(sp)
    85a8:	04c00044 	movi	r19,1
    85ac:	dc000215 	stw	r16,8(sp)
    85b0:	2821883a 	mov	r16,r5
    85b4:	980b883a 	mov	r5,r19
    85b8:	ddc00915 	stw	r23,36(sp)
    85bc:	dd800815 	stw	r22,32(sp)
    85c0:	dd400715 	stw	r21,28(sp)
    85c4:	dd000615 	stw	r20,24(sp)
    85c8:	dc800415 	stw	r18,16(sp)
    85cc:	dc400315 	stw	r17,12(sp)
    85d0:	dfc00a15 	stw	ra,40(sp)
    85d4:	3023883a 	mov	r17,r6
    85d8:	382d883a 	mov	r22,r7
    85dc:	ddc00b17 	ldw	r23,44(sp)
    85e0:	00084e40 	call	84e4 <_Balloc>
    85e4:	1025883a 	mov	r18,r2
    85e8:	00a00034 	movhi	r2,32768
    85ec:	10bfffc4 	addi	r2,r2,-1
    85f0:	8888703a 	and	r4,r17,r2
    85f4:	202ad53a 	srli	r21,r4,20
    85f8:	00800434 	movhi	r2,16
    85fc:	10bfffc4 	addi	r2,r2,-1
    8600:	8886703a 	and	r3,r17,r2
    8604:	a829003a 	cmpeq	r20,r21,zero
    8608:	800b883a 	mov	r5,r16
    860c:	d8c00115 	stw	r3,4(sp)
    8610:	94000504 	addi	r16,r18,20
    8614:	a000021e 	bne	r20,zero,8620 <__d2b+0x80>
    8618:	18c00434 	orhi	r3,r3,16
    861c:	d8c00115 	stw	r3,4(sp)
    8620:	28002726 	beq	r5,zero,86c0 <__d2b+0x120>
    8624:	d809883a 	mov	r4,sp
    8628:	d9400015 	stw	r5,0(sp)
    862c:	0007ffc0 	call	7ffc <__lo0bits>
    8630:	100d883a 	mov	r6,r2
    8634:	10003526 	beq	r2,zero,870c <__d2b+0x16c>
    8638:	d8c00117 	ldw	r3,4(sp)
    863c:	00800804 	movi	r2,32
    8640:	1185c83a 	sub	r2,r2,r6
    8644:	d9000017 	ldw	r4,0(sp)
    8648:	1886983a 	sll	r3,r3,r2
    864c:	1906b03a 	or	r3,r3,r4
    8650:	90c00515 	stw	r3,20(r18)
    8654:	d8c00117 	ldw	r3,4(sp)
    8658:	1986d83a 	srl	r3,r3,r6
    865c:	d8c00115 	stw	r3,4(sp)
    8660:	180b003a 	cmpeq	r5,r3,zero
    8664:	00800084 	movi	r2,2
    8668:	114bc83a 	sub	r5,r2,r5
    866c:	80c00115 	stw	r3,4(r16)
    8670:	91400415 	stw	r5,16(r18)
    8674:	a0001a1e 	bne	r20,zero,86e0 <__d2b+0x140>
    8678:	3545883a 	add	r2,r6,r21
    867c:	10bef344 	addi	r2,r2,-1075
    8680:	00c00d44 	movi	r3,53
    8684:	b0800015 	stw	r2,0(r22)
    8688:	1987c83a 	sub	r3,r3,r6
    868c:	b8c00015 	stw	r3,0(r23)
    8690:	9005883a 	mov	r2,r18
    8694:	dfc00a17 	ldw	ra,40(sp)
    8698:	ddc00917 	ldw	r23,36(sp)
    869c:	dd800817 	ldw	r22,32(sp)
    86a0:	dd400717 	ldw	r21,28(sp)
    86a4:	dd000617 	ldw	r20,24(sp)
    86a8:	dcc00517 	ldw	r19,20(sp)
    86ac:	dc800417 	ldw	r18,16(sp)
    86b0:	dc400317 	ldw	r17,12(sp)
    86b4:	dc000217 	ldw	r16,8(sp)
    86b8:	dec00b04 	addi	sp,sp,44
    86bc:	f800283a 	ret
    86c0:	d9000104 	addi	r4,sp,4
    86c4:	0007ffc0 	call	7ffc <__lo0bits>
    86c8:	11800804 	addi	r6,r2,32
    86cc:	d8800117 	ldw	r2,4(sp)
    86d0:	94c00415 	stw	r19,16(r18)
    86d4:	980b883a 	mov	r5,r19
    86d8:	90800515 	stw	r2,20(r18)
    86dc:	a03fe626 	beq	r20,zero,8678 <__d2b+0xd8>
    86e0:	2945883a 	add	r2,r5,r5
    86e4:	1085883a 	add	r2,r2,r2
    86e8:	1405883a 	add	r2,r2,r16
    86ec:	113fff17 	ldw	r4,-4(r2)
    86f0:	30fef384 	addi	r3,r6,-1074
    86f4:	2820917a 	slli	r16,r5,5
    86f8:	b0c00015 	stw	r3,0(r22)
    86fc:	0007f8c0 	call	7f8c <__hi0bits>
    8700:	80a1c83a 	sub	r16,r16,r2
    8704:	bc000015 	stw	r16,0(r23)
    8708:	003fe106 	br	8690 <__d2b+0xf0>
    870c:	d8800017 	ldw	r2,0(sp)
    8710:	90800515 	stw	r2,20(r18)
    8714:	d8c00117 	ldw	r3,4(sp)
    8718:	003fd106 	br	8660 <__d2b+0xc0>

0000871c <__mdiff>:
    871c:	defffb04 	addi	sp,sp,-20
    8720:	dc000015 	stw	r16,0(sp)
    8724:	2821883a 	mov	r16,r5
    8728:	dc800215 	stw	r18,8(sp)
    872c:	300b883a 	mov	r5,r6
    8730:	2025883a 	mov	r18,r4
    8734:	8009883a 	mov	r4,r16
    8738:	dc400115 	stw	r17,4(sp)
    873c:	dfc00415 	stw	ra,16(sp)
    8740:	dcc00315 	stw	r19,12(sp)
    8744:	3023883a 	mov	r17,r6
    8748:	00080c00 	call	80c0 <__mcmp>
    874c:	10004226 	beq	r2,zero,8858 <__mdiff+0x13c>
    8750:	10005016 	blt	r2,zero,8894 <__mdiff+0x178>
    8754:	0027883a 	mov	r19,zero
    8758:	81400117 	ldw	r5,4(r16)
    875c:	9009883a 	mov	r4,r18
    8760:	00084e40 	call	84e4 <_Balloc>
    8764:	1019883a 	mov	r12,r2
    8768:	82800417 	ldw	r10,16(r16)
    876c:	88800417 	ldw	r2,16(r17)
    8770:	81800504 	addi	r6,r16,20
    8774:	5287883a 	add	r3,r10,r10
    8778:	1085883a 	add	r2,r2,r2
    877c:	18c7883a 	add	r3,r3,r3
    8780:	1085883a 	add	r2,r2,r2
    8784:	8a000504 	addi	r8,r17,20
    8788:	64c00315 	stw	r19,12(r12)
    878c:	30db883a 	add	r13,r6,r3
    8790:	4097883a 	add	r11,r8,r2
    8794:	61c00504 	addi	r7,r12,20
    8798:	0013883a 	mov	r9,zero
    879c:	31000017 	ldw	r4,0(r6)
    87a0:	41400017 	ldw	r5,0(r8)
    87a4:	42000104 	addi	r8,r8,4
    87a8:	20bfffcc 	andi	r2,r4,65535
    87ac:	28ffffcc 	andi	r3,r5,65535
    87b0:	10c5c83a 	sub	r2,r2,r3
    87b4:	1245883a 	add	r2,r2,r9
    87b8:	2008d43a 	srli	r4,r4,16
    87bc:	280ad43a 	srli	r5,r5,16
    87c0:	1007d43a 	srai	r3,r2,16
    87c4:	3880000d 	sth	r2,0(r7)
    87c8:	2149c83a 	sub	r4,r4,r5
    87cc:	20c9883a 	add	r4,r4,r3
    87d0:	3900008d 	sth	r4,2(r7)
    87d4:	31800104 	addi	r6,r6,4
    87d8:	39c00104 	addi	r7,r7,4
    87dc:	2013d43a 	srai	r9,r4,16
    87e0:	42ffee36 	bltu	r8,r11,879c <__mdiff+0x80>
    87e4:	33400c2e 	bgeu	r6,r13,8818 <__mdiff+0xfc>
    87e8:	30800017 	ldw	r2,0(r6)
    87ec:	31800104 	addi	r6,r6,4
    87f0:	10ffffcc 	andi	r3,r2,65535
    87f4:	1a47883a 	add	r3,r3,r9
    87f8:	1004d43a 	srli	r2,r2,16
    87fc:	1809d43a 	srai	r4,r3,16
    8800:	38c0000d 	sth	r3,0(r7)
    8804:	1105883a 	add	r2,r2,r4
    8808:	3880008d 	sth	r2,2(r7)
    880c:	1013d43a 	srai	r9,r2,16
    8810:	39c00104 	addi	r7,r7,4
    8814:	337ff436 	bltu	r6,r13,87e8 <__mdiff+0xcc>
    8818:	38bfff17 	ldw	r2,-4(r7)
    881c:	38ffff04 	addi	r3,r7,-4
    8820:	1000041e 	bne	r2,zero,8834 <__mdiff+0x118>
    8824:	18ffff04 	addi	r3,r3,-4
    8828:	18800017 	ldw	r2,0(r3)
    882c:	52bfffc4 	addi	r10,r10,-1
    8830:	103ffc26 	beq	r2,zero,8824 <__mdiff+0x108>
    8834:	6005883a 	mov	r2,r12
    8838:	62800415 	stw	r10,16(r12)
    883c:	dfc00417 	ldw	ra,16(sp)
    8840:	dcc00317 	ldw	r19,12(sp)
    8844:	dc800217 	ldw	r18,8(sp)
    8848:	dc400117 	ldw	r17,4(sp)
    884c:	dc000017 	ldw	r16,0(sp)
    8850:	dec00504 	addi	sp,sp,20
    8854:	f800283a 	ret
    8858:	9009883a 	mov	r4,r18
    885c:	000b883a 	mov	r5,zero
    8860:	00084e40 	call	84e4 <_Balloc>
    8864:	1019883a 	mov	r12,r2
    8868:	00800044 	movi	r2,1
    886c:	60800415 	stw	r2,16(r12)
    8870:	6005883a 	mov	r2,r12
    8874:	60000515 	stw	zero,20(r12)
    8878:	dfc00417 	ldw	ra,16(sp)
    887c:	dcc00317 	ldw	r19,12(sp)
    8880:	dc800217 	ldw	r18,8(sp)
    8884:	dc400117 	ldw	r17,4(sp)
    8888:	dc000017 	ldw	r16,0(sp)
    888c:	dec00504 	addi	sp,sp,20
    8890:	f800283a 	ret
    8894:	880d883a 	mov	r6,r17
    8898:	04c00044 	movi	r19,1
    889c:	8023883a 	mov	r17,r16
    88a0:	3021883a 	mov	r16,r6
    88a4:	003fac06 	br	8758 <__mdiff+0x3c>

000088a8 <__lshift>:
    88a8:	defff904 	addi	sp,sp,-28
    88ac:	28800417 	ldw	r2,16(r5)
    88b0:	dc000015 	stw	r16,0(sp)
    88b4:	3021d17a 	srai	r16,r6,5
    88b8:	28c00217 	ldw	r3,8(r5)
    88bc:	10800044 	addi	r2,r2,1
    88c0:	dc400115 	stw	r17,4(sp)
    88c4:	80a3883a 	add	r17,r16,r2
    88c8:	dd400515 	stw	r21,20(sp)
    88cc:	dd000415 	stw	r20,16(sp)
    88d0:	dc800215 	stw	r18,8(sp)
    88d4:	dfc00615 	stw	ra,24(sp)
    88d8:	2825883a 	mov	r18,r5
    88dc:	dcc00315 	stw	r19,12(sp)
    88e0:	3029883a 	mov	r20,r6
    88e4:	202b883a 	mov	r21,r4
    88e8:	29400117 	ldw	r5,4(r5)
    88ec:	1c40030e 	bge	r3,r17,88fc <__lshift+0x54>
    88f0:	18c7883a 	add	r3,r3,r3
    88f4:	29400044 	addi	r5,r5,1
    88f8:	1c7ffd16 	blt	r3,r17,88f0 <__lshift+0x48>
    88fc:	a809883a 	mov	r4,r21
    8900:	00084e40 	call	84e4 <_Balloc>
    8904:	1027883a 	mov	r19,r2
    8908:	11400504 	addi	r5,r2,20
    890c:	0400090e 	bge	zero,r16,8934 <__lshift+0x8c>
    8910:	2805883a 	mov	r2,r5
    8914:	0007883a 	mov	r3,zero
    8918:	18c00044 	addi	r3,r3,1
    891c:	10000015 	stw	zero,0(r2)
    8920:	10800104 	addi	r2,r2,4
    8924:	80fffc1e 	bne	r16,r3,8918 <__lshift+0x70>
    8928:	8405883a 	add	r2,r16,r16
    892c:	1085883a 	add	r2,r2,r2
    8930:	288b883a 	add	r5,r5,r2
    8934:	90800417 	ldw	r2,16(r18)
    8938:	91000504 	addi	r4,r18,20
    893c:	a18007cc 	andi	r6,r20,31
    8940:	1085883a 	add	r2,r2,r2
    8944:	1085883a 	add	r2,r2,r2
    8948:	208f883a 	add	r7,r4,r2
    894c:	30001e26 	beq	r6,zero,89c8 <__lshift+0x120>
    8950:	00800804 	movi	r2,32
    8954:	1191c83a 	sub	r8,r2,r6
    8958:	0007883a 	mov	r3,zero
    895c:	20800017 	ldw	r2,0(r4)
    8960:	1184983a 	sll	r2,r2,r6
    8964:	1884b03a 	or	r2,r3,r2
    8968:	28800015 	stw	r2,0(r5)
    896c:	20c00017 	ldw	r3,0(r4)
    8970:	21000104 	addi	r4,r4,4
    8974:	29400104 	addi	r5,r5,4
    8978:	1a06d83a 	srl	r3,r3,r8
    897c:	21fff736 	bltu	r4,r7,895c <__lshift+0xb4>
    8980:	28c00015 	stw	r3,0(r5)
    8984:	18000126 	beq	r3,zero,898c <__lshift+0xe4>
    8988:	8c400044 	addi	r17,r17,1
    898c:	88bfffc4 	addi	r2,r17,-1
    8990:	98800415 	stw	r2,16(r19)
    8994:	a809883a 	mov	r4,r21
    8998:	900b883a 	mov	r5,r18
    899c:	0007f640 	call	7f64 <_Bfree>
    89a0:	9805883a 	mov	r2,r19
    89a4:	dfc00617 	ldw	ra,24(sp)
    89a8:	dd400517 	ldw	r21,20(sp)
    89ac:	dd000417 	ldw	r20,16(sp)
    89b0:	dcc00317 	ldw	r19,12(sp)
    89b4:	dc800217 	ldw	r18,8(sp)
    89b8:	dc400117 	ldw	r17,4(sp)
    89bc:	dc000017 	ldw	r16,0(sp)
    89c0:	dec00704 	addi	sp,sp,28
    89c4:	f800283a 	ret
    89c8:	20800017 	ldw	r2,0(r4)
    89cc:	21000104 	addi	r4,r4,4
    89d0:	28800015 	stw	r2,0(r5)
    89d4:	29400104 	addi	r5,r5,4
    89d8:	21ffec2e 	bgeu	r4,r7,898c <__lshift+0xe4>
    89dc:	20800017 	ldw	r2,0(r4)
    89e0:	21000104 	addi	r4,r4,4
    89e4:	28800015 	stw	r2,0(r5)
    89e8:	29400104 	addi	r5,r5,4
    89ec:	21fff636 	bltu	r4,r7,89c8 <__lshift+0x120>
    89f0:	003fe606 	br	898c <__lshift+0xe4>

000089f4 <__multiply>:
    89f4:	defff904 	addi	sp,sp,-28
    89f8:	dcc00315 	stw	r19,12(sp)
    89fc:	dc800215 	stw	r18,8(sp)
    8a00:	2cc00417 	ldw	r19,16(r5)
    8a04:	34800417 	ldw	r18,16(r6)
    8a08:	dd000415 	stw	r20,16(sp)
    8a0c:	dc400115 	stw	r17,4(sp)
    8a10:	dfc00615 	stw	ra,24(sp)
    8a14:	dd400515 	stw	r21,20(sp)
    8a18:	dc000015 	stw	r16,0(sp)
    8a1c:	2823883a 	mov	r17,r5
    8a20:	3029883a 	mov	r20,r6
    8a24:	9c80040e 	bge	r19,r18,8a38 <__multiply+0x44>
    8a28:	9027883a 	mov	r19,r18
    8a2c:	2c800417 	ldw	r18,16(r5)
    8a30:	2829883a 	mov	r20,r5
    8a34:	3023883a 	mov	r17,r6
    8a38:	88800217 	ldw	r2,8(r17)
    8a3c:	9ca1883a 	add	r16,r19,r18
    8a40:	89400117 	ldw	r5,4(r17)
    8a44:	1400010e 	bge	r2,r16,8a4c <__multiply+0x58>
    8a48:	29400044 	addi	r5,r5,1
    8a4c:	00084e40 	call	84e4 <_Balloc>
    8a50:	102b883a 	mov	r21,r2
    8a54:	8405883a 	add	r2,r16,r16
    8a58:	1085883a 	add	r2,r2,r2
    8a5c:	a9000504 	addi	r4,r21,20
    8a60:	209d883a 	add	r14,r4,r2
    8a64:	2380042e 	bgeu	r4,r14,8a78 <__multiply+0x84>
    8a68:	2005883a 	mov	r2,r4
    8a6c:	10000015 	stw	zero,0(r2)
    8a70:	10800104 	addi	r2,r2,4
    8a74:	13bffd36 	bltu	r2,r14,8a6c <__multiply+0x78>
    8a78:	9485883a 	add	r2,r18,r18
    8a7c:	9cc7883a 	add	r3,r19,r19
    8a80:	a1800504 	addi	r6,r20,20
    8a84:	1085883a 	add	r2,r2,r2
    8a88:	8b400504 	addi	r13,r17,20
    8a8c:	18c7883a 	add	r3,r3,r3
    8a90:	309f883a 	add	r15,r6,r2
    8a94:	68d7883a 	add	r11,r13,r3
    8a98:	33c03b2e 	bgeu	r6,r15,8b88 <__multiply+0x194>
    8a9c:	2019883a 	mov	r12,r4
    8aa0:	30800017 	ldw	r2,0(r6)
    8aa4:	127fffcc 	andi	r9,r2,65535
    8aa8:	48001826 	beq	r9,zero,8b0c <__multiply+0x118>
    8aac:	6811883a 	mov	r8,r13
    8ab0:	600f883a 	mov	r7,r12
    8ab4:	0015883a 	mov	r10,zero
    8ab8:	40c00017 	ldw	r3,0(r8)
    8abc:	39400017 	ldw	r5,0(r7)
    8ac0:	42000104 	addi	r8,r8,4
    8ac4:	193fffcc 	andi	r4,r3,65535
    8ac8:	4909383a 	mul	r4,r9,r4
    8acc:	1806d43a 	srli	r3,r3,16
    8ad0:	28bfffcc 	andi	r2,r5,65535
    8ad4:	5085883a 	add	r2,r10,r2
    8ad8:	2089883a 	add	r4,r4,r2
    8adc:	48c7383a 	mul	r3,r9,r3
    8ae0:	280ad43a 	srli	r5,r5,16
    8ae4:	2004d43a 	srli	r2,r4,16
    8ae8:	3900000d 	sth	r4,0(r7)
    8aec:	1947883a 	add	r3,r3,r5
    8af0:	10c5883a 	add	r2,r2,r3
    8af4:	3880008d 	sth	r2,2(r7)
    8af8:	1014d43a 	srli	r10,r2,16
    8afc:	39c00104 	addi	r7,r7,4
    8b00:	42ffed36 	bltu	r8,r11,8ab8 <__multiply+0xc4>
    8b04:	3a800015 	stw	r10,0(r7)
    8b08:	30800017 	ldw	r2,0(r6)
    8b0c:	1012d43a 	srli	r9,r2,16
    8b10:	48001926 	beq	r9,zero,8b78 <__multiply+0x184>
    8b14:	60800017 	ldw	r2,0(r12)
    8b18:	6811883a 	mov	r8,r13
    8b1c:	600f883a 	mov	r7,r12
    8b20:	0015883a 	mov	r10,zero
    8b24:	100b883a 	mov	r5,r2
    8b28:	41000017 	ldw	r4,0(r8)
    8b2c:	2806d43a 	srli	r3,r5,16
    8b30:	3880000d 	sth	r2,0(r7)
    8b34:	20bfffcc 	andi	r2,r4,65535
    8b38:	4885383a 	mul	r2,r9,r2
    8b3c:	50c7883a 	add	r3,r10,r3
    8b40:	2008d43a 	srli	r4,r4,16
    8b44:	10c5883a 	add	r2,r2,r3
    8b48:	3880008d 	sth	r2,2(r7)
    8b4c:	39c00104 	addi	r7,r7,4
    8b50:	39400017 	ldw	r5,0(r7)
    8b54:	4909383a 	mul	r4,r9,r4
    8b58:	1004d43a 	srli	r2,r2,16
    8b5c:	28ffffcc 	andi	r3,r5,65535
    8b60:	20c9883a 	add	r4,r4,r3
    8b64:	1105883a 	add	r2,r2,r4
    8b68:	42000104 	addi	r8,r8,4
    8b6c:	1014d43a 	srli	r10,r2,16
    8b70:	42ffed36 	bltu	r8,r11,8b28 <__multiply+0x134>
    8b74:	38800015 	stw	r2,0(r7)
    8b78:	31800104 	addi	r6,r6,4
    8b7c:	33c0022e 	bgeu	r6,r15,8b88 <__multiply+0x194>
    8b80:	63000104 	addi	r12,r12,4
    8b84:	003fc606 	br	8aa0 <__multiply+0xac>
    8b88:	0400090e 	bge	zero,r16,8bb0 <__multiply+0x1bc>
    8b8c:	70bfff17 	ldw	r2,-4(r14)
    8b90:	70ffff04 	addi	r3,r14,-4
    8b94:	10000326 	beq	r2,zero,8ba4 <__multiply+0x1b0>
    8b98:	00000506 	br	8bb0 <__multiply+0x1bc>
    8b9c:	18800017 	ldw	r2,0(r3)
    8ba0:	1000031e 	bne	r2,zero,8bb0 <__multiply+0x1bc>
    8ba4:	843fffc4 	addi	r16,r16,-1
    8ba8:	18ffff04 	addi	r3,r3,-4
    8bac:	803ffb1e 	bne	r16,zero,8b9c <__multiply+0x1a8>
    8bb0:	a805883a 	mov	r2,r21
    8bb4:	ac000415 	stw	r16,16(r21)
    8bb8:	dfc00617 	ldw	ra,24(sp)
    8bbc:	dd400517 	ldw	r21,20(sp)
    8bc0:	dd000417 	ldw	r20,16(sp)
    8bc4:	dcc00317 	ldw	r19,12(sp)
    8bc8:	dc800217 	ldw	r18,8(sp)
    8bcc:	dc400117 	ldw	r17,4(sp)
    8bd0:	dc000017 	ldw	r16,0(sp)
    8bd4:	dec00704 	addi	sp,sp,28
    8bd8:	f800283a 	ret

00008bdc <__i2b>:
    8bdc:	defffd04 	addi	sp,sp,-12
    8be0:	dc000015 	stw	r16,0(sp)
    8be4:	04000044 	movi	r16,1
    8be8:	dc800115 	stw	r18,4(sp)
    8bec:	2825883a 	mov	r18,r5
    8bf0:	800b883a 	mov	r5,r16
    8bf4:	dfc00215 	stw	ra,8(sp)
    8bf8:	00084e40 	call	84e4 <_Balloc>
    8bfc:	14000415 	stw	r16,16(r2)
    8c00:	14800515 	stw	r18,20(r2)
    8c04:	dfc00217 	ldw	ra,8(sp)
    8c08:	dc800117 	ldw	r18,4(sp)
    8c0c:	dc000017 	ldw	r16,0(sp)
    8c10:	dec00304 	addi	sp,sp,12
    8c14:	f800283a 	ret

00008c18 <__multadd>:
    8c18:	defffa04 	addi	sp,sp,-24
    8c1c:	dc800215 	stw	r18,8(sp)
    8c20:	2c800417 	ldw	r18,16(r5)
    8c24:	dd000415 	stw	r20,16(sp)
    8c28:	dcc00315 	stw	r19,12(sp)
    8c2c:	dc000015 	stw	r16,0(sp)
    8c30:	dfc00515 	stw	ra,20(sp)
    8c34:	3821883a 	mov	r16,r7
    8c38:	dc400115 	stw	r17,4(sp)
    8c3c:	2827883a 	mov	r19,r5
    8c40:	2029883a 	mov	r20,r4
    8c44:	2a000504 	addi	r8,r5,20
    8c48:	000f883a 	mov	r7,zero
    8c4c:	40800017 	ldw	r2,0(r8)
    8c50:	39c00044 	addi	r7,r7,1
    8c54:	10ffffcc 	andi	r3,r2,65535
    8c58:	1987383a 	mul	r3,r3,r6
    8c5c:	1004d43a 	srli	r2,r2,16
    8c60:	1c07883a 	add	r3,r3,r16
    8c64:	180ad43a 	srli	r5,r3,16
    8c68:	1185383a 	mul	r2,r2,r6
    8c6c:	18ffffcc 	andi	r3,r3,65535
    8c70:	1145883a 	add	r2,r2,r5
    8c74:	1008943a 	slli	r4,r2,16
    8c78:	1020d43a 	srli	r16,r2,16
    8c7c:	20c9883a 	add	r4,r4,r3
    8c80:	41000015 	stw	r4,0(r8)
    8c84:	42000104 	addi	r8,r8,4
    8c88:	3cbff016 	blt	r7,r18,8c4c <__multadd+0x34>
    8c8c:	80000826 	beq	r16,zero,8cb0 <__multadd+0x98>
    8c90:	98800217 	ldw	r2,8(r19)
    8c94:	90800f0e 	bge	r18,r2,8cd4 <__multadd+0xbc>
    8c98:	9485883a 	add	r2,r18,r18
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	14c5883a 	add	r2,r2,r19
    8ca4:	90c00044 	addi	r3,r18,1
    8ca8:	14000515 	stw	r16,20(r2)
    8cac:	98c00415 	stw	r3,16(r19)
    8cb0:	9805883a 	mov	r2,r19
    8cb4:	dfc00517 	ldw	ra,20(sp)
    8cb8:	dd000417 	ldw	r20,16(sp)
    8cbc:	dcc00317 	ldw	r19,12(sp)
    8cc0:	dc800217 	ldw	r18,8(sp)
    8cc4:	dc400117 	ldw	r17,4(sp)
    8cc8:	dc000017 	ldw	r16,0(sp)
    8ccc:	dec00604 	addi	sp,sp,24
    8cd0:	f800283a 	ret
    8cd4:	99400117 	ldw	r5,4(r19)
    8cd8:	a009883a 	mov	r4,r20
    8cdc:	29400044 	addi	r5,r5,1
    8ce0:	00084e40 	call	84e4 <_Balloc>
    8ce4:	99800417 	ldw	r6,16(r19)
    8ce8:	99400304 	addi	r5,r19,12
    8cec:	11000304 	addi	r4,r2,12
    8cf0:	318d883a 	add	r6,r6,r6
    8cf4:	318d883a 	add	r6,r6,r6
    8cf8:	31800204 	addi	r6,r6,8
    8cfc:	1023883a 	mov	r17,r2
    8d00:	0002adc0 	call	2adc <memcpy>
    8d04:	980b883a 	mov	r5,r19
    8d08:	a009883a 	mov	r4,r20
    8d0c:	0007f640 	call	7f64 <_Bfree>
    8d10:	8827883a 	mov	r19,r17
    8d14:	003fe006 	br	8c98 <__multadd+0x80>

00008d18 <__pow5mult>:
    8d18:	defffa04 	addi	sp,sp,-24
    8d1c:	308000cc 	andi	r2,r6,3
    8d20:	dd000415 	stw	r20,16(sp)
    8d24:	dcc00315 	stw	r19,12(sp)
    8d28:	dc000015 	stw	r16,0(sp)
    8d2c:	dfc00515 	stw	ra,20(sp)
    8d30:	dc800215 	stw	r18,8(sp)
    8d34:	dc400115 	stw	r17,4(sp)
    8d38:	3021883a 	mov	r16,r6
    8d3c:	2027883a 	mov	r19,r4
    8d40:	2829883a 	mov	r20,r5
    8d44:	10002b1e 	bne	r2,zero,8df4 <__pow5mult+0xdc>
    8d48:	8025d0ba 	srai	r18,r16,2
    8d4c:	90001b26 	beq	r18,zero,8dbc <__pow5mult+0xa4>
    8d50:	9c001217 	ldw	r16,72(r19)
    8d54:	8000081e 	bne	r16,zero,8d78 <__pow5mult+0x60>
    8d58:	00003006 	br	8e1c <__pow5mult+0x104>
    8d5c:	800b883a 	mov	r5,r16
    8d60:	800d883a 	mov	r6,r16
    8d64:	9809883a 	mov	r4,r19
    8d68:	90001426 	beq	r18,zero,8dbc <__pow5mult+0xa4>
    8d6c:	80800017 	ldw	r2,0(r16)
    8d70:	10001b26 	beq	r2,zero,8de0 <__pow5mult+0xc8>
    8d74:	1021883a 	mov	r16,r2
    8d78:	9080004c 	andi	r2,r18,1
    8d7c:	1005003a 	cmpeq	r2,r2,zero
    8d80:	9025d07a 	srai	r18,r18,1
    8d84:	800d883a 	mov	r6,r16
    8d88:	9809883a 	mov	r4,r19
    8d8c:	a00b883a 	mov	r5,r20
    8d90:	103ff21e 	bne	r2,zero,8d5c <__pow5mult+0x44>
    8d94:	00089f40 	call	89f4 <__multiply>
    8d98:	a00b883a 	mov	r5,r20
    8d9c:	9809883a 	mov	r4,r19
    8da0:	1023883a 	mov	r17,r2
    8da4:	0007f640 	call	7f64 <_Bfree>
    8da8:	8829883a 	mov	r20,r17
    8dac:	800b883a 	mov	r5,r16
    8db0:	800d883a 	mov	r6,r16
    8db4:	9809883a 	mov	r4,r19
    8db8:	903fec1e 	bne	r18,zero,8d6c <__pow5mult+0x54>
    8dbc:	a005883a 	mov	r2,r20
    8dc0:	dfc00517 	ldw	ra,20(sp)
    8dc4:	dd000417 	ldw	r20,16(sp)
    8dc8:	dcc00317 	ldw	r19,12(sp)
    8dcc:	dc800217 	ldw	r18,8(sp)
    8dd0:	dc400117 	ldw	r17,4(sp)
    8dd4:	dc000017 	ldw	r16,0(sp)
    8dd8:	dec00604 	addi	sp,sp,24
    8ddc:	f800283a 	ret
    8de0:	00089f40 	call	89f4 <__multiply>
    8de4:	80800015 	stw	r2,0(r16)
    8de8:	1021883a 	mov	r16,r2
    8dec:	10000015 	stw	zero,0(r2)
    8df0:	003fe106 	br	8d78 <__pow5mult+0x60>
    8df4:	1085883a 	add	r2,r2,r2
    8df8:	00c00074 	movhi	r3,1
    8dfc:	18c8fc04 	addi	r3,r3,9200
    8e00:	1085883a 	add	r2,r2,r2
    8e04:	10c5883a 	add	r2,r2,r3
    8e08:	11bfff17 	ldw	r6,-4(r2)
    8e0c:	000f883a 	mov	r7,zero
    8e10:	0008c180 	call	8c18 <__multadd>
    8e14:	1029883a 	mov	r20,r2
    8e18:	003fcb06 	br	8d48 <__pow5mult+0x30>
    8e1c:	9809883a 	mov	r4,r19
    8e20:	01409c44 	movi	r5,625
    8e24:	0008bdc0 	call	8bdc <__i2b>
    8e28:	98801215 	stw	r2,72(r19)
    8e2c:	1021883a 	mov	r16,r2
    8e30:	10000015 	stw	zero,0(r2)
    8e34:	003fd006 	br	8d78 <__pow5mult+0x60>

00008e38 <__s2b>:
    8e38:	defff904 	addi	sp,sp,-28
    8e3c:	dcc00315 	stw	r19,12(sp)
    8e40:	dc800215 	stw	r18,8(sp)
    8e44:	2827883a 	mov	r19,r5
    8e48:	2025883a 	mov	r18,r4
    8e4c:	01400244 	movi	r5,9
    8e50:	39000204 	addi	r4,r7,8
    8e54:	dd000415 	stw	r20,16(sp)
    8e58:	dc400115 	stw	r17,4(sp)
    8e5c:	dfc00615 	stw	ra,24(sp)
    8e60:	dd400515 	stw	r21,20(sp)
    8e64:	dc000015 	stw	r16,0(sp)
    8e68:	3829883a 	mov	r20,r7
    8e6c:	3023883a 	mov	r17,r6
    8e70:	000ba700 	call	ba70 <__divsi3>
    8e74:	00c00044 	movi	r3,1
    8e78:	1880350e 	bge	r3,r2,8f50 <__s2b+0x118>
    8e7c:	000b883a 	mov	r5,zero
    8e80:	18c7883a 	add	r3,r3,r3
    8e84:	29400044 	addi	r5,r5,1
    8e88:	18bffd16 	blt	r3,r2,8e80 <__s2b+0x48>
    8e8c:	9009883a 	mov	r4,r18
    8e90:	00084e40 	call	84e4 <_Balloc>
    8e94:	1011883a 	mov	r8,r2
    8e98:	d8800717 	ldw	r2,28(sp)
    8e9c:	00c00044 	movi	r3,1
    8ea0:	01800244 	movi	r6,9
    8ea4:	40800515 	stw	r2,20(r8)
    8ea8:	40c00415 	stw	r3,16(r8)
    8eac:	3440260e 	bge	r6,r17,8f48 <__s2b+0x110>
    8eb0:	3021883a 	mov	r16,r6
    8eb4:	99ab883a 	add	r21,r19,r6
    8eb8:	9c05883a 	add	r2,r19,r16
    8ebc:	11c00007 	ldb	r7,0(r2)
    8ec0:	400b883a 	mov	r5,r8
    8ec4:	9009883a 	mov	r4,r18
    8ec8:	39fff404 	addi	r7,r7,-48
    8ecc:	01800284 	movi	r6,10
    8ed0:	0008c180 	call	8c18 <__multadd>
    8ed4:	84000044 	addi	r16,r16,1
    8ed8:	1011883a 	mov	r8,r2
    8edc:	8c3ff61e 	bne	r17,r16,8eb8 <__s2b+0x80>
    8ee0:	ac45883a 	add	r2,r21,r17
    8ee4:	117ffe04 	addi	r5,r2,-8
    8ee8:	880d883a 	mov	r6,r17
    8eec:	35000c0e 	bge	r6,r20,8f20 <__s2b+0xe8>
    8ef0:	a185c83a 	sub	r2,r20,r6
    8ef4:	2821883a 	mov	r16,r5
    8ef8:	28a3883a 	add	r17,r5,r2
    8efc:	81c00007 	ldb	r7,0(r16)
    8f00:	400b883a 	mov	r5,r8
    8f04:	9009883a 	mov	r4,r18
    8f08:	39fff404 	addi	r7,r7,-48
    8f0c:	01800284 	movi	r6,10
    8f10:	0008c180 	call	8c18 <__multadd>
    8f14:	84000044 	addi	r16,r16,1
    8f18:	1011883a 	mov	r8,r2
    8f1c:	847ff71e 	bne	r16,r17,8efc <__s2b+0xc4>
    8f20:	4005883a 	mov	r2,r8
    8f24:	dfc00617 	ldw	ra,24(sp)
    8f28:	dd400517 	ldw	r21,20(sp)
    8f2c:	dd000417 	ldw	r20,16(sp)
    8f30:	dcc00317 	ldw	r19,12(sp)
    8f34:	dc800217 	ldw	r18,8(sp)
    8f38:	dc400117 	ldw	r17,4(sp)
    8f3c:	dc000017 	ldw	r16,0(sp)
    8f40:	dec00704 	addi	sp,sp,28
    8f44:	f800283a 	ret
    8f48:	99400284 	addi	r5,r19,10
    8f4c:	003fe706 	br	8eec <__s2b+0xb4>
    8f50:	000b883a 	mov	r5,zero
    8f54:	003fcd06 	br	8e8c <__s2b+0x54>

00008f58 <_realloc_r>:
    8f58:	defff404 	addi	sp,sp,-48
    8f5c:	dd800815 	stw	r22,32(sp)
    8f60:	dc800415 	stw	r18,16(sp)
    8f64:	dc400315 	stw	r17,12(sp)
    8f68:	dfc00b15 	stw	ra,44(sp)
    8f6c:	df000a15 	stw	fp,40(sp)
    8f70:	ddc00915 	stw	r23,36(sp)
    8f74:	dd400715 	stw	r21,28(sp)
    8f78:	dd000615 	stw	r20,24(sp)
    8f7c:	dcc00515 	stw	r19,20(sp)
    8f80:	dc000215 	stw	r16,8(sp)
    8f84:	2825883a 	mov	r18,r5
    8f88:	3023883a 	mov	r17,r6
    8f8c:	202d883a 	mov	r22,r4
    8f90:	2800c926 	beq	r5,zero,92b8 <_realloc_r+0x360>
    8f94:	000c61c0 	call	c61c <__malloc_lock>
    8f98:	943ffe04 	addi	r16,r18,-8
    8f9c:	88c002c4 	addi	r3,r17,11
    8fa0:	00800584 	movi	r2,22
    8fa4:	82000117 	ldw	r8,4(r16)
    8fa8:	10c01b2e 	bgeu	r2,r3,9018 <_realloc_r+0xc0>
    8fac:	00bffe04 	movi	r2,-8
    8fb0:	188e703a 	and	r7,r3,r2
    8fb4:	3839883a 	mov	fp,r7
    8fb8:	38001a16 	blt	r7,zero,9024 <_realloc_r+0xcc>
    8fbc:	e4401936 	bltu	fp,r17,9024 <_realloc_r+0xcc>
    8fc0:	013fff04 	movi	r4,-4
    8fc4:	4126703a 	and	r19,r8,r4
    8fc8:	99c02616 	blt	r19,r7,9064 <_realloc_r+0x10c>
    8fcc:	802b883a 	mov	r21,r16
    8fd0:	9829883a 	mov	r20,r19
    8fd4:	84000204 	addi	r16,r16,8
    8fd8:	a80f883a 	mov	r7,r21
    8fdc:	a70dc83a 	sub	r6,r20,fp
    8fe0:	008003c4 	movi	r2,15
    8fe4:	1180c136 	bltu	r2,r6,92ec <_realloc_r+0x394>
    8fe8:	38800117 	ldw	r2,4(r7)
    8fec:	a549883a 	add	r4,r20,r21
    8ff0:	1080004c 	andi	r2,r2,1
    8ff4:	a084b03a 	or	r2,r20,r2
    8ff8:	38800115 	stw	r2,4(r7)
    8ffc:	20c00117 	ldw	r3,4(r4)
    9000:	18c00054 	ori	r3,r3,1
    9004:	20c00115 	stw	r3,4(r4)
    9008:	b009883a 	mov	r4,r22
    900c:	000c63c0 	call	c63c <__malloc_unlock>
    9010:	8023883a 	mov	r17,r16
    9014:	00000606 	br	9030 <_realloc_r+0xd8>
    9018:	01c00404 	movi	r7,16
    901c:	3839883a 	mov	fp,r7
    9020:	e47fe72e 	bgeu	fp,r17,8fc0 <_realloc_r+0x68>
    9024:	00800304 	movi	r2,12
    9028:	0023883a 	mov	r17,zero
    902c:	b0800015 	stw	r2,0(r22)
    9030:	8805883a 	mov	r2,r17
    9034:	dfc00b17 	ldw	ra,44(sp)
    9038:	df000a17 	ldw	fp,40(sp)
    903c:	ddc00917 	ldw	r23,36(sp)
    9040:	dd800817 	ldw	r22,32(sp)
    9044:	dd400717 	ldw	r21,28(sp)
    9048:	dd000617 	ldw	r20,24(sp)
    904c:	dcc00517 	ldw	r19,20(sp)
    9050:	dc800417 	ldw	r18,16(sp)
    9054:	dc400317 	ldw	r17,12(sp)
    9058:	dc000217 	ldw	r16,8(sp)
    905c:	dec00c04 	addi	sp,sp,48
    9060:	f800283a 	ret
    9064:	00800074 	movhi	r2,1
    9068:	108a5904 	addi	r2,r2,10596
    906c:	12400217 	ldw	r9,8(r2)
    9070:	84cd883a 	add	r6,r16,r19
    9074:	802b883a 	mov	r21,r16
    9078:	3240b926 	beq	r6,r9,9360 <_realloc_r+0x408>
    907c:	31400117 	ldw	r5,4(r6)
    9080:	00bfff84 	movi	r2,-2
    9084:	2884703a 	and	r2,r5,r2
    9088:	1185883a 	add	r2,r2,r6
    908c:	10c00117 	ldw	r3,4(r2)
    9090:	18c0004c 	andi	r3,r3,1
    9094:	1807003a 	cmpeq	r3,r3,zero
    9098:	1800a326 	beq	r3,zero,9328 <_realloc_r+0x3d0>
    909c:	2908703a 	and	r4,r5,r4
    90a0:	9929883a 	add	r20,r19,r4
    90a4:	a1c0a30e 	bge	r20,r7,9334 <_realloc_r+0x3dc>
    90a8:	4080004c 	andi	r2,r8,1
    90ac:	1000551e 	bne	r2,zero,9204 <_realloc_r+0x2ac>
    90b0:	80800017 	ldw	r2,0(r16)
    90b4:	80afc83a 	sub	r23,r16,r2
    90b8:	b8c00117 	ldw	r3,4(r23)
    90bc:	00bfff04 	movi	r2,-4
    90c0:	1884703a 	and	r2,r3,r2
    90c4:	30002e26 	beq	r6,zero,9180 <_realloc_r+0x228>
    90c8:	3240b926 	beq	r6,r9,93b0 <_realloc_r+0x458>
    90cc:	98a9883a 	add	r20,r19,r2
    90d0:	2509883a 	add	r4,r4,r20
    90d4:	d9000015 	stw	r4,0(sp)
    90d8:	21c02a16 	blt	r4,r7,9184 <_realloc_r+0x22c>
    90dc:	30800317 	ldw	r2,12(r6)
    90e0:	30c00217 	ldw	r3,8(r6)
    90e4:	01400904 	movi	r5,36
    90e8:	99bfff04 	addi	r6,r19,-4
    90ec:	18800315 	stw	r2,12(r3)
    90f0:	10c00215 	stw	r3,8(r2)
    90f4:	b9000317 	ldw	r4,12(r23)
    90f8:	b8800217 	ldw	r2,8(r23)
    90fc:	b82b883a 	mov	r21,r23
    9100:	bc000204 	addi	r16,r23,8
    9104:	20800215 	stw	r2,8(r4)
    9108:	11000315 	stw	r4,12(r2)
    910c:	2980e436 	bltu	r5,r6,94a0 <_realloc_r+0x548>
    9110:	008004c4 	movi	r2,19
    9114:	9009883a 	mov	r4,r18
    9118:	8011883a 	mov	r8,r16
    911c:	11800f2e 	bgeu	r2,r6,915c <_realloc_r+0x204>
    9120:	90800017 	ldw	r2,0(r18)
    9124:	ba000404 	addi	r8,r23,16
    9128:	91000204 	addi	r4,r18,8
    912c:	b8800215 	stw	r2,8(r23)
    9130:	90c00117 	ldw	r3,4(r18)
    9134:	008006c4 	movi	r2,27
    9138:	b8c00315 	stw	r3,12(r23)
    913c:	1180072e 	bgeu	r2,r6,915c <_realloc_r+0x204>
    9140:	90c00217 	ldw	r3,8(r18)
    9144:	ba000604 	addi	r8,r23,24
    9148:	91000404 	addi	r4,r18,16
    914c:	b8c00415 	stw	r3,16(r23)
    9150:	90800317 	ldw	r2,12(r18)
    9154:	b8800515 	stw	r2,20(r23)
    9158:	3140e726 	beq	r6,r5,94f8 <_realloc_r+0x5a0>
    915c:	20800017 	ldw	r2,0(r4)
    9160:	dd000017 	ldw	r20,0(sp)
    9164:	b80f883a 	mov	r7,r23
    9168:	40800015 	stw	r2,0(r8)
    916c:	20c00117 	ldw	r3,4(r4)
    9170:	40c00115 	stw	r3,4(r8)
    9174:	20800217 	ldw	r2,8(r4)
    9178:	40800215 	stw	r2,8(r8)
    917c:	003f9706 	br	8fdc <_realloc_r+0x84>
    9180:	98a9883a 	add	r20,r19,r2
    9184:	a1c01f16 	blt	r20,r7,9204 <_realloc_r+0x2ac>
    9188:	b8c00317 	ldw	r3,12(r23)
    918c:	b8800217 	ldw	r2,8(r23)
    9190:	99bfff04 	addi	r6,r19,-4
    9194:	01400904 	movi	r5,36
    9198:	b82b883a 	mov	r21,r23
    919c:	18800215 	stw	r2,8(r3)
    91a0:	10c00315 	stw	r3,12(r2)
    91a4:	bc000204 	addi	r16,r23,8
    91a8:	2980c336 	bltu	r5,r6,94b8 <_realloc_r+0x560>
    91ac:	008004c4 	movi	r2,19
    91b0:	9009883a 	mov	r4,r18
    91b4:	8011883a 	mov	r8,r16
    91b8:	11800f2e 	bgeu	r2,r6,91f8 <_realloc_r+0x2a0>
    91bc:	90800017 	ldw	r2,0(r18)
    91c0:	ba000404 	addi	r8,r23,16
    91c4:	91000204 	addi	r4,r18,8
    91c8:	b8800215 	stw	r2,8(r23)
    91cc:	90c00117 	ldw	r3,4(r18)
    91d0:	008006c4 	movi	r2,27
    91d4:	b8c00315 	stw	r3,12(r23)
    91d8:	1180072e 	bgeu	r2,r6,91f8 <_realloc_r+0x2a0>
    91dc:	90c00217 	ldw	r3,8(r18)
    91e0:	ba000604 	addi	r8,r23,24
    91e4:	91000404 	addi	r4,r18,16
    91e8:	b8c00415 	stw	r3,16(r23)
    91ec:	90800317 	ldw	r2,12(r18)
    91f0:	b8800515 	stw	r2,20(r23)
    91f4:	3140c726 	beq	r6,r5,9514 <_realloc_r+0x5bc>
    91f8:	20800017 	ldw	r2,0(r4)
    91fc:	b80f883a 	mov	r7,r23
    9200:	003fd906 	br	9168 <_realloc_r+0x210>
    9204:	880b883a 	mov	r5,r17
    9208:	b009883a 	mov	r4,r22
    920c:	00076600 	call	7660 <_malloc_r>
    9210:	1023883a 	mov	r17,r2
    9214:	10002526 	beq	r2,zero,92ac <_realloc_r+0x354>
    9218:	80800117 	ldw	r2,4(r16)
    921c:	00ffff84 	movi	r3,-2
    9220:	893ffe04 	addi	r4,r17,-8
    9224:	10c4703a 	and	r2,r2,r3
    9228:	8085883a 	add	r2,r16,r2
    922c:	20809526 	beq	r4,r2,9484 <_realloc_r+0x52c>
    9230:	99bfff04 	addi	r6,r19,-4
    9234:	01c00904 	movi	r7,36
    9238:	39804536 	bltu	r7,r6,9350 <_realloc_r+0x3f8>
    923c:	008004c4 	movi	r2,19
    9240:	9009883a 	mov	r4,r18
    9244:	880b883a 	mov	r5,r17
    9248:	11800f2e 	bgeu	r2,r6,9288 <_realloc_r+0x330>
    924c:	90800017 	ldw	r2,0(r18)
    9250:	89400204 	addi	r5,r17,8
    9254:	91000204 	addi	r4,r18,8
    9258:	88800015 	stw	r2,0(r17)
    925c:	90c00117 	ldw	r3,4(r18)
    9260:	008006c4 	movi	r2,27
    9264:	88c00115 	stw	r3,4(r17)
    9268:	1180072e 	bgeu	r2,r6,9288 <_realloc_r+0x330>
    926c:	90c00217 	ldw	r3,8(r18)
    9270:	89400404 	addi	r5,r17,16
    9274:	91000404 	addi	r4,r18,16
    9278:	88c00215 	stw	r3,8(r17)
    927c:	90800317 	ldw	r2,12(r18)
    9280:	88800315 	stw	r2,12(r17)
    9284:	31c09126 	beq	r6,r7,94cc <_realloc_r+0x574>
    9288:	20800017 	ldw	r2,0(r4)
    928c:	28800015 	stw	r2,0(r5)
    9290:	20c00117 	ldw	r3,4(r4)
    9294:	28c00115 	stw	r3,4(r5)
    9298:	20800217 	ldw	r2,8(r4)
    929c:	28800215 	stw	r2,8(r5)
    92a0:	900b883a 	mov	r5,r18
    92a4:	b009883a 	mov	r4,r22
    92a8:	0006ad80 	call	6ad8 <_free_r>
    92ac:	b009883a 	mov	r4,r22
    92b0:	000c63c0 	call	c63c <__malloc_unlock>
    92b4:	003f5e06 	br	9030 <_realloc_r+0xd8>
    92b8:	300b883a 	mov	r5,r6
    92bc:	dfc00b17 	ldw	ra,44(sp)
    92c0:	df000a17 	ldw	fp,40(sp)
    92c4:	ddc00917 	ldw	r23,36(sp)
    92c8:	dd800817 	ldw	r22,32(sp)
    92cc:	dd400717 	ldw	r21,28(sp)
    92d0:	dd000617 	ldw	r20,24(sp)
    92d4:	dcc00517 	ldw	r19,20(sp)
    92d8:	dc800417 	ldw	r18,16(sp)
    92dc:	dc400317 	ldw	r17,12(sp)
    92e0:	dc000217 	ldw	r16,8(sp)
    92e4:	dec00c04 	addi	sp,sp,48
    92e8:	00076601 	jmpi	7660 <_malloc_r>
    92ec:	38800117 	ldw	r2,4(r7)
    92f0:	e54b883a 	add	r5,fp,r21
    92f4:	31000054 	ori	r4,r6,1
    92f8:	1080004c 	andi	r2,r2,1
    92fc:	1704b03a 	or	r2,r2,fp
    9300:	38800115 	stw	r2,4(r7)
    9304:	29000115 	stw	r4,4(r5)
    9308:	2987883a 	add	r3,r5,r6
    930c:	18800117 	ldw	r2,4(r3)
    9310:	29400204 	addi	r5,r5,8
    9314:	b009883a 	mov	r4,r22
    9318:	10800054 	ori	r2,r2,1
    931c:	18800115 	stw	r2,4(r3)
    9320:	0006ad80 	call	6ad8 <_free_r>
    9324:	003f3806 	br	9008 <_realloc_r+0xb0>
    9328:	000d883a 	mov	r6,zero
    932c:	0009883a 	mov	r4,zero
    9330:	003f5d06 	br	90a8 <_realloc_r+0x150>
    9334:	30c00217 	ldw	r3,8(r6)
    9338:	30800317 	ldw	r2,12(r6)
    933c:	800f883a 	mov	r7,r16
    9340:	84000204 	addi	r16,r16,8
    9344:	10c00215 	stw	r3,8(r2)
    9348:	18800315 	stw	r2,12(r3)
    934c:	003f2306 	br	8fdc <_realloc_r+0x84>
    9350:	8809883a 	mov	r4,r17
    9354:	900b883a 	mov	r5,r18
    9358:	0007e840 	call	7e84 <memmove>
    935c:	003fd006 	br	92a0 <_realloc_r+0x348>
    9360:	30800117 	ldw	r2,4(r6)
    9364:	e0c00404 	addi	r3,fp,16
    9368:	1108703a 	and	r4,r2,r4
    936c:	9905883a 	add	r2,r19,r4
    9370:	10ff4d16 	blt	r2,r3,90a8 <_realloc_r+0x150>
    9374:	1705c83a 	sub	r2,r2,fp
    9378:	870b883a 	add	r5,r16,fp
    937c:	10800054 	ori	r2,r2,1
    9380:	28800115 	stw	r2,4(r5)
    9384:	80c00117 	ldw	r3,4(r16)
    9388:	00800074 	movhi	r2,1
    938c:	108a5904 	addi	r2,r2,10596
    9390:	b009883a 	mov	r4,r22
    9394:	18c0004c 	andi	r3,r3,1
    9398:	e0c6b03a 	or	r3,fp,r3
    939c:	11400215 	stw	r5,8(r2)
    93a0:	80c00115 	stw	r3,4(r16)
    93a4:	000c63c0 	call	c63c <__malloc_unlock>
    93a8:	84400204 	addi	r17,r16,8
    93ac:	003f2006 	br	9030 <_realloc_r+0xd8>
    93b0:	98a9883a 	add	r20,r19,r2
    93b4:	2509883a 	add	r4,r4,r20
    93b8:	e0800404 	addi	r2,fp,16
    93bc:	d9000115 	stw	r4,4(sp)
    93c0:	20bf7016 	blt	r4,r2,9184 <_realloc_r+0x22c>
    93c4:	b8c00317 	ldw	r3,12(r23)
    93c8:	b8800217 	ldw	r2,8(r23)
    93cc:	99bfff04 	addi	r6,r19,-4
    93d0:	01400904 	movi	r5,36
    93d4:	18800215 	stw	r2,8(r3)
    93d8:	10c00315 	stw	r3,12(r2)
    93dc:	bc400204 	addi	r17,r23,8
    93e0:	29804136 	bltu	r5,r6,94e8 <_realloc_r+0x590>
    93e4:	008004c4 	movi	r2,19
    93e8:	9009883a 	mov	r4,r18
    93ec:	880f883a 	mov	r7,r17
    93f0:	11800f2e 	bgeu	r2,r6,9430 <_realloc_r+0x4d8>
    93f4:	90800017 	ldw	r2,0(r18)
    93f8:	b9c00404 	addi	r7,r23,16
    93fc:	91000204 	addi	r4,r18,8
    9400:	b8800215 	stw	r2,8(r23)
    9404:	90c00117 	ldw	r3,4(r18)
    9408:	008006c4 	movi	r2,27
    940c:	b8c00315 	stw	r3,12(r23)
    9410:	1180072e 	bgeu	r2,r6,9430 <_realloc_r+0x4d8>
    9414:	90c00217 	ldw	r3,8(r18)
    9418:	b9c00604 	addi	r7,r23,24
    941c:	91000404 	addi	r4,r18,16
    9420:	b8c00415 	stw	r3,16(r23)
    9424:	90800317 	ldw	r2,12(r18)
    9428:	b8800515 	stw	r2,20(r23)
    942c:	31404026 	beq	r6,r5,9530 <_realloc_r+0x5d8>
    9430:	20800017 	ldw	r2,0(r4)
    9434:	38800015 	stw	r2,0(r7)
    9438:	20c00117 	ldw	r3,4(r4)
    943c:	38c00115 	stw	r3,4(r7)
    9440:	20800217 	ldw	r2,8(r4)
    9444:	38800215 	stw	r2,8(r7)
    9448:	d8c00117 	ldw	r3,4(sp)
    944c:	bf0b883a 	add	r5,r23,fp
    9450:	b009883a 	mov	r4,r22
    9454:	1f05c83a 	sub	r2,r3,fp
    9458:	10800054 	ori	r2,r2,1
    945c:	28800115 	stw	r2,4(r5)
    9460:	b8c00117 	ldw	r3,4(r23)
    9464:	00800074 	movhi	r2,1
    9468:	108a5904 	addi	r2,r2,10596
    946c:	11400215 	stw	r5,8(r2)
    9470:	18c0004c 	andi	r3,r3,1
    9474:	e0c6b03a 	or	r3,fp,r3
    9478:	b8c00115 	stw	r3,4(r23)
    947c:	000c63c0 	call	c63c <__malloc_unlock>
    9480:	003eeb06 	br	9030 <_realloc_r+0xd8>
    9484:	20800117 	ldw	r2,4(r4)
    9488:	00ffff04 	movi	r3,-4
    948c:	800f883a 	mov	r7,r16
    9490:	10c4703a 	and	r2,r2,r3
    9494:	98a9883a 	add	r20,r19,r2
    9498:	84000204 	addi	r16,r16,8
    949c:	003ecf06 	br	8fdc <_realloc_r+0x84>
    94a0:	900b883a 	mov	r5,r18
    94a4:	8009883a 	mov	r4,r16
    94a8:	0007e840 	call	7e84 <memmove>
    94ac:	dd000017 	ldw	r20,0(sp)
    94b0:	b80f883a 	mov	r7,r23
    94b4:	003ec906 	br	8fdc <_realloc_r+0x84>
    94b8:	900b883a 	mov	r5,r18
    94bc:	8009883a 	mov	r4,r16
    94c0:	0007e840 	call	7e84 <memmove>
    94c4:	b80f883a 	mov	r7,r23
    94c8:	003ec406 	br	8fdc <_realloc_r+0x84>
    94cc:	90c00417 	ldw	r3,16(r18)
    94d0:	89400604 	addi	r5,r17,24
    94d4:	91000604 	addi	r4,r18,24
    94d8:	88c00415 	stw	r3,16(r17)
    94dc:	90800517 	ldw	r2,20(r18)
    94e0:	88800515 	stw	r2,20(r17)
    94e4:	003f6806 	br	9288 <_realloc_r+0x330>
    94e8:	900b883a 	mov	r5,r18
    94ec:	8809883a 	mov	r4,r17
    94f0:	0007e840 	call	7e84 <memmove>
    94f4:	003fd406 	br	9448 <_realloc_r+0x4f0>
    94f8:	90c00417 	ldw	r3,16(r18)
    94fc:	91000604 	addi	r4,r18,24
    9500:	ba000804 	addi	r8,r23,32
    9504:	b8c00615 	stw	r3,24(r23)
    9508:	90800517 	ldw	r2,20(r18)
    950c:	b8800715 	stw	r2,28(r23)
    9510:	003f1206 	br	915c <_realloc_r+0x204>
    9514:	90c00417 	ldw	r3,16(r18)
    9518:	91000604 	addi	r4,r18,24
    951c:	ba000804 	addi	r8,r23,32
    9520:	b8c00615 	stw	r3,24(r23)
    9524:	90800517 	ldw	r2,20(r18)
    9528:	b8800715 	stw	r2,28(r23)
    952c:	003f3206 	br	91f8 <_realloc_r+0x2a0>
    9530:	90c00417 	ldw	r3,16(r18)
    9534:	91000604 	addi	r4,r18,24
    9538:	b9c00804 	addi	r7,r23,32
    953c:	b8c00615 	stw	r3,24(r23)
    9540:	90800517 	ldw	r2,20(r18)
    9544:	b8800715 	stw	r2,28(r23)
    9548:	003fb906 	br	9430 <_realloc_r+0x4d8>

0000954c <__isinfd>:
    954c:	200d883a 	mov	r6,r4
    9550:	0109c83a 	sub	r4,zero,r4
    9554:	2188b03a 	or	r4,r4,r6
    9558:	2008d7fa 	srli	r4,r4,31
    955c:	00a00034 	movhi	r2,32768
    9560:	10bfffc4 	addi	r2,r2,-1
    9564:	1144703a 	and	r2,r2,r5
    9568:	2088b03a 	or	r4,r4,r2
    956c:	009ffc34 	movhi	r2,32752
    9570:	1105c83a 	sub	r2,r2,r4
    9574:	0087c83a 	sub	r3,zero,r2
    9578:	10c4b03a 	or	r2,r2,r3
    957c:	1004d7fa 	srli	r2,r2,31
    9580:	00c00044 	movi	r3,1
    9584:	1885c83a 	sub	r2,r3,r2
    9588:	f800283a 	ret

0000958c <__isnand>:
    958c:	200d883a 	mov	r6,r4
    9590:	0109c83a 	sub	r4,zero,r4
    9594:	2188b03a 	or	r4,r4,r6
    9598:	2008d7fa 	srli	r4,r4,31
    959c:	00a00034 	movhi	r2,32768
    95a0:	10bfffc4 	addi	r2,r2,-1
    95a4:	1144703a 	and	r2,r2,r5
    95a8:	2088b03a 	or	r4,r4,r2
    95ac:	009ffc34 	movhi	r2,32752
    95b0:	1105c83a 	sub	r2,r2,r4
    95b4:	1004d7fa 	srli	r2,r2,31
    95b8:	f800283a 	ret

000095bc <_sbrk_r>:
    95bc:	defffd04 	addi	sp,sp,-12
    95c0:	dc000015 	stw	r16,0(sp)
    95c4:	04000074 	movhi	r16,1
    95c8:	8416e204 	addi	r16,r16,23432
    95cc:	dc400115 	stw	r17,4(sp)
    95d0:	80000015 	stw	zero,0(r16)
    95d4:	2023883a 	mov	r17,r4
    95d8:	2809883a 	mov	r4,r5
    95dc:	dfc00215 	stw	ra,8(sp)
    95e0:	000cad40 	call	cad4 <sbrk>
    95e4:	1007883a 	mov	r3,r2
    95e8:	00bfffc4 	movi	r2,-1
    95ec:	18800626 	beq	r3,r2,9608 <_sbrk_r+0x4c>
    95f0:	1805883a 	mov	r2,r3
    95f4:	dfc00217 	ldw	ra,8(sp)
    95f8:	dc400117 	ldw	r17,4(sp)
    95fc:	dc000017 	ldw	r16,0(sp)
    9600:	dec00304 	addi	sp,sp,12
    9604:	f800283a 	ret
    9608:	80800017 	ldw	r2,0(r16)
    960c:	103ff826 	beq	r2,zero,95f0 <_sbrk_r+0x34>
    9610:	88800015 	stw	r2,0(r17)
    9614:	1805883a 	mov	r2,r3
    9618:	dfc00217 	ldw	ra,8(sp)
    961c:	dc400117 	ldw	r17,4(sp)
    9620:	dc000017 	ldw	r16,0(sp)
    9624:	dec00304 	addi	sp,sp,12
    9628:	f800283a 	ret

0000962c <__sclose>:
    962c:	2940038f 	ldh	r5,14(r5)
    9630:	00099d41 	jmpi	99d4 <_close_r>

00009634 <__sseek>:
    9634:	defffe04 	addi	sp,sp,-8
    9638:	dc000015 	stw	r16,0(sp)
    963c:	2821883a 	mov	r16,r5
    9640:	2940038f 	ldh	r5,14(r5)
    9644:	dfc00115 	stw	ra,4(sp)
    9648:	0009c4c0 	call	9c4c <_lseek_r>
    964c:	1007883a 	mov	r3,r2
    9650:	00bfffc4 	movi	r2,-1
    9654:	18800926 	beq	r3,r2,967c <__sseek+0x48>
    9658:	8080030b 	ldhu	r2,12(r16)
    965c:	80c01415 	stw	r3,80(r16)
    9660:	10840014 	ori	r2,r2,4096
    9664:	8080030d 	sth	r2,12(r16)
    9668:	1805883a 	mov	r2,r3
    966c:	dfc00117 	ldw	ra,4(sp)
    9670:	dc000017 	ldw	r16,0(sp)
    9674:	dec00204 	addi	sp,sp,8
    9678:	f800283a 	ret
    967c:	8080030b 	ldhu	r2,12(r16)
    9680:	10bbffcc 	andi	r2,r2,61439
    9684:	8080030d 	sth	r2,12(r16)
    9688:	1805883a 	mov	r2,r3
    968c:	dfc00117 	ldw	ra,4(sp)
    9690:	dc000017 	ldw	r16,0(sp)
    9694:	dec00204 	addi	sp,sp,8
    9698:	f800283a 	ret

0000969c <__swrite>:
    969c:	2880030b 	ldhu	r2,12(r5)
    96a0:	defffb04 	addi	sp,sp,-20
    96a4:	dcc00315 	stw	r19,12(sp)
    96a8:	1080400c 	andi	r2,r2,256
    96ac:	dc800215 	stw	r18,8(sp)
    96b0:	dc400115 	stw	r17,4(sp)
    96b4:	dc000015 	stw	r16,0(sp)
    96b8:	3027883a 	mov	r19,r6
    96bc:	3825883a 	mov	r18,r7
    96c0:	dfc00415 	stw	ra,16(sp)
    96c4:	2821883a 	mov	r16,r5
    96c8:	000d883a 	mov	r6,zero
    96cc:	01c00084 	movi	r7,2
    96d0:	2023883a 	mov	r17,r4
    96d4:	10000226 	beq	r2,zero,96e0 <__swrite+0x44>
    96d8:	2940038f 	ldh	r5,14(r5)
    96dc:	0009c4c0 	call	9c4c <_lseek_r>
    96e0:	8080030b 	ldhu	r2,12(r16)
    96e4:	8140038f 	ldh	r5,14(r16)
    96e8:	8809883a 	mov	r4,r17
    96ec:	10bbffcc 	andi	r2,r2,61439
    96f0:	980d883a 	mov	r6,r19
    96f4:	900f883a 	mov	r7,r18
    96f8:	8080030d 	sth	r2,12(r16)
    96fc:	dfc00417 	ldw	ra,16(sp)
    9700:	dcc00317 	ldw	r19,12(sp)
    9704:	dc800217 	ldw	r18,8(sp)
    9708:	dc400117 	ldw	r17,4(sp)
    970c:	dc000017 	ldw	r16,0(sp)
    9710:	dec00504 	addi	sp,sp,20
    9714:	00098a81 	jmpi	98a8 <_write_r>

00009718 <__sread>:
    9718:	defffe04 	addi	sp,sp,-8
    971c:	dc000015 	stw	r16,0(sp)
    9720:	2821883a 	mov	r16,r5
    9724:	2940038f 	ldh	r5,14(r5)
    9728:	dfc00115 	stw	ra,4(sp)
    972c:	0009cc40 	call	9cc4 <_read_r>
    9730:	1007883a 	mov	r3,r2
    9734:	10000816 	blt	r2,zero,9758 <__sread+0x40>
    9738:	80801417 	ldw	r2,80(r16)
    973c:	10c5883a 	add	r2,r2,r3
    9740:	80801415 	stw	r2,80(r16)
    9744:	1805883a 	mov	r2,r3
    9748:	dfc00117 	ldw	ra,4(sp)
    974c:	dc000017 	ldw	r16,0(sp)
    9750:	dec00204 	addi	sp,sp,8
    9754:	f800283a 	ret
    9758:	8080030b 	ldhu	r2,12(r16)
    975c:	10bbffcc 	andi	r2,r2,61439
    9760:	8080030d 	sth	r2,12(r16)
    9764:	1805883a 	mov	r2,r3
    9768:	dfc00117 	ldw	ra,4(sp)
    976c:	dc000017 	ldw	r16,0(sp)
    9770:	dec00204 	addi	sp,sp,8
    9774:	f800283a 	ret

00009778 <strcmp>:
    9778:	2144b03a 	or	r2,r4,r5
    977c:	108000cc 	andi	r2,r2,3
    9780:	10001d1e 	bne	r2,zero,97f8 <strcmp+0x80>
    9784:	200f883a 	mov	r7,r4
    9788:	28800017 	ldw	r2,0(r5)
    978c:	21000017 	ldw	r4,0(r4)
    9790:	280d883a 	mov	r6,r5
    9794:	2080161e 	bne	r4,r2,97f0 <strcmp+0x78>
    9798:	023fbff4 	movhi	r8,65279
    979c:	423fbfc4 	addi	r8,r8,-257
    97a0:	2207883a 	add	r3,r4,r8
    97a4:	01602074 	movhi	r5,32897
    97a8:	29602004 	addi	r5,r5,-32640
    97ac:	1946703a 	and	r3,r3,r5
    97b0:	0104303a 	nor	r2,zero,r4
    97b4:	10c4703a 	and	r2,r2,r3
    97b8:	10001c1e 	bne	r2,zero,982c <strcmp+0xb4>
    97bc:	4013883a 	mov	r9,r8
    97c0:	2811883a 	mov	r8,r5
    97c4:	00000106 	br	97cc <strcmp+0x54>
    97c8:	1800181e 	bne	r3,zero,982c <strcmp+0xb4>
    97cc:	39c00104 	addi	r7,r7,4
    97d0:	39000017 	ldw	r4,0(r7)
    97d4:	31800104 	addi	r6,r6,4
    97d8:	31400017 	ldw	r5,0(r6)
    97dc:	2245883a 	add	r2,r4,r9
    97e0:	1204703a 	and	r2,r2,r8
    97e4:	0106303a 	nor	r3,zero,r4
    97e8:	1886703a 	and	r3,r3,r2
    97ec:	217ff626 	beq	r4,r5,97c8 <strcmp+0x50>
    97f0:	3809883a 	mov	r4,r7
    97f4:	300b883a 	mov	r5,r6
    97f8:	20c00007 	ldb	r3,0(r4)
    97fc:	1800051e 	bne	r3,zero,9814 <strcmp+0x9c>
    9800:	00000606 	br	981c <strcmp+0xa4>
    9804:	21000044 	addi	r4,r4,1
    9808:	20c00007 	ldb	r3,0(r4)
    980c:	29400044 	addi	r5,r5,1
    9810:	18000226 	beq	r3,zero,981c <strcmp+0xa4>
    9814:	28800007 	ldb	r2,0(r5)
    9818:	18bffa26 	beq	r3,r2,9804 <strcmp+0x8c>
    981c:	20c00003 	ldbu	r3,0(r4)
    9820:	28800003 	ldbu	r2,0(r5)
    9824:	1885c83a 	sub	r2,r3,r2
    9828:	f800283a 	ret
    982c:	0005883a 	mov	r2,zero
    9830:	f800283a 	ret

00009834 <strlen>:
    9834:	208000cc 	andi	r2,r4,3
    9838:	2011883a 	mov	r8,r4
    983c:	1000161e 	bne	r2,zero,9898 <strlen+0x64>
    9840:	20c00017 	ldw	r3,0(r4)
    9844:	017fbff4 	movhi	r5,65279
    9848:	297fbfc4 	addi	r5,r5,-257
    984c:	01e02074 	movhi	r7,32897
    9850:	39e02004 	addi	r7,r7,-32640
    9854:	1945883a 	add	r2,r3,r5
    9858:	11c4703a 	and	r2,r2,r7
    985c:	00c6303a 	nor	r3,zero,r3
    9860:	1886703a 	and	r3,r3,r2
    9864:	18000c1e 	bne	r3,zero,9898 <strlen+0x64>
    9868:	280d883a 	mov	r6,r5
    986c:	380b883a 	mov	r5,r7
    9870:	21000104 	addi	r4,r4,4
    9874:	20800017 	ldw	r2,0(r4)
    9878:	1187883a 	add	r3,r2,r6
    987c:	1946703a 	and	r3,r3,r5
    9880:	0084303a 	nor	r2,zero,r2
    9884:	10c4703a 	and	r2,r2,r3
    9888:	103ff926 	beq	r2,zero,9870 <strlen+0x3c>
    988c:	20800007 	ldb	r2,0(r4)
    9890:	10000326 	beq	r2,zero,98a0 <strlen+0x6c>
    9894:	21000044 	addi	r4,r4,1
    9898:	20800007 	ldb	r2,0(r4)
    989c:	103ffd1e 	bne	r2,zero,9894 <strlen+0x60>
    98a0:	2205c83a 	sub	r2,r4,r8
    98a4:	f800283a 	ret

000098a8 <_write_r>:
    98a8:	defffd04 	addi	sp,sp,-12
    98ac:	dc000015 	stw	r16,0(sp)
    98b0:	04000074 	movhi	r16,1
    98b4:	8416e204 	addi	r16,r16,23432
    98b8:	dc400115 	stw	r17,4(sp)
    98bc:	80000015 	stw	zero,0(r16)
    98c0:	2023883a 	mov	r17,r4
    98c4:	2809883a 	mov	r4,r5
    98c8:	300b883a 	mov	r5,r6
    98cc:	380d883a 	mov	r6,r7
    98d0:	dfc00215 	stw	ra,8(sp)
    98d4:	000cb900 	call	cb90 <write>
    98d8:	1007883a 	mov	r3,r2
    98dc:	00bfffc4 	movi	r2,-1
    98e0:	18800626 	beq	r3,r2,98fc <_write_r+0x54>
    98e4:	1805883a 	mov	r2,r3
    98e8:	dfc00217 	ldw	ra,8(sp)
    98ec:	dc400117 	ldw	r17,4(sp)
    98f0:	dc000017 	ldw	r16,0(sp)
    98f4:	dec00304 	addi	sp,sp,12
    98f8:	f800283a 	ret
    98fc:	80800017 	ldw	r2,0(r16)
    9900:	103ff826 	beq	r2,zero,98e4 <_write_r+0x3c>
    9904:	88800015 	stw	r2,0(r17)
    9908:	1805883a 	mov	r2,r3
    990c:	dfc00217 	ldw	ra,8(sp)
    9910:	dc400117 	ldw	r17,4(sp)
    9914:	dc000017 	ldw	r16,0(sp)
    9918:	dec00304 	addi	sp,sp,12
    991c:	f800283a 	ret

00009920 <_calloc_r>:
    9920:	298b383a 	mul	r5,r5,r6
    9924:	defffe04 	addi	sp,sp,-8
    9928:	dc000015 	stw	r16,0(sp)
    992c:	dfc00115 	stw	ra,4(sp)
    9930:	00076600 	call	7660 <_malloc_r>
    9934:	1021883a 	mov	r16,r2
    9938:	01c00904 	movi	r7,36
    993c:	10000d26 	beq	r2,zero,9974 <_calloc_r+0x54>
    9940:	10ffff17 	ldw	r3,-4(r2)
    9944:	1009883a 	mov	r4,r2
    9948:	00bfff04 	movi	r2,-4
    994c:	1886703a 	and	r3,r3,r2
    9950:	1887883a 	add	r3,r3,r2
    9954:	180d883a 	mov	r6,r3
    9958:	000b883a 	mov	r5,zero
    995c:	38c01736 	bltu	r7,r3,99bc <_calloc_r+0x9c>
    9960:	008004c4 	movi	r2,19
    9964:	10c00836 	bltu	r2,r3,9988 <_calloc_r+0x68>
    9968:	20000215 	stw	zero,8(r4)
    996c:	20000015 	stw	zero,0(r4)
    9970:	20000115 	stw	zero,4(r4)
    9974:	8005883a 	mov	r2,r16
    9978:	dfc00117 	ldw	ra,4(sp)
    997c:	dc000017 	ldw	r16,0(sp)
    9980:	dec00204 	addi	sp,sp,8
    9984:	f800283a 	ret
    9988:	008006c4 	movi	r2,27
    998c:	80000015 	stw	zero,0(r16)
    9990:	80000115 	stw	zero,4(r16)
    9994:	81000204 	addi	r4,r16,8
    9998:	10fff32e 	bgeu	r2,r3,9968 <_calloc_r+0x48>
    999c:	80000215 	stw	zero,8(r16)
    99a0:	80000315 	stw	zero,12(r16)
    99a4:	81000404 	addi	r4,r16,16
    99a8:	19ffef1e 	bne	r3,r7,9968 <_calloc_r+0x48>
    99ac:	81000604 	addi	r4,r16,24
    99b0:	80000415 	stw	zero,16(r16)
    99b4:	80000515 	stw	zero,20(r16)
    99b8:	003feb06 	br	9968 <_calloc_r+0x48>
    99bc:	0002b7c0 	call	2b7c <memset>
    99c0:	8005883a 	mov	r2,r16
    99c4:	dfc00117 	ldw	ra,4(sp)
    99c8:	dc000017 	ldw	r16,0(sp)
    99cc:	dec00204 	addi	sp,sp,8
    99d0:	f800283a 	ret

000099d4 <_close_r>:
    99d4:	defffd04 	addi	sp,sp,-12
    99d8:	dc000015 	stw	r16,0(sp)
    99dc:	04000074 	movhi	r16,1
    99e0:	8416e204 	addi	r16,r16,23432
    99e4:	dc400115 	stw	r17,4(sp)
    99e8:	80000015 	stw	zero,0(r16)
    99ec:	2023883a 	mov	r17,r4
    99f0:	2809883a 	mov	r4,r5
    99f4:	dfc00215 	stw	ra,8(sp)
    99f8:	000bdd80 	call	bdd8 <close>
    99fc:	1007883a 	mov	r3,r2
    9a00:	00bfffc4 	movi	r2,-1
    9a04:	18800626 	beq	r3,r2,9a20 <_close_r+0x4c>
    9a08:	1805883a 	mov	r2,r3
    9a0c:	dfc00217 	ldw	ra,8(sp)
    9a10:	dc400117 	ldw	r17,4(sp)
    9a14:	dc000017 	ldw	r16,0(sp)
    9a18:	dec00304 	addi	sp,sp,12
    9a1c:	f800283a 	ret
    9a20:	80800017 	ldw	r2,0(r16)
    9a24:	103ff826 	beq	r2,zero,9a08 <_close_r+0x34>
    9a28:	88800015 	stw	r2,0(r17)
    9a2c:	1805883a 	mov	r2,r3
    9a30:	dfc00217 	ldw	ra,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00304 	addi	sp,sp,12
    9a40:	f800283a 	ret

00009a44 <_fclose_r>:
    9a44:	defffc04 	addi	sp,sp,-16
    9a48:	dc400115 	stw	r17,4(sp)
    9a4c:	dc000015 	stw	r16,0(sp)
    9a50:	dfc00315 	stw	ra,12(sp)
    9a54:	dc800215 	stw	r18,8(sp)
    9a58:	2821883a 	mov	r16,r5
    9a5c:	2023883a 	mov	r17,r4
    9a60:	28002926 	beq	r5,zero,9b08 <_fclose_r+0xc4>
    9a64:	00067440 	call	6744 <__sfp_lock_acquire>
    9a68:	88000226 	beq	r17,zero,9a74 <_fclose_r+0x30>
    9a6c:	88800e17 	ldw	r2,56(r17)
    9a70:	10002d26 	beq	r2,zero,9b28 <_fclose_r+0xe4>
    9a74:	8080030f 	ldh	r2,12(r16)
    9a78:	10002226 	beq	r2,zero,9b04 <_fclose_r+0xc0>
    9a7c:	8809883a 	mov	r4,r17
    9a80:	800b883a 	mov	r5,r16
    9a84:	00064bc0 	call	64bc <_fflush_r>
    9a88:	1025883a 	mov	r18,r2
    9a8c:	80800b17 	ldw	r2,44(r16)
    9a90:	10000426 	beq	r2,zero,9aa4 <_fclose_r+0x60>
    9a94:	81400717 	ldw	r5,28(r16)
    9a98:	8809883a 	mov	r4,r17
    9a9c:	103ee83a 	callr	r2
    9aa0:	10002a16 	blt	r2,zero,9b4c <_fclose_r+0x108>
    9aa4:	8080030b 	ldhu	r2,12(r16)
    9aa8:	1080200c 	andi	r2,r2,128
    9aac:	1000231e 	bne	r2,zero,9b3c <_fclose_r+0xf8>
    9ab0:	81400c17 	ldw	r5,48(r16)
    9ab4:	28000526 	beq	r5,zero,9acc <_fclose_r+0x88>
    9ab8:	80801004 	addi	r2,r16,64
    9abc:	28800226 	beq	r5,r2,9ac8 <_fclose_r+0x84>
    9ac0:	8809883a 	mov	r4,r17
    9ac4:	0006ad80 	call	6ad8 <_free_r>
    9ac8:	80000c15 	stw	zero,48(r16)
    9acc:	81401117 	ldw	r5,68(r16)
    9ad0:	28000326 	beq	r5,zero,9ae0 <_fclose_r+0x9c>
    9ad4:	8809883a 	mov	r4,r17
    9ad8:	0006ad80 	call	6ad8 <_free_r>
    9adc:	80001115 	stw	zero,68(r16)
    9ae0:	8000030d 	sth	zero,12(r16)
    9ae4:	00067480 	call	6748 <__sfp_lock_release>
    9ae8:	9005883a 	mov	r2,r18
    9aec:	dfc00317 	ldw	ra,12(sp)
    9af0:	dc800217 	ldw	r18,8(sp)
    9af4:	dc400117 	ldw	r17,4(sp)
    9af8:	dc000017 	ldw	r16,0(sp)
    9afc:	dec00404 	addi	sp,sp,16
    9b00:	f800283a 	ret
    9b04:	00067480 	call	6748 <__sfp_lock_release>
    9b08:	0025883a 	mov	r18,zero
    9b0c:	9005883a 	mov	r2,r18
    9b10:	dfc00317 	ldw	ra,12(sp)
    9b14:	dc800217 	ldw	r18,8(sp)
    9b18:	dc400117 	ldw	r17,4(sp)
    9b1c:	dc000017 	ldw	r16,0(sp)
    9b20:	dec00404 	addi	sp,sp,16
    9b24:	f800283a 	ret
    9b28:	8809883a 	mov	r4,r17
    9b2c:	00067540 	call	6754 <__sinit>
    9b30:	8080030f 	ldh	r2,12(r16)
    9b34:	103fd11e 	bne	r2,zero,9a7c <_fclose_r+0x38>
    9b38:	003ff206 	br	9b04 <_fclose_r+0xc0>
    9b3c:	81400417 	ldw	r5,16(r16)
    9b40:	8809883a 	mov	r4,r17
    9b44:	0006ad80 	call	6ad8 <_free_r>
    9b48:	003fd906 	br	9ab0 <_fclose_r+0x6c>
    9b4c:	04bfffc4 	movi	r18,-1
    9b50:	003fd406 	br	9aa4 <_fclose_r+0x60>

00009b54 <fclose>:
    9b54:	00800074 	movhi	r2,1
    9b58:	108fde04 	addi	r2,r2,16248
    9b5c:	200b883a 	mov	r5,r4
    9b60:	11000017 	ldw	r4,0(r2)
    9b64:	0009a441 	jmpi	9a44 <_fclose_r>

00009b68 <_fstat_r>:
    9b68:	defffd04 	addi	sp,sp,-12
    9b6c:	dc000015 	stw	r16,0(sp)
    9b70:	04000074 	movhi	r16,1
    9b74:	8416e204 	addi	r16,r16,23432
    9b78:	dc400115 	stw	r17,4(sp)
    9b7c:	80000015 	stw	zero,0(r16)
    9b80:	2023883a 	mov	r17,r4
    9b84:	2809883a 	mov	r4,r5
    9b88:	300b883a 	mov	r5,r6
    9b8c:	dfc00215 	stw	ra,8(sp)
    9b90:	000bf600 	call	bf60 <fstat>
    9b94:	1007883a 	mov	r3,r2
    9b98:	00bfffc4 	movi	r2,-1
    9b9c:	18800626 	beq	r3,r2,9bb8 <_fstat_r+0x50>
    9ba0:	1805883a 	mov	r2,r3
    9ba4:	dfc00217 	ldw	ra,8(sp)
    9ba8:	dc400117 	ldw	r17,4(sp)
    9bac:	dc000017 	ldw	r16,0(sp)
    9bb0:	dec00304 	addi	sp,sp,12
    9bb4:	f800283a 	ret
    9bb8:	80800017 	ldw	r2,0(r16)
    9bbc:	103ff826 	beq	r2,zero,9ba0 <_fstat_r+0x38>
    9bc0:	88800015 	stw	r2,0(r17)
    9bc4:	1805883a 	mov	r2,r3
    9bc8:	dfc00217 	ldw	ra,8(sp)
    9bcc:	dc400117 	ldw	r17,4(sp)
    9bd0:	dc000017 	ldw	r16,0(sp)
    9bd4:	dec00304 	addi	sp,sp,12
    9bd8:	f800283a 	ret

00009bdc <_isatty_r>:
    9bdc:	defffd04 	addi	sp,sp,-12
    9be0:	dc000015 	stw	r16,0(sp)
    9be4:	04000074 	movhi	r16,1
    9be8:	8416e204 	addi	r16,r16,23432
    9bec:	dc400115 	stw	r17,4(sp)
    9bf0:	80000015 	stw	zero,0(r16)
    9bf4:	2023883a 	mov	r17,r4
    9bf8:	2809883a 	mov	r4,r5
    9bfc:	dfc00215 	stw	ra,8(sp)
    9c00:	000c2540 	call	c254 <isatty>
    9c04:	1007883a 	mov	r3,r2
    9c08:	00bfffc4 	movi	r2,-1
    9c0c:	18800626 	beq	r3,r2,9c28 <_isatty_r+0x4c>
    9c10:	1805883a 	mov	r2,r3
    9c14:	dfc00217 	ldw	ra,8(sp)
    9c18:	dc400117 	ldw	r17,4(sp)
    9c1c:	dc000017 	ldw	r16,0(sp)
    9c20:	dec00304 	addi	sp,sp,12
    9c24:	f800283a 	ret
    9c28:	80800017 	ldw	r2,0(r16)
    9c2c:	103ff826 	beq	r2,zero,9c10 <_isatty_r+0x34>
    9c30:	88800015 	stw	r2,0(r17)
    9c34:	1805883a 	mov	r2,r3
    9c38:	dfc00217 	ldw	ra,8(sp)
    9c3c:	dc400117 	ldw	r17,4(sp)
    9c40:	dc000017 	ldw	r16,0(sp)
    9c44:	dec00304 	addi	sp,sp,12
    9c48:	f800283a 	ret

00009c4c <_lseek_r>:
    9c4c:	defffd04 	addi	sp,sp,-12
    9c50:	dc000015 	stw	r16,0(sp)
    9c54:	04000074 	movhi	r16,1
    9c58:	8416e204 	addi	r16,r16,23432
    9c5c:	dc400115 	stw	r17,4(sp)
    9c60:	80000015 	stw	zero,0(r16)
    9c64:	2023883a 	mov	r17,r4
    9c68:	2809883a 	mov	r4,r5
    9c6c:	300b883a 	mov	r5,r6
    9c70:	380d883a 	mov	r6,r7
    9c74:	dfc00215 	stw	ra,8(sp)
    9c78:	000c4600 	call	c460 <lseek>
    9c7c:	1007883a 	mov	r3,r2
    9c80:	00bfffc4 	movi	r2,-1
    9c84:	18800626 	beq	r3,r2,9ca0 <_lseek_r+0x54>
    9c88:	1805883a 	mov	r2,r3
    9c8c:	dfc00217 	ldw	ra,8(sp)
    9c90:	dc400117 	ldw	r17,4(sp)
    9c94:	dc000017 	ldw	r16,0(sp)
    9c98:	dec00304 	addi	sp,sp,12
    9c9c:	f800283a 	ret
    9ca0:	80800017 	ldw	r2,0(r16)
    9ca4:	103ff826 	beq	r2,zero,9c88 <_lseek_r+0x3c>
    9ca8:	88800015 	stw	r2,0(r17)
    9cac:	1805883a 	mov	r2,r3
    9cb0:	dfc00217 	ldw	ra,8(sp)
    9cb4:	dc400117 	ldw	r17,4(sp)
    9cb8:	dc000017 	ldw	r16,0(sp)
    9cbc:	dec00304 	addi	sp,sp,12
    9cc0:	f800283a 	ret

00009cc4 <_read_r>:
    9cc4:	defffd04 	addi	sp,sp,-12
    9cc8:	dc000015 	stw	r16,0(sp)
    9ccc:	04000074 	movhi	r16,1
    9cd0:	8416e204 	addi	r16,r16,23432
    9cd4:	dc400115 	stw	r17,4(sp)
    9cd8:	80000015 	stw	zero,0(r16)
    9cdc:	2023883a 	mov	r17,r4
    9ce0:	2809883a 	mov	r4,r5
    9ce4:	300b883a 	mov	r5,r6
    9ce8:	380d883a 	mov	r6,r7
    9cec:	dfc00215 	stw	ra,8(sp)
    9cf0:	000c8f40 	call	c8f4 <read>
    9cf4:	1007883a 	mov	r3,r2
    9cf8:	00bfffc4 	movi	r2,-1
    9cfc:	18800626 	beq	r3,r2,9d18 <_read_r+0x54>
    9d00:	1805883a 	mov	r2,r3
    9d04:	dfc00217 	ldw	ra,8(sp)
    9d08:	dc400117 	ldw	r17,4(sp)
    9d0c:	dc000017 	ldw	r16,0(sp)
    9d10:	dec00304 	addi	sp,sp,12
    9d14:	f800283a 	ret
    9d18:	80800017 	ldw	r2,0(r16)
    9d1c:	103ff826 	beq	r2,zero,9d00 <_read_r+0x3c>
    9d20:	88800015 	stw	r2,0(r17)
    9d24:	1805883a 	mov	r2,r3
    9d28:	dfc00217 	ldw	ra,8(sp)
    9d2c:	dc400117 	ldw	r17,4(sp)
    9d30:	dc000017 	ldw	r16,0(sp)
    9d34:	dec00304 	addi	sp,sp,12
    9d38:	f800283a 	ret

00009d3c <__udivdi3>:
    9d3c:	defff004 	addi	sp,sp,-64
    9d40:	2005883a 	mov	r2,r4
    9d44:	3011883a 	mov	r8,r6
    9d48:	df000e15 	stw	fp,56(sp)
    9d4c:	dd000a15 	stw	r20,40(sp)
    9d50:	dc000615 	stw	r16,24(sp)
    9d54:	dfc00f15 	stw	ra,60(sp)
    9d58:	ddc00d15 	stw	r23,52(sp)
    9d5c:	dd800c15 	stw	r22,48(sp)
    9d60:	dd400b15 	stw	r21,44(sp)
    9d64:	dcc00915 	stw	r19,36(sp)
    9d68:	dc800815 	stw	r18,32(sp)
    9d6c:	dc400715 	stw	r17,28(sp)
    9d70:	4021883a 	mov	r16,r8
    9d74:	1039883a 	mov	fp,r2
    9d78:	2829883a 	mov	r20,r5
    9d7c:	38003b1e 	bne	r7,zero,9e6c <__udivdi3+0x130>
    9d80:	2a005c36 	bltu	r5,r8,9ef4 <__udivdi3+0x1b8>
    9d84:	4000a626 	beq	r8,zero,a020 <__udivdi3+0x2e4>
    9d88:	00bfffd4 	movui	r2,65535
    9d8c:	14009e36 	bltu	r2,r16,a008 <__udivdi3+0x2cc>
    9d90:	00803fc4 	movi	r2,255
    9d94:	14013d36 	bltu	r2,r16,a28c <__udivdi3+0x550>
    9d98:	000b883a 	mov	r5,zero
    9d9c:	0005883a 	mov	r2,zero
    9da0:	8084d83a 	srl	r2,r16,r2
    9da4:	01000074 	movhi	r4,1
    9da8:	21084104 	addi	r4,r4,8452
    9dac:	01800804 	movi	r6,32
    9db0:	1105883a 	add	r2,r2,r4
    9db4:	10c00003 	ldbu	r3,0(r2)
    9db8:	28c7883a 	add	r3,r5,r3
    9dbc:	30edc83a 	sub	r22,r6,r3
    9dc0:	b000ee1e 	bne	r22,zero,a17c <__udivdi3+0x440>
    9dc4:	802ad43a 	srli	r21,r16,16
    9dc8:	00800044 	movi	r2,1
    9dcc:	a423c83a 	sub	r17,r20,r16
    9dd0:	85ffffcc 	andi	r23,r16,65535
    9dd4:	d8800315 	stw	r2,12(sp)
    9dd8:	8809883a 	mov	r4,r17
    9ddc:	a80b883a 	mov	r5,r21
    9de0:	000bb300 	call	bb30 <__udivsi3>
    9de4:	8809883a 	mov	r4,r17
    9de8:	a80b883a 	mov	r5,r21
    9dec:	102d883a 	mov	r22,r2
    9df0:	000bb380 	call	bb38 <__umodsi3>
    9df4:	1004943a 	slli	r2,r2,16
    9df8:	e006d43a 	srli	r3,fp,16
    9dfc:	bda3383a 	mul	r17,r23,r22
    9e00:	10c4b03a 	or	r2,r2,r3
    9e04:	1440042e 	bgeu	r2,r17,9e18 <__udivdi3+0xdc>
    9e08:	1405883a 	add	r2,r2,r16
    9e0c:	b5bfffc4 	addi	r22,r22,-1
    9e10:	14000136 	bltu	r2,r16,9e18 <__udivdi3+0xdc>
    9e14:	14413d36 	bltu	r2,r17,a30c <__udivdi3+0x5d0>
    9e18:	1463c83a 	sub	r17,r2,r17
    9e1c:	8809883a 	mov	r4,r17
    9e20:	a80b883a 	mov	r5,r21
    9e24:	000bb300 	call	bb30 <__udivsi3>
    9e28:	8809883a 	mov	r4,r17
    9e2c:	a80b883a 	mov	r5,r21
    9e30:	1029883a 	mov	r20,r2
    9e34:	000bb380 	call	bb38 <__umodsi3>
    9e38:	1004943a 	slli	r2,r2,16
    9e3c:	bd09383a 	mul	r4,r23,r20
    9e40:	e0ffffcc 	andi	r3,fp,65535
    9e44:	10c4b03a 	or	r2,r2,r3
    9e48:	1100042e 	bgeu	r2,r4,9e5c <__udivdi3+0x120>
    9e4c:	8085883a 	add	r2,r16,r2
    9e50:	a53fffc4 	addi	r20,r20,-1
    9e54:	14000136 	bltu	r2,r16,9e5c <__udivdi3+0x120>
    9e58:	11012036 	bltu	r2,r4,a2dc <__udivdi3+0x5a0>
    9e5c:	b004943a 	slli	r2,r22,16
    9e60:	d9000317 	ldw	r4,12(sp)
    9e64:	a084b03a 	or	r2,r20,r2
    9e68:	00001506 	br	9ec0 <__udivdi3+0x184>
    9e6c:	380d883a 	mov	r6,r7
    9e70:	29c06236 	bltu	r5,r7,9ffc <__udivdi3+0x2c0>
    9e74:	00bfffd4 	movui	r2,65535
    9e78:	11c05a36 	bltu	r2,r7,9fe4 <__udivdi3+0x2a8>
    9e7c:	00803fc4 	movi	r2,255
    9e80:	11c0fc36 	bltu	r2,r7,a274 <__udivdi3+0x538>
    9e84:	000b883a 	mov	r5,zero
    9e88:	0005883a 	mov	r2,zero
    9e8c:	3084d83a 	srl	r2,r6,r2
    9e90:	01000074 	movhi	r4,1
    9e94:	21084104 	addi	r4,r4,8452
    9e98:	01c00804 	movi	r7,32
    9e9c:	1105883a 	add	r2,r2,r4
    9ea0:	10c00003 	ldbu	r3,0(r2)
    9ea4:	28c7883a 	add	r3,r5,r3
    9ea8:	38efc83a 	sub	r23,r7,r3
    9eac:	b800691e 	bne	r23,zero,a054 <__udivdi3+0x318>
    9eb0:	35000136 	bltu	r6,r20,9eb8 <__udivdi3+0x17c>
    9eb4:	e4005136 	bltu	fp,r16,9ffc <__udivdi3+0x2c0>
    9eb8:	00800044 	movi	r2,1
    9ebc:	0009883a 	mov	r4,zero
    9ec0:	2007883a 	mov	r3,r4
    9ec4:	dfc00f17 	ldw	ra,60(sp)
    9ec8:	df000e17 	ldw	fp,56(sp)
    9ecc:	ddc00d17 	ldw	r23,52(sp)
    9ed0:	dd800c17 	ldw	r22,48(sp)
    9ed4:	dd400b17 	ldw	r21,44(sp)
    9ed8:	dd000a17 	ldw	r20,40(sp)
    9edc:	dcc00917 	ldw	r19,36(sp)
    9ee0:	dc800817 	ldw	r18,32(sp)
    9ee4:	dc400717 	ldw	r17,28(sp)
    9ee8:	dc000617 	ldw	r16,24(sp)
    9eec:	dec01004 	addi	sp,sp,64
    9ef0:	f800283a 	ret
    9ef4:	00bfffd4 	movui	r2,65535
    9ef8:	12005036 	bltu	r2,r8,a03c <__udivdi3+0x300>
    9efc:	00803fc4 	movi	r2,255
    9f00:	1200e836 	bltu	r2,r8,a2a4 <__udivdi3+0x568>
    9f04:	000b883a 	mov	r5,zero
    9f08:	0005883a 	mov	r2,zero
    9f0c:	8084d83a 	srl	r2,r16,r2
    9f10:	01000074 	movhi	r4,1
    9f14:	21084104 	addi	r4,r4,8452
    9f18:	01800804 	movi	r6,32
    9f1c:	1105883a 	add	r2,r2,r4
    9f20:	10c00003 	ldbu	r3,0(r2)
    9f24:	28c7883a 	add	r3,r5,r3
    9f28:	30cbc83a 	sub	r5,r6,r3
    9f2c:	28000626 	beq	r5,zero,9f48 <__udivdi3+0x20c>
    9f30:	3145c83a 	sub	r2,r6,r5
    9f34:	e084d83a 	srl	r2,fp,r2
    9f38:	a146983a 	sll	r3,r20,r5
    9f3c:	e178983a 	sll	fp,fp,r5
    9f40:	8160983a 	sll	r16,r16,r5
    9f44:	18a8b03a 	or	r20,r3,r2
    9f48:	802ad43a 	srli	r21,r16,16
    9f4c:	a009883a 	mov	r4,r20
    9f50:	85ffffcc 	andi	r23,r16,65535
    9f54:	a80b883a 	mov	r5,r21
    9f58:	000bb300 	call	bb30 <__udivsi3>
    9f5c:	a009883a 	mov	r4,r20
    9f60:	a80b883a 	mov	r5,r21
    9f64:	102d883a 	mov	r22,r2
    9f68:	000bb380 	call	bb38 <__umodsi3>
    9f6c:	1004943a 	slli	r2,r2,16
    9f70:	e006d43a 	srli	r3,fp,16
    9f74:	bda3383a 	mul	r17,r23,r22
    9f78:	10c4b03a 	or	r2,r2,r3
    9f7c:	1440042e 	bgeu	r2,r17,9f90 <__udivdi3+0x254>
    9f80:	1405883a 	add	r2,r2,r16
    9f84:	b5bfffc4 	addi	r22,r22,-1
    9f88:	14000136 	bltu	r2,r16,9f90 <__udivdi3+0x254>
    9f8c:	1440d536 	bltu	r2,r17,a2e4 <__udivdi3+0x5a8>
    9f90:	1463c83a 	sub	r17,r2,r17
    9f94:	8809883a 	mov	r4,r17
    9f98:	a80b883a 	mov	r5,r21
    9f9c:	000bb300 	call	bb30 <__udivsi3>
    9fa0:	8809883a 	mov	r4,r17
    9fa4:	a80b883a 	mov	r5,r21
    9fa8:	1029883a 	mov	r20,r2
    9fac:	000bb380 	call	bb38 <__umodsi3>
    9fb0:	1004943a 	slli	r2,r2,16
    9fb4:	bd09383a 	mul	r4,r23,r20
    9fb8:	e0ffffcc 	andi	r3,fp,65535
    9fbc:	10c4b03a 	or	r2,r2,r3
    9fc0:	1100042e 	bgeu	r2,r4,9fd4 <__udivdi3+0x298>
    9fc4:	8085883a 	add	r2,r16,r2
    9fc8:	a53fffc4 	addi	r20,r20,-1
    9fcc:	14000136 	bltu	r2,r16,9fd4 <__udivdi3+0x298>
    9fd0:	1100c736 	bltu	r2,r4,a2f0 <__udivdi3+0x5b4>
    9fd4:	b004943a 	slli	r2,r22,16
    9fd8:	0009883a 	mov	r4,zero
    9fdc:	a084b03a 	or	r2,r20,r2
    9fe0:	003fb706 	br	9ec0 <__udivdi3+0x184>
    9fe4:	00804034 	movhi	r2,256
    9fe8:	10bfffc4 	addi	r2,r2,-1
    9fec:	11c0a436 	bltu	r2,r7,a280 <__udivdi3+0x544>
    9ff0:	01400404 	movi	r5,16
    9ff4:	2805883a 	mov	r2,r5
    9ff8:	003fa406 	br	9e8c <__udivdi3+0x150>
    9ffc:	0005883a 	mov	r2,zero
    a000:	0009883a 	mov	r4,zero
    a004:	003fae06 	br	9ec0 <__udivdi3+0x184>
    a008:	00804034 	movhi	r2,256
    a00c:	10bfffc4 	addi	r2,r2,-1
    a010:	1400a136 	bltu	r2,r16,a298 <__udivdi3+0x55c>
    a014:	01400404 	movi	r5,16
    a018:	2805883a 	mov	r2,r5
    a01c:	003f6006 	br	9da0 <__udivdi3+0x64>
    a020:	01000044 	movi	r4,1
    a024:	000b883a 	mov	r5,zero
    a028:	000bb300 	call	bb30 <__udivsi3>
    a02c:	1021883a 	mov	r16,r2
    a030:	00bfffd4 	movui	r2,65535
    a034:	143ff436 	bltu	r2,r16,a008 <__udivdi3+0x2cc>
    a038:	003f5506 	br	9d90 <__udivdi3+0x54>
    a03c:	00804034 	movhi	r2,256
    a040:	10bfffc4 	addi	r2,r2,-1
    a044:	12009a36 	bltu	r2,r8,a2b0 <__udivdi3+0x574>
    a048:	01400404 	movi	r5,16
    a04c:	2805883a 	mov	r2,r5
    a050:	003fae06 	br	9f0c <__udivdi3+0x1d0>
    a054:	3dc5c83a 	sub	r2,r7,r23
    a058:	35c8983a 	sll	r4,r6,r23
    a05c:	8086d83a 	srl	r3,r16,r2
    a060:	a0a2d83a 	srl	r17,r20,r2
    a064:	e084d83a 	srl	r2,fp,r2
    a068:	20eab03a 	or	r21,r4,r3
    a06c:	a82cd43a 	srli	r22,r21,16
    a070:	a5c6983a 	sll	r3,r20,r23
    a074:	8809883a 	mov	r4,r17
    a078:	b00b883a 	mov	r5,r22
    a07c:	1886b03a 	or	r3,r3,r2
    a080:	d8c00215 	stw	r3,8(sp)
    a084:	000bb300 	call	bb30 <__udivsi3>
    a088:	8809883a 	mov	r4,r17
    a08c:	b00b883a 	mov	r5,r22
    a090:	1029883a 	mov	r20,r2
    a094:	000bb380 	call	bb38 <__umodsi3>
    a098:	a8ffffcc 	andi	r3,r21,65535
    a09c:	d8c00515 	stw	r3,20(sp)
    a0a0:	d9000217 	ldw	r4,8(sp)
    a0a4:	d9400517 	ldw	r5,20(sp)
    a0a8:	1004943a 	slli	r2,r2,16
    a0ac:	2006d43a 	srli	r3,r4,16
    a0b0:	85e0983a 	sll	r16,r16,r23
    a0b4:	2d23383a 	mul	r17,r5,r20
    a0b8:	10c4b03a 	or	r2,r2,r3
    a0bc:	dc000015 	stw	r16,0(sp)
    a0c0:	1440032e 	bgeu	r2,r17,a0d0 <__udivdi3+0x394>
    a0c4:	1545883a 	add	r2,r2,r21
    a0c8:	a53fffc4 	addi	r20,r20,-1
    a0cc:	15407f2e 	bgeu	r2,r21,a2cc <__udivdi3+0x590>
    a0d0:	1463c83a 	sub	r17,r2,r17
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	b00b883a 	mov	r5,r22
    a0dc:	000bb300 	call	bb30 <__udivsi3>
    a0e0:	8809883a 	mov	r4,r17
    a0e4:	b00b883a 	mov	r5,r22
    a0e8:	1021883a 	mov	r16,r2
    a0ec:	000bb380 	call	bb38 <__umodsi3>
    a0f0:	d8c00517 	ldw	r3,20(sp)
    a0f4:	d9000217 	ldw	r4,8(sp)
    a0f8:	1004943a 	slli	r2,r2,16
    a0fc:	1c0f383a 	mul	r7,r3,r16
    a100:	20ffffcc 	andi	r3,r4,65535
    a104:	10e2b03a 	or	r17,r2,r3
    a108:	89c0032e 	bgeu	r17,r7,a118 <__udivdi3+0x3dc>
    a10c:	8d63883a 	add	r17,r17,r21
    a110:	843fffc4 	addi	r16,r16,-1
    a114:	8d40692e 	bgeu	r17,r21,a2bc <__udivdi3+0x580>
    a118:	a008943a 	slli	r4,r20,16
    a11c:	d9400017 	ldw	r5,0(sp)
    a120:	89e3c83a 	sub	r17,r17,r7
    a124:	8110b03a 	or	r8,r16,r4
    a128:	280cd43a 	srli	r6,r5,16
    a12c:	28ffffcc 	andi	r3,r5,65535
    a130:	40bfffcc 	andi	r2,r8,65535
    a134:	400ad43a 	srli	r5,r8,16
    a138:	10d3383a 	mul	r9,r2,r3
    a13c:	1185383a 	mul	r2,r2,r6
    a140:	28c7383a 	mul	r3,r5,r3
    a144:	4808d43a 	srli	r4,r9,16
    a148:	298b383a 	mul	r5,r5,r6
    a14c:	10c5883a 	add	r2,r2,r3
    a150:	2089883a 	add	r4,r4,r2
    a154:	20c0022e 	bgeu	r4,r3,a160 <__udivdi3+0x424>
    a158:	00800074 	movhi	r2,1
    a15c:	288b883a 	add	r5,r5,r2
    a160:	2004d43a 	srli	r2,r4,16
    a164:	288b883a 	add	r5,r5,r2
    a168:	89403f36 	bltu	r17,r5,a268 <__udivdi3+0x52c>
    a16c:	89403926 	beq	r17,r5,a254 <__udivdi3+0x518>
    a170:	4005883a 	mov	r2,r8
    a174:	0009883a 	mov	r4,zero
    a178:	003f5106 	br	9ec0 <__udivdi3+0x184>
    a17c:	85a0983a 	sll	r16,r16,r22
    a180:	3585c83a 	sub	r2,r6,r22
    a184:	a0a2d83a 	srl	r17,r20,r2
    a188:	802ad43a 	srli	r21,r16,16
    a18c:	e084d83a 	srl	r2,fp,r2
    a190:	a586983a 	sll	r3,r20,r22
    a194:	8809883a 	mov	r4,r17
    a198:	a80b883a 	mov	r5,r21
    a19c:	1886b03a 	or	r3,r3,r2
    a1a0:	d8c00115 	stw	r3,4(sp)
    a1a4:	000bb300 	call	bb30 <__udivsi3>
    a1a8:	8809883a 	mov	r4,r17
    a1ac:	a80b883a 	mov	r5,r21
    a1b0:	d8800415 	stw	r2,16(sp)
    a1b4:	000bb380 	call	bb38 <__umodsi3>
    a1b8:	d9000117 	ldw	r4,4(sp)
    a1bc:	d9400417 	ldw	r5,16(sp)
    a1c0:	1004943a 	slli	r2,r2,16
    a1c4:	85ffffcc 	andi	r23,r16,65535
    a1c8:	2006d43a 	srli	r3,r4,16
    a1cc:	b963383a 	mul	r17,r23,r5
    a1d0:	10c4b03a 	or	r2,r2,r3
    a1d4:	1440042e 	bgeu	r2,r17,a1e8 <__udivdi3+0x4ac>
    a1d8:	297fffc4 	addi	r5,r5,-1
    a1dc:	1405883a 	add	r2,r2,r16
    a1e0:	d9400415 	stw	r5,16(sp)
    a1e4:	1400442e 	bgeu	r2,r16,a2f8 <__udivdi3+0x5bc>
    a1e8:	1463c83a 	sub	r17,r2,r17
    a1ec:	8809883a 	mov	r4,r17
    a1f0:	a80b883a 	mov	r5,r21
    a1f4:	000bb300 	call	bb30 <__udivsi3>
    a1f8:	8809883a 	mov	r4,r17
    a1fc:	a80b883a 	mov	r5,r21
    a200:	1029883a 	mov	r20,r2
    a204:	000bb380 	call	bb38 <__umodsi3>
    a208:	d9400117 	ldw	r5,4(sp)
    a20c:	1004943a 	slli	r2,r2,16
    a210:	bd09383a 	mul	r4,r23,r20
    a214:	28ffffcc 	andi	r3,r5,65535
    a218:	10c6b03a 	or	r3,r2,r3
    a21c:	1900062e 	bgeu	r3,r4,a238 <__udivdi3+0x4fc>
    a220:	1c07883a 	add	r3,r3,r16
    a224:	a53fffc4 	addi	r20,r20,-1
    a228:	1c000336 	bltu	r3,r16,a238 <__udivdi3+0x4fc>
    a22c:	1900022e 	bgeu	r3,r4,a238 <__udivdi3+0x4fc>
    a230:	a53fffc4 	addi	r20,r20,-1
    a234:	1c07883a 	add	r3,r3,r16
    a238:	d9400417 	ldw	r5,16(sp)
    a23c:	e5b8983a 	sll	fp,fp,r22
    a240:	1923c83a 	sub	r17,r3,r4
    a244:	2804943a 	slli	r2,r5,16
    a248:	a0a8b03a 	or	r20,r20,r2
    a24c:	dd000315 	stw	r20,12(sp)
    a250:	003ee106 	br	9dd8 <__udivdi3+0x9c>
    a254:	2004943a 	slli	r2,r4,16
    a258:	e5c8983a 	sll	r4,fp,r23
    a25c:	48ffffcc 	andi	r3,r9,65535
    a260:	10c5883a 	add	r2,r2,r3
    a264:	20bfc22e 	bgeu	r4,r2,a170 <__udivdi3+0x434>
    a268:	40bfffc4 	addi	r2,r8,-1
    a26c:	0009883a 	mov	r4,zero
    a270:	003f1306 	br	9ec0 <__udivdi3+0x184>
    a274:	01400204 	movi	r5,8
    a278:	2805883a 	mov	r2,r5
    a27c:	003f0306 	br	9e8c <__udivdi3+0x150>
    a280:	01400604 	movi	r5,24
    a284:	2805883a 	mov	r2,r5
    a288:	003f0006 	br	9e8c <__udivdi3+0x150>
    a28c:	01400204 	movi	r5,8
    a290:	2805883a 	mov	r2,r5
    a294:	003ec206 	br	9da0 <__udivdi3+0x64>
    a298:	01400604 	movi	r5,24
    a29c:	2805883a 	mov	r2,r5
    a2a0:	003ebf06 	br	9da0 <__udivdi3+0x64>
    a2a4:	01400204 	movi	r5,8
    a2a8:	2805883a 	mov	r2,r5
    a2ac:	003f1706 	br	9f0c <__udivdi3+0x1d0>
    a2b0:	01400604 	movi	r5,24
    a2b4:	2805883a 	mov	r2,r5
    a2b8:	003f1406 	br	9f0c <__udivdi3+0x1d0>
    a2bc:	89ff962e 	bgeu	r17,r7,a118 <__udivdi3+0x3dc>
    a2c0:	8d63883a 	add	r17,r17,r21
    a2c4:	843fffc4 	addi	r16,r16,-1
    a2c8:	003f9306 	br	a118 <__udivdi3+0x3dc>
    a2cc:	147f802e 	bgeu	r2,r17,a0d0 <__udivdi3+0x394>
    a2d0:	a53fffc4 	addi	r20,r20,-1
    a2d4:	1545883a 	add	r2,r2,r21
    a2d8:	003f7d06 	br	a0d0 <__udivdi3+0x394>
    a2dc:	a53fffc4 	addi	r20,r20,-1
    a2e0:	003ede06 	br	9e5c <__udivdi3+0x120>
    a2e4:	b5bfffc4 	addi	r22,r22,-1
    a2e8:	1405883a 	add	r2,r2,r16
    a2ec:	003f2806 	br	9f90 <__udivdi3+0x254>
    a2f0:	a53fffc4 	addi	r20,r20,-1
    a2f4:	003f3706 	br	9fd4 <__udivdi3+0x298>
    a2f8:	147fbb2e 	bgeu	r2,r17,a1e8 <__udivdi3+0x4ac>
    a2fc:	297fffc4 	addi	r5,r5,-1
    a300:	1405883a 	add	r2,r2,r16
    a304:	d9400415 	stw	r5,16(sp)
    a308:	003fb706 	br	a1e8 <__udivdi3+0x4ac>
    a30c:	b5bfffc4 	addi	r22,r22,-1
    a310:	1405883a 	add	r2,r2,r16
    a314:	003ec006 	br	9e18 <__udivdi3+0xdc>

0000a318 <__umoddi3>:
    a318:	defff104 	addi	sp,sp,-60
    a31c:	dd800b15 	stw	r22,44(sp)
    a320:	dd000915 	stw	r20,36(sp)
    a324:	dc000515 	stw	r16,20(sp)
    a328:	dfc00e15 	stw	ra,56(sp)
    a32c:	df000d15 	stw	fp,52(sp)
    a330:	ddc00c15 	stw	r23,48(sp)
    a334:	dd400a15 	stw	r21,40(sp)
    a338:	dcc00815 	stw	r19,32(sp)
    a33c:	dc800715 	stw	r18,28(sp)
    a340:	dc400615 	stw	r17,24(sp)
    a344:	3021883a 	mov	r16,r6
    a348:	202d883a 	mov	r22,r4
    a34c:	2829883a 	mov	r20,r5
    a350:	38002b1e 	bne	r7,zero,a400 <__umoddi3+0xe8>
    a354:	29805036 	bltu	r5,r6,a498 <__umoddi3+0x180>
    a358:	30008a26 	beq	r6,zero,a584 <__umoddi3+0x26c>
    a35c:	00bfffd4 	movui	r2,65535
    a360:	14008236 	bltu	r2,r16,a56c <__umoddi3+0x254>
    a364:	00803fc4 	movi	r2,255
    a368:	14013636 	bltu	r2,r16,a844 <__umoddi3+0x52c>
    a36c:	000b883a 	mov	r5,zero
    a370:	0005883a 	mov	r2,zero
    a374:	8084d83a 	srl	r2,r16,r2
    a378:	01000074 	movhi	r4,1
    a37c:	21084104 	addi	r4,r4,8452
    a380:	01800804 	movi	r6,32
    a384:	1105883a 	add	r2,r2,r4
    a388:	10c00003 	ldbu	r3,0(r2)
    a38c:	28c7883a 	add	r3,r5,r3
    a390:	30efc83a 	sub	r23,r6,r3
    a394:	b800941e 	bne	r23,zero,a5e8 <__umoddi3+0x2d0>
    a398:	802ad43a 	srli	r21,r16,16
    a39c:	a423c83a 	sub	r17,r20,r16
    a3a0:	0039883a 	mov	fp,zero
    a3a4:	853fffcc 	andi	r20,r16,65535
    a3a8:	8809883a 	mov	r4,r17
    a3ac:	a80b883a 	mov	r5,r21
    a3b0:	000bb300 	call	bb30 <__udivsi3>
    a3b4:	8809883a 	mov	r4,r17
    a3b8:	a80b883a 	mov	r5,r21
    a3bc:	a0a3383a 	mul	r17,r20,r2
    a3c0:	000bb380 	call	bb38 <__umodsi3>
    a3c4:	1004943a 	slli	r2,r2,16
    a3c8:	b006d43a 	srli	r3,r22,16
    a3cc:	10c4b03a 	or	r2,r2,r3
    a3d0:	1440032e 	bgeu	r2,r17,a3e0 <__umoddi3+0xc8>
    a3d4:	1405883a 	add	r2,r2,r16
    a3d8:	14000136 	bltu	r2,r16,a3e0 <__umoddi3+0xc8>
    a3dc:	14413536 	bltu	r2,r17,a8b4 <__umoddi3+0x59c>
    a3e0:	1463c83a 	sub	r17,r2,r17
    a3e4:	8809883a 	mov	r4,r17
    a3e8:	a80b883a 	mov	r5,r21
    a3ec:	000bb300 	call	bb30 <__udivsi3>
    a3f0:	8809883a 	mov	r4,r17
    a3f4:	a0a3383a 	mul	r17,r20,r2
    a3f8:	a80b883a 	mov	r5,r21
    a3fc:	00004d06 	br	a534 <__umoddi3+0x21c>
    a400:	380d883a 	mov	r6,r7
    a404:	29c0102e 	bgeu	r5,r7,a448 <__umoddi3+0x130>
    a408:	2011883a 	mov	r8,r4
    a40c:	2813883a 	mov	r9,r5
    a410:	4005883a 	mov	r2,r8
    a414:	4807883a 	mov	r3,r9
    a418:	dfc00e17 	ldw	ra,56(sp)
    a41c:	df000d17 	ldw	fp,52(sp)
    a420:	ddc00c17 	ldw	r23,48(sp)
    a424:	dd800b17 	ldw	r22,44(sp)
    a428:	dd400a17 	ldw	r21,40(sp)
    a42c:	dd000917 	ldw	r20,36(sp)
    a430:	dcc00817 	ldw	r19,32(sp)
    a434:	dc800717 	ldw	r18,28(sp)
    a438:	dc400617 	ldw	r17,24(sp)
    a43c:	dc000517 	ldw	r16,20(sp)
    a440:	dec00f04 	addi	sp,sp,60
    a444:	f800283a 	ret
    a448:	00bfffd4 	movui	r2,65535
    a44c:	11c05a36 	bltu	r2,r7,a5b8 <__umoddi3+0x2a0>
    a450:	00803fc4 	movi	r2,255
    a454:	11c0fe36 	bltu	r2,r7,a850 <__umoddi3+0x538>
    a458:	000b883a 	mov	r5,zero
    a45c:	0005883a 	mov	r2,zero
    a460:	3084d83a 	srl	r2,r6,r2
    a464:	01000074 	movhi	r4,1
    a468:	21084104 	addi	r4,r4,8452
    a46c:	01c00804 	movi	r7,32
    a470:	1105883a 	add	r2,r2,r4
    a474:	10c00003 	ldbu	r3,0(r2)
    a478:	28c7883a 	add	r3,r5,r3
    a47c:	38ebc83a 	sub	r21,r7,r3
    a480:	a800851e 	bne	r21,zero,a698 <__umoddi3+0x380>
    a484:	35005236 	bltu	r6,r20,a5d0 <__umoddi3+0x2b8>
    a488:	b400512e 	bgeu	r22,r16,a5d0 <__umoddi3+0x2b8>
    a48c:	b011883a 	mov	r8,r22
    a490:	a013883a 	mov	r9,r20
    a494:	003fde06 	br	a410 <__umoddi3+0xf8>
    a498:	00bfffd4 	movui	r2,65535
    a49c:	11804036 	bltu	r2,r6,a5a0 <__umoddi3+0x288>
    a4a0:	00803fc4 	movi	r2,255
    a4a4:	1180ed36 	bltu	r2,r6,a85c <__umoddi3+0x544>
    a4a8:	000b883a 	mov	r5,zero
    a4ac:	0005883a 	mov	r2,zero
    a4b0:	8084d83a 	srl	r2,r16,r2
    a4b4:	01000074 	movhi	r4,1
    a4b8:	21084104 	addi	r4,r4,8452
    a4bc:	01800804 	movi	r6,32
    a4c0:	1105883a 	add	r2,r2,r4
    a4c4:	10c00003 	ldbu	r3,0(r2)
    a4c8:	28c7883a 	add	r3,r5,r3
    a4cc:	30c7c83a 	sub	r3,r6,r3
    a4d0:	1800bf1e 	bne	r3,zero,a7d0 <__umoddi3+0x4b8>
    a4d4:	0039883a 	mov	fp,zero
    a4d8:	802ad43a 	srli	r21,r16,16
    a4dc:	a009883a 	mov	r4,r20
    a4e0:	85ffffcc 	andi	r23,r16,65535
    a4e4:	a80b883a 	mov	r5,r21
    a4e8:	000bb300 	call	bb30 <__udivsi3>
    a4ec:	a009883a 	mov	r4,r20
    a4f0:	a80b883a 	mov	r5,r21
    a4f4:	b8a3383a 	mul	r17,r23,r2
    a4f8:	000bb380 	call	bb38 <__umodsi3>
    a4fc:	1004943a 	slli	r2,r2,16
    a500:	b006d43a 	srli	r3,r22,16
    a504:	10c4b03a 	or	r2,r2,r3
    a508:	1440032e 	bgeu	r2,r17,a518 <__umoddi3+0x200>
    a50c:	1405883a 	add	r2,r2,r16
    a510:	14000136 	bltu	r2,r16,a518 <__umoddi3+0x200>
    a514:	1440e536 	bltu	r2,r17,a8ac <__umoddi3+0x594>
    a518:	1463c83a 	sub	r17,r2,r17
    a51c:	8809883a 	mov	r4,r17
    a520:	a80b883a 	mov	r5,r21
    a524:	000bb300 	call	bb30 <__udivsi3>
    a528:	8809883a 	mov	r4,r17
    a52c:	b8a3383a 	mul	r17,r23,r2
    a530:	a80b883a 	mov	r5,r21
    a534:	000bb380 	call	bb38 <__umodsi3>
    a538:	1004943a 	slli	r2,r2,16
    a53c:	b0ffffcc 	andi	r3,r22,65535
    a540:	10c4b03a 	or	r2,r2,r3
    a544:	1440042e 	bgeu	r2,r17,a558 <__umoddi3+0x240>
    a548:	1405883a 	add	r2,r2,r16
    a54c:	14000236 	bltu	r2,r16,a558 <__umoddi3+0x240>
    a550:	1440012e 	bgeu	r2,r17,a558 <__umoddi3+0x240>
    a554:	1405883a 	add	r2,r2,r16
    a558:	1445c83a 	sub	r2,r2,r17
    a55c:	1724d83a 	srl	r18,r2,fp
    a560:	0013883a 	mov	r9,zero
    a564:	9011883a 	mov	r8,r18
    a568:	003fa906 	br	a410 <__umoddi3+0xf8>
    a56c:	00804034 	movhi	r2,256
    a570:	10bfffc4 	addi	r2,r2,-1
    a574:	1400b036 	bltu	r2,r16,a838 <__umoddi3+0x520>
    a578:	01400404 	movi	r5,16
    a57c:	2805883a 	mov	r2,r5
    a580:	003f7c06 	br	a374 <__umoddi3+0x5c>
    a584:	01000044 	movi	r4,1
    a588:	000b883a 	mov	r5,zero
    a58c:	000bb300 	call	bb30 <__udivsi3>
    a590:	1021883a 	mov	r16,r2
    a594:	00bfffd4 	movui	r2,65535
    a598:	143ff436 	bltu	r2,r16,a56c <__umoddi3+0x254>
    a59c:	003f7106 	br	a364 <__umoddi3+0x4c>
    a5a0:	00804034 	movhi	r2,256
    a5a4:	10bfffc4 	addi	r2,r2,-1
    a5a8:	1180af36 	bltu	r2,r6,a868 <__umoddi3+0x550>
    a5ac:	01400404 	movi	r5,16
    a5b0:	2805883a 	mov	r2,r5
    a5b4:	003fbe06 	br	a4b0 <__umoddi3+0x198>
    a5b8:	00804034 	movhi	r2,256
    a5bc:	10bfffc4 	addi	r2,r2,-1
    a5c0:	11c0ac36 	bltu	r2,r7,a874 <__umoddi3+0x55c>
    a5c4:	01400404 	movi	r5,16
    a5c8:	2805883a 	mov	r2,r5
    a5cc:	003fa406 	br	a460 <__umoddi3+0x148>
    a5d0:	b409c83a 	sub	r4,r22,r16
    a5d4:	b105803a 	cmpltu	r2,r22,r4
    a5d8:	a187c83a 	sub	r3,r20,r6
    a5dc:	18a9c83a 	sub	r20,r3,r2
    a5e0:	202d883a 	mov	r22,r4
    a5e4:	003fa906 	br	a48c <__umoddi3+0x174>
    a5e8:	85e0983a 	sll	r16,r16,r23
    a5ec:	35c5c83a 	sub	r2,r6,r23
    a5f0:	a0a2d83a 	srl	r17,r20,r2
    a5f4:	802ad43a 	srli	r21,r16,16
    a5f8:	b084d83a 	srl	r2,r22,r2
    a5fc:	a5c6983a 	sll	r3,r20,r23
    a600:	8809883a 	mov	r4,r17
    a604:	a80b883a 	mov	r5,r21
    a608:	1886b03a 	or	r3,r3,r2
    a60c:	d8c00115 	stw	r3,4(sp)
    a610:	853fffcc 	andi	r20,r16,65535
    a614:	000bb300 	call	bb30 <__udivsi3>
    a618:	8809883a 	mov	r4,r17
    a61c:	a80b883a 	mov	r5,r21
    a620:	a0a3383a 	mul	r17,r20,r2
    a624:	000bb380 	call	bb38 <__umodsi3>
    a628:	d9000117 	ldw	r4,4(sp)
    a62c:	1004943a 	slli	r2,r2,16
    a630:	b839883a 	mov	fp,r23
    a634:	2006d43a 	srli	r3,r4,16
    a638:	10c4b03a 	or	r2,r2,r3
    a63c:	1440022e 	bgeu	r2,r17,a648 <__umoddi3+0x330>
    a640:	1405883a 	add	r2,r2,r16
    a644:	1400962e 	bgeu	r2,r16,a8a0 <__umoddi3+0x588>
    a648:	1463c83a 	sub	r17,r2,r17
    a64c:	8809883a 	mov	r4,r17
    a650:	a80b883a 	mov	r5,r21
    a654:	000bb300 	call	bb30 <__udivsi3>
    a658:	8809883a 	mov	r4,r17
    a65c:	a80b883a 	mov	r5,r21
    a660:	a0a3383a 	mul	r17,r20,r2
    a664:	000bb380 	call	bb38 <__umodsi3>
    a668:	d9400117 	ldw	r5,4(sp)
    a66c:	1004943a 	slli	r2,r2,16
    a670:	28ffffcc 	andi	r3,r5,65535
    a674:	10c4b03a 	or	r2,r2,r3
    a678:	1440042e 	bgeu	r2,r17,a68c <__umoddi3+0x374>
    a67c:	1405883a 	add	r2,r2,r16
    a680:	14000236 	bltu	r2,r16,a68c <__umoddi3+0x374>
    a684:	1440012e 	bgeu	r2,r17,a68c <__umoddi3+0x374>
    a688:	1405883a 	add	r2,r2,r16
    a68c:	b5ec983a 	sll	r22,r22,r23
    a690:	1463c83a 	sub	r17,r2,r17
    a694:	003f4406 	br	a3a8 <__umoddi3+0x90>
    a698:	3d4fc83a 	sub	r7,r7,r21
    a69c:	3546983a 	sll	r3,r6,r21
    a6a0:	81c4d83a 	srl	r2,r16,r7
    a6a4:	a1e2d83a 	srl	r17,r20,r7
    a6a8:	a54c983a 	sll	r6,r20,r21
    a6ac:	18aeb03a 	or	r23,r3,r2
    a6b0:	b828d43a 	srli	r20,r23,16
    a6b4:	b1c4d83a 	srl	r2,r22,r7
    a6b8:	8809883a 	mov	r4,r17
    a6bc:	a00b883a 	mov	r5,r20
    a6c0:	308cb03a 	or	r6,r6,r2
    a6c4:	d9c00315 	stw	r7,12(sp)
    a6c8:	d9800215 	stw	r6,8(sp)
    a6cc:	000bb300 	call	bb30 <__udivsi3>
    a6d0:	8809883a 	mov	r4,r17
    a6d4:	a00b883a 	mov	r5,r20
    a6d8:	1039883a 	mov	fp,r2
    a6dc:	000bb380 	call	bb38 <__umodsi3>
    a6e0:	b8ffffcc 	andi	r3,r23,65535
    a6e4:	d8c00415 	stw	r3,16(sp)
    a6e8:	d9000217 	ldw	r4,8(sp)
    a6ec:	d9400417 	ldw	r5,16(sp)
    a6f0:	1004943a 	slli	r2,r2,16
    a6f4:	2006d43a 	srli	r3,r4,16
    a6f8:	8560983a 	sll	r16,r16,r21
    a6fc:	2f23383a 	mul	r17,r5,fp
    a700:	10c4b03a 	or	r2,r2,r3
    a704:	dc000015 	stw	r16,0(sp)
    a708:	b56c983a 	sll	r22,r22,r21
    a70c:	1440032e 	bgeu	r2,r17,a71c <__umoddi3+0x404>
    a710:	15c5883a 	add	r2,r2,r23
    a714:	e73fffc4 	addi	fp,fp,-1
    a718:	15c05d2e 	bgeu	r2,r23,a890 <__umoddi3+0x578>
    a71c:	1463c83a 	sub	r17,r2,r17
    a720:	8809883a 	mov	r4,r17
    a724:	a00b883a 	mov	r5,r20
    a728:	000bb300 	call	bb30 <__udivsi3>
    a72c:	8809883a 	mov	r4,r17
    a730:	a00b883a 	mov	r5,r20
    a734:	1021883a 	mov	r16,r2
    a738:	000bb380 	call	bb38 <__umodsi3>
    a73c:	d8c00417 	ldw	r3,16(sp)
    a740:	d9000217 	ldw	r4,8(sp)
    a744:	1004943a 	slli	r2,r2,16
    a748:	1c23383a 	mul	r17,r3,r16
    a74c:	20ffffcc 	andi	r3,r4,65535
    a750:	10ceb03a 	or	r7,r2,r3
    a754:	3c40032e 	bgeu	r7,r17,a764 <__umoddi3+0x44c>
    a758:	3dcf883a 	add	r7,r7,r23
    a75c:	843fffc4 	addi	r16,r16,-1
    a760:	3dc0472e 	bgeu	r7,r23,a880 <__umoddi3+0x568>
    a764:	e004943a 	slli	r2,fp,16
    a768:	d9400017 	ldw	r5,0(sp)
    a76c:	3c4fc83a 	sub	r7,r7,r17
    a770:	8084b03a 	or	r2,r16,r2
    a774:	28ffffcc 	andi	r3,r5,65535
    a778:	280cd43a 	srli	r6,r5,16
    a77c:	100ad43a 	srli	r5,r2,16
    a780:	10bfffcc 	andi	r2,r2,65535
    a784:	10d1383a 	mul	r8,r2,r3
    a788:	28c7383a 	mul	r3,r5,r3
    a78c:	1185383a 	mul	r2,r2,r6
    a790:	4008d43a 	srli	r4,r8,16
    a794:	298b383a 	mul	r5,r5,r6
    a798:	10c5883a 	add	r2,r2,r3
    a79c:	2089883a 	add	r4,r4,r2
    a7a0:	20c0022e 	bgeu	r4,r3,a7ac <__umoddi3+0x494>
    a7a4:	00800074 	movhi	r2,1
    a7a8:	288b883a 	add	r5,r5,r2
    a7ac:	2004d43a 	srli	r2,r4,16
    a7b0:	2008943a 	slli	r4,r4,16
    a7b4:	40ffffcc 	andi	r3,r8,65535
    a7b8:	288b883a 	add	r5,r5,r2
    a7bc:	20c9883a 	add	r4,r4,r3
    a7c0:	39400b36 	bltu	r7,r5,a7f0 <__umoddi3+0x4d8>
    a7c4:	39403d26 	beq	r7,r5,a8bc <__umoddi3+0x5a4>
    a7c8:	394bc83a 	sub	r5,r7,r5
    a7cc:	00000f06 	br	a80c <__umoddi3+0x4f4>
    a7d0:	30c5c83a 	sub	r2,r6,r3
    a7d4:	1839883a 	mov	fp,r3
    a7d8:	b084d83a 	srl	r2,r22,r2
    a7dc:	a0c6983a 	sll	r3,r20,r3
    a7e0:	8720983a 	sll	r16,r16,fp
    a7e4:	b72c983a 	sll	r22,r22,fp
    a7e8:	18a8b03a 	or	r20,r3,r2
    a7ec:	003f3a06 	br	a4d8 <__umoddi3+0x1c0>
    a7f0:	d8c00017 	ldw	r3,0(sp)
    a7f4:	20c5c83a 	sub	r2,r4,r3
    a7f8:	2089803a 	cmpltu	r4,r4,r2
    a7fc:	2dc7c83a 	sub	r3,r5,r23
    a800:	1907c83a 	sub	r3,r3,r4
    a804:	38cbc83a 	sub	r5,r7,r3
    a808:	1009883a 	mov	r4,r2
    a80c:	b105c83a 	sub	r2,r22,r4
    a810:	b087803a 	cmpltu	r3,r22,r2
    a814:	28c7c83a 	sub	r3,r5,r3
    a818:	d9400317 	ldw	r5,12(sp)
    a81c:	1544d83a 	srl	r2,r2,r21
    a820:	1948983a 	sll	r4,r3,r5
    a824:	1d46d83a 	srl	r3,r3,r21
    a828:	20a4b03a 	or	r18,r4,r2
    a82c:	9011883a 	mov	r8,r18
    a830:	1813883a 	mov	r9,r3
    a834:	003ef606 	br	a410 <__umoddi3+0xf8>
    a838:	01400604 	movi	r5,24
    a83c:	2805883a 	mov	r2,r5
    a840:	003ecc06 	br	a374 <__umoddi3+0x5c>
    a844:	01400204 	movi	r5,8
    a848:	2805883a 	mov	r2,r5
    a84c:	003ec906 	br	a374 <__umoddi3+0x5c>
    a850:	01400204 	movi	r5,8
    a854:	2805883a 	mov	r2,r5
    a858:	003f0106 	br	a460 <__umoddi3+0x148>
    a85c:	01400204 	movi	r5,8
    a860:	2805883a 	mov	r2,r5
    a864:	003f1206 	br	a4b0 <__umoddi3+0x198>
    a868:	01400604 	movi	r5,24
    a86c:	2805883a 	mov	r2,r5
    a870:	003f0f06 	br	a4b0 <__umoddi3+0x198>
    a874:	01400604 	movi	r5,24
    a878:	2805883a 	mov	r2,r5
    a87c:	003ef806 	br	a460 <__umoddi3+0x148>
    a880:	3c7fb82e 	bgeu	r7,r17,a764 <__umoddi3+0x44c>
    a884:	843fffc4 	addi	r16,r16,-1
    a888:	3dcf883a 	add	r7,r7,r23
    a88c:	003fb506 	br	a764 <__umoddi3+0x44c>
    a890:	147fa22e 	bgeu	r2,r17,a71c <__umoddi3+0x404>
    a894:	e73fffc4 	addi	fp,fp,-1
    a898:	15c5883a 	add	r2,r2,r23
    a89c:	003f9f06 	br	a71c <__umoddi3+0x404>
    a8a0:	147f692e 	bgeu	r2,r17,a648 <__umoddi3+0x330>
    a8a4:	1405883a 	add	r2,r2,r16
    a8a8:	003f6706 	br	a648 <__umoddi3+0x330>
    a8ac:	1405883a 	add	r2,r2,r16
    a8b0:	003f1906 	br	a518 <__umoddi3+0x200>
    a8b4:	1405883a 	add	r2,r2,r16
    a8b8:	003ec906 	br	a3e0 <__umoddi3+0xc8>
    a8bc:	b13fcc36 	bltu	r22,r4,a7f0 <__umoddi3+0x4d8>
    a8c0:	000b883a 	mov	r5,zero
    a8c4:	003fd106 	br	a80c <__umoddi3+0x4f4>

0000a8c8 <_fpadd_parts>:
    a8c8:	defff804 	addi	sp,sp,-32
    a8cc:	dcc00315 	stw	r19,12(sp)
    a8d0:	2027883a 	mov	r19,r4
    a8d4:	21000017 	ldw	r4,0(r4)
    a8d8:	00c00044 	movi	r3,1
    a8dc:	dd400515 	stw	r21,20(sp)
    a8e0:	dd000415 	stw	r20,16(sp)
    a8e4:	ddc00715 	stw	r23,28(sp)
    a8e8:	dd800615 	stw	r22,24(sp)
    a8ec:	dc800215 	stw	r18,8(sp)
    a8f0:	dc400115 	stw	r17,4(sp)
    a8f4:	dc000015 	stw	r16,0(sp)
    a8f8:	282b883a 	mov	r21,r5
    a8fc:	3029883a 	mov	r20,r6
    a900:	1900632e 	bgeu	r3,r4,aa90 <_fpadd_parts+0x1c8>
    a904:	28800017 	ldw	r2,0(r5)
    a908:	1880812e 	bgeu	r3,r2,ab10 <_fpadd_parts+0x248>
    a90c:	00c00104 	movi	r3,4
    a910:	20c0dc26 	beq	r4,r3,ac84 <_fpadd_parts+0x3bc>
    a914:	10c07e26 	beq	r2,r3,ab10 <_fpadd_parts+0x248>
    a918:	00c00084 	movi	r3,2
    a91c:	10c06726 	beq	r2,r3,aabc <_fpadd_parts+0x1f4>
    a920:	20c07b26 	beq	r4,r3,ab10 <_fpadd_parts+0x248>
    a924:	9dc00217 	ldw	r23,8(r19)
    a928:	28c00217 	ldw	r3,8(r5)
    a92c:	9c400317 	ldw	r17,12(r19)
    a930:	2bc00317 	ldw	r15,12(r5)
    a934:	b8cdc83a 	sub	r6,r23,r3
    a938:	9c800417 	ldw	r18,16(r19)
    a93c:	2c000417 	ldw	r16,16(r5)
    a940:	3009883a 	mov	r4,r6
    a944:	30009716 	blt	r6,zero,aba4 <_fpadd_parts+0x2dc>
    a948:	00800fc4 	movi	r2,63
    a94c:	11806b16 	blt	r2,r6,aafc <_fpadd_parts+0x234>
    a950:	0100a40e 	bge	zero,r4,abe4 <_fpadd_parts+0x31c>
    a954:	35bff804 	addi	r22,r6,-32
    a958:	b000bc16 	blt	r22,zero,ac4c <_fpadd_parts+0x384>
    a95c:	8596d83a 	srl	r11,r16,r22
    a960:	0019883a 	mov	r12,zero
    a964:	0013883a 	mov	r9,zero
    a968:	01000044 	movi	r4,1
    a96c:	0015883a 	mov	r10,zero
    a970:	b000be16 	blt	r22,zero,ac6c <_fpadd_parts+0x3a4>
    a974:	2590983a 	sll	r8,r4,r22
    a978:	000f883a 	mov	r7,zero
    a97c:	00bfffc4 	movi	r2,-1
    a980:	3889883a 	add	r4,r7,r2
    a984:	408b883a 	add	r5,r8,r2
    a988:	21cd803a 	cmpltu	r6,r4,r7
    a98c:	314b883a 	add	r5,r6,r5
    a990:	7904703a 	and	r2,r15,r4
    a994:	8146703a 	and	r3,r16,r5
    a998:	10c4b03a 	or	r2,r2,r3
    a99c:	10000226 	beq	r2,zero,a9a8 <_fpadd_parts+0xe0>
    a9a0:	02400044 	movi	r9,1
    a9a4:	0015883a 	mov	r10,zero
    a9a8:	5a5eb03a 	or	r15,r11,r9
    a9ac:	62a0b03a 	or	r16,r12,r10
    a9b0:	99400117 	ldw	r5,4(r19)
    a9b4:	a8800117 	ldw	r2,4(r21)
    a9b8:	28806e26 	beq	r5,r2,ab74 <_fpadd_parts+0x2ac>
    a9bc:	28006626 	beq	r5,zero,ab58 <_fpadd_parts+0x290>
    a9c0:	7c45c83a 	sub	r2,r15,r17
    a9c4:	7889803a 	cmpltu	r4,r15,r2
    a9c8:	8487c83a 	sub	r3,r16,r18
    a9cc:	1909c83a 	sub	r4,r3,r4
    a9d0:	100d883a 	mov	r6,r2
    a9d4:	200f883a 	mov	r7,r4
    a9d8:	38007716 	blt	r7,zero,abb8 <_fpadd_parts+0x2f0>
    a9dc:	a5c00215 	stw	r23,8(r20)
    a9e0:	a1c00415 	stw	r7,16(r20)
    a9e4:	a0000115 	stw	zero,4(r20)
    a9e8:	a1800315 	stw	r6,12(r20)
    a9ec:	a2000317 	ldw	r8,12(r20)
    a9f0:	a2400417 	ldw	r9,16(r20)
    a9f4:	00bfffc4 	movi	r2,-1
    a9f8:	408b883a 	add	r5,r8,r2
    a9fc:	2a09803a 	cmpltu	r4,r5,r8
    aa00:	488d883a 	add	r6,r9,r2
    aa04:	01c40034 	movhi	r7,4096
    aa08:	39ffffc4 	addi	r7,r7,-1
    aa0c:	218d883a 	add	r6,r4,r6
    aa10:	39801736 	bltu	r7,r6,aa70 <_fpadd_parts+0x1a8>
    aa14:	31c06526 	beq	r6,r7,abac <_fpadd_parts+0x2e4>
    aa18:	a3000217 	ldw	r12,8(r20)
    aa1c:	4209883a 	add	r4,r8,r8
    aa20:	00bfffc4 	movi	r2,-1
    aa24:	220f803a 	cmpltu	r7,r4,r8
    aa28:	4a4b883a 	add	r5,r9,r9
    aa2c:	394f883a 	add	r7,r7,r5
    aa30:	2095883a 	add	r10,r4,r2
    aa34:	3897883a 	add	r11,r7,r2
    aa38:	510d803a 	cmpltu	r6,r10,r4
    aa3c:	6099883a 	add	r12,r12,r2
    aa40:	32d7883a 	add	r11,r6,r11
    aa44:	00840034 	movhi	r2,4096
    aa48:	10bfffc4 	addi	r2,r2,-1
    aa4c:	2011883a 	mov	r8,r4
    aa50:	3813883a 	mov	r9,r7
    aa54:	a1000315 	stw	r4,12(r20)
    aa58:	a1c00415 	stw	r7,16(r20)
    aa5c:	a3000215 	stw	r12,8(r20)
    aa60:	12c00336 	bltu	r2,r11,aa70 <_fpadd_parts+0x1a8>
    aa64:	58bfed1e 	bne	r11,r2,aa1c <_fpadd_parts+0x154>
    aa68:	00bfff84 	movi	r2,-2
    aa6c:	12bfeb2e 	bgeu	r2,r10,aa1c <_fpadd_parts+0x154>
    aa70:	a2800417 	ldw	r10,16(r20)
    aa74:	008000c4 	movi	r2,3
    aa78:	00c80034 	movhi	r3,8192
    aa7c:	18ffffc4 	addi	r3,r3,-1
    aa80:	a2400317 	ldw	r9,12(r20)
    aa84:	a0800015 	stw	r2,0(r20)
    aa88:	1a802336 	bltu	r3,r10,ab18 <_fpadd_parts+0x250>
    aa8c:	a027883a 	mov	r19,r20
    aa90:	9805883a 	mov	r2,r19
    aa94:	ddc00717 	ldw	r23,28(sp)
    aa98:	dd800617 	ldw	r22,24(sp)
    aa9c:	dd400517 	ldw	r21,20(sp)
    aaa0:	dd000417 	ldw	r20,16(sp)
    aaa4:	dcc00317 	ldw	r19,12(sp)
    aaa8:	dc800217 	ldw	r18,8(sp)
    aaac:	dc400117 	ldw	r17,4(sp)
    aab0:	dc000017 	ldw	r16,0(sp)
    aab4:	dec00804 	addi	sp,sp,32
    aab8:	f800283a 	ret
    aabc:	20fff41e 	bne	r4,r3,aa90 <_fpadd_parts+0x1c8>
    aac0:	31000015 	stw	r4,0(r6)
    aac4:	98800117 	ldw	r2,4(r19)
    aac8:	30800115 	stw	r2,4(r6)
    aacc:	98c00217 	ldw	r3,8(r19)
    aad0:	30c00215 	stw	r3,8(r6)
    aad4:	98800317 	ldw	r2,12(r19)
    aad8:	30800315 	stw	r2,12(r6)
    aadc:	98c00417 	ldw	r3,16(r19)
    aae0:	30c00415 	stw	r3,16(r6)
    aae4:	98800117 	ldw	r2,4(r19)
    aae8:	28c00117 	ldw	r3,4(r5)
    aaec:	3027883a 	mov	r19,r6
    aaf0:	10c4703a 	and	r2,r2,r3
    aaf4:	30800115 	stw	r2,4(r6)
    aaf8:	003fe506 	br	aa90 <_fpadd_parts+0x1c8>
    aafc:	1dc02616 	blt	r3,r23,ab98 <_fpadd_parts+0x2d0>
    ab00:	0023883a 	mov	r17,zero
    ab04:	182f883a 	mov	r23,r3
    ab08:	0025883a 	mov	r18,zero
    ab0c:	003fa806 	br	a9b0 <_fpadd_parts+0xe8>
    ab10:	a827883a 	mov	r19,r21
    ab14:	003fde06 	br	aa90 <_fpadd_parts+0x1c8>
    ab18:	01800044 	movi	r6,1
    ab1c:	500497fa 	slli	r2,r10,31
    ab20:	4808d07a 	srli	r4,r9,1
    ab24:	518ad83a 	srl	r5,r10,r6
    ab28:	a2000217 	ldw	r8,8(r20)
    ab2c:	1108b03a 	or	r4,r2,r4
    ab30:	0007883a 	mov	r3,zero
    ab34:	4984703a 	and	r2,r9,r6
    ab38:	208cb03a 	or	r6,r4,r2
    ab3c:	28ceb03a 	or	r7,r5,r3
    ab40:	42000044 	addi	r8,r8,1
    ab44:	a027883a 	mov	r19,r20
    ab48:	a1c00415 	stw	r7,16(r20)
    ab4c:	a2000215 	stw	r8,8(r20)
    ab50:	a1800315 	stw	r6,12(r20)
    ab54:	003fce06 	br	aa90 <_fpadd_parts+0x1c8>
    ab58:	8bc5c83a 	sub	r2,r17,r15
    ab5c:	8889803a 	cmpltu	r4,r17,r2
    ab60:	9407c83a 	sub	r3,r18,r16
    ab64:	1909c83a 	sub	r4,r3,r4
    ab68:	100d883a 	mov	r6,r2
    ab6c:	200f883a 	mov	r7,r4
    ab70:	003f9906 	br	a9d8 <_fpadd_parts+0x110>
    ab74:	7c45883a 	add	r2,r15,r17
    ab78:	13c9803a 	cmpltu	r4,r2,r15
    ab7c:	8487883a 	add	r3,r16,r18
    ab80:	20c9883a 	add	r4,r4,r3
    ab84:	a1400115 	stw	r5,4(r20)
    ab88:	a5c00215 	stw	r23,8(r20)
    ab8c:	a0800315 	stw	r2,12(r20)
    ab90:	a1000415 	stw	r4,16(r20)
    ab94:	003fb606 	br	aa70 <_fpadd_parts+0x1a8>
    ab98:	001f883a 	mov	r15,zero
    ab9c:	0021883a 	mov	r16,zero
    aba0:	003f8306 	br	a9b0 <_fpadd_parts+0xe8>
    aba4:	018dc83a 	sub	r6,zero,r6
    aba8:	003f6706 	br	a948 <_fpadd_parts+0x80>
    abac:	00bfff84 	movi	r2,-2
    abb0:	117faf36 	bltu	r2,r5,aa70 <_fpadd_parts+0x1a8>
    abb4:	003f9806 	br	aa18 <_fpadd_parts+0x150>
    abb8:	0005883a 	mov	r2,zero
    abbc:	1189c83a 	sub	r4,r2,r6
    abc0:	1105803a 	cmpltu	r2,r2,r4
    abc4:	01cbc83a 	sub	r5,zero,r7
    abc8:	2885c83a 	sub	r2,r5,r2
    abcc:	01800044 	movi	r6,1
    abd0:	a1800115 	stw	r6,4(r20)
    abd4:	a5c00215 	stw	r23,8(r20)
    abd8:	a1000315 	stw	r4,12(r20)
    abdc:	a0800415 	stw	r2,16(r20)
    abe0:	003f8206 	br	a9ec <_fpadd_parts+0x124>
    abe4:	203f7226 	beq	r4,zero,a9b0 <_fpadd_parts+0xe8>
    abe8:	35bff804 	addi	r22,r6,-32
    abec:	b9af883a 	add	r23,r23,r6
    abf0:	b0003116 	blt	r22,zero,acb8 <_fpadd_parts+0x3f0>
    abf4:	959ad83a 	srl	r13,r18,r22
    abf8:	001d883a 	mov	r14,zero
    abfc:	000f883a 	mov	r7,zero
    ac00:	01000044 	movi	r4,1
    ac04:	0011883a 	mov	r8,zero
    ac08:	b0002516 	blt	r22,zero,aca0 <_fpadd_parts+0x3d8>
    ac0c:	2594983a 	sll	r10,r4,r22
    ac10:	0013883a 	mov	r9,zero
    ac14:	00bfffc4 	movi	r2,-1
    ac18:	4889883a 	add	r4,r9,r2
    ac1c:	508b883a 	add	r5,r10,r2
    ac20:	224d803a 	cmpltu	r6,r4,r9
    ac24:	314b883a 	add	r5,r6,r5
    ac28:	8904703a 	and	r2,r17,r4
    ac2c:	9146703a 	and	r3,r18,r5
    ac30:	10c4b03a 	or	r2,r2,r3
    ac34:	10000226 	beq	r2,zero,ac40 <_fpadd_parts+0x378>
    ac38:	01c00044 	movi	r7,1
    ac3c:	0011883a 	mov	r8,zero
    ac40:	69e2b03a 	or	r17,r13,r7
    ac44:	7224b03a 	or	r18,r14,r8
    ac48:	003f5906 	br	a9b0 <_fpadd_parts+0xe8>
    ac4c:	8407883a 	add	r3,r16,r16
    ac50:	008007c4 	movi	r2,31
    ac54:	1185c83a 	sub	r2,r2,r6
    ac58:	1886983a 	sll	r3,r3,r2
    ac5c:	7996d83a 	srl	r11,r15,r6
    ac60:	8198d83a 	srl	r12,r16,r6
    ac64:	1ad6b03a 	or	r11,r3,r11
    ac68:	003f3e06 	br	a964 <_fpadd_parts+0x9c>
    ac6c:	2006d07a 	srli	r3,r4,1
    ac70:	008007c4 	movi	r2,31
    ac74:	1185c83a 	sub	r2,r2,r6
    ac78:	1890d83a 	srl	r8,r3,r2
    ac7c:	218e983a 	sll	r7,r4,r6
    ac80:	003f3e06 	br	a97c <_fpadd_parts+0xb4>
    ac84:	113f821e 	bne	r2,r4,aa90 <_fpadd_parts+0x1c8>
    ac88:	28c00117 	ldw	r3,4(r5)
    ac8c:	98800117 	ldw	r2,4(r19)
    ac90:	10ff7f26 	beq	r2,r3,aa90 <_fpadd_parts+0x1c8>
    ac94:	04c00074 	movhi	r19,1
    ac98:	9cc8ff04 	addi	r19,r19,9212
    ac9c:	003f7c06 	br	aa90 <_fpadd_parts+0x1c8>
    aca0:	2006d07a 	srli	r3,r4,1
    aca4:	008007c4 	movi	r2,31
    aca8:	1185c83a 	sub	r2,r2,r6
    acac:	1894d83a 	srl	r10,r3,r2
    acb0:	2192983a 	sll	r9,r4,r6
    acb4:	003fd706 	br	ac14 <_fpadd_parts+0x34c>
    acb8:	9487883a 	add	r3,r18,r18
    acbc:	008007c4 	movi	r2,31
    acc0:	1185c83a 	sub	r2,r2,r6
    acc4:	1886983a 	sll	r3,r3,r2
    acc8:	899ad83a 	srl	r13,r17,r6
    accc:	919cd83a 	srl	r14,r18,r6
    acd0:	1b5ab03a 	or	r13,r3,r13
    acd4:	003fc906 	br	abfc <_fpadd_parts+0x334>

0000acd8 <__subdf3>:
    acd8:	deffea04 	addi	sp,sp,-88
    acdc:	dcc01415 	stw	r19,80(sp)
    ace0:	dcc00404 	addi	r19,sp,16
    ace4:	2011883a 	mov	r8,r4
    ace8:	2813883a 	mov	r9,r5
    acec:	dc401315 	stw	r17,76(sp)
    acf0:	d809883a 	mov	r4,sp
    acf4:	980b883a 	mov	r5,r19
    acf8:	dc400904 	addi	r17,sp,36
    acfc:	dfc01515 	stw	ra,84(sp)
    ad00:	da400115 	stw	r9,4(sp)
    ad04:	d9c00315 	stw	r7,12(sp)
    ad08:	da000015 	stw	r8,0(sp)
    ad0c:	d9800215 	stw	r6,8(sp)
    ad10:	000bbd80 	call	bbd8 <__unpack_d>
    ad14:	d9000204 	addi	r4,sp,8
    ad18:	880b883a 	mov	r5,r17
    ad1c:	000bbd80 	call	bbd8 <__unpack_d>
    ad20:	d8800a17 	ldw	r2,40(sp)
    ad24:	880b883a 	mov	r5,r17
    ad28:	9809883a 	mov	r4,r19
    ad2c:	d9800e04 	addi	r6,sp,56
    ad30:	1080005c 	xori	r2,r2,1
    ad34:	d8800a15 	stw	r2,40(sp)
    ad38:	000a8c80 	call	a8c8 <_fpadd_parts>
    ad3c:	1009883a 	mov	r4,r2
    ad40:	00027c80 	call	27c8 <__pack_d>
    ad44:	dfc01517 	ldw	ra,84(sp)
    ad48:	dcc01417 	ldw	r19,80(sp)
    ad4c:	dc401317 	ldw	r17,76(sp)
    ad50:	dec01604 	addi	sp,sp,88
    ad54:	f800283a 	ret

0000ad58 <__adddf3>:
    ad58:	deffea04 	addi	sp,sp,-88
    ad5c:	dcc01415 	stw	r19,80(sp)
    ad60:	dcc00404 	addi	r19,sp,16
    ad64:	2011883a 	mov	r8,r4
    ad68:	2813883a 	mov	r9,r5
    ad6c:	dc401315 	stw	r17,76(sp)
    ad70:	d809883a 	mov	r4,sp
    ad74:	980b883a 	mov	r5,r19
    ad78:	dc400904 	addi	r17,sp,36
    ad7c:	dfc01515 	stw	ra,84(sp)
    ad80:	da400115 	stw	r9,4(sp)
    ad84:	d9c00315 	stw	r7,12(sp)
    ad88:	da000015 	stw	r8,0(sp)
    ad8c:	d9800215 	stw	r6,8(sp)
    ad90:	000bbd80 	call	bbd8 <__unpack_d>
    ad94:	d9000204 	addi	r4,sp,8
    ad98:	880b883a 	mov	r5,r17
    ad9c:	000bbd80 	call	bbd8 <__unpack_d>
    ada0:	d9800e04 	addi	r6,sp,56
    ada4:	9809883a 	mov	r4,r19
    ada8:	880b883a 	mov	r5,r17
    adac:	000a8c80 	call	a8c8 <_fpadd_parts>
    adb0:	1009883a 	mov	r4,r2
    adb4:	00027c80 	call	27c8 <__pack_d>
    adb8:	dfc01517 	ldw	ra,84(sp)
    adbc:	dcc01417 	ldw	r19,80(sp)
    adc0:	dc401317 	ldw	r17,76(sp)
    adc4:	dec01604 	addi	sp,sp,88
    adc8:	f800283a 	ret

0000adcc <__muldf3>:
    adcc:	deffe004 	addi	sp,sp,-128
    add0:	dc401815 	stw	r17,96(sp)
    add4:	dc400404 	addi	r17,sp,16
    add8:	2011883a 	mov	r8,r4
    addc:	2813883a 	mov	r9,r5
    ade0:	dc001715 	stw	r16,92(sp)
    ade4:	d809883a 	mov	r4,sp
    ade8:	880b883a 	mov	r5,r17
    adec:	dc000904 	addi	r16,sp,36
    adf0:	dfc01f15 	stw	ra,124(sp)
    adf4:	da400115 	stw	r9,4(sp)
    adf8:	d9c00315 	stw	r7,12(sp)
    adfc:	da000015 	stw	r8,0(sp)
    ae00:	d9800215 	stw	r6,8(sp)
    ae04:	ddc01e15 	stw	r23,120(sp)
    ae08:	dd801d15 	stw	r22,116(sp)
    ae0c:	dd401c15 	stw	r21,112(sp)
    ae10:	dd001b15 	stw	r20,108(sp)
    ae14:	dcc01a15 	stw	r19,104(sp)
    ae18:	dc801915 	stw	r18,100(sp)
    ae1c:	000bbd80 	call	bbd8 <__unpack_d>
    ae20:	d9000204 	addi	r4,sp,8
    ae24:	800b883a 	mov	r5,r16
    ae28:	000bbd80 	call	bbd8 <__unpack_d>
    ae2c:	d9000417 	ldw	r4,16(sp)
    ae30:	00800044 	movi	r2,1
    ae34:	1100102e 	bgeu	r2,r4,ae78 <__muldf3+0xac>
    ae38:	d8c00917 	ldw	r3,36(sp)
    ae3c:	10c0062e 	bgeu	r2,r3,ae58 <__muldf3+0x8c>
    ae40:	00800104 	movi	r2,4
    ae44:	20800a26 	beq	r4,r2,ae70 <__muldf3+0xa4>
    ae48:	1880cc26 	beq	r3,r2,b17c <__muldf3+0x3b0>
    ae4c:	00800084 	movi	r2,2
    ae50:	20800926 	beq	r4,r2,ae78 <__muldf3+0xac>
    ae54:	1880191e 	bne	r3,r2,aebc <__muldf3+0xf0>
    ae58:	d8c00a17 	ldw	r3,40(sp)
    ae5c:	d8800517 	ldw	r2,20(sp)
    ae60:	8009883a 	mov	r4,r16
    ae64:	10c4c03a 	cmpne	r2,r2,r3
    ae68:	d8800a15 	stw	r2,40(sp)
    ae6c:	00000706 	br	ae8c <__muldf3+0xc0>
    ae70:	00800084 	movi	r2,2
    ae74:	1880c326 	beq	r3,r2,b184 <__muldf3+0x3b8>
    ae78:	d8800517 	ldw	r2,20(sp)
    ae7c:	d8c00a17 	ldw	r3,40(sp)
    ae80:	8809883a 	mov	r4,r17
    ae84:	10c4c03a 	cmpne	r2,r2,r3
    ae88:	d8800515 	stw	r2,20(sp)
    ae8c:	00027c80 	call	27c8 <__pack_d>
    ae90:	dfc01f17 	ldw	ra,124(sp)
    ae94:	ddc01e17 	ldw	r23,120(sp)
    ae98:	dd801d17 	ldw	r22,116(sp)
    ae9c:	dd401c17 	ldw	r21,112(sp)
    aea0:	dd001b17 	ldw	r20,108(sp)
    aea4:	dcc01a17 	ldw	r19,104(sp)
    aea8:	dc801917 	ldw	r18,100(sp)
    aeac:	dc401817 	ldw	r17,96(sp)
    aeb0:	dc001717 	ldw	r16,92(sp)
    aeb4:	dec02004 	addi	sp,sp,128
    aeb8:	f800283a 	ret
    aebc:	dd800717 	ldw	r22,28(sp)
    aec0:	dc800c17 	ldw	r18,48(sp)
    aec4:	002b883a 	mov	r21,zero
    aec8:	0023883a 	mov	r17,zero
    aecc:	a80b883a 	mov	r5,r21
    aed0:	b00d883a 	mov	r6,r22
    aed4:	880f883a 	mov	r7,r17
    aed8:	ddc00817 	ldw	r23,32(sp)
    aedc:	dcc00d17 	ldw	r19,52(sp)
    aee0:	9009883a 	mov	r4,r18
    aee4:	000bb400 	call	bb40 <__muldi3>
    aee8:	001b883a 	mov	r13,zero
    aeec:	680f883a 	mov	r7,r13
    aef0:	b009883a 	mov	r4,r22
    aef4:	000b883a 	mov	r5,zero
    aef8:	980d883a 	mov	r6,r19
    aefc:	b82d883a 	mov	r22,r23
    af00:	002f883a 	mov	r23,zero
    af04:	db401615 	stw	r13,88(sp)
    af08:	d8801315 	stw	r2,76(sp)
    af0c:	d8c01415 	stw	r3,80(sp)
    af10:	dcc01515 	stw	r19,84(sp)
    af14:	000bb400 	call	bb40 <__muldi3>
    af18:	b00d883a 	mov	r6,r22
    af1c:	000b883a 	mov	r5,zero
    af20:	9009883a 	mov	r4,r18
    af24:	b80f883a 	mov	r7,r23
    af28:	1021883a 	mov	r16,r2
    af2c:	1823883a 	mov	r17,r3
    af30:	000bb400 	call	bb40 <__muldi3>
    af34:	8085883a 	add	r2,r16,r2
    af38:	140d803a 	cmpltu	r6,r2,r16
    af3c:	88c7883a 	add	r3,r17,r3
    af40:	30cd883a 	add	r6,r6,r3
    af44:	1029883a 	mov	r20,r2
    af48:	302b883a 	mov	r21,r6
    af4c:	da801317 	ldw	r10,76(sp)
    af50:	dac01417 	ldw	r11,80(sp)
    af54:	db001517 	ldw	r12,84(sp)
    af58:	db401617 	ldw	r13,88(sp)
    af5c:	3440612e 	bgeu	r6,r17,b0e4 <__muldf3+0x318>
    af60:	0009883a 	mov	r4,zero
    af64:	5105883a 	add	r2,r10,r4
    af68:	128d803a 	cmpltu	r6,r2,r10
    af6c:	5d07883a 	add	r3,r11,r20
    af70:	30cd883a 	add	r6,r6,r3
    af74:	0021883a 	mov	r16,zero
    af78:	04400044 	movi	r17,1
    af7c:	1025883a 	mov	r18,r2
    af80:	3027883a 	mov	r19,r6
    af84:	32c06236 	bltu	r6,r11,b110 <__muldf3+0x344>
    af88:	59807a26 	beq	r11,r6,b174 <__muldf3+0x3a8>
    af8c:	680b883a 	mov	r5,r13
    af90:	b80f883a 	mov	r7,r23
    af94:	6009883a 	mov	r4,r12
    af98:	b00d883a 	mov	r6,r22
    af9c:	000bb400 	call	bb40 <__muldi3>
    afa0:	1009883a 	mov	r4,r2
    afa4:	000f883a 	mov	r7,zero
    afa8:	1545883a 	add	r2,r2,r21
    afac:	1111803a 	cmpltu	r8,r2,r4
    afb0:	19c7883a 	add	r3,r3,r7
    afb4:	40c7883a 	add	r3,r8,r3
    afb8:	88cb883a 	add	r5,r17,r3
    afbc:	d8c00617 	ldw	r3,24(sp)
    afc0:	8089883a 	add	r4,r16,r2
    afc4:	d8800b17 	ldw	r2,44(sp)
    afc8:	18c00104 	addi	r3,r3,4
    afcc:	240d803a 	cmpltu	r6,r4,r16
    afd0:	10c7883a 	add	r3,r2,r3
    afd4:	2013883a 	mov	r9,r4
    afd8:	d8800a17 	ldw	r2,40(sp)
    afdc:	d9000517 	ldw	r4,20(sp)
    afe0:	314d883a 	add	r6,r6,r5
    afe4:	3015883a 	mov	r10,r6
    afe8:	2088c03a 	cmpne	r4,r4,r2
    afec:	00880034 	movhi	r2,8192
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	d9000f15 	stw	r4,60(sp)
    aff8:	d8c01015 	stw	r3,64(sp)
    affc:	1180162e 	bgeu	r2,r6,b058 <__muldf3+0x28c>
    b000:	1811883a 	mov	r8,r3
    b004:	101f883a 	mov	r15,r2
    b008:	980497fa 	slli	r2,r19,31
    b00c:	9016d07a 	srli	r11,r18,1
    b010:	500697fa 	slli	r3,r10,31
    b014:	480cd07a 	srli	r6,r9,1
    b018:	500ed07a 	srli	r7,r10,1
    b01c:	12d6b03a 	or	r11,r2,r11
    b020:	00800044 	movi	r2,1
    b024:	198cb03a 	or	r6,r3,r6
    b028:	4888703a 	and	r4,r9,r2
    b02c:	9818d07a 	srli	r12,r19,1
    b030:	001b883a 	mov	r13,zero
    b034:	03a00034 	movhi	r14,32768
    b038:	3013883a 	mov	r9,r6
    b03c:	3815883a 	mov	r10,r7
    b040:	4091883a 	add	r8,r8,r2
    b044:	20000226 	beq	r4,zero,b050 <__muldf3+0x284>
    b048:	5b64b03a 	or	r18,r11,r13
    b04c:	63a6b03a 	or	r19,r12,r14
    b050:	7abfed36 	bltu	r15,r10,b008 <__muldf3+0x23c>
    b054:	da001015 	stw	r8,64(sp)
    b058:	00840034 	movhi	r2,4096
    b05c:	10bfffc4 	addi	r2,r2,-1
    b060:	12801436 	bltu	r2,r10,b0b4 <__muldf3+0x2e8>
    b064:	da001017 	ldw	r8,64(sp)
    b068:	101f883a 	mov	r15,r2
    b06c:	4a45883a 	add	r2,r9,r9
    b070:	124d803a 	cmpltu	r6,r2,r9
    b074:	5287883a 	add	r3,r10,r10
    b078:	9497883a 	add	r11,r18,r18
    b07c:	5c8f803a 	cmpltu	r7,r11,r18
    b080:	9cd9883a 	add	r12,r19,r19
    b084:	01000044 	movi	r4,1
    b088:	30cd883a 	add	r6,r6,r3
    b08c:	3b0f883a 	add	r7,r7,r12
    b090:	423fffc4 	addi	r8,r8,-1
    b094:	1013883a 	mov	r9,r2
    b098:	3015883a 	mov	r10,r6
    b09c:	111ab03a 	or	r13,r2,r4
    b0a0:	98003016 	blt	r19,zero,b164 <__muldf3+0x398>
    b0a4:	5825883a 	mov	r18,r11
    b0a8:	3827883a 	mov	r19,r7
    b0ac:	7abfef2e 	bgeu	r15,r10,b06c <__muldf3+0x2a0>
    b0b0:	da001015 	stw	r8,64(sp)
    b0b4:	00803fc4 	movi	r2,255
    b0b8:	488e703a 	and	r7,r9,r2
    b0bc:	00802004 	movi	r2,128
    b0c0:	0007883a 	mov	r3,zero
    b0c4:	0011883a 	mov	r8,zero
    b0c8:	38801826 	beq	r7,r2,b12c <__muldf3+0x360>
    b0cc:	008000c4 	movi	r2,3
    b0d0:	d9000e04 	addi	r4,sp,56
    b0d4:	da801215 	stw	r10,72(sp)
    b0d8:	d8800e15 	stw	r2,56(sp)
    b0dc:	da401115 	stw	r9,68(sp)
    b0e0:	003f6a06 	br	ae8c <__muldf3+0xc0>
    b0e4:	89802126 	beq	r17,r6,b16c <__muldf3+0x3a0>
    b0e8:	0009883a 	mov	r4,zero
    b0ec:	5105883a 	add	r2,r10,r4
    b0f0:	128d803a 	cmpltu	r6,r2,r10
    b0f4:	5d07883a 	add	r3,r11,r20
    b0f8:	30cd883a 	add	r6,r6,r3
    b0fc:	0021883a 	mov	r16,zero
    b100:	0023883a 	mov	r17,zero
    b104:	1025883a 	mov	r18,r2
    b108:	3027883a 	mov	r19,r6
    b10c:	32ff9e2e 	bgeu	r6,r11,af88 <__muldf3+0x1bc>
    b110:	00800044 	movi	r2,1
    b114:	8089883a 	add	r4,r16,r2
    b118:	240d803a 	cmpltu	r6,r4,r16
    b11c:	344d883a 	add	r6,r6,r17
    b120:	2021883a 	mov	r16,r4
    b124:	3023883a 	mov	r17,r6
    b128:	003f9806 	br	af8c <__muldf3+0x1c0>
    b12c:	403fe71e 	bne	r8,zero,b0cc <__muldf3+0x300>
    b130:	01004004 	movi	r4,256
    b134:	4904703a 	and	r2,r9,r4
    b138:	10c4b03a 	or	r2,r2,r3
    b13c:	103fe31e 	bne	r2,zero,b0cc <__muldf3+0x300>
    b140:	94c4b03a 	or	r2,r18,r19
    b144:	103fe126 	beq	r2,zero,b0cc <__muldf3+0x300>
    b148:	49c5883a 	add	r2,r9,r7
    b14c:	1251803a 	cmpltu	r8,r2,r9
    b150:	4291883a 	add	r8,r8,r10
    b154:	013fc004 	movi	r4,-256
    b158:	1112703a 	and	r9,r2,r4
    b15c:	4015883a 	mov	r10,r8
    b160:	003fda06 	br	b0cc <__muldf3+0x300>
    b164:	6813883a 	mov	r9,r13
    b168:	003fce06 	br	b0a4 <__muldf3+0x2d8>
    b16c:	143f7c36 	bltu	r2,r16,af60 <__muldf3+0x194>
    b170:	003fdd06 	br	b0e8 <__muldf3+0x31c>
    b174:	12bf852e 	bgeu	r2,r10,af8c <__muldf3+0x1c0>
    b178:	003fe506 	br	b110 <__muldf3+0x344>
    b17c:	00800084 	movi	r2,2
    b180:	20bf351e 	bne	r4,r2,ae58 <__muldf3+0x8c>
    b184:	01000074 	movhi	r4,1
    b188:	2108ff04 	addi	r4,r4,9212
    b18c:	003f3f06 	br	ae8c <__muldf3+0xc0>

0000b190 <__divdf3>:
    b190:	deffed04 	addi	sp,sp,-76
    b194:	dcc01115 	stw	r19,68(sp)
    b198:	dcc00404 	addi	r19,sp,16
    b19c:	2011883a 	mov	r8,r4
    b1a0:	2813883a 	mov	r9,r5
    b1a4:	dc000e15 	stw	r16,56(sp)
    b1a8:	d809883a 	mov	r4,sp
    b1ac:	980b883a 	mov	r5,r19
    b1b0:	dc000904 	addi	r16,sp,36
    b1b4:	dfc01215 	stw	ra,72(sp)
    b1b8:	da400115 	stw	r9,4(sp)
    b1bc:	d9c00315 	stw	r7,12(sp)
    b1c0:	da000015 	stw	r8,0(sp)
    b1c4:	d9800215 	stw	r6,8(sp)
    b1c8:	dc801015 	stw	r18,64(sp)
    b1cc:	dc400f15 	stw	r17,60(sp)
    b1d0:	000bbd80 	call	bbd8 <__unpack_d>
    b1d4:	d9000204 	addi	r4,sp,8
    b1d8:	800b883a 	mov	r5,r16
    b1dc:	000bbd80 	call	bbd8 <__unpack_d>
    b1e0:	d9000417 	ldw	r4,16(sp)
    b1e4:	00800044 	movi	r2,1
    b1e8:	11000b2e 	bgeu	r2,r4,b218 <__divdf3+0x88>
    b1ec:	d9400917 	ldw	r5,36(sp)
    b1f0:	1140762e 	bgeu	r2,r5,b3cc <__divdf3+0x23c>
    b1f4:	d8800517 	ldw	r2,20(sp)
    b1f8:	d8c00a17 	ldw	r3,40(sp)
    b1fc:	01800104 	movi	r6,4
    b200:	10c4f03a 	xor	r2,r2,r3
    b204:	d8800515 	stw	r2,20(sp)
    b208:	21800226 	beq	r4,r6,b214 <__divdf3+0x84>
    b20c:	00800084 	movi	r2,2
    b210:	2080141e 	bne	r4,r2,b264 <__divdf3+0xd4>
    b214:	29000926 	beq	r5,r4,b23c <__divdf3+0xac>
    b218:	9809883a 	mov	r4,r19
    b21c:	00027c80 	call	27c8 <__pack_d>
    b220:	dfc01217 	ldw	ra,72(sp)
    b224:	dcc01117 	ldw	r19,68(sp)
    b228:	dc801017 	ldw	r18,64(sp)
    b22c:	dc400f17 	ldw	r17,60(sp)
    b230:	dc000e17 	ldw	r16,56(sp)
    b234:	dec01304 	addi	sp,sp,76
    b238:	f800283a 	ret
    b23c:	01000074 	movhi	r4,1
    b240:	2108ff04 	addi	r4,r4,9212
    b244:	00027c80 	call	27c8 <__pack_d>
    b248:	dfc01217 	ldw	ra,72(sp)
    b24c:	dcc01117 	ldw	r19,68(sp)
    b250:	dc801017 	ldw	r18,64(sp)
    b254:	dc400f17 	ldw	r17,60(sp)
    b258:	dc000e17 	ldw	r16,56(sp)
    b25c:	dec01304 	addi	sp,sp,76
    b260:	f800283a 	ret
    b264:	29805b26 	beq	r5,r6,b3d4 <__divdf3+0x244>
    b268:	28802d26 	beq	r5,r2,b320 <__divdf3+0x190>
    b26c:	d8c00617 	ldw	r3,24(sp)
    b270:	d8800b17 	ldw	r2,44(sp)
    b274:	d9c00817 	ldw	r7,32(sp)
    b278:	dc400d17 	ldw	r17,52(sp)
    b27c:	188bc83a 	sub	r5,r3,r2
    b280:	d9800717 	ldw	r6,28(sp)
    b284:	dc000c17 	ldw	r16,48(sp)
    b288:	d9400615 	stw	r5,24(sp)
    b28c:	3c403836 	bltu	r7,r17,b370 <__divdf3+0x1e0>
    b290:	89c03626 	beq	r17,r7,b36c <__divdf3+0x1dc>
    b294:	0015883a 	mov	r10,zero
    b298:	001d883a 	mov	r14,zero
    b29c:	02c40034 	movhi	r11,4096
    b2a0:	001f883a 	mov	r15,zero
    b2a4:	003f883a 	mov	ra,zero
    b2a8:	04800f44 	movi	r18,61
    b2ac:	00000f06 	br	b2ec <__divdf3+0x15c>
    b2b0:	601d883a 	mov	r14,r12
    b2b4:	681f883a 	mov	r15,r13
    b2b8:	400d883a 	mov	r6,r8
    b2bc:	100f883a 	mov	r7,r2
    b2c0:	3191883a 	add	r8,r6,r6
    b2c4:	5808d07a 	srli	r4,r11,1
    b2c8:	4185803a 	cmpltu	r2,r8,r6
    b2cc:	39d3883a 	add	r9,r7,r7
    b2d0:	28c6b03a 	or	r3,r5,r3
    b2d4:	1245883a 	add	r2,r2,r9
    b2d8:	1815883a 	mov	r10,r3
    b2dc:	2017883a 	mov	r11,r4
    b2e0:	400d883a 	mov	r6,r8
    b2e4:	100f883a 	mov	r7,r2
    b2e8:	fc801726 	beq	ra,r18,b348 <__divdf3+0x1b8>
    b2ec:	580a97fa 	slli	r5,r11,31
    b2f0:	5006d07a 	srli	r3,r10,1
    b2f4:	ffc00044 	addi	ra,ra,1
    b2f8:	3c7ff136 	bltu	r7,r17,b2c0 <__divdf3+0x130>
    b2fc:	3411c83a 	sub	r8,r6,r16
    b300:	3205803a 	cmpltu	r2,r6,r8
    b304:	3c53c83a 	sub	r9,r7,r17
    b308:	7298b03a 	or	r12,r14,r10
    b30c:	7adab03a 	or	r13,r15,r11
    b310:	4885c83a 	sub	r2,r9,r2
    b314:	89ffe61e 	bne	r17,r7,b2b0 <__divdf3+0x120>
    b318:	343fe936 	bltu	r6,r16,b2c0 <__divdf3+0x130>
    b31c:	003fe406 	br	b2b0 <__divdf3+0x120>
    b320:	9809883a 	mov	r4,r19
    b324:	d9800415 	stw	r6,16(sp)
    b328:	00027c80 	call	27c8 <__pack_d>
    b32c:	dfc01217 	ldw	ra,72(sp)
    b330:	dcc01117 	ldw	r19,68(sp)
    b334:	dc801017 	ldw	r18,64(sp)
    b338:	dc400f17 	ldw	r17,60(sp)
    b33c:	dc000e17 	ldw	r16,56(sp)
    b340:	dec01304 	addi	sp,sp,76
    b344:	f800283a 	ret
    b348:	00803fc4 	movi	r2,255
    b34c:	7090703a 	and	r8,r14,r2
    b350:	00802004 	movi	r2,128
    b354:	0007883a 	mov	r3,zero
    b358:	0013883a 	mov	r9,zero
    b35c:	40800d26 	beq	r8,r2,b394 <__divdf3+0x204>
    b360:	dbc00815 	stw	r15,32(sp)
    b364:	db800715 	stw	r14,28(sp)
    b368:	003fab06 	br	b218 <__divdf3+0x88>
    b36c:	343fc92e 	bgeu	r6,r16,b294 <__divdf3+0x104>
    b370:	3185883a 	add	r2,r6,r6
    b374:	1189803a 	cmpltu	r4,r2,r6
    b378:	39c7883a 	add	r3,r7,r7
    b37c:	20c9883a 	add	r4,r4,r3
    b380:	297fffc4 	addi	r5,r5,-1
    b384:	100d883a 	mov	r6,r2
    b388:	200f883a 	mov	r7,r4
    b38c:	d9400615 	stw	r5,24(sp)
    b390:	003fc006 	br	b294 <__divdf3+0x104>
    b394:	483ff21e 	bne	r9,zero,b360 <__divdf3+0x1d0>
    b398:	01004004 	movi	r4,256
    b39c:	7104703a 	and	r2,r14,r4
    b3a0:	10c4b03a 	or	r2,r2,r3
    b3a4:	103fee1e 	bne	r2,zero,b360 <__divdf3+0x1d0>
    b3a8:	31c4b03a 	or	r2,r6,r7
    b3ac:	103fec26 	beq	r2,zero,b360 <__divdf3+0x1d0>
    b3b0:	7205883a 	add	r2,r14,r8
    b3b4:	1391803a 	cmpltu	r8,r2,r14
    b3b8:	43d1883a 	add	r8,r8,r15
    b3bc:	013fc004 	movi	r4,-256
    b3c0:	111c703a 	and	r14,r2,r4
    b3c4:	401f883a 	mov	r15,r8
    b3c8:	003fe506 	br	b360 <__divdf3+0x1d0>
    b3cc:	8009883a 	mov	r4,r16
    b3d0:	003f9206 	br	b21c <__divdf3+0x8c>
    b3d4:	9809883a 	mov	r4,r19
    b3d8:	d8000715 	stw	zero,28(sp)
    b3dc:	d8000815 	stw	zero,32(sp)
    b3e0:	d8000615 	stw	zero,24(sp)
    b3e4:	003f8d06 	br	b21c <__divdf3+0x8c>

0000b3e8 <__eqdf2>:
    b3e8:	deffef04 	addi	sp,sp,-68
    b3ec:	dc400f15 	stw	r17,60(sp)
    b3f0:	dc400404 	addi	r17,sp,16
    b3f4:	2005883a 	mov	r2,r4
    b3f8:	2807883a 	mov	r3,r5
    b3fc:	dc000e15 	stw	r16,56(sp)
    b400:	d809883a 	mov	r4,sp
    b404:	880b883a 	mov	r5,r17
    b408:	dc000904 	addi	r16,sp,36
    b40c:	d8c00115 	stw	r3,4(sp)
    b410:	d8800015 	stw	r2,0(sp)
    b414:	d9800215 	stw	r6,8(sp)
    b418:	dfc01015 	stw	ra,64(sp)
    b41c:	d9c00315 	stw	r7,12(sp)
    b420:	000bbd80 	call	bbd8 <__unpack_d>
    b424:	d9000204 	addi	r4,sp,8
    b428:	800b883a 	mov	r5,r16
    b42c:	000bbd80 	call	bbd8 <__unpack_d>
    b430:	d8800417 	ldw	r2,16(sp)
    b434:	00c00044 	movi	r3,1
    b438:	180d883a 	mov	r6,r3
    b43c:	1880062e 	bgeu	r3,r2,b458 <__eqdf2+0x70>
    b440:	d8800917 	ldw	r2,36(sp)
    b444:	8809883a 	mov	r4,r17
    b448:	800b883a 	mov	r5,r16
    b44c:	1880022e 	bgeu	r3,r2,b458 <__eqdf2+0x70>
    b450:	000bd100 	call	bd10 <__fpcmp_parts_d>
    b454:	100d883a 	mov	r6,r2
    b458:	3005883a 	mov	r2,r6
    b45c:	dfc01017 	ldw	ra,64(sp)
    b460:	dc400f17 	ldw	r17,60(sp)
    b464:	dc000e17 	ldw	r16,56(sp)
    b468:	dec01104 	addi	sp,sp,68
    b46c:	f800283a 	ret

0000b470 <__nedf2>:
    b470:	deffef04 	addi	sp,sp,-68
    b474:	dc400f15 	stw	r17,60(sp)
    b478:	dc400404 	addi	r17,sp,16
    b47c:	2005883a 	mov	r2,r4
    b480:	2807883a 	mov	r3,r5
    b484:	dc000e15 	stw	r16,56(sp)
    b488:	d809883a 	mov	r4,sp
    b48c:	880b883a 	mov	r5,r17
    b490:	dc000904 	addi	r16,sp,36
    b494:	d8c00115 	stw	r3,4(sp)
    b498:	d8800015 	stw	r2,0(sp)
    b49c:	d9800215 	stw	r6,8(sp)
    b4a0:	dfc01015 	stw	ra,64(sp)
    b4a4:	d9c00315 	stw	r7,12(sp)
    b4a8:	000bbd80 	call	bbd8 <__unpack_d>
    b4ac:	d9000204 	addi	r4,sp,8
    b4b0:	800b883a 	mov	r5,r16
    b4b4:	000bbd80 	call	bbd8 <__unpack_d>
    b4b8:	d8800417 	ldw	r2,16(sp)
    b4bc:	00c00044 	movi	r3,1
    b4c0:	180d883a 	mov	r6,r3
    b4c4:	1880062e 	bgeu	r3,r2,b4e0 <__nedf2+0x70>
    b4c8:	d8800917 	ldw	r2,36(sp)
    b4cc:	8809883a 	mov	r4,r17
    b4d0:	800b883a 	mov	r5,r16
    b4d4:	1880022e 	bgeu	r3,r2,b4e0 <__nedf2+0x70>
    b4d8:	000bd100 	call	bd10 <__fpcmp_parts_d>
    b4dc:	100d883a 	mov	r6,r2
    b4e0:	3005883a 	mov	r2,r6
    b4e4:	dfc01017 	ldw	ra,64(sp)
    b4e8:	dc400f17 	ldw	r17,60(sp)
    b4ec:	dc000e17 	ldw	r16,56(sp)
    b4f0:	dec01104 	addi	sp,sp,68
    b4f4:	f800283a 	ret

0000b4f8 <__gtdf2>:
    b4f8:	deffef04 	addi	sp,sp,-68
    b4fc:	dc400f15 	stw	r17,60(sp)
    b500:	dc400404 	addi	r17,sp,16
    b504:	2005883a 	mov	r2,r4
    b508:	2807883a 	mov	r3,r5
    b50c:	dc000e15 	stw	r16,56(sp)
    b510:	d809883a 	mov	r4,sp
    b514:	880b883a 	mov	r5,r17
    b518:	dc000904 	addi	r16,sp,36
    b51c:	d8c00115 	stw	r3,4(sp)
    b520:	d8800015 	stw	r2,0(sp)
    b524:	d9800215 	stw	r6,8(sp)
    b528:	dfc01015 	stw	ra,64(sp)
    b52c:	d9c00315 	stw	r7,12(sp)
    b530:	000bbd80 	call	bbd8 <__unpack_d>
    b534:	d9000204 	addi	r4,sp,8
    b538:	800b883a 	mov	r5,r16
    b53c:	000bbd80 	call	bbd8 <__unpack_d>
    b540:	d8800417 	ldw	r2,16(sp)
    b544:	00c00044 	movi	r3,1
    b548:	01bfffc4 	movi	r6,-1
    b54c:	1880062e 	bgeu	r3,r2,b568 <__gtdf2+0x70>
    b550:	d8800917 	ldw	r2,36(sp)
    b554:	8809883a 	mov	r4,r17
    b558:	800b883a 	mov	r5,r16
    b55c:	1880022e 	bgeu	r3,r2,b568 <__gtdf2+0x70>
    b560:	000bd100 	call	bd10 <__fpcmp_parts_d>
    b564:	100d883a 	mov	r6,r2
    b568:	3005883a 	mov	r2,r6
    b56c:	dfc01017 	ldw	ra,64(sp)
    b570:	dc400f17 	ldw	r17,60(sp)
    b574:	dc000e17 	ldw	r16,56(sp)
    b578:	dec01104 	addi	sp,sp,68
    b57c:	f800283a 	ret

0000b580 <__gedf2>:
    b580:	deffef04 	addi	sp,sp,-68
    b584:	dc400f15 	stw	r17,60(sp)
    b588:	dc400404 	addi	r17,sp,16
    b58c:	2005883a 	mov	r2,r4
    b590:	2807883a 	mov	r3,r5
    b594:	dc000e15 	stw	r16,56(sp)
    b598:	d809883a 	mov	r4,sp
    b59c:	880b883a 	mov	r5,r17
    b5a0:	dc000904 	addi	r16,sp,36
    b5a4:	d8c00115 	stw	r3,4(sp)
    b5a8:	d8800015 	stw	r2,0(sp)
    b5ac:	d9800215 	stw	r6,8(sp)
    b5b0:	dfc01015 	stw	ra,64(sp)
    b5b4:	d9c00315 	stw	r7,12(sp)
    b5b8:	000bbd80 	call	bbd8 <__unpack_d>
    b5bc:	d9000204 	addi	r4,sp,8
    b5c0:	800b883a 	mov	r5,r16
    b5c4:	000bbd80 	call	bbd8 <__unpack_d>
    b5c8:	d8800417 	ldw	r2,16(sp)
    b5cc:	00c00044 	movi	r3,1
    b5d0:	01bfffc4 	movi	r6,-1
    b5d4:	1880062e 	bgeu	r3,r2,b5f0 <__gedf2+0x70>
    b5d8:	d8800917 	ldw	r2,36(sp)
    b5dc:	8809883a 	mov	r4,r17
    b5e0:	800b883a 	mov	r5,r16
    b5e4:	1880022e 	bgeu	r3,r2,b5f0 <__gedf2+0x70>
    b5e8:	000bd100 	call	bd10 <__fpcmp_parts_d>
    b5ec:	100d883a 	mov	r6,r2
    b5f0:	3005883a 	mov	r2,r6
    b5f4:	dfc01017 	ldw	ra,64(sp)
    b5f8:	dc400f17 	ldw	r17,60(sp)
    b5fc:	dc000e17 	ldw	r16,56(sp)
    b600:	dec01104 	addi	sp,sp,68
    b604:	f800283a 	ret

0000b608 <__ltdf2>:
    b608:	deffef04 	addi	sp,sp,-68
    b60c:	dc400f15 	stw	r17,60(sp)
    b610:	dc400404 	addi	r17,sp,16
    b614:	2005883a 	mov	r2,r4
    b618:	2807883a 	mov	r3,r5
    b61c:	dc000e15 	stw	r16,56(sp)
    b620:	d809883a 	mov	r4,sp
    b624:	880b883a 	mov	r5,r17
    b628:	dc000904 	addi	r16,sp,36
    b62c:	d8c00115 	stw	r3,4(sp)
    b630:	d8800015 	stw	r2,0(sp)
    b634:	d9800215 	stw	r6,8(sp)
    b638:	dfc01015 	stw	ra,64(sp)
    b63c:	d9c00315 	stw	r7,12(sp)
    b640:	000bbd80 	call	bbd8 <__unpack_d>
    b644:	d9000204 	addi	r4,sp,8
    b648:	800b883a 	mov	r5,r16
    b64c:	000bbd80 	call	bbd8 <__unpack_d>
    b650:	d8800417 	ldw	r2,16(sp)
    b654:	00c00044 	movi	r3,1
    b658:	180d883a 	mov	r6,r3
    b65c:	1880062e 	bgeu	r3,r2,b678 <__ltdf2+0x70>
    b660:	d8800917 	ldw	r2,36(sp)
    b664:	8809883a 	mov	r4,r17
    b668:	800b883a 	mov	r5,r16
    b66c:	1880022e 	bgeu	r3,r2,b678 <__ltdf2+0x70>
    b670:	000bd100 	call	bd10 <__fpcmp_parts_d>
    b674:	100d883a 	mov	r6,r2
    b678:	3005883a 	mov	r2,r6
    b67c:	dfc01017 	ldw	ra,64(sp)
    b680:	dc400f17 	ldw	r17,60(sp)
    b684:	dc000e17 	ldw	r16,56(sp)
    b688:	dec01104 	addi	sp,sp,68
    b68c:	f800283a 	ret

0000b690 <__floatsidf>:
    b690:	2006d7fa 	srli	r3,r4,31
    b694:	defff604 	addi	sp,sp,-40
    b698:	008000c4 	movi	r2,3
    b69c:	dfc00915 	stw	ra,36(sp)
    b6a0:	dcc00815 	stw	r19,32(sp)
    b6a4:	dc800715 	stw	r18,28(sp)
    b6a8:	dc400615 	stw	r17,24(sp)
    b6ac:	dc000515 	stw	r16,20(sp)
    b6b0:	d8800015 	stw	r2,0(sp)
    b6b4:	d8c00115 	stw	r3,4(sp)
    b6b8:	20000f1e 	bne	r4,zero,b6f8 <__floatsidf+0x68>
    b6bc:	00800084 	movi	r2,2
    b6c0:	d8800015 	stw	r2,0(sp)
    b6c4:	d809883a 	mov	r4,sp
    b6c8:	00027c80 	call	27c8 <__pack_d>
    b6cc:	1009883a 	mov	r4,r2
    b6d0:	180b883a 	mov	r5,r3
    b6d4:	2005883a 	mov	r2,r4
    b6d8:	2807883a 	mov	r3,r5
    b6dc:	dfc00917 	ldw	ra,36(sp)
    b6e0:	dcc00817 	ldw	r19,32(sp)
    b6e4:	dc800717 	ldw	r18,28(sp)
    b6e8:	dc400617 	ldw	r17,24(sp)
    b6ec:	dc000517 	ldw	r16,20(sp)
    b6f0:	dec00a04 	addi	sp,sp,40
    b6f4:	f800283a 	ret
    b6f8:	00800f04 	movi	r2,60
    b6fc:	1807003a 	cmpeq	r3,r3,zero
    b700:	d8800215 	stw	r2,8(sp)
    b704:	18001126 	beq	r3,zero,b74c <__floatsidf+0xbc>
    b708:	0027883a 	mov	r19,zero
    b70c:	2025883a 	mov	r18,r4
    b710:	d9000315 	stw	r4,12(sp)
    b714:	dcc00415 	stw	r19,16(sp)
    b718:	00025200 	call	2520 <__clzsi2>
    b71c:	11000744 	addi	r4,r2,29
    b720:	013fe80e 	bge	zero,r4,b6c4 <__floatsidf+0x34>
    b724:	10bfff44 	addi	r2,r2,-3
    b728:	10000c16 	blt	r2,zero,b75c <__floatsidf+0xcc>
    b72c:	90a2983a 	sll	r17,r18,r2
    b730:	0021883a 	mov	r16,zero
    b734:	d8800217 	ldw	r2,8(sp)
    b738:	dc400415 	stw	r17,16(sp)
    b73c:	dc000315 	stw	r16,12(sp)
    b740:	1105c83a 	sub	r2,r2,r4
    b744:	d8800215 	stw	r2,8(sp)
    b748:	003fde06 	br	b6c4 <__floatsidf+0x34>
    b74c:	00a00034 	movhi	r2,32768
    b750:	20800a26 	beq	r4,r2,b77c <__floatsidf+0xec>
    b754:	0109c83a 	sub	r4,zero,r4
    b758:	003feb06 	br	b708 <__floatsidf+0x78>
    b75c:	9006d07a 	srli	r3,r18,1
    b760:	008007c4 	movi	r2,31
    b764:	1105c83a 	sub	r2,r2,r4
    b768:	1886d83a 	srl	r3,r3,r2
    b76c:	9922983a 	sll	r17,r19,r4
    b770:	9120983a 	sll	r16,r18,r4
    b774:	1c62b03a 	or	r17,r3,r17
    b778:	003fee06 	br	b734 <__floatsidf+0xa4>
    b77c:	0009883a 	mov	r4,zero
    b780:	01707834 	movhi	r5,49632
    b784:	003fd306 	br	b6d4 <__floatsidf+0x44>

0000b788 <__fixdfsi>:
    b788:	defff804 	addi	sp,sp,-32
    b78c:	2005883a 	mov	r2,r4
    b790:	2807883a 	mov	r3,r5
    b794:	d809883a 	mov	r4,sp
    b798:	d9400204 	addi	r5,sp,8
    b79c:	d8c00115 	stw	r3,4(sp)
    b7a0:	d8800015 	stw	r2,0(sp)
    b7a4:	dfc00715 	stw	ra,28(sp)
    b7a8:	000bbd80 	call	bbd8 <__unpack_d>
    b7ac:	d8c00217 	ldw	r3,8(sp)
    b7b0:	00800084 	movi	r2,2
    b7b4:	1880051e 	bne	r3,r2,b7cc <__fixdfsi+0x44>
    b7b8:	0007883a 	mov	r3,zero
    b7bc:	1805883a 	mov	r2,r3
    b7c0:	dfc00717 	ldw	ra,28(sp)
    b7c4:	dec00804 	addi	sp,sp,32
    b7c8:	f800283a 	ret
    b7cc:	00800044 	movi	r2,1
    b7d0:	10fff92e 	bgeu	r2,r3,b7b8 <__fixdfsi+0x30>
    b7d4:	00800104 	movi	r2,4
    b7d8:	18800426 	beq	r3,r2,b7ec <__fixdfsi+0x64>
    b7dc:	d8c00417 	ldw	r3,16(sp)
    b7e0:	183ff516 	blt	r3,zero,b7b8 <__fixdfsi+0x30>
    b7e4:	00800784 	movi	r2,30
    b7e8:	10c0080e 	bge	r2,r3,b80c <__fixdfsi+0x84>
    b7ec:	d8800317 	ldw	r2,12(sp)
    b7f0:	1000121e 	bne	r2,zero,b83c <__fixdfsi+0xb4>
    b7f4:	00e00034 	movhi	r3,32768
    b7f8:	18ffffc4 	addi	r3,r3,-1
    b7fc:	1805883a 	mov	r2,r3
    b800:	dfc00717 	ldw	ra,28(sp)
    b804:	dec00804 	addi	sp,sp,32
    b808:	f800283a 	ret
    b80c:	00800f04 	movi	r2,60
    b810:	10d1c83a 	sub	r8,r2,r3
    b814:	40bff804 	addi	r2,r8,-32
    b818:	d9800517 	ldw	r6,20(sp)
    b81c:	d9c00617 	ldw	r7,24(sp)
    b820:	10000816 	blt	r2,zero,b844 <__fixdfsi+0xbc>
    b824:	3888d83a 	srl	r4,r7,r2
    b828:	d8800317 	ldw	r2,12(sp)
    b82c:	2007883a 	mov	r3,r4
    b830:	103fe226 	beq	r2,zero,b7bc <__fixdfsi+0x34>
    b834:	0107c83a 	sub	r3,zero,r4
    b838:	003fe006 	br	b7bc <__fixdfsi+0x34>
    b83c:	00e00034 	movhi	r3,32768
    b840:	003fde06 	br	b7bc <__fixdfsi+0x34>
    b844:	39c7883a 	add	r3,r7,r7
    b848:	008007c4 	movi	r2,31
    b84c:	1205c83a 	sub	r2,r2,r8
    b850:	1886983a 	sll	r3,r3,r2
    b854:	3208d83a 	srl	r4,r6,r8
    b858:	1908b03a 	or	r4,r3,r4
    b85c:	003ff206 	br	b828 <__fixdfsi+0xa0>

0000b860 <__floatunsidf>:
    b860:	defff204 	addi	sp,sp,-56
    b864:	dfc00d15 	stw	ra,52(sp)
    b868:	ddc00c15 	stw	r23,48(sp)
    b86c:	dd800b15 	stw	r22,44(sp)
    b870:	dd400a15 	stw	r21,40(sp)
    b874:	dd000915 	stw	r20,36(sp)
    b878:	dcc00815 	stw	r19,32(sp)
    b87c:	dc800715 	stw	r18,28(sp)
    b880:	dc400615 	stw	r17,24(sp)
    b884:	dc000515 	stw	r16,20(sp)
    b888:	d8000115 	stw	zero,4(sp)
    b88c:	20000f1e 	bne	r4,zero,b8cc <__floatunsidf+0x6c>
    b890:	00800084 	movi	r2,2
    b894:	d8800015 	stw	r2,0(sp)
    b898:	d809883a 	mov	r4,sp
    b89c:	00027c80 	call	27c8 <__pack_d>
    b8a0:	dfc00d17 	ldw	ra,52(sp)
    b8a4:	ddc00c17 	ldw	r23,48(sp)
    b8a8:	dd800b17 	ldw	r22,44(sp)
    b8ac:	dd400a17 	ldw	r21,40(sp)
    b8b0:	dd000917 	ldw	r20,36(sp)
    b8b4:	dcc00817 	ldw	r19,32(sp)
    b8b8:	dc800717 	ldw	r18,28(sp)
    b8bc:	dc400617 	ldw	r17,24(sp)
    b8c0:	dc000517 	ldw	r16,20(sp)
    b8c4:	dec00e04 	addi	sp,sp,56
    b8c8:	f800283a 	ret
    b8cc:	008000c4 	movi	r2,3
    b8d0:	00c00f04 	movi	r3,60
    b8d4:	002f883a 	mov	r23,zero
    b8d8:	202d883a 	mov	r22,r4
    b8dc:	d8800015 	stw	r2,0(sp)
    b8e0:	d8c00215 	stw	r3,8(sp)
    b8e4:	d9000315 	stw	r4,12(sp)
    b8e8:	ddc00415 	stw	r23,16(sp)
    b8ec:	00025200 	call	2520 <__clzsi2>
    b8f0:	12400744 	addi	r9,r2,29
    b8f4:	48000b16 	blt	r9,zero,b924 <__floatunsidf+0xc4>
    b8f8:	483fe726 	beq	r9,zero,b898 <__floatunsidf+0x38>
    b8fc:	10bfff44 	addi	r2,r2,-3
    b900:	10002e16 	blt	r2,zero,b9bc <__floatunsidf+0x15c>
    b904:	b0a2983a 	sll	r17,r22,r2
    b908:	0021883a 	mov	r16,zero
    b90c:	d8800217 	ldw	r2,8(sp)
    b910:	dc400415 	stw	r17,16(sp)
    b914:	dc000315 	stw	r16,12(sp)
    b918:	1245c83a 	sub	r2,r2,r9
    b91c:	d8800215 	stw	r2,8(sp)
    b920:	003fdd06 	br	b898 <__floatunsidf+0x38>
    b924:	0255c83a 	sub	r10,zero,r9
    b928:	51bff804 	addi	r6,r10,-32
    b92c:	30001b16 	blt	r6,zero,b99c <__floatunsidf+0x13c>
    b930:	b9a8d83a 	srl	r20,r23,r6
    b934:	002b883a 	mov	r21,zero
    b938:	000f883a 	mov	r7,zero
    b93c:	01000044 	movi	r4,1
    b940:	0011883a 	mov	r8,zero
    b944:	30002516 	blt	r6,zero,b9dc <__floatunsidf+0x17c>
    b948:	21a6983a 	sll	r19,r4,r6
    b94c:	0025883a 	mov	r18,zero
    b950:	00bfffc4 	movi	r2,-1
    b954:	9089883a 	add	r4,r18,r2
    b958:	988b883a 	add	r5,r19,r2
    b95c:	248d803a 	cmpltu	r6,r4,r18
    b960:	314b883a 	add	r5,r6,r5
    b964:	b104703a 	and	r2,r22,r4
    b968:	b946703a 	and	r3,r23,r5
    b96c:	10c4b03a 	or	r2,r2,r3
    b970:	10000226 	beq	r2,zero,b97c <__floatunsidf+0x11c>
    b974:	01c00044 	movi	r7,1
    b978:	0011883a 	mov	r8,zero
    b97c:	d9000217 	ldw	r4,8(sp)
    b980:	a1c4b03a 	or	r2,r20,r7
    b984:	aa06b03a 	or	r3,r21,r8
    b988:	2249c83a 	sub	r4,r4,r9
    b98c:	d8c00415 	stw	r3,16(sp)
    b990:	d9000215 	stw	r4,8(sp)
    b994:	d8800315 	stw	r2,12(sp)
    b998:	003fbf06 	br	b898 <__floatunsidf+0x38>
    b99c:	bdc7883a 	add	r3,r23,r23
    b9a0:	008007c4 	movi	r2,31
    b9a4:	1285c83a 	sub	r2,r2,r10
    b9a8:	1886983a 	sll	r3,r3,r2
    b9ac:	b2a8d83a 	srl	r20,r22,r10
    b9b0:	baaad83a 	srl	r21,r23,r10
    b9b4:	1d28b03a 	or	r20,r3,r20
    b9b8:	003fdf06 	br	b938 <__floatunsidf+0xd8>
    b9bc:	b006d07a 	srli	r3,r22,1
    b9c0:	008007c4 	movi	r2,31
    b9c4:	1245c83a 	sub	r2,r2,r9
    b9c8:	1886d83a 	srl	r3,r3,r2
    b9cc:	ba62983a 	sll	r17,r23,r9
    b9d0:	b260983a 	sll	r16,r22,r9
    b9d4:	1c62b03a 	or	r17,r3,r17
    b9d8:	003fcc06 	br	b90c <__floatunsidf+0xac>
    b9dc:	2006d07a 	srli	r3,r4,1
    b9e0:	008007c4 	movi	r2,31
    b9e4:	1285c83a 	sub	r2,r2,r10
    b9e8:	18a6d83a 	srl	r19,r3,r2
    b9ec:	22a4983a 	sll	r18,r4,r10
    b9f0:	003fd706 	br	b950 <__floatunsidf+0xf0>

0000b9f4 <udivmodsi4>:
    b9f4:	29001b2e 	bgeu	r5,r4,ba64 <udivmodsi4+0x70>
    b9f8:	28001a16 	blt	r5,zero,ba64 <udivmodsi4+0x70>
    b9fc:	00800044 	movi	r2,1
    ba00:	0007883a 	mov	r3,zero
    ba04:	01c007c4 	movi	r7,31
    ba08:	00000306 	br	ba18 <udivmodsi4+0x24>
    ba0c:	19c01326 	beq	r3,r7,ba5c <udivmodsi4+0x68>
    ba10:	18c00044 	addi	r3,r3,1
    ba14:	28000416 	blt	r5,zero,ba28 <udivmodsi4+0x34>
    ba18:	294b883a 	add	r5,r5,r5
    ba1c:	1085883a 	add	r2,r2,r2
    ba20:	293ffa36 	bltu	r5,r4,ba0c <udivmodsi4+0x18>
    ba24:	10000d26 	beq	r2,zero,ba5c <udivmodsi4+0x68>
    ba28:	0007883a 	mov	r3,zero
    ba2c:	21400236 	bltu	r4,r5,ba38 <udivmodsi4+0x44>
    ba30:	2149c83a 	sub	r4,r4,r5
    ba34:	1886b03a 	or	r3,r3,r2
    ba38:	1004d07a 	srli	r2,r2,1
    ba3c:	280ad07a 	srli	r5,r5,1
    ba40:	103ffa1e 	bne	r2,zero,ba2c <udivmodsi4+0x38>
    ba44:	30000226 	beq	r6,zero,ba50 <udivmodsi4+0x5c>
    ba48:	2005883a 	mov	r2,r4
    ba4c:	f800283a 	ret
    ba50:	1809883a 	mov	r4,r3
    ba54:	2005883a 	mov	r2,r4
    ba58:	f800283a 	ret
    ba5c:	0007883a 	mov	r3,zero
    ba60:	003ff806 	br	ba44 <udivmodsi4+0x50>
    ba64:	00800044 	movi	r2,1
    ba68:	0007883a 	mov	r3,zero
    ba6c:	003fef06 	br	ba2c <udivmodsi4+0x38>

0000ba70 <__divsi3>:
    ba70:	defffe04 	addi	sp,sp,-8
    ba74:	dc000015 	stw	r16,0(sp)
    ba78:	dfc00115 	stw	ra,4(sp)
    ba7c:	0021883a 	mov	r16,zero
    ba80:	20000c16 	blt	r4,zero,bab4 <__divsi3+0x44>
    ba84:	000d883a 	mov	r6,zero
    ba88:	28000e16 	blt	r5,zero,bac4 <__divsi3+0x54>
    ba8c:	000b9f40 	call	b9f4 <udivmodsi4>
    ba90:	1007883a 	mov	r3,r2
    ba94:	8005003a 	cmpeq	r2,r16,zero
    ba98:	1000011e 	bne	r2,zero,baa0 <__divsi3+0x30>
    ba9c:	00c7c83a 	sub	r3,zero,r3
    baa0:	1805883a 	mov	r2,r3
    baa4:	dfc00117 	ldw	ra,4(sp)
    baa8:	dc000017 	ldw	r16,0(sp)
    baac:	dec00204 	addi	sp,sp,8
    bab0:	f800283a 	ret
    bab4:	0109c83a 	sub	r4,zero,r4
    bab8:	04000044 	movi	r16,1
    babc:	000d883a 	mov	r6,zero
    bac0:	283ff20e 	bge	r5,zero,ba8c <__divsi3+0x1c>
    bac4:	014bc83a 	sub	r5,zero,r5
    bac8:	8021003a 	cmpeq	r16,r16,zero
    bacc:	003fef06 	br	ba8c <__divsi3+0x1c>

0000bad0 <__modsi3>:
    bad0:	deffff04 	addi	sp,sp,-4
    bad4:	dfc00015 	stw	ra,0(sp)
    bad8:	01800044 	movi	r6,1
    badc:	2807883a 	mov	r3,r5
    bae0:	20000416 	blt	r4,zero,baf4 <__modsi3+0x24>
    bae4:	28000c16 	blt	r5,zero,bb18 <__modsi3+0x48>
    bae8:	dfc00017 	ldw	ra,0(sp)
    baec:	dec00104 	addi	sp,sp,4
    baf0:	000b9f41 	jmpi	b9f4 <udivmodsi4>
    baf4:	0109c83a 	sub	r4,zero,r4
    baf8:	28000b16 	blt	r5,zero,bb28 <__modsi3+0x58>
    bafc:	180b883a 	mov	r5,r3
    bb00:	01800044 	movi	r6,1
    bb04:	000b9f40 	call	b9f4 <udivmodsi4>
    bb08:	0085c83a 	sub	r2,zero,r2
    bb0c:	dfc00017 	ldw	ra,0(sp)
    bb10:	dec00104 	addi	sp,sp,4
    bb14:	f800283a 	ret
    bb18:	014bc83a 	sub	r5,zero,r5
    bb1c:	dfc00017 	ldw	ra,0(sp)
    bb20:	dec00104 	addi	sp,sp,4
    bb24:	000b9f41 	jmpi	b9f4 <udivmodsi4>
    bb28:	0147c83a 	sub	r3,zero,r5
    bb2c:	003ff306 	br	bafc <__modsi3+0x2c>

0000bb30 <__udivsi3>:
    bb30:	000d883a 	mov	r6,zero
    bb34:	000b9f41 	jmpi	b9f4 <udivmodsi4>

0000bb38 <__umodsi3>:
    bb38:	01800044 	movi	r6,1
    bb3c:	000b9f41 	jmpi	b9f4 <udivmodsi4>

0000bb40 <__muldi3>:
    bb40:	2011883a 	mov	r8,r4
    bb44:	427fffcc 	andi	r9,r8,65535
    bb48:	4018d43a 	srli	r12,r8,16
    bb4c:	32bfffcc 	andi	r10,r6,65535
    bb50:	3016d43a 	srli	r11,r6,16
    bb54:	4a85383a 	mul	r2,r9,r10
    bb58:	6295383a 	mul	r10,r12,r10
    bb5c:	4ad3383a 	mul	r9,r9,r11
    bb60:	113fffcc 	andi	r4,r2,65535
    bb64:	1004d43a 	srli	r2,r2,16
    bb68:	4a93883a 	add	r9,r9,r10
    bb6c:	3807883a 	mov	r3,r7
    bb70:	1245883a 	add	r2,r2,r9
    bb74:	280f883a 	mov	r7,r5
    bb78:	180b883a 	mov	r5,r3
    bb7c:	1006943a 	slli	r3,r2,16
    bb80:	defffd04 	addi	sp,sp,-12
    bb84:	dc800215 	stw	r18,8(sp)
    bb88:	1907883a 	add	r3,r3,r4
    bb8c:	dc400115 	stw	r17,4(sp)
    bb90:	dc000015 	stw	r16,0(sp)
    bb94:	4165383a 	mul	r18,r8,r5
    bb98:	31e3383a 	mul	r17,r6,r7
    bb9c:	1012d43a 	srli	r9,r2,16
    bba0:	62d9383a 	mul	r12,r12,r11
    bba4:	181f883a 	mov	r15,r3
    bba8:	1280022e 	bgeu	r2,r10,bbb4 <__muldi3+0x74>
    bbac:	00800074 	movhi	r2,1
    bbb0:	6099883a 	add	r12,r12,r2
    bbb4:	624d883a 	add	r6,r12,r9
    bbb8:	9187883a 	add	r3,r18,r6
    bbbc:	88c7883a 	add	r3,r17,r3
    bbc0:	7805883a 	mov	r2,r15
    bbc4:	dc800217 	ldw	r18,8(sp)
    bbc8:	dc400117 	ldw	r17,4(sp)
    bbcc:	dc000017 	ldw	r16,0(sp)
    bbd0:	dec00304 	addi	sp,sp,12
    bbd4:	f800283a 	ret

0000bbd8 <__unpack_d>:
    bbd8:	20c00117 	ldw	r3,4(r4)
    bbdc:	22400017 	ldw	r9,0(r4)
    bbe0:	00800434 	movhi	r2,16
    bbe4:	10bfffc4 	addi	r2,r2,-1
    bbe8:	1808d53a 	srli	r4,r3,20
    bbec:	180cd7fa 	srli	r6,r3,31
    bbf0:	1894703a 	and	r10,r3,r2
    bbf4:	2201ffcc 	andi	r8,r4,2047
    bbf8:	281b883a 	mov	r13,r5
    bbfc:	4817883a 	mov	r11,r9
    bc00:	29800115 	stw	r6,4(r5)
    bc04:	5019883a 	mov	r12,r10
    bc08:	40001e1e 	bne	r8,zero,bc84 <__unpack_d+0xac>
    bc0c:	4a84b03a 	or	r2,r9,r10
    bc10:	10001926 	beq	r2,zero,bc78 <__unpack_d+0xa0>
    bc14:	4804d63a 	srli	r2,r9,24
    bc18:	500c923a 	slli	r6,r10,8
    bc1c:	013f0084 	movi	r4,-1022
    bc20:	00c40034 	movhi	r3,4096
    bc24:	18ffffc4 	addi	r3,r3,-1
    bc28:	118cb03a 	or	r6,r2,r6
    bc2c:	008000c4 	movi	r2,3
    bc30:	480a923a 	slli	r5,r9,8
    bc34:	68800015 	stw	r2,0(r13)
    bc38:	69000215 	stw	r4,8(r13)
    bc3c:	19800b36 	bltu	r3,r6,bc6c <__unpack_d+0x94>
    bc40:	200f883a 	mov	r7,r4
    bc44:	1811883a 	mov	r8,r3
    bc48:	2945883a 	add	r2,r5,r5
    bc4c:	1149803a 	cmpltu	r4,r2,r5
    bc50:	3187883a 	add	r3,r6,r6
    bc54:	20c9883a 	add	r4,r4,r3
    bc58:	100b883a 	mov	r5,r2
    bc5c:	200d883a 	mov	r6,r4
    bc60:	39ffffc4 	addi	r7,r7,-1
    bc64:	413ff82e 	bgeu	r8,r4,bc48 <__unpack_d+0x70>
    bc68:	69c00215 	stw	r7,8(r13)
    bc6c:	69800415 	stw	r6,16(r13)
    bc70:	69400315 	stw	r5,12(r13)
    bc74:	f800283a 	ret
    bc78:	00800084 	movi	r2,2
    bc7c:	28800015 	stw	r2,0(r5)
    bc80:	f800283a 	ret
    bc84:	0081ffc4 	movi	r2,2047
    bc88:	40800f26 	beq	r8,r2,bcc8 <__unpack_d+0xf0>
    bc8c:	480cd63a 	srli	r6,r9,24
    bc90:	5006923a 	slli	r3,r10,8
    bc94:	4804923a 	slli	r2,r9,8
    bc98:	0009883a 	mov	r4,zero
    bc9c:	30c6b03a 	or	r3,r6,r3
    bca0:	01440034 	movhi	r5,4096
    bca4:	110cb03a 	or	r6,r2,r4
    bca8:	423f0044 	addi	r8,r8,-1023
    bcac:	194eb03a 	or	r7,r3,r5
    bcb0:	008000c4 	movi	r2,3
    bcb4:	69c00415 	stw	r7,16(r13)
    bcb8:	6a000215 	stw	r8,8(r13)
    bcbc:	68800015 	stw	r2,0(r13)
    bcc0:	69800315 	stw	r6,12(r13)
    bcc4:	f800283a 	ret
    bcc8:	4a84b03a 	or	r2,r9,r10
    bccc:	1000031e 	bne	r2,zero,bcdc <__unpack_d+0x104>
    bcd0:	00800104 	movi	r2,4
    bcd4:	28800015 	stw	r2,0(r5)
    bcd8:	f800283a 	ret
    bcdc:	0009883a 	mov	r4,zero
    bce0:	01400234 	movhi	r5,8
    bce4:	4904703a 	and	r2,r9,r4
    bce8:	5146703a 	and	r3,r10,r5
    bcec:	10c4b03a 	or	r2,r2,r3
    bcf0:	10000526 	beq	r2,zero,bd08 <__unpack_d+0x130>
    bcf4:	00800044 	movi	r2,1
    bcf8:	68800015 	stw	r2,0(r13)
    bcfc:	6b000415 	stw	r12,16(r13)
    bd00:	6ac00315 	stw	r11,12(r13)
    bd04:	f800283a 	ret
    bd08:	68000015 	stw	zero,0(r13)
    bd0c:	003ffb06 	br	bcfc <__unpack_d+0x124>

0000bd10 <__fpcmp_parts_d>:
    bd10:	21800017 	ldw	r6,0(r4)
    bd14:	00c00044 	movi	r3,1
    bd18:	19800a2e 	bgeu	r3,r6,bd44 <__fpcmp_parts_d+0x34>
    bd1c:	28800017 	ldw	r2,0(r5)
    bd20:	1880082e 	bgeu	r3,r2,bd44 <__fpcmp_parts_d+0x34>
    bd24:	00c00104 	movi	r3,4
    bd28:	30c02626 	beq	r6,r3,bdc4 <__fpcmp_parts_d+0xb4>
    bd2c:	10c02226 	beq	r2,r3,bdb8 <__fpcmp_parts_d+0xa8>
    bd30:	00c00084 	movi	r3,2
    bd34:	30c00526 	beq	r6,r3,bd4c <__fpcmp_parts_d+0x3c>
    bd38:	10c0071e 	bne	r2,r3,bd58 <__fpcmp_parts_d+0x48>
    bd3c:	20800117 	ldw	r2,4(r4)
    bd40:	1000091e 	bne	r2,zero,bd68 <__fpcmp_parts_d+0x58>
    bd44:	00800044 	movi	r2,1
    bd48:	f800283a 	ret
    bd4c:	10c01a1e 	bne	r2,r3,bdb8 <__fpcmp_parts_d+0xa8>
    bd50:	0005883a 	mov	r2,zero
    bd54:	f800283a 	ret
    bd58:	22000117 	ldw	r8,4(r4)
    bd5c:	28800117 	ldw	r2,4(r5)
    bd60:	40800326 	beq	r8,r2,bd70 <__fpcmp_parts_d+0x60>
    bd64:	403ff726 	beq	r8,zero,bd44 <__fpcmp_parts_d+0x34>
    bd68:	00bfffc4 	movi	r2,-1
    bd6c:	f800283a 	ret
    bd70:	20c00217 	ldw	r3,8(r4)
    bd74:	28800217 	ldw	r2,8(r5)
    bd78:	10fffa16 	blt	r2,r3,bd64 <__fpcmp_parts_d+0x54>
    bd7c:	18800916 	blt	r3,r2,bda4 <__fpcmp_parts_d+0x94>
    bd80:	21c00417 	ldw	r7,16(r4)
    bd84:	28c00417 	ldw	r3,16(r5)
    bd88:	21800317 	ldw	r6,12(r4)
    bd8c:	28800317 	ldw	r2,12(r5)
    bd90:	19fff436 	bltu	r3,r7,bd64 <__fpcmp_parts_d+0x54>
    bd94:	38c00526 	beq	r7,r3,bdac <__fpcmp_parts_d+0x9c>
    bd98:	38c00236 	bltu	r7,r3,bda4 <__fpcmp_parts_d+0x94>
    bd9c:	19ffec1e 	bne	r3,r7,bd50 <__fpcmp_parts_d+0x40>
    bda0:	30bfeb2e 	bgeu	r6,r2,bd50 <__fpcmp_parts_d+0x40>
    bda4:	403fe71e 	bne	r8,zero,bd44 <__fpcmp_parts_d+0x34>
    bda8:	003fef06 	br	bd68 <__fpcmp_parts_d+0x58>
    bdac:	11bffa2e 	bgeu	r2,r6,bd98 <__fpcmp_parts_d+0x88>
    bdb0:	403fe426 	beq	r8,zero,bd44 <__fpcmp_parts_d+0x34>
    bdb4:	003fec06 	br	bd68 <__fpcmp_parts_d+0x58>
    bdb8:	28800117 	ldw	r2,4(r5)
    bdbc:	103fe11e 	bne	r2,zero,bd44 <__fpcmp_parts_d+0x34>
    bdc0:	003fe906 	br	bd68 <__fpcmp_parts_d+0x58>
    bdc4:	11bfdd1e 	bne	r2,r6,bd3c <__fpcmp_parts_d+0x2c>
    bdc8:	28c00117 	ldw	r3,4(r5)
    bdcc:	20800117 	ldw	r2,4(r4)
    bdd0:	1885c83a 	sub	r2,r3,r2
    bdd4:	f800283a 	ret

0000bdd8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    bdd8:	defff804 	addi	sp,sp,-32
    bddc:	dfc00715 	stw	ra,28(sp)
    bde0:	df000615 	stw	fp,24(sp)
    bde4:	df000604 	addi	fp,sp,24
    bde8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    bdec:	e0bffc17 	ldw	r2,-16(fp)
    bdf0:	1004803a 	cmplt	r2,r2,zero
    bdf4:	1000081e 	bne	r2,zero,be18 <close+0x40>
    bdf8:	e0bffc17 	ldw	r2,-16(fp)
    bdfc:	10800324 	muli	r2,r2,12
    be00:	1007883a 	mov	r3,r2
    be04:	00800074 	movhi	r2,1
    be08:	108b6504 	addi	r2,r2,11668
    be0c:	1887883a 	add	r3,r3,r2
    be10:	e0ffff15 	stw	r3,-4(fp)
    be14:	00000106 	br	be1c <close+0x44>
    be18:	e03fff15 	stw	zero,-4(fp)
    be1c:	e0bfff17 	ldw	r2,-4(fp)
    be20:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    be24:	e0bffb17 	ldw	r2,-20(fp)
    be28:	1005003a 	cmpeq	r2,r2,zero
    be2c:	10001d1e 	bne	r2,zero,bea4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    be30:	e0bffb17 	ldw	r2,-20(fp)
    be34:	10800017 	ldw	r2,0(r2)
    be38:	10800417 	ldw	r2,16(r2)
    be3c:	1005003a 	cmpeq	r2,r2,zero
    be40:	1000071e 	bne	r2,zero,be60 <close+0x88>
    be44:	e0bffb17 	ldw	r2,-20(fp)
    be48:	10800017 	ldw	r2,0(r2)
    be4c:	10800417 	ldw	r2,16(r2)
    be50:	e13ffb17 	ldw	r4,-20(fp)
    be54:	103ee83a 	callr	r2
    be58:	e0bffe15 	stw	r2,-8(fp)
    be5c:	00000106 	br	be64 <close+0x8c>
    be60:	e03ffe15 	stw	zero,-8(fp)
    be64:	e0bffe17 	ldw	r2,-8(fp)
    be68:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    be6c:	e13ffc17 	ldw	r4,-16(fp)
    be70:	000ca740 	call	ca74 <alt_release_fd>
    if (rval < 0)
    be74:	e0bffa17 	ldw	r2,-24(fp)
    be78:	1004403a 	cmpge	r2,r2,zero
    be7c:	1000071e 	bne	r2,zero,be9c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    be80:	000bed40 	call	bed4 <alt_get_errno>
    be84:	e0fffa17 	ldw	r3,-24(fp)
    be88:	00c7c83a 	sub	r3,zero,r3
    be8c:	10c00015 	stw	r3,0(r2)
      return -1;
    be90:	00bfffc4 	movi	r2,-1
    be94:	e0bffd15 	stw	r2,-12(fp)
    be98:	00000806 	br	bebc <close+0xe4>
    }
    return 0;
    be9c:	e03ffd15 	stw	zero,-12(fp)
    bea0:	00000606 	br	bebc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bea4:	000bed40 	call	bed4 <alt_get_errno>
    bea8:	1007883a 	mov	r3,r2
    beac:	00801444 	movi	r2,81
    beb0:	18800015 	stw	r2,0(r3)
    return -1;
    beb4:	00bfffc4 	movi	r2,-1
    beb8:	e0bffd15 	stw	r2,-12(fp)
    bebc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    bec0:	e037883a 	mov	sp,fp
    bec4:	dfc00117 	ldw	ra,4(sp)
    bec8:	df000017 	ldw	fp,0(sp)
    becc:	dec00204 	addi	sp,sp,8
    bed0:	f800283a 	ret

0000bed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bed4:	defffd04 	addi	sp,sp,-12
    bed8:	dfc00215 	stw	ra,8(sp)
    bedc:	df000115 	stw	fp,4(sp)
    bee0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bee4:	00800074 	movhi	r2,1
    bee8:	108fe904 	addi	r2,r2,16292
    beec:	10800017 	ldw	r2,0(r2)
    bef0:	1005003a 	cmpeq	r2,r2,zero
    bef4:	1000061e 	bne	r2,zero,bf10 <alt_get_errno+0x3c>
    bef8:	00800074 	movhi	r2,1
    befc:	108fe904 	addi	r2,r2,16292
    bf00:	10800017 	ldw	r2,0(r2)
    bf04:	103ee83a 	callr	r2
    bf08:	e0bfff15 	stw	r2,-4(fp)
    bf0c:	00000306 	br	bf1c <alt_get_errno+0x48>
    bf10:	00800074 	movhi	r2,1
    bf14:	1096e204 	addi	r2,r2,23432
    bf18:	e0bfff15 	stw	r2,-4(fp)
    bf1c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf20:	e037883a 	mov	sp,fp
    bf24:	dfc00117 	ldw	ra,4(sp)
    bf28:	df000017 	ldw	fp,0(sp)
    bf2c:	dec00204 	addi	sp,sp,8
    bf30:	f800283a 	ret

0000bf34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    bf34:	defffc04 	addi	sp,sp,-16
    bf38:	df000315 	stw	fp,12(sp)
    bf3c:	df000304 	addi	fp,sp,12
    bf40:	e13ffd15 	stw	r4,-12(fp)
    bf44:	e17ffe15 	stw	r5,-8(fp)
    bf48:	e1bfff15 	stw	r6,-4(fp)
  return len;
    bf4c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf50:	e037883a 	mov	sp,fp
    bf54:	df000017 	ldw	fp,0(sp)
    bf58:	dec00104 	addi	sp,sp,4
    bf5c:	f800283a 	ret

0000bf60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    bf60:	defff904 	addi	sp,sp,-28
    bf64:	dfc00615 	stw	ra,24(sp)
    bf68:	df000515 	stw	fp,20(sp)
    bf6c:	df000504 	addi	fp,sp,20
    bf70:	e13ffc15 	stw	r4,-16(fp)
    bf74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bf78:	e0bffc17 	ldw	r2,-16(fp)
    bf7c:	1004803a 	cmplt	r2,r2,zero
    bf80:	1000081e 	bne	r2,zero,bfa4 <fstat+0x44>
    bf84:	e0bffc17 	ldw	r2,-16(fp)
    bf88:	10800324 	muli	r2,r2,12
    bf8c:	1007883a 	mov	r3,r2
    bf90:	00800074 	movhi	r2,1
    bf94:	108b6504 	addi	r2,r2,11668
    bf98:	1887883a 	add	r3,r3,r2
    bf9c:	e0ffff15 	stw	r3,-4(fp)
    bfa0:	00000106 	br	bfa8 <fstat+0x48>
    bfa4:	e03fff15 	stw	zero,-4(fp)
    bfa8:	e0bfff17 	ldw	r2,-4(fp)
    bfac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    bfb0:	e0bffb17 	ldw	r2,-20(fp)
    bfb4:	1005003a 	cmpeq	r2,r2,zero
    bfb8:	1000121e 	bne	r2,zero,c004 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    bfbc:	e0bffb17 	ldw	r2,-20(fp)
    bfc0:	10800017 	ldw	r2,0(r2)
    bfc4:	10800817 	ldw	r2,32(r2)
    bfc8:	1005003a 	cmpeq	r2,r2,zero
    bfcc:	1000081e 	bne	r2,zero,bff0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    bfd0:	e0bffb17 	ldw	r2,-20(fp)
    bfd4:	10800017 	ldw	r2,0(r2)
    bfd8:	10800817 	ldw	r2,32(r2)
    bfdc:	e13ffb17 	ldw	r4,-20(fp)
    bfe0:	e17ffd17 	ldw	r5,-12(fp)
    bfe4:	103ee83a 	callr	r2
    bfe8:	e0bffe15 	stw	r2,-8(fp)
    bfec:	00000b06 	br	c01c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    bff0:	e0fffd17 	ldw	r3,-12(fp)
    bff4:	00880004 	movi	r2,8192
    bff8:	18800115 	stw	r2,4(r3)
      return 0;
    bffc:	e03ffe15 	stw	zero,-8(fp)
    c000:	00000606 	br	c01c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c004:	000c0340 	call	c034 <alt_get_errno>
    c008:	1007883a 	mov	r3,r2
    c00c:	00801444 	movi	r2,81
    c010:	18800015 	stw	r2,0(r3)
    return -1;
    c014:	00bfffc4 	movi	r2,-1
    c018:	e0bffe15 	stw	r2,-8(fp)
    c01c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c020:	e037883a 	mov	sp,fp
    c024:	dfc00117 	ldw	ra,4(sp)
    c028:	df000017 	ldw	fp,0(sp)
    c02c:	dec00204 	addi	sp,sp,8
    c030:	f800283a 	ret

0000c034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c034:	defffd04 	addi	sp,sp,-12
    c038:	dfc00215 	stw	ra,8(sp)
    c03c:	df000115 	stw	fp,4(sp)
    c040:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c044:	00800074 	movhi	r2,1
    c048:	108fe904 	addi	r2,r2,16292
    c04c:	10800017 	ldw	r2,0(r2)
    c050:	1005003a 	cmpeq	r2,r2,zero
    c054:	1000061e 	bne	r2,zero,c070 <alt_get_errno+0x3c>
    c058:	00800074 	movhi	r2,1
    c05c:	108fe904 	addi	r2,r2,16292
    c060:	10800017 	ldw	r2,0(r2)
    c064:	103ee83a 	callr	r2
    c068:	e0bfff15 	stw	r2,-4(fp)
    c06c:	00000306 	br	c07c <alt_get_errno+0x48>
    c070:	00800074 	movhi	r2,1
    c074:	1096e204 	addi	r2,r2,23432
    c078:	e0bfff15 	stw	r2,-4(fp)
    c07c:	e0bfff17 	ldw	r2,-4(fp)
}
    c080:	e037883a 	mov	sp,fp
    c084:	dfc00117 	ldw	ra,4(sp)
    c088:	df000017 	ldw	fp,0(sp)
    c08c:	dec00204 	addi	sp,sp,8
    c090:	f800283a 	ret

0000c094 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c094:	deffef04 	addi	sp,sp,-68
    c098:	df001015 	stw	fp,64(sp)
    c09c:	df001004 	addi	fp,sp,64
    c0a0:	e13ffc15 	stw	r4,-16(fp)
    c0a4:	e17ffd15 	stw	r5,-12(fp)
    c0a8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    c0ac:	00bffa84 	movi	r2,-22
    c0b0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c0b4:	e0bffc17 	ldw	r2,-16(fp)
    c0b8:	10800828 	cmpgeui	r2,r2,32
    c0bc:	1000601e 	bne	r2,zero,c240 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0c0:	0005303a 	rdctl	r2,status
    c0c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0c8:	e0fff917 	ldw	r3,-28(fp)
    c0cc:	00bfff84 	movi	r2,-2
    c0d0:	1884703a 	and	r2,r3,r2
    c0d4:	1001703a 	wrctl	status,r2
  
  return context;
    c0d8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c0dc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    c0e0:	e0bffc17 	ldw	r2,-16(fp)
    c0e4:	00c006b4 	movhi	r3,26
    c0e8:	18f17d04 	addi	r3,r3,-14860
    c0ec:	100490fa 	slli	r2,r2,3
    c0f0:	10c7883a 	add	r3,r2,r3
    c0f4:	e0bffe17 	ldw	r2,-8(fp)
    c0f8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    c0fc:	e0bffc17 	ldw	r2,-16(fp)
    c100:	00c006b4 	movhi	r3,26
    c104:	18f17d04 	addi	r3,r3,-14860
    c108:	100490fa 	slli	r2,r2,3
    c10c:	10c5883a 	add	r2,r2,r3
    c110:	10c00104 	addi	r3,r2,4
    c114:	e0bffd17 	ldw	r2,-12(fp)
    c118:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c11c:	e0bffe17 	ldw	r2,-8(fp)
    c120:	1005003a 	cmpeq	r2,r2,zero
    c124:	1000201e 	bne	r2,zero,c1a8 <alt_irq_register+0x114>
    c128:	e0bffc17 	ldw	r2,-16(fp)
    c12c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c130:	0005303a 	rdctl	r2,status
    c134:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c138:	e0fff617 	ldw	r3,-40(fp)
    c13c:	00bfff84 	movi	r2,-2
    c140:	1884703a 	and	r2,r3,r2
    c144:	1001703a 	wrctl	status,r2
  
  return context;
    c148:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c14c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    c150:	e0fff717 	ldw	r3,-36(fp)
    c154:	00800044 	movi	r2,1
    c158:	10c4983a 	sll	r2,r2,r3
    c15c:	1007883a 	mov	r3,r2
    c160:	00800074 	movhi	r2,1
    c164:	1096e304 	addi	r2,r2,23436
    c168:	10800017 	ldw	r2,0(r2)
    c16c:	1886b03a 	or	r3,r3,r2
    c170:	00800074 	movhi	r2,1
    c174:	1096e304 	addi	r2,r2,23436
    c178:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c17c:	00800074 	movhi	r2,1
    c180:	1096e304 	addi	r2,r2,23436
    c184:	10800017 	ldw	r2,0(r2)
    c188:	100170fa 	wrctl	ienable,r2
    c18c:	e0bff817 	ldw	r2,-32(fp)
    c190:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c194:	e0bff517 	ldw	r2,-44(fp)
    c198:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c19c:	0005883a 	mov	r2,zero
    c1a0:	e0bfff15 	stw	r2,-4(fp)
    c1a4:	00002006 	br	c228 <alt_irq_register+0x194>
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1b0:	0005303a 	rdctl	r2,status
    c1b4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1b8:	e0fff217 	ldw	r3,-56(fp)
    c1bc:	00bfff84 	movi	r2,-2
    c1c0:	1884703a 	and	r2,r3,r2
    c1c4:	1001703a 	wrctl	status,r2
  
  return context;
    c1c8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c1cc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    c1d0:	e0fff317 	ldw	r3,-52(fp)
    c1d4:	00800044 	movi	r2,1
    c1d8:	10c4983a 	sll	r2,r2,r3
    c1dc:	0084303a 	nor	r2,zero,r2
    c1e0:	1007883a 	mov	r3,r2
    c1e4:	00800074 	movhi	r2,1
    c1e8:	1096e304 	addi	r2,r2,23436
    c1ec:	10800017 	ldw	r2,0(r2)
    c1f0:	1886703a 	and	r3,r3,r2
    c1f4:	00800074 	movhi	r2,1
    c1f8:	1096e304 	addi	r2,r2,23436
    c1fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c200:	00800074 	movhi	r2,1
    c204:	1096e304 	addi	r2,r2,23436
    c208:	10800017 	ldw	r2,0(r2)
    c20c:	100170fa 	wrctl	ienable,r2
    c210:	e0bff417 	ldw	r2,-48(fp)
    c214:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c218:	e0bff117 	ldw	r2,-60(fp)
    c21c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c220:	0005883a 	mov	r2,zero
    c224:	e0bfff15 	stw	r2,-4(fp)
    c228:	e0bfff17 	ldw	r2,-4(fp)
    c22c:	e0bffb15 	stw	r2,-20(fp)
    c230:	e0bffa17 	ldw	r2,-24(fp)
    c234:	e0bff015 	stw	r2,-64(fp)
    c238:	e0bff017 	ldw	r2,-64(fp)
    c23c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c240:	e0bffb17 	ldw	r2,-20(fp)
}
    c244:	e037883a 	mov	sp,fp
    c248:	df000017 	ldw	fp,0(sp)
    c24c:	dec00104 	addi	sp,sp,4
    c250:	f800283a 	ret

0000c254 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    c254:	deffeb04 	addi	sp,sp,-84
    c258:	dfc01415 	stw	ra,80(sp)
    c25c:	df001315 	stw	fp,76(sp)
    c260:	df001304 	addi	fp,sp,76
    c264:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c268:	e0bffd17 	ldw	r2,-12(fp)
    c26c:	1004803a 	cmplt	r2,r2,zero
    c270:	1000081e 	bne	r2,zero,c294 <isatty+0x40>
    c274:	e0bffd17 	ldw	r2,-12(fp)
    c278:	10800324 	muli	r2,r2,12
    c27c:	1007883a 	mov	r3,r2
    c280:	00800074 	movhi	r2,1
    c284:	108b6504 	addi	r2,r2,11668
    c288:	1887883a 	add	r3,r3,r2
    c28c:	e0ffff15 	stw	r3,-4(fp)
    c290:	00000106 	br	c298 <isatty+0x44>
    c294:	e03fff15 	stw	zero,-4(fp)
    c298:	e0bfff17 	ldw	r2,-4(fp)
    c29c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    c2a0:	e0bfed17 	ldw	r2,-76(fp)
    c2a4:	1005003a 	cmpeq	r2,r2,zero
    c2a8:	10000f1e 	bne	r2,zero,c2e8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    c2ac:	e0bfed17 	ldw	r2,-76(fp)
    c2b0:	10800017 	ldw	r2,0(r2)
    c2b4:	10800817 	ldw	r2,32(r2)
    c2b8:	1004c03a 	cmpne	r2,r2,zero
    c2bc:	1000031e 	bne	r2,zero,c2cc <isatty+0x78>
    {
      return 1;
    c2c0:	00800044 	movi	r2,1
    c2c4:	e0bffe15 	stw	r2,-8(fp)
    c2c8:	00000c06 	br	c2fc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    c2cc:	e17fee04 	addi	r5,fp,-72
    c2d0:	e13ffd17 	ldw	r4,-12(fp)
    c2d4:	000bf600 	call	bf60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    c2d8:	e0bfef17 	ldw	r2,-68(fp)
    c2dc:	10880020 	cmpeqi	r2,r2,8192
    c2e0:	e0bffe15 	stw	r2,-8(fp)
    c2e4:	00000506 	br	c2fc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c2e8:	000c3140 	call	c314 <alt_get_errno>
    c2ec:	1007883a 	mov	r3,r2
    c2f0:	00801444 	movi	r2,81
    c2f4:	18800015 	stw	r2,0(r3)
    return 0;
    c2f8:	e03ffe15 	stw	zero,-8(fp)
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c300:	e037883a 	mov	sp,fp
    c304:	dfc00117 	ldw	ra,4(sp)
    c308:	df000017 	ldw	fp,0(sp)
    c30c:	dec00204 	addi	sp,sp,8
    c310:	f800283a 	ret

0000c314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c314:	defffd04 	addi	sp,sp,-12
    c318:	dfc00215 	stw	ra,8(sp)
    c31c:	df000115 	stw	fp,4(sp)
    c320:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c324:	00800074 	movhi	r2,1
    c328:	108fe904 	addi	r2,r2,16292
    c32c:	10800017 	ldw	r2,0(r2)
    c330:	1005003a 	cmpeq	r2,r2,zero
    c334:	1000061e 	bne	r2,zero,c350 <alt_get_errno+0x3c>
    c338:	00800074 	movhi	r2,1
    c33c:	108fe904 	addi	r2,r2,16292
    c340:	10800017 	ldw	r2,0(r2)
    c344:	103ee83a 	callr	r2
    c348:	e0bfff15 	stw	r2,-4(fp)
    c34c:	00000306 	br	c35c <alt_get_errno+0x48>
    c350:	00800074 	movhi	r2,1
    c354:	1096e204 	addi	r2,r2,23432
    c358:	e0bfff15 	stw	r2,-4(fp)
    c35c:	e0bfff17 	ldw	r2,-4(fp)
}
    c360:	e037883a 	mov	sp,fp
    c364:	dfc00117 	ldw	ra,4(sp)
    c368:	df000017 	ldw	fp,0(sp)
    c36c:	dec00204 	addi	sp,sp,8
    c370:	f800283a 	ret

0000c374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c374:	defffe04 	addi	sp,sp,-8
    c378:	dfc00115 	stw	ra,4(sp)
    c37c:	df000015 	stw	fp,0(sp)
    c380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c384:	01000074 	movhi	r4,1
    c388:	210fee04 	addi	r4,r4,16312
    c38c:	01400074 	movhi	r5,1
    c390:	29491604 	addi	r5,r5,9304
    c394:	01800074 	movhi	r6,1
    c398:	318fee04 	addi	r6,r6,16312
    c39c:	000c3f40 	call	c3f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c3a0:	01000034 	movhi	r4,0
    c3a4:	21000804 	addi	r4,r4,32
    c3a8:	01400034 	movhi	r5,0
    c3ac:	29400804 	addi	r5,r5,32
    c3b0:	01800034 	movhi	r6,0
    c3b4:	31806d04 	addi	r6,r6,436
    c3b8:	000c3f40 	call	c3f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c3bc:	01000074 	movhi	r4,1
    c3c0:	21074d04 	addi	r4,r4,7476
    c3c4:	01400074 	movhi	r5,1
    c3c8:	29474d04 	addi	r5,r5,7476
    c3cc:	01800074 	movhi	r6,1
    c3d0:	31891604 	addi	r6,r6,9304
    c3d4:	000c3f40 	call	c3f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c3d8:	001083c0 	call	1083c <alt_dcache_flush_all>
  alt_icache_flush_all();
    c3dc:	0010ac80 	call	10ac8 <alt_icache_flush_all>
}
    c3e0:	e037883a 	mov	sp,fp
    c3e4:	dfc00117 	ldw	ra,4(sp)
    c3e8:	df000017 	ldw	fp,0(sp)
    c3ec:	dec00204 	addi	sp,sp,8
    c3f0:	f800283a 	ret

0000c3f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c3f4:	defffc04 	addi	sp,sp,-16
    c3f8:	df000315 	stw	fp,12(sp)
    c3fc:	df000304 	addi	fp,sp,12
    c400:	e13ffd15 	stw	r4,-12(fp)
    c404:	e17ffe15 	stw	r5,-8(fp)
    c408:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c40c:	e0fffe17 	ldw	r3,-8(fp)
    c410:	e0bffd17 	ldw	r2,-12(fp)
    c414:	18800e26 	beq	r3,r2,c450 <alt_load_section+0x5c>
  {
    while( to != end )
    c418:	00000a06 	br	c444 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c41c:	e0bffd17 	ldw	r2,-12(fp)
    c420:	10c00017 	ldw	r3,0(r2)
    c424:	e0bffe17 	ldw	r2,-8(fp)
    c428:	10c00015 	stw	r3,0(r2)
    c42c:	e0bffe17 	ldw	r2,-8(fp)
    c430:	10800104 	addi	r2,r2,4
    c434:	e0bffe15 	stw	r2,-8(fp)
    c438:	e0bffd17 	ldw	r2,-12(fp)
    c43c:	10800104 	addi	r2,r2,4
    c440:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c444:	e0fffe17 	ldw	r3,-8(fp)
    c448:	e0bfff17 	ldw	r2,-4(fp)
    c44c:	18bff31e 	bne	r3,r2,c41c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c450:	e037883a 	mov	sp,fp
    c454:	df000017 	ldw	fp,0(sp)
    c458:	dec00104 	addi	sp,sp,4
    c45c:	f800283a 	ret

0000c460 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    c460:	defff804 	addi	sp,sp,-32
    c464:	dfc00715 	stw	ra,28(sp)
    c468:	df000615 	stw	fp,24(sp)
    c46c:	df000604 	addi	fp,sp,24
    c470:	e13ffc15 	stw	r4,-16(fp)
    c474:	e17ffd15 	stw	r5,-12(fp)
    c478:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    c47c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c480:	e0bffc17 	ldw	r2,-16(fp)
    c484:	1004803a 	cmplt	r2,r2,zero
    c488:	1000081e 	bne	r2,zero,c4ac <lseek+0x4c>
    c48c:	e0bffc17 	ldw	r2,-16(fp)
    c490:	10800324 	muli	r2,r2,12
    c494:	1007883a 	mov	r3,r2
    c498:	00800074 	movhi	r2,1
    c49c:	108b6504 	addi	r2,r2,11668
    c4a0:	1887883a 	add	r3,r3,r2
    c4a4:	e0ffff15 	stw	r3,-4(fp)
    c4a8:	00000106 	br	c4b0 <lseek+0x50>
    c4ac:	e03fff15 	stw	zero,-4(fp)
    c4b0:	e0bfff17 	ldw	r2,-4(fp)
    c4b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    c4b8:	e0bffb17 	ldw	r2,-20(fp)
    c4bc:	1005003a 	cmpeq	r2,r2,zero
    c4c0:	1000111e 	bne	r2,zero,c508 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    c4c4:	e0bffb17 	ldw	r2,-20(fp)
    c4c8:	10800017 	ldw	r2,0(r2)
    c4cc:	10800717 	ldw	r2,28(r2)
    c4d0:	1005003a 	cmpeq	r2,r2,zero
    c4d4:	1000091e 	bne	r2,zero,c4fc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    c4d8:	e0bffb17 	ldw	r2,-20(fp)
    c4dc:	10800017 	ldw	r2,0(r2)
    c4e0:	10800717 	ldw	r2,28(r2)
    c4e4:	e13ffb17 	ldw	r4,-20(fp)
    c4e8:	e17ffd17 	ldw	r5,-12(fp)
    c4ec:	e1bffe17 	ldw	r6,-8(fp)
    c4f0:	103ee83a 	callr	r2
    c4f4:	e0bffa15 	stw	r2,-24(fp)
    c4f8:	00000506 	br	c510 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    c4fc:	00bfde84 	movi	r2,-134
    c500:	e0bffa15 	stw	r2,-24(fp)
    c504:	00000206 	br	c510 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    c508:	00bfebc4 	movi	r2,-81
    c50c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    c510:	e0bffa17 	ldw	r2,-24(fp)
    c514:	1004403a 	cmpge	r2,r2,zero
    c518:	1000071e 	bne	r2,zero,c538 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    c51c:	000c5500 	call	c550 <alt_get_errno>
    c520:	1007883a 	mov	r3,r2
    c524:	e0bffa17 	ldw	r2,-24(fp)
    c528:	0085c83a 	sub	r2,zero,r2
    c52c:	18800015 	stw	r2,0(r3)
    rc = -1;
    c530:	00bfffc4 	movi	r2,-1
    c534:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    c538:	e0bffa17 	ldw	r2,-24(fp)
}
    c53c:	e037883a 	mov	sp,fp
    c540:	dfc00117 	ldw	ra,4(sp)
    c544:	df000017 	ldw	fp,0(sp)
    c548:	dec00204 	addi	sp,sp,8
    c54c:	f800283a 	ret

0000c550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c550:	defffd04 	addi	sp,sp,-12
    c554:	dfc00215 	stw	ra,8(sp)
    c558:	df000115 	stw	fp,4(sp)
    c55c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c560:	00800074 	movhi	r2,1
    c564:	108fe904 	addi	r2,r2,16292
    c568:	10800017 	ldw	r2,0(r2)
    c56c:	1005003a 	cmpeq	r2,r2,zero
    c570:	1000061e 	bne	r2,zero,c58c <alt_get_errno+0x3c>
    c574:	00800074 	movhi	r2,1
    c578:	108fe904 	addi	r2,r2,16292
    c57c:	10800017 	ldw	r2,0(r2)
    c580:	103ee83a 	callr	r2
    c584:	e0bfff15 	stw	r2,-4(fp)
    c588:	00000306 	br	c598 <alt_get_errno+0x48>
    c58c:	00800074 	movhi	r2,1
    c590:	1096e204 	addi	r2,r2,23432
    c594:	e0bfff15 	stw	r2,-4(fp)
    c598:	e0bfff17 	ldw	r2,-4(fp)
}
    c59c:	e037883a 	mov	sp,fp
    c5a0:	dfc00117 	ldw	ra,4(sp)
    c5a4:	df000017 	ldw	fp,0(sp)
    c5a8:	dec00204 	addi	sp,sp,8
    c5ac:	f800283a 	ret

0000c5b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c5b0:	defffd04 	addi	sp,sp,-12
    c5b4:	dfc00215 	stw	ra,8(sp)
    c5b8:	df000115 	stw	fp,4(sp)
    c5bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c5c0:	0009883a 	mov	r4,zero
    c5c4:	000cd100 	call	cd10 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c5c8:	000cd440 	call	cd44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c5cc:	01000074 	movhi	r4,1
    c5d0:	21090704 	addi	r4,r4,9244
    c5d4:	01400074 	movhi	r5,1
    c5d8:	29490704 	addi	r5,r5,9244
    c5dc:	01800074 	movhi	r6,1
    c5e0:	31890704 	addi	r6,r6,9244
    c5e4:	0010e880 	call	10e88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    c5e8:	001096c0 	call	1096c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    c5ec:	01000074 	movhi	r4,1
    c5f0:	21027404 	addi	r4,r4,2512
    c5f4:	00115f00 	call	115f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c5f8:	d1270717 	ldw	r4,-25572(gp)
    c5fc:	d1670817 	ldw	r5,-25568(gp)
    c600:	d1a70917 	ldw	r6,-25564(gp)
    c604:	00006200 	call	620 <main>
    c608:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c60c:	01000044 	movi	r4,1
    c610:	000bdd80 	call	bdd8 <close>
  exit (result);
    c614:	e13fff17 	ldw	r4,-4(fp)
    c618:	00116040 	call	11604 <exit>

0000c61c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    c61c:	defffe04 	addi	sp,sp,-8
    c620:	df000115 	stw	fp,4(sp)
    c624:	df000104 	addi	fp,sp,4
    c628:	e13fff15 	stw	r4,-4(fp)
}
    c62c:	e037883a 	mov	sp,fp
    c630:	df000017 	ldw	fp,0(sp)
    c634:	dec00104 	addi	sp,sp,4
    c638:	f800283a 	ret

0000c63c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    c63c:	defffe04 	addi	sp,sp,-8
    c640:	df000115 	stw	fp,4(sp)
    c644:	df000104 	addi	fp,sp,4
    c648:	e13fff15 	stw	r4,-4(fp)
}
    c64c:	e037883a 	mov	sp,fp
    c650:	df000017 	ldw	fp,0(sp)
    c654:	dec00104 	addi	sp,sp,4
    c658:	f800283a 	ret

0000c65c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    c65c:	defff204 	addi	sp,sp,-56
    c660:	dfc00a15 	stw	ra,40(sp)
    c664:	df000915 	stw	fp,36(sp)
    c668:	df000904 	addi	fp,sp,36
    c66c:	e1400215 	stw	r5,8(fp)
    c670:	e1800315 	stw	r6,12(fp)
    c674:	e1c00415 	stw	r7,16(fp)
    c678:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    c67c:	e0800204 	addi	r2,fp,8
    c680:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    c684:	e0bfff17 	ldw	r2,-4(fp)
    c688:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    c68c:	00007806 	br	c870 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    c690:	e0bffc07 	ldb	r2,-16(fp)
    c694:	10800960 	cmpeqi	r2,r2,37
    c698:	1000031e 	bne	r2,zero,c6a8 <alt_printf+0x4c>
        {
            alt_putchar(c);
    c69c:	e13ffc07 	ldb	r4,-16(fp)
    c6a0:	000c8b40 	call	c8b4 <alt_putchar>
    c6a4:	00007206 	br	c870 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    c6a8:	e0bffd17 	ldw	r2,-12(fp)
    c6ac:	10800003 	ldbu	r2,0(r2)
    c6b0:	e0bffc05 	stb	r2,-16(fp)
    c6b4:	e0bffc07 	ldb	r2,-16(fp)
    c6b8:	1004c03a 	cmpne	r2,r2,zero
    c6bc:	1007883a 	mov	r3,r2
    c6c0:	e0bffd17 	ldw	r2,-12(fp)
    c6c4:	10800044 	addi	r2,r2,1
    c6c8:	e0bffd15 	stw	r2,-12(fp)
    c6cc:	18803fcc 	andi	r2,r3,255
    c6d0:	1005003a 	cmpeq	r2,r2,zero
    c6d4:	1000721e 	bne	r2,zero,c8a0 <alt_printf+0x244>
            {
                if (c == '%')
    c6d8:	e0bffc07 	ldb	r2,-16(fp)
    c6dc:	10800958 	cmpnei	r2,r2,37
    c6e0:	1000031e 	bne	r2,zero,c6f0 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    c6e4:	e13ffc07 	ldb	r4,-16(fp)
    c6e8:	000c8b40 	call	c8b4 <alt_putchar>
    c6ec:	00006006 	br	c870 <alt_printf+0x214>
                } 
                else if (c == 'c')
    c6f0:	e0bffc07 	ldb	r2,-16(fp)
    c6f4:	108018d8 	cmpnei	r2,r2,99
    c6f8:	1000091e 	bne	r2,zero,c720 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    c6fc:	e0fffe17 	ldw	r3,-8(fp)
    c700:	18800104 	addi	r2,r3,4
    c704:	e0bffe15 	stw	r2,-8(fp)
    c708:	1805883a 	mov	r2,r3
    c70c:	10800017 	ldw	r2,0(r2)
    c710:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    c714:	e13ffb17 	ldw	r4,-20(fp)
    c718:	000c8b40 	call	c8b4 <alt_putchar>
    c71c:	00005406 	br	c870 <alt_printf+0x214>
                }
                else if (c == 'x')
    c720:	e0bffc07 	ldb	r2,-16(fp)
    c724:	10801e18 	cmpnei	r2,r2,120
    c728:	1000371e 	bne	r2,zero,c808 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    c72c:	e0fffe17 	ldw	r3,-8(fp)
    c730:	18800104 	addi	r2,r3,4
    c734:	e0bffe15 	stw	r2,-8(fp)
    c738:	1805883a 	mov	r2,r3
    c73c:	10800017 	ldw	r2,0(r2)
    c740:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    c744:	e0bffa17 	ldw	r2,-24(fp)
    c748:	1004c03a 	cmpne	r2,r2,zero
    c74c:	1000031e 	bne	r2,zero,c75c <alt_printf+0x100>
                    {
                        alt_putchar('0');
    c750:	01000c04 	movi	r4,48
    c754:	000c8b40 	call	c8b4 <alt_putchar>
                        continue;
    c758:	00004506 	br	c870 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    c75c:	00800704 	movi	r2,28
    c760:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    c764:	00000306 	br	c774 <alt_printf+0x118>
                        digit_shift -= 4;
    c768:	e0bff817 	ldw	r2,-32(fp)
    c76c:	10bfff04 	addi	r2,r2,-4
    c770:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    c774:	00c003c4 	movi	r3,15
    c778:	e0bff817 	ldw	r2,-32(fp)
    c77c:	1884983a 	sll	r2,r3,r2
    c780:	1007883a 	mov	r3,r2
    c784:	e0bffa17 	ldw	r2,-24(fp)
    c788:	1884703a 	and	r2,r3,r2
    c78c:	1005003a 	cmpeq	r2,r2,zero
    c790:	103ff51e 	bne	r2,zero,c768 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    c794:	00001806 	br	c7f8 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    c798:	00c003c4 	movi	r3,15
    c79c:	e0bff817 	ldw	r2,-32(fp)
    c7a0:	1884983a 	sll	r2,r3,r2
    c7a4:	1007883a 	mov	r3,r2
    c7a8:	e0bffa17 	ldw	r2,-24(fp)
    c7ac:	1886703a 	and	r3,r3,r2
    c7b0:	e0bff817 	ldw	r2,-32(fp)
    c7b4:	1884d83a 	srl	r2,r3,r2
    c7b8:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    c7bc:	e0bff917 	ldw	r2,-28(fp)
    c7c0:	108002a8 	cmpgeui	r2,r2,10
    c7c4:	1000041e 	bne	r2,zero,c7d8 <alt_printf+0x17c>
                            c = '0' + digit;
    c7c8:	e0bff917 	ldw	r2,-28(fp)
    c7cc:	10800c04 	addi	r2,r2,48
    c7d0:	e0bffc05 	stb	r2,-16(fp)
    c7d4:	00000306 	br	c7e4 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    c7d8:	e0bff917 	ldw	r2,-28(fp)
    c7dc:	108015c4 	addi	r2,r2,87
    c7e0:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    c7e4:	e13ffc07 	ldb	r4,-16(fp)
    c7e8:	000c8b40 	call	c8b4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    c7ec:	e0bff817 	ldw	r2,-32(fp)
    c7f0:	10bfff04 	addi	r2,r2,-4
    c7f4:	e0bff815 	stw	r2,-32(fp)
    c7f8:	e0bff817 	ldw	r2,-32(fp)
    c7fc:	1004403a 	cmpge	r2,r2,zero
    c800:	103fe51e 	bne	r2,zero,c798 <alt_printf+0x13c>
    c804:	00001a06 	br	c870 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    c808:	e0bffc07 	ldb	r2,-16(fp)
    c80c:	10801cd8 	cmpnei	r2,r2,115
    c810:	1000171e 	bne	r2,zero,c870 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    c814:	e0fffe17 	ldw	r3,-8(fp)
    c818:	18800104 	addi	r2,r3,4
    c81c:	e0bffe15 	stw	r2,-8(fp)
    c820:	1805883a 	mov	r2,r3
    c824:	10800017 	ldw	r2,0(r2)
    c828:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    c82c:	00000906 	br	c854 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    c830:	e0bff717 	ldw	r2,-36(fp)
    c834:	10800003 	ldbu	r2,0(r2)
    c838:	11003fcc 	andi	r4,r2,255
    c83c:	2100201c 	xori	r4,r4,128
    c840:	213fe004 	addi	r4,r4,-128
    c844:	e0bff717 	ldw	r2,-36(fp)
    c848:	10800044 	addi	r2,r2,1
    c84c:	e0bff715 	stw	r2,-36(fp)
    c850:	000c8b40 	call	c8b4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    c854:	e0bff717 	ldw	r2,-36(fp)
    c858:	10800003 	ldbu	r2,0(r2)
    c85c:	10803fcc 	andi	r2,r2,255
    c860:	1080201c 	xori	r2,r2,128
    c864:	10bfe004 	addi	r2,r2,-128
    c868:	1004c03a 	cmpne	r2,r2,zero
    c86c:	103ff01e 	bne	r2,zero,c830 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    c870:	e0bffd17 	ldw	r2,-12(fp)
    c874:	10800003 	ldbu	r2,0(r2)
    c878:	e0bffc05 	stb	r2,-16(fp)
    c87c:	e0bffc07 	ldb	r2,-16(fp)
    c880:	1004c03a 	cmpne	r2,r2,zero
    c884:	1007883a 	mov	r3,r2
    c888:	e0bffd17 	ldw	r2,-12(fp)
    c88c:	10800044 	addi	r2,r2,1
    c890:	e0bffd15 	stw	r2,-12(fp)
    c894:	18803fcc 	andi	r2,r3,255
    c898:	1004c03a 	cmpne	r2,r2,zero
    c89c:	103f7c1e 	bne	r2,zero,c690 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    c8a0:	e037883a 	mov	sp,fp
    c8a4:	dfc00117 	ldw	ra,4(sp)
    c8a8:	df000017 	ldw	fp,0(sp)
    c8ac:	dec00504 	addi	sp,sp,20
    c8b0:	f800283a 	ret

0000c8b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    c8b4:	defffd04 	addi	sp,sp,-12
    c8b8:	dfc00215 	stw	ra,8(sp)
    c8bc:	df000115 	stw	fp,4(sp)
    c8c0:	df000104 	addi	fp,sp,4
    c8c4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    c8c8:	00800074 	movhi	r2,1
    c8cc:	108fde04 	addi	r2,r2,16248
    c8d0:	10800017 	ldw	r2,0(r2)
    c8d4:	11400217 	ldw	r5,8(r2)
    c8d8:	e13fff17 	ldw	r4,-4(fp)
    c8dc:	00116b00 	call	116b0 <putc>
#endif
}
    c8e0:	e037883a 	mov	sp,fp
    c8e4:	dfc00117 	ldw	ra,4(sp)
    c8e8:	df000017 	ldw	fp,0(sp)
    c8ec:	dec00204 	addi	sp,sp,8
    c8f0:	f800283a 	ret

0000c8f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    c8f4:	defff704 	addi	sp,sp,-36
    c8f8:	dfc00815 	stw	ra,32(sp)
    c8fc:	df000715 	stw	fp,28(sp)
    c900:	df000704 	addi	fp,sp,28
    c904:	e13ffb15 	stw	r4,-20(fp)
    c908:	e17ffc15 	stw	r5,-16(fp)
    c90c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c910:	e0bffb17 	ldw	r2,-20(fp)
    c914:	1004803a 	cmplt	r2,r2,zero
    c918:	1000081e 	bne	r2,zero,c93c <read+0x48>
    c91c:	e0bffb17 	ldw	r2,-20(fp)
    c920:	10800324 	muli	r2,r2,12
    c924:	1007883a 	mov	r3,r2
    c928:	00800074 	movhi	r2,1
    c92c:	108b6504 	addi	r2,r2,11668
    c930:	1887883a 	add	r3,r3,r2
    c934:	e0ffff15 	stw	r3,-4(fp)
    c938:	00000106 	br	c940 <read+0x4c>
    c93c:	e03fff15 	stw	zero,-4(fp)
    c940:	e0bfff17 	ldw	r2,-4(fp)
    c944:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c948:	e0bffa17 	ldw	r2,-24(fp)
    c94c:	1005003a 	cmpeq	r2,r2,zero
    c950:	1000241e 	bne	r2,zero,c9e4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    c954:	e0bffa17 	ldw	r2,-24(fp)
    c958:	10800217 	ldw	r2,8(r2)
    c95c:	108000cc 	andi	r2,r2,3
    c960:	10800060 	cmpeqi	r2,r2,1
    c964:	10001a1e 	bne	r2,zero,c9d0 <read+0xdc>
    c968:	e0bffa17 	ldw	r2,-24(fp)
    c96c:	10800017 	ldw	r2,0(r2)
    c970:	10800517 	ldw	r2,20(r2)
    c974:	1005003a 	cmpeq	r2,r2,zero
    c978:	1000151e 	bne	r2,zero,c9d0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    c97c:	e0bffa17 	ldw	r2,-24(fp)
    c980:	10800017 	ldw	r2,0(r2)
    c984:	10800517 	ldw	r2,20(r2)
    c988:	e17ffc17 	ldw	r5,-16(fp)
    c98c:	e1bffd17 	ldw	r6,-12(fp)
    c990:	e13ffa17 	ldw	r4,-24(fp)
    c994:	103ee83a 	callr	r2
    c998:	e0bff915 	stw	r2,-28(fp)
    c99c:	e0bff917 	ldw	r2,-28(fp)
    c9a0:	1004403a 	cmpge	r2,r2,zero
    c9a4:	1000071e 	bne	r2,zero,c9c4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    c9a8:	000ca140 	call	ca14 <alt_get_errno>
    c9ac:	e0fff917 	ldw	r3,-28(fp)
    c9b0:	00c7c83a 	sub	r3,zero,r3
    c9b4:	10c00015 	stw	r3,0(r2)
          return -1;
    c9b8:	00bfffc4 	movi	r2,-1
    c9bc:	e0bffe15 	stw	r2,-8(fp)
    c9c0:	00000e06 	br	c9fc <read+0x108>
        }
        return rval;
    c9c4:	e0bff917 	ldw	r2,-28(fp)
    c9c8:	e0bffe15 	stw	r2,-8(fp)
    c9cc:	00000b06 	br	c9fc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c9d0:	000ca140 	call	ca14 <alt_get_errno>
    c9d4:	1007883a 	mov	r3,r2
    c9d8:	00800344 	movi	r2,13
    c9dc:	18800015 	stw	r2,0(r3)
    c9e0:	00000406 	br	c9f4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c9e4:	000ca140 	call	ca14 <alt_get_errno>
    c9e8:	1007883a 	mov	r3,r2
    c9ec:	00801444 	movi	r2,81
    c9f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c9f4:	00bfffc4 	movi	r2,-1
    c9f8:	e0bffe15 	stw	r2,-8(fp)
    c9fc:	e0bffe17 	ldw	r2,-8(fp)
}
    ca00:	e037883a 	mov	sp,fp
    ca04:	dfc00117 	ldw	ra,4(sp)
    ca08:	df000017 	ldw	fp,0(sp)
    ca0c:	dec00204 	addi	sp,sp,8
    ca10:	f800283a 	ret

0000ca14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca14:	defffd04 	addi	sp,sp,-12
    ca18:	dfc00215 	stw	ra,8(sp)
    ca1c:	df000115 	stw	fp,4(sp)
    ca20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ca24:	00800074 	movhi	r2,1
    ca28:	108fe904 	addi	r2,r2,16292
    ca2c:	10800017 	ldw	r2,0(r2)
    ca30:	1005003a 	cmpeq	r2,r2,zero
    ca34:	1000061e 	bne	r2,zero,ca50 <alt_get_errno+0x3c>
    ca38:	00800074 	movhi	r2,1
    ca3c:	108fe904 	addi	r2,r2,16292
    ca40:	10800017 	ldw	r2,0(r2)
    ca44:	103ee83a 	callr	r2
    ca48:	e0bfff15 	stw	r2,-4(fp)
    ca4c:	00000306 	br	ca5c <alt_get_errno+0x48>
    ca50:	00800074 	movhi	r2,1
    ca54:	1096e204 	addi	r2,r2,23432
    ca58:	e0bfff15 	stw	r2,-4(fp)
    ca5c:	e0bfff17 	ldw	r2,-4(fp)
}
    ca60:	e037883a 	mov	sp,fp
    ca64:	dfc00117 	ldw	ra,4(sp)
    ca68:	df000017 	ldw	fp,0(sp)
    ca6c:	dec00204 	addi	sp,sp,8
    ca70:	f800283a 	ret

0000ca74 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ca74:	defffe04 	addi	sp,sp,-8
    ca78:	df000115 	stw	fp,4(sp)
    ca7c:	df000104 	addi	fp,sp,4
    ca80:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ca84:	e0bfff17 	ldw	r2,-4(fp)
    ca88:	108000d0 	cmplti	r2,r2,3
    ca8c:	10000d1e 	bne	r2,zero,cac4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ca90:	e0bfff17 	ldw	r2,-4(fp)
    ca94:	00c00074 	movhi	r3,1
    ca98:	18cb6504 	addi	r3,r3,11668
    ca9c:	10800324 	muli	r2,r2,12
    caa0:	10c5883a 	add	r2,r2,r3
    caa4:	10800204 	addi	r2,r2,8
    caa8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    caac:	e0bfff17 	ldw	r2,-4(fp)
    cab0:	00c00074 	movhi	r3,1
    cab4:	18cb6504 	addi	r3,r3,11668
    cab8:	10800324 	muli	r2,r2,12
    cabc:	10c5883a 	add	r2,r2,r3
    cac0:	10000015 	stw	zero,0(r2)
  }
}
    cac4:	e037883a 	mov	sp,fp
    cac8:	df000017 	ldw	fp,0(sp)
    cacc:	dec00104 	addi	sp,sp,4
    cad0:	f800283a 	ret

0000cad4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    cad4:	defff804 	addi	sp,sp,-32
    cad8:	df000715 	stw	fp,28(sp)
    cadc:	df000704 	addi	fp,sp,28
    cae0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cae4:	0005303a 	rdctl	r2,status
    cae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    caec:	e0fffb17 	ldw	r3,-20(fp)
    caf0:	00bfff84 	movi	r2,-2
    caf4:	1884703a 	and	r2,r3,r2
    caf8:	1001703a 	wrctl	status,r2
  
  return context;
    cafc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    cb00:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    cb04:	d0a00e17 	ldw	r2,-32712(gp)
    cb08:	10c000c4 	addi	r3,r2,3
    cb0c:	00bfff04 	movi	r2,-4
    cb10:	1884703a 	and	r2,r3,r2
    cb14:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    cb18:	d0e00e17 	ldw	r3,-32712(gp)
    cb1c:	e0bffe17 	ldw	r2,-8(fp)
    cb20:	1887883a 	add	r3,r3,r2
    cb24:	00802034 	movhi	r2,128
    cb28:	10800004 	addi	r2,r2,0
    cb2c:	10c0072e 	bgeu	r2,r3,cb4c <sbrk+0x78>
    cb30:	e0bffd17 	ldw	r2,-12(fp)
    cb34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb38:	e0bffa17 	ldw	r2,-24(fp)
    cb3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    cb40:	00bfffc4 	movi	r2,-1
    cb44:	e0bfff15 	stw	r2,-4(fp)
    cb48:	00000c06 	br	cb7c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    cb4c:	d0a00e17 	ldw	r2,-32712(gp)
    cb50:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    cb54:	d0e00e17 	ldw	r3,-32712(gp)
    cb58:	e0bffe17 	ldw	r2,-8(fp)
    cb5c:	1885883a 	add	r2,r3,r2
    cb60:	d0a00e15 	stw	r2,-32712(gp)
    cb64:	e0bffd17 	ldw	r2,-12(fp)
    cb68:	e0bff915 	stw	r2,-28(fp)
    cb6c:	e0bff917 	ldw	r2,-28(fp)
    cb70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    cb74:	e0bffc17 	ldw	r2,-16(fp)
    cb78:	e0bfff15 	stw	r2,-4(fp)
    cb7c:	e0bfff17 	ldw	r2,-4(fp)
} 
    cb80:	e037883a 	mov	sp,fp
    cb84:	df000017 	ldw	fp,0(sp)
    cb88:	dec00104 	addi	sp,sp,4
    cb8c:	f800283a 	ret

0000cb90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    cb90:	defff704 	addi	sp,sp,-36
    cb94:	dfc00815 	stw	ra,32(sp)
    cb98:	df000715 	stw	fp,28(sp)
    cb9c:	df000704 	addi	fp,sp,28
    cba0:	e13ffb15 	stw	r4,-20(fp)
    cba4:	e17ffc15 	stw	r5,-16(fp)
    cba8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cbac:	e0bffb17 	ldw	r2,-20(fp)
    cbb0:	1004803a 	cmplt	r2,r2,zero
    cbb4:	1000081e 	bne	r2,zero,cbd8 <write+0x48>
    cbb8:	e0bffb17 	ldw	r2,-20(fp)
    cbbc:	10800324 	muli	r2,r2,12
    cbc0:	1007883a 	mov	r3,r2
    cbc4:	00800074 	movhi	r2,1
    cbc8:	108b6504 	addi	r2,r2,11668
    cbcc:	1887883a 	add	r3,r3,r2
    cbd0:	e0ffff15 	stw	r3,-4(fp)
    cbd4:	00000106 	br	cbdc <write+0x4c>
    cbd8:	e03fff15 	stw	zero,-4(fp)
    cbdc:	e0bfff17 	ldw	r2,-4(fp)
    cbe0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    cbe4:	e0bffa17 	ldw	r2,-24(fp)
    cbe8:	1005003a 	cmpeq	r2,r2,zero
    cbec:	1000241e 	bne	r2,zero,cc80 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    cbf0:	e0bffa17 	ldw	r2,-24(fp)
    cbf4:	10800217 	ldw	r2,8(r2)
    cbf8:	108000cc 	andi	r2,r2,3
    cbfc:	1005003a 	cmpeq	r2,r2,zero
    cc00:	10001a1e 	bne	r2,zero,cc6c <write+0xdc>
    cc04:	e0bffa17 	ldw	r2,-24(fp)
    cc08:	10800017 	ldw	r2,0(r2)
    cc0c:	10800617 	ldw	r2,24(r2)
    cc10:	1005003a 	cmpeq	r2,r2,zero
    cc14:	1000151e 	bne	r2,zero,cc6c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    cc18:	e0bffa17 	ldw	r2,-24(fp)
    cc1c:	10800017 	ldw	r2,0(r2)
    cc20:	10800617 	ldw	r2,24(r2)
    cc24:	e17ffc17 	ldw	r5,-16(fp)
    cc28:	e1bffd17 	ldw	r6,-12(fp)
    cc2c:	e13ffa17 	ldw	r4,-24(fp)
    cc30:	103ee83a 	callr	r2
    cc34:	e0bff915 	stw	r2,-28(fp)
    cc38:	e0bff917 	ldw	r2,-28(fp)
    cc3c:	1004403a 	cmpge	r2,r2,zero
    cc40:	1000071e 	bne	r2,zero,cc60 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    cc44:	000ccb00 	call	ccb0 <alt_get_errno>
    cc48:	e0fff917 	ldw	r3,-28(fp)
    cc4c:	00c7c83a 	sub	r3,zero,r3
    cc50:	10c00015 	stw	r3,0(r2)
        return -1;
    cc54:	00bfffc4 	movi	r2,-1
    cc58:	e0bffe15 	stw	r2,-8(fp)
    cc5c:	00000e06 	br	cc98 <write+0x108>
      }
      return rval;
    cc60:	e0bff917 	ldw	r2,-28(fp)
    cc64:	e0bffe15 	stw	r2,-8(fp)
    cc68:	00000b06 	br	cc98 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    cc6c:	000ccb00 	call	ccb0 <alt_get_errno>
    cc70:	1007883a 	mov	r3,r2
    cc74:	00800344 	movi	r2,13
    cc78:	18800015 	stw	r2,0(r3)
    cc7c:	00000406 	br	cc90 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    cc80:	000ccb00 	call	ccb0 <alt_get_errno>
    cc84:	1007883a 	mov	r3,r2
    cc88:	00801444 	movi	r2,81
    cc8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cc90:	00bfffc4 	movi	r2,-1
    cc94:	e0bffe15 	stw	r2,-8(fp)
    cc98:	e0bffe17 	ldw	r2,-8(fp)
}
    cc9c:	e037883a 	mov	sp,fp
    cca0:	dfc00117 	ldw	ra,4(sp)
    cca4:	df000017 	ldw	fp,0(sp)
    cca8:	dec00204 	addi	sp,sp,8
    ccac:	f800283a 	ret

0000ccb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccb0:	defffd04 	addi	sp,sp,-12
    ccb4:	dfc00215 	stw	ra,8(sp)
    ccb8:	df000115 	stw	fp,4(sp)
    ccbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ccc0:	00800074 	movhi	r2,1
    ccc4:	108fe904 	addi	r2,r2,16292
    ccc8:	10800017 	ldw	r2,0(r2)
    cccc:	1005003a 	cmpeq	r2,r2,zero
    ccd0:	1000061e 	bne	r2,zero,ccec <alt_get_errno+0x3c>
    ccd4:	00800074 	movhi	r2,1
    ccd8:	108fe904 	addi	r2,r2,16292
    ccdc:	10800017 	ldw	r2,0(r2)
    cce0:	103ee83a 	callr	r2
    cce4:	e0bfff15 	stw	r2,-4(fp)
    cce8:	00000306 	br	ccf8 <alt_get_errno+0x48>
    ccec:	00800074 	movhi	r2,1
    ccf0:	1096e204 	addi	r2,r2,23432
    ccf4:	e0bfff15 	stw	r2,-4(fp)
    ccf8:	e0bfff17 	ldw	r2,-4(fp)
}
    ccfc:	e037883a 	mov	sp,fp
    cd00:	dfc00117 	ldw	ra,4(sp)
    cd04:	df000017 	ldw	fp,0(sp)
    cd08:	dec00204 	addi	sp,sp,8
    cd0c:	f800283a 	ret

0000cd10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    cd10:	defffd04 	addi	sp,sp,-12
    cd14:	dfc00215 	stw	ra,8(sp)
    cd18:	df000115 	stw	fp,4(sp)
    cd1c:	df000104 	addi	fp,sp,4
    cd20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    cd24:	00113680 	call	11368 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    cd28:	00800044 	movi	r2,1
    cd2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    cd30:	e037883a 	mov	sp,fp
    cd34:	dfc00117 	ldw	ra,4(sp)
    cd38:	df000017 	ldw	fp,0(sp)
    cd3c:	dec00204 	addi	sp,sp,8
    cd40:	f800283a 	ret

0000cd44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    cd44:	defffe04 	addi	sp,sp,-8
    cd48:	dfc00115 	stw	ra,4(sp)
    cd4c:	df000015 	stw	fp,0(sp)
    cd50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    cd54:	00c00074 	movhi	r3,1
    cd58:	18d6e704 	addi	r3,r3,23452
    cd5c:	00840034 	movhi	r2,4096
    cd60:	10880004 	addi	r2,r2,8192
    cd64:	18800015 	stw	r2,0(r3)
    cd68:	00c00074 	movhi	r3,1
    cd6c:	18d6e804 	addi	r3,r3,23456
    cd70:	0080bef4 	movhi	r2,763
    cd74:	10bc2004 	addi	r2,r2,-3968
    cd78:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    cd7c:	01000074 	movhi	r4,1
    cd80:	210bcf04 	addi	r4,r4,12092
    cd84:	000b883a 	mov	r5,zero
    cd88:	01800204 	movi	r6,8
    cd8c:	000cf300 	call	cf30 <altera_avalon_jtag_uart_init>
    cd90:	01000074 	movhi	r4,1
    cd94:	210bc504 	addi	r4,r4,12052
    cd98:	000cdb00 	call	cdb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    cd9c:	e037883a 	mov	sp,fp
    cda0:	dfc00117 	ldw	ra,4(sp)
    cda4:	df000017 	ldw	fp,0(sp)
    cda8:	dec00204 	addi	sp,sp,8
    cdac:	f800283a 	ret

0000cdb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    cdb0:	defffd04 	addi	sp,sp,-12
    cdb4:	dfc00215 	stw	ra,8(sp)
    cdb8:	df000115 	stw	fp,4(sp)
    cdbc:	df000104 	addi	fp,sp,4
    cdc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    cdc4:	e13fff17 	ldw	r4,-4(fp)
    cdc8:	01400074 	movhi	r5,1
    cdcc:	294fe604 	addi	r5,r5,16280
    cdd0:	00108580 	call	10858 <alt_dev_llist_insert>
}
    cdd4:	e037883a 	mov	sp,fp
    cdd8:	dfc00117 	ldw	ra,4(sp)
    cddc:	df000017 	ldw	fp,0(sp)
    cde0:	dec00204 	addi	sp,sp,8
    cde4:	f800283a 	ret

0000cde8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    cde8:	defffa04 	addi	sp,sp,-24
    cdec:	dfc00515 	stw	ra,20(sp)
    cdf0:	df000415 	stw	fp,16(sp)
    cdf4:	df000404 	addi	fp,sp,16
    cdf8:	e13ffd15 	stw	r4,-12(fp)
    cdfc:	e17ffe15 	stw	r5,-8(fp)
    ce00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ce04:	e0bffd17 	ldw	r2,-12(fp)
    ce08:	10800017 	ldw	r2,0(r2)
    ce0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ce10:	e0bffc17 	ldw	r2,-16(fp)
    ce14:	11000a04 	addi	r4,r2,40
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	11c00217 	ldw	r7,8(r2)
    ce20:	e17ffe17 	ldw	r5,-8(fp)
    ce24:	e1bfff17 	ldw	r6,-4(fp)
    ce28:	000d4300 	call	d430 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ce2c:	e037883a 	mov	sp,fp
    ce30:	dfc00117 	ldw	ra,4(sp)
    ce34:	df000017 	ldw	fp,0(sp)
    ce38:	dec00204 	addi	sp,sp,8
    ce3c:	f800283a 	ret

0000ce40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ce40:	defffa04 	addi	sp,sp,-24
    ce44:	dfc00515 	stw	ra,20(sp)
    ce48:	df000415 	stw	fp,16(sp)
    ce4c:	df000404 	addi	fp,sp,16
    ce50:	e13ffd15 	stw	r4,-12(fp)
    ce54:	e17ffe15 	stw	r5,-8(fp)
    ce58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ce5c:	e0bffd17 	ldw	r2,-12(fp)
    ce60:	10800017 	ldw	r2,0(r2)
    ce64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ce68:	e0bffc17 	ldw	r2,-16(fp)
    ce6c:	11000a04 	addi	r4,r2,40
    ce70:	e0bffd17 	ldw	r2,-12(fp)
    ce74:	11c00217 	ldw	r7,8(r2)
    ce78:	e17ffe17 	ldw	r5,-8(fp)
    ce7c:	e1bfff17 	ldw	r6,-4(fp)
    ce80:	000d6540 	call	d654 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ce84:	e037883a 	mov	sp,fp
    ce88:	dfc00117 	ldw	ra,4(sp)
    ce8c:	df000017 	ldw	fp,0(sp)
    ce90:	dec00204 	addi	sp,sp,8
    ce94:	f800283a 	ret

0000ce98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ce98:	defffc04 	addi	sp,sp,-16
    ce9c:	dfc00315 	stw	ra,12(sp)
    cea0:	df000215 	stw	fp,8(sp)
    cea4:	df000204 	addi	fp,sp,8
    cea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ceac:	e0bfff17 	ldw	r2,-4(fp)
    ceb0:	10800017 	ldw	r2,0(r2)
    ceb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ceb8:	e0bffe17 	ldw	r2,-8(fp)
    cebc:	11000a04 	addi	r4,r2,40
    cec0:	e0bfff17 	ldw	r2,-4(fp)
    cec4:	11400217 	ldw	r5,8(r2)
    cec8:	000d2c80 	call	d2c8 <altera_avalon_jtag_uart_close>
}
    cecc:	e037883a 	mov	sp,fp
    ced0:	dfc00117 	ldw	ra,4(sp)
    ced4:	df000017 	ldw	fp,0(sp)
    ced8:	dec00204 	addi	sp,sp,8
    cedc:	f800283a 	ret

0000cee0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    cee0:	defffa04 	addi	sp,sp,-24
    cee4:	dfc00515 	stw	ra,20(sp)
    cee8:	df000415 	stw	fp,16(sp)
    ceec:	df000404 	addi	fp,sp,16
    cef0:	e13ffd15 	stw	r4,-12(fp)
    cef4:	e17ffe15 	stw	r5,-8(fp)
    cef8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    cefc:	e0bffd17 	ldw	r2,-12(fp)
    cf00:	10800017 	ldw	r2,0(r2)
    cf04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    cf08:	e0bffc17 	ldw	r2,-16(fp)
    cf0c:	11000a04 	addi	r4,r2,40
    cf10:	e17ffe17 	ldw	r5,-8(fp)
    cf14:	e1bfff17 	ldw	r6,-4(fp)
    cf18:	000d33c0 	call	d33c <altera_avalon_jtag_uart_ioctl>
}
    cf1c:	e037883a 	mov	sp,fp
    cf20:	dfc00117 	ldw	ra,4(sp)
    cf24:	df000017 	ldw	fp,0(sp)
    cf28:	dec00204 	addi	sp,sp,8
    cf2c:	f800283a 	ret

0000cf30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    cf30:	defffa04 	addi	sp,sp,-24
    cf34:	dfc00515 	stw	ra,20(sp)
    cf38:	df000415 	stw	fp,16(sp)
    cf3c:	df000404 	addi	fp,sp,16
    cf40:	e13ffd15 	stw	r4,-12(fp)
    cf44:	e17ffe15 	stw	r5,-8(fp)
    cf48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cf4c:	e0fffd17 	ldw	r3,-12(fp)
    cf50:	00800044 	movi	r2,1
    cf54:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    cf58:	e0bffd17 	ldw	r2,-12(fp)
    cf5c:	10800017 	ldw	r2,0(r2)
    cf60:	11000104 	addi	r4,r2,4
    cf64:	e0bffd17 	ldw	r2,-12(fp)
    cf68:	10800817 	ldw	r2,32(r2)
    cf6c:	1007883a 	mov	r3,r2
    cf70:	2005883a 	mov	r2,r4
    cf74:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    cf78:	e13ffe17 	ldw	r4,-8(fp)
    cf7c:	e17fff17 	ldw	r5,-4(fp)
    cf80:	d8000015 	stw	zero,0(sp)
    cf84:	01800074 	movhi	r6,1
    cf88:	31b3fc04 	addi	r6,r6,-12304
    cf8c:	e1fffd17 	ldw	r7,-12(fp)
    cf90:	0010af80 	call	10af8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    cf94:	e0bffd17 	ldw	r2,-12(fp)
    cf98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    cf9c:	e0bffd17 	ldw	r2,-12(fp)
    cfa0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cfa4:	00800074 	movhi	r2,1
    cfa8:	1096e904 	addi	r2,r2,23460
    cfac:	10800017 	ldw	r2,0(r2)
    cfb0:	100b883a 	mov	r5,r2
    cfb4:	01800074 	movhi	r6,1
    cfb8:	31b48604 	addi	r6,r6,-11752
    cfbc:	e1fffd17 	ldw	r7,-12(fp)
    cfc0:	00106e80 	call	106e8 <alt_alarm_start>
    cfc4:	1004403a 	cmpge	r2,r2,zero
    cfc8:	1000041e 	bne	r2,zero,cfdc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    cfcc:	e0fffd17 	ldw	r3,-12(fp)
    cfd0:	00a00034 	movhi	r2,32768
    cfd4:	10bfffc4 	addi	r2,r2,-1
    cfd8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    cfdc:	e037883a 	mov	sp,fp
    cfe0:	dfc00117 	ldw	ra,4(sp)
    cfe4:	df000017 	ldw	fp,0(sp)
    cfe8:	dec00204 	addi	sp,sp,8
    cfec:	f800283a 	ret

0000cff0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    cff0:	defff804 	addi	sp,sp,-32
    cff4:	df000715 	stw	fp,28(sp)
    cff8:	df000704 	addi	fp,sp,28
    cffc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d000:	e0bfff17 	ldw	r2,-4(fp)
    d004:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    d008:	e0bffe17 	ldw	r2,-8(fp)
    d00c:	10800017 	ldw	r2,0(r2)
    d010:	e0bffd15 	stw	r2,-12(fp)
    d014:	00000006 	br	d018 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d018:	e0bffd17 	ldw	r2,-12(fp)
    d01c:	10800104 	addi	r2,r2,4
    d020:	10800037 	ldwio	r2,0(r2)
    d024:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d028:	e0bffc17 	ldw	r2,-16(fp)
    d02c:	1080c00c 	andi	r2,r2,768
    d030:	1005003a 	cmpeq	r2,r2,zero
    d034:	1000741e 	bne	r2,zero,d208 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d038:	e0bffc17 	ldw	r2,-16(fp)
    d03c:	1080400c 	andi	r2,r2,256
    d040:	1005003a 	cmpeq	r2,r2,zero
    d044:	1000351e 	bne	r2,zero,d11c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d048:	00800074 	movhi	r2,1
    d04c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d050:	e0bffe17 	ldw	r2,-8(fp)
    d054:	10800a17 	ldw	r2,40(r2)
    d058:	10800044 	addi	r2,r2,1
    d05c:	1081ffcc 	andi	r2,r2,2047
    d060:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    d064:	e0bffe17 	ldw	r2,-8(fp)
    d068:	10c00b17 	ldw	r3,44(r2)
    d06c:	e0bffa17 	ldw	r2,-24(fp)
    d070:	18801626 	beq	r3,r2,d0cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d074:	e0bffd17 	ldw	r2,-12(fp)
    d078:	10800037 	ldwio	r2,0(r2)
    d07c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d080:	e0bffb17 	ldw	r2,-20(fp)
    d084:	10a0000c 	andi	r2,r2,32768
    d088:	1005003a 	cmpeq	r2,r2,zero
    d08c:	10000f1e 	bne	r2,zero,d0cc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d090:	e0bffe17 	ldw	r2,-8(fp)
    d094:	10c00a17 	ldw	r3,40(r2)
    d098:	e0bffb17 	ldw	r2,-20(fp)
    d09c:	1009883a 	mov	r4,r2
    d0a0:	e0bffe17 	ldw	r2,-8(fp)
    d0a4:	1885883a 	add	r2,r3,r2
    d0a8:	10800e04 	addi	r2,r2,56
    d0ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d0b0:	e0bffe17 	ldw	r2,-8(fp)
    d0b4:	10800a17 	ldw	r2,40(r2)
    d0b8:	10800044 	addi	r2,r2,1
    d0bc:	10c1ffcc 	andi	r3,r2,2047
    d0c0:	e0bffe17 	ldw	r2,-8(fp)
    d0c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    d0c8:	003fe106 	br	d050 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d0cc:	e0bffb17 	ldw	r2,-20(fp)
    d0d0:	10bfffec 	andhi	r2,r2,65535
    d0d4:	1005003a 	cmpeq	r2,r2,zero
    d0d8:	1000101e 	bne	r2,zero,d11c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d0dc:	e0bffe17 	ldw	r2,-8(fp)
    d0e0:	10c00817 	ldw	r3,32(r2)
    d0e4:	00bfff84 	movi	r2,-2
    d0e8:	1886703a 	and	r3,r3,r2
    d0ec:	e0bffe17 	ldw	r2,-8(fp)
    d0f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d0f4:	e0bffd17 	ldw	r2,-12(fp)
    d0f8:	11000104 	addi	r4,r2,4
    d0fc:	e0bffe17 	ldw	r2,-8(fp)
    d100:	10800817 	ldw	r2,32(r2)
    d104:	1007883a 	mov	r3,r2
    d108:	2005883a 	mov	r2,r4
    d10c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d110:	e0bffd17 	ldw	r2,-12(fp)
    d114:	10800104 	addi	r2,r2,4
    d118:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d11c:	e0bffc17 	ldw	r2,-16(fp)
    d120:	1080800c 	andi	r2,r2,512
    d124:	1005003a 	cmpeq	r2,r2,zero
    d128:	103fbb1e 	bne	r2,zero,d018 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d12c:	e0bffc17 	ldw	r2,-16(fp)
    d130:	10bfffec 	andhi	r2,r2,65535
    d134:	1004d43a 	srli	r2,r2,16
    d138:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d13c:	00001506 	br	d194 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d140:	e13ffd17 	ldw	r4,-12(fp)
    d144:	e0bffe17 	ldw	r2,-8(fp)
    d148:	10c00d17 	ldw	r3,52(r2)
    d14c:	e0bffe17 	ldw	r2,-8(fp)
    d150:	1885883a 	add	r2,r3,r2
    d154:	10820e04 	addi	r2,r2,2104
    d158:	10800003 	ldbu	r2,0(r2)
    d15c:	10c03fcc 	andi	r3,r2,255
    d160:	18c0201c 	xori	r3,r3,128
    d164:	18ffe004 	addi	r3,r3,-128
    d168:	2005883a 	mov	r2,r4
    d16c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d170:	e0bffe17 	ldw	r2,-8(fp)
    d174:	10800d17 	ldw	r2,52(r2)
    d178:	10800044 	addi	r2,r2,1
    d17c:	10c1ffcc 	andi	r3,r2,2047
    d180:	e0bffe17 	ldw	r2,-8(fp)
    d184:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d188:	e0bff917 	ldw	r2,-28(fp)
    d18c:	10bfffc4 	addi	r2,r2,-1
    d190:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d194:	e0bff917 	ldw	r2,-28(fp)
    d198:	1005003a 	cmpeq	r2,r2,zero
    d19c:	1000051e 	bne	r2,zero,d1b4 <altera_avalon_jtag_uart_irq+0x1c4>
    d1a0:	e0bffe17 	ldw	r2,-8(fp)
    d1a4:	10c00d17 	ldw	r3,52(r2)
    d1a8:	e0bffe17 	ldw	r2,-8(fp)
    d1ac:	10800c17 	ldw	r2,48(r2)
    d1b0:	18bfe31e 	bne	r3,r2,d140 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d1b4:	e0bff917 	ldw	r2,-28(fp)
    d1b8:	1005003a 	cmpeq	r2,r2,zero
    d1bc:	103f961e 	bne	r2,zero,d018 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d1c0:	e0bffe17 	ldw	r2,-8(fp)
    d1c4:	10c00817 	ldw	r3,32(r2)
    d1c8:	00bfff44 	movi	r2,-3
    d1cc:	1886703a 	and	r3,r3,r2
    d1d0:	e0bffe17 	ldw	r2,-8(fp)
    d1d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	10800017 	ldw	r2,0(r2)
    d1e0:	11000104 	addi	r4,r2,4
    d1e4:	e0bffe17 	ldw	r2,-8(fp)
    d1e8:	10800817 	ldw	r2,32(r2)
    d1ec:	1007883a 	mov	r3,r2
    d1f0:	2005883a 	mov	r2,r4
    d1f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d1f8:	e0bffd17 	ldw	r2,-12(fp)
    d1fc:	10800104 	addi	r2,r2,4
    d200:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d204:	003f8406 	br	d018 <altera_avalon_jtag_uart_irq+0x28>
}
    d208:	e037883a 	mov	sp,fp
    d20c:	df000017 	ldw	fp,0(sp)
    d210:	dec00104 	addi	sp,sp,4
    d214:	f800283a 	ret

0000d218 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d218:	defffc04 	addi	sp,sp,-16
    d21c:	df000315 	stw	fp,12(sp)
    d220:	df000304 	addi	fp,sp,12
    d224:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d228:	e0bfff17 	ldw	r2,-4(fp)
    d22c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d230:	e0bffe17 	ldw	r2,-8(fp)
    d234:	10800017 	ldw	r2,0(r2)
    d238:	10800104 	addi	r2,r2,4
    d23c:	10800037 	ldwio	r2,0(r2)
    d240:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d244:	e0bffd17 	ldw	r2,-12(fp)
    d248:	1081000c 	andi	r2,r2,1024
    d24c:	1005003a 	cmpeq	r2,r2,zero
    d250:	10000c1e 	bne	r2,zero,d284 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d254:	e0bffe17 	ldw	r2,-8(fp)
    d258:	10800017 	ldw	r2,0(r2)
    d25c:	11000104 	addi	r4,r2,4
    d260:	e0bffe17 	ldw	r2,-8(fp)
    d264:	10800817 	ldw	r2,32(r2)
    d268:	10810014 	ori	r2,r2,1024
    d26c:	1007883a 	mov	r3,r2
    d270:	2005883a 	mov	r2,r4
    d274:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    d278:	e0bffe17 	ldw	r2,-8(fp)
    d27c:	10000915 	stw	zero,36(r2)
    d280:	00000a06 	br	d2ac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d284:	e0bffe17 	ldw	r2,-8(fp)
    d288:	10c00917 	ldw	r3,36(r2)
    d28c:	00a00034 	movhi	r2,32768
    d290:	10bfff04 	addi	r2,r2,-4
    d294:	10c00536 	bltu	r2,r3,d2ac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    d298:	e0bffe17 	ldw	r2,-8(fp)
    d29c:	10800917 	ldw	r2,36(r2)
    d2a0:	10c00044 	addi	r3,r2,1
    d2a4:	e0bffe17 	ldw	r2,-8(fp)
    d2a8:	10c00915 	stw	r3,36(r2)
    d2ac:	00800074 	movhi	r2,1
    d2b0:	1096e904 	addi	r2,r2,23460
    d2b4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    d2b8:	e037883a 	mov	sp,fp
    d2bc:	df000017 	ldw	fp,0(sp)
    d2c0:	dec00104 	addi	sp,sp,4
    d2c4:	f800283a 	ret

0000d2c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    d2c8:	defffc04 	addi	sp,sp,-16
    d2cc:	df000315 	stw	fp,12(sp)
    d2d0:	df000304 	addi	fp,sp,12
    d2d4:	e13ffd15 	stw	r4,-12(fp)
    d2d8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d2dc:	00000706 	br	d2fc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    d2e0:	e0bffe17 	ldw	r2,-8(fp)
    d2e4:	1090000c 	andi	r2,r2,16384
    d2e8:	1005003a 	cmpeq	r2,r2,zero
    d2ec:	1000031e 	bne	r2,zero,d2fc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    d2f0:	00bffd44 	movi	r2,-11
    d2f4:	e0bfff15 	stw	r2,-4(fp)
    d2f8:	00000b06 	br	d328 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d2fc:	e0bffd17 	ldw	r2,-12(fp)
    d300:	10c00d17 	ldw	r3,52(r2)
    d304:	e0bffd17 	ldw	r2,-12(fp)
    d308:	10800c17 	ldw	r2,48(r2)
    d30c:	18800526 	beq	r3,r2,d324 <altera_avalon_jtag_uart_close+0x5c>
    d310:	e0bffd17 	ldw	r2,-12(fp)
    d314:	10c00917 	ldw	r3,36(r2)
    d318:	e0bffd17 	ldw	r2,-12(fp)
    d31c:	10800117 	ldw	r2,4(r2)
    d320:	18bfef36 	bltu	r3,r2,d2e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d324:	e03fff15 	stw	zero,-4(fp)
    d328:	e0bfff17 	ldw	r2,-4(fp)
}
    d32c:	e037883a 	mov	sp,fp
    d330:	df000017 	ldw	fp,0(sp)
    d334:	dec00104 	addi	sp,sp,4
    d338:	f800283a 	ret

0000d33c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    d33c:	defff804 	addi	sp,sp,-32
    d340:	df000715 	stw	fp,28(sp)
    d344:	df000704 	addi	fp,sp,28
    d348:	e13ffb15 	stw	r4,-20(fp)
    d34c:	e17ffc15 	stw	r5,-16(fp)
    d350:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    d354:	00bff9c4 	movi	r2,-25
    d358:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    d35c:	e0bffc17 	ldw	r2,-16(fp)
    d360:	e0bfff15 	stw	r2,-4(fp)
    d364:	e0ffff17 	ldw	r3,-4(fp)
    d368:	189a8060 	cmpeqi	r2,r3,27137
    d36c:	1000041e 	bne	r2,zero,d380 <altera_avalon_jtag_uart_ioctl+0x44>
    d370:	e0ffff17 	ldw	r3,-4(fp)
    d374:	189a80a0 	cmpeqi	r2,r3,27138
    d378:	10001b1e 	bne	r2,zero,d3e8 <altera_avalon_jtag_uart_ioctl+0xac>
    d37c:	00002706 	br	d41c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d380:	e0bffb17 	ldw	r2,-20(fp)
    d384:	10c00117 	ldw	r3,4(r2)
    d388:	00a00034 	movhi	r2,32768
    d38c:	10bfffc4 	addi	r2,r2,-1
    d390:	18802226 	beq	r3,r2,d41c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    d394:	e0bffd17 	ldw	r2,-12(fp)
    d398:	10800017 	ldw	r2,0(r2)
    d39c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d3a0:	e0bff917 	ldw	r2,-28(fp)
    d3a4:	10800090 	cmplti	r2,r2,2
    d3a8:	1000071e 	bne	r2,zero,d3c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    d3ac:	e0fff917 	ldw	r3,-28(fp)
    d3b0:	00a00034 	movhi	r2,32768
    d3b4:	10bfffc4 	addi	r2,r2,-1
    d3b8:	18800326 	beq	r3,r2,d3c8 <altera_avalon_jtag_uart_ioctl+0x8c>
    d3bc:	e0bff917 	ldw	r2,-28(fp)
    d3c0:	e0bffe15 	stw	r2,-8(fp)
    d3c4:	00000306 	br	d3d4 <altera_avalon_jtag_uart_ioctl+0x98>
    d3c8:	00e00034 	movhi	r3,32768
    d3cc:	18ffff84 	addi	r3,r3,-2
    d3d0:	e0fffe15 	stw	r3,-8(fp)
    d3d4:	e0bffb17 	ldw	r2,-20(fp)
    d3d8:	e0fffe17 	ldw	r3,-8(fp)
    d3dc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    d3e0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    d3e4:	00000d06 	br	d41c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d3e8:	e0bffb17 	ldw	r2,-20(fp)
    d3ec:	10c00117 	ldw	r3,4(r2)
    d3f0:	00a00034 	movhi	r2,32768
    d3f4:	10bfffc4 	addi	r2,r2,-1
    d3f8:	18800826 	beq	r3,r2,d41c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d3fc:	e13ffd17 	ldw	r4,-12(fp)
    d400:	e0bffb17 	ldw	r2,-20(fp)
    d404:	10c00917 	ldw	r3,36(r2)
    d408:	e0bffb17 	ldw	r2,-20(fp)
    d40c:	10800117 	ldw	r2,4(r2)
    d410:	1885803a 	cmpltu	r2,r3,r2
    d414:	20800015 	stw	r2,0(r4)
      rc = 0;
    d418:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    d41c:	e0bffa17 	ldw	r2,-24(fp)
}
    d420:	e037883a 	mov	sp,fp
    d424:	df000017 	ldw	fp,0(sp)
    d428:	dec00104 	addi	sp,sp,4
    d42c:	f800283a 	ret

0000d430 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d430:	defff204 	addi	sp,sp,-56
    d434:	dfc00d15 	stw	ra,52(sp)
    d438:	df000c15 	stw	fp,48(sp)
    d43c:	df000c04 	addi	fp,sp,48
    d440:	e13ffb15 	stw	r4,-20(fp)
    d444:	e17ffc15 	stw	r5,-16(fp)
    d448:	e1bffd15 	stw	r6,-12(fp)
    d44c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    d450:	e0bffc17 	ldw	r2,-16(fp)
    d454:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d458:	00004806 	br	d57c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d45c:	e0bffb17 	ldw	r2,-20(fp)
    d460:	10800a17 	ldw	r2,40(r2)
    d464:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    d468:	e0bffb17 	ldw	r2,-20(fp)
    d46c:	10800b17 	ldw	r2,44(r2)
    d470:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    d474:	e0fff717 	ldw	r3,-36(fp)
    d478:	e0bff617 	ldw	r2,-40(fp)
    d47c:	18800536 	bltu	r3,r2,d494 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    d480:	e0bff717 	ldw	r2,-36(fp)
    d484:	e0fff617 	ldw	r3,-40(fp)
    d488:	10c5c83a 	sub	r2,r2,r3
    d48c:	e0bff815 	stw	r2,-32(fp)
    d490:	00000406 	br	d4a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d494:	00820004 	movi	r2,2048
    d498:	e0fff617 	ldw	r3,-40(fp)
    d49c:	10c5c83a 	sub	r2,r2,r3
    d4a0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d4a4:	e0bff817 	ldw	r2,-32(fp)
    d4a8:	1005003a 	cmpeq	r2,r2,zero
    d4ac:	10001f1e 	bne	r2,zero,d52c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    d4b0:	e0fffd17 	ldw	r3,-12(fp)
    d4b4:	e0bff817 	ldw	r2,-32(fp)
    d4b8:	1880022e 	bgeu	r3,r2,d4c4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    d4bc:	e0bffd17 	ldw	r2,-12(fp)
    d4c0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d4c4:	e0bffb17 	ldw	r2,-20(fp)
    d4c8:	10c00e04 	addi	r3,r2,56
    d4cc:	e0bff617 	ldw	r2,-40(fp)
    d4d0:	1887883a 	add	r3,r3,r2
    d4d4:	e0bffa17 	ldw	r2,-24(fp)
    d4d8:	1009883a 	mov	r4,r2
    d4dc:	180b883a 	mov	r5,r3
    d4e0:	e1bff817 	ldw	r6,-32(fp)
    d4e4:	0002adc0 	call	2adc <memcpy>
      ptr   += n;
    d4e8:	e0fff817 	ldw	r3,-32(fp)
    d4ec:	e0bffa17 	ldw	r2,-24(fp)
    d4f0:	10c5883a 	add	r2,r2,r3
    d4f4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    d4f8:	e0fffd17 	ldw	r3,-12(fp)
    d4fc:	e0bff817 	ldw	r2,-32(fp)
    d500:	1885c83a 	sub	r2,r3,r2
    d504:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d508:	e0fff617 	ldw	r3,-40(fp)
    d50c:	e0bff817 	ldw	r2,-32(fp)
    d510:	1885883a 	add	r2,r3,r2
    d514:	10c1ffcc 	andi	r3,r2,2047
    d518:	e0bffb17 	ldw	r2,-20(fp)
    d51c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    d520:	e0bffd17 	ldw	r2,-12(fp)
    d524:	10800048 	cmpgei	r2,r2,1
    d528:	103fcc1e 	bne	r2,zero,d45c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    d52c:	e0fffa17 	ldw	r3,-24(fp)
    d530:	e0bffc17 	ldw	r2,-16(fp)
    d534:	1880141e 	bne	r3,r2,d588 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d538:	e0bffe17 	ldw	r2,-8(fp)
    d53c:	1090000c 	andi	r2,r2,16384
    d540:	1004c03a 	cmpne	r2,r2,zero
    d544:	1000101e 	bne	r2,zero,d588 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d548:	e0bffb17 	ldw	r2,-20(fp)
    d54c:	10c00a17 	ldw	r3,40(r2)
    d550:	e0bff717 	ldw	r2,-36(fp)
    d554:	1880051e 	bne	r3,r2,d56c <altera_avalon_jtag_uart_read+0x13c>
    d558:	e0bffb17 	ldw	r2,-20(fp)
    d55c:	10c00917 	ldw	r3,36(r2)
    d560:	e0bffb17 	ldw	r2,-20(fp)
    d564:	10800117 	ldw	r2,4(r2)
    d568:	18bff736 	bltu	r3,r2,d548 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d56c:	e0bffb17 	ldw	r2,-20(fp)
    d570:	10c00a17 	ldw	r3,40(r2)
    d574:	e0bff717 	ldw	r2,-36(fp)
    d578:	18800326 	beq	r3,r2,d588 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d57c:	e0bffd17 	ldw	r2,-12(fp)
    d580:	10800048 	cmpgei	r2,r2,1
    d584:	103fb51e 	bne	r2,zero,d45c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    d588:	e0fffa17 	ldw	r3,-24(fp)
    d58c:	e0bffc17 	ldw	r2,-16(fp)
    d590:	18801926 	beq	r3,r2,d5f8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d594:	0005303a 	rdctl	r2,status
    d598:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d59c:	e0fff517 	ldw	r3,-44(fp)
    d5a0:	00bfff84 	movi	r2,-2
    d5a4:	1884703a 	and	r2,r3,r2
    d5a8:	1001703a 	wrctl	status,r2
  
  return context;
    d5ac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d5b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d5b4:	e0bffb17 	ldw	r2,-20(fp)
    d5b8:	10800817 	ldw	r2,32(r2)
    d5bc:	10c00054 	ori	r3,r2,1
    d5c0:	e0bffb17 	ldw	r2,-20(fp)
    d5c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d5c8:	e0bffb17 	ldw	r2,-20(fp)
    d5cc:	10800017 	ldw	r2,0(r2)
    d5d0:	11000104 	addi	r4,r2,4
    d5d4:	e0bffb17 	ldw	r2,-20(fp)
    d5d8:	10800817 	ldw	r2,32(r2)
    d5dc:	1007883a 	mov	r3,r2
    d5e0:	2005883a 	mov	r2,r4
    d5e4:	10c00035 	stwio	r3,0(r2)
    d5e8:	e0bff917 	ldw	r2,-28(fp)
    d5ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5f0:	e0bff417 	ldw	r2,-48(fp)
    d5f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d5f8:	e0fffa17 	ldw	r3,-24(fp)
    d5fc:	e0bffc17 	ldw	r2,-16(fp)
    d600:	18800526 	beq	r3,r2,d618 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    d604:	e0fffa17 	ldw	r3,-24(fp)
    d608:	e0bffc17 	ldw	r2,-16(fp)
    d60c:	1887c83a 	sub	r3,r3,r2
    d610:	e0ffff15 	stw	r3,-4(fp)
    d614:	00000906 	br	d63c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    d618:	e0bffe17 	ldw	r2,-8(fp)
    d61c:	1090000c 	andi	r2,r2,16384
    d620:	1005003a 	cmpeq	r2,r2,zero
    d624:	1000031e 	bne	r2,zero,d634 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    d628:	00bffd44 	movi	r2,-11
    d62c:	e0bfff15 	stw	r2,-4(fp)
    d630:	00000206 	br	d63c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    d634:	00bffec4 	movi	r2,-5
    d638:	e0bfff15 	stw	r2,-4(fp)
    d63c:	e0bfff17 	ldw	r2,-4(fp)
}
    d640:	e037883a 	mov	sp,fp
    d644:	dfc00117 	ldw	ra,4(sp)
    d648:	df000017 	ldw	fp,0(sp)
    d64c:	dec00204 	addi	sp,sp,8
    d650:	f800283a 	ret

0000d654 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d654:	defff204 	addi	sp,sp,-56
    d658:	dfc00d15 	stw	ra,52(sp)
    d65c:	df000c15 	stw	fp,48(sp)
    d660:	df000c04 	addi	fp,sp,48
    d664:	e13ffb15 	stw	r4,-20(fp)
    d668:	e17ffc15 	stw	r5,-16(fp)
    d66c:	e1bffd15 	stw	r6,-12(fp)
    d670:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d674:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d678:	e0bffc17 	ldw	r2,-16(fp)
    d67c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d680:	00003a06 	br	d76c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d684:	e0bffb17 	ldw	r2,-20(fp)
    d688:	10800c17 	ldw	r2,48(r2)
    d68c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    d690:	e0bffb17 	ldw	r2,-20(fp)
    d694:	10800d17 	ldw	r2,52(r2)
    d698:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    d69c:	e0fffa17 	ldw	r3,-24(fp)
    d6a0:	e0bff917 	ldw	r2,-28(fp)
    d6a4:	1880062e 	bgeu	r3,r2,d6c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    d6a8:	e0fff917 	ldw	r3,-28(fp)
    d6ac:	e0bffa17 	ldw	r2,-24(fp)
    d6b0:	1885c83a 	sub	r2,r3,r2
    d6b4:	10bfffc4 	addi	r2,r2,-1
    d6b8:	e0bff815 	stw	r2,-32(fp)
    d6bc:	00000c06 	br	d6f0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    d6c0:	e0bff917 	ldw	r2,-28(fp)
    d6c4:	1005003a 	cmpeq	r2,r2,zero
    d6c8:	1000051e 	bne	r2,zero,d6e0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d6cc:	00820004 	movi	r2,2048
    d6d0:	e0fffa17 	ldw	r3,-24(fp)
    d6d4:	10c5c83a 	sub	r2,r2,r3
    d6d8:	e0bff815 	stw	r2,-32(fp)
    d6dc:	00000406 	br	d6f0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d6e0:	0081ffc4 	movi	r2,2047
    d6e4:	e0fffa17 	ldw	r3,-24(fp)
    d6e8:	10c5c83a 	sub	r2,r2,r3
    d6ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d6f0:	e0bff817 	ldw	r2,-32(fp)
    d6f4:	1005003a 	cmpeq	r2,r2,zero
    d6f8:	10001f1e 	bne	r2,zero,d778 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    d6fc:	e0fffd17 	ldw	r3,-12(fp)
    d700:	e0bff817 	ldw	r2,-32(fp)
    d704:	1880022e 	bgeu	r3,r2,d710 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    d708:	e0bffd17 	ldw	r2,-12(fp)
    d70c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d710:	e0bffb17 	ldw	r2,-20(fp)
    d714:	10c20e04 	addi	r3,r2,2104
    d718:	e0bffa17 	ldw	r2,-24(fp)
    d71c:	1885883a 	add	r2,r3,r2
    d720:	e0fffc17 	ldw	r3,-16(fp)
    d724:	1009883a 	mov	r4,r2
    d728:	180b883a 	mov	r5,r3
    d72c:	e1bff817 	ldw	r6,-32(fp)
    d730:	0002adc0 	call	2adc <memcpy>
      ptr   += n;
    d734:	e0fff817 	ldw	r3,-32(fp)
    d738:	e0bffc17 	ldw	r2,-16(fp)
    d73c:	10c5883a 	add	r2,r2,r3
    d740:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    d744:	e0fffd17 	ldw	r3,-12(fp)
    d748:	e0bff817 	ldw	r2,-32(fp)
    d74c:	1885c83a 	sub	r2,r3,r2
    d750:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d754:	e0fffa17 	ldw	r3,-24(fp)
    d758:	e0bff817 	ldw	r2,-32(fp)
    d75c:	1885883a 	add	r2,r3,r2
    d760:	10c1ffcc 	andi	r3,r2,2047
    d764:	e0bffb17 	ldw	r2,-20(fp)
    d768:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d76c:	e0bffd17 	ldw	r2,-12(fp)
    d770:	10800048 	cmpgei	r2,r2,1
    d774:	103fc31e 	bne	r2,zero,d684 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d778:	0005303a 	rdctl	r2,status
    d77c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d780:	e0fff517 	ldw	r3,-44(fp)
    d784:	00bfff84 	movi	r2,-2
    d788:	1884703a 	and	r2,r3,r2
    d78c:	1001703a 	wrctl	status,r2
  
  return context;
    d790:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d794:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d798:	e0bffb17 	ldw	r2,-20(fp)
    d79c:	10800817 	ldw	r2,32(r2)
    d7a0:	10c00094 	ori	r3,r2,2
    d7a4:	e0bffb17 	ldw	r2,-20(fp)
    d7a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d7ac:	e0bffb17 	ldw	r2,-20(fp)
    d7b0:	10800017 	ldw	r2,0(r2)
    d7b4:	11000104 	addi	r4,r2,4
    d7b8:	e0bffb17 	ldw	r2,-20(fp)
    d7bc:	10800817 	ldw	r2,32(r2)
    d7c0:	1007883a 	mov	r3,r2
    d7c4:	2005883a 	mov	r2,r4
    d7c8:	10c00035 	stwio	r3,0(r2)
    d7cc:	e0bff717 	ldw	r2,-36(fp)
    d7d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7d4:	e0bff417 	ldw	r2,-48(fp)
    d7d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d7dc:	e0bffd17 	ldw	r2,-12(fp)
    d7e0:	10800050 	cmplti	r2,r2,1
    d7e4:	1000111e 	bne	r2,zero,d82c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d7e8:	e0bffe17 	ldw	r2,-8(fp)
    d7ec:	1090000c 	andi	r2,r2,16384
    d7f0:	1004c03a 	cmpne	r2,r2,zero
    d7f4:	1000101e 	bne	r2,zero,d838 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d7f8:	e0bffb17 	ldw	r2,-20(fp)
    d7fc:	10c00d17 	ldw	r3,52(r2)
    d800:	e0bff917 	ldw	r2,-28(fp)
    d804:	1880051e 	bne	r3,r2,d81c <altera_avalon_jtag_uart_write+0x1c8>
    d808:	e0bffb17 	ldw	r2,-20(fp)
    d80c:	10c00917 	ldw	r3,36(r2)
    d810:	e0bffb17 	ldw	r2,-20(fp)
    d814:	10800117 	ldw	r2,4(r2)
    d818:	18bff736 	bltu	r3,r2,d7f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d81c:	e0bffb17 	ldw	r2,-20(fp)
    d820:	10c00d17 	ldw	r3,52(r2)
    d824:	e0bff917 	ldw	r2,-28(fp)
    d828:	18800326 	beq	r3,r2,d838 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    d82c:	e0bffd17 	ldw	r2,-12(fp)
    d830:	10800048 	cmpgei	r2,r2,1
    d834:	103fcd1e 	bne	r2,zero,d76c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d838:	e0fffc17 	ldw	r3,-16(fp)
    d83c:	e0bff617 	ldw	r2,-40(fp)
    d840:	18800526 	beq	r3,r2,d858 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d844:	e0fffc17 	ldw	r3,-16(fp)
    d848:	e0bff617 	ldw	r2,-40(fp)
    d84c:	1887c83a 	sub	r3,r3,r2
    d850:	e0ffff15 	stw	r3,-4(fp)
    d854:	00000906 	br	d87c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d858:	e0bffe17 	ldw	r2,-8(fp)
    d85c:	1090000c 	andi	r2,r2,16384
    d860:	1005003a 	cmpeq	r2,r2,zero
    d864:	1000031e 	bne	r2,zero,d874 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d868:	00bffd44 	movi	r2,-11
    d86c:	e0bfff15 	stw	r2,-4(fp)
    d870:	00000206 	br	d87c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d874:	00bffec4 	movi	r2,-5
    d878:	e0bfff15 	stw	r2,-4(fp)
    d87c:	e0bfff17 	ldw	r2,-4(fp)
}
    d880:	e037883a 	mov	sp,fp
    d884:	dfc00117 	ldw	ra,4(sp)
    d888:	df000017 	ldw	fp,0(sp)
    d88c:	dec00204 	addi	sp,sp,8
    d890:	f800283a 	ret

0000d894 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    d894:	defffd04 	addi	sp,sp,-12
    d898:	df000215 	stw	fp,8(sp)
    d89c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
    d8a0:	00800074 	movhi	r2,1
    d8a4:	1096e704 	addi	r2,r2,23452
    d8a8:	10800017 	ldw	r2,0(r2)
    d8ac:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    d8b0:	00800074 	movhi	r2,1
    d8b4:	1096e804 	addi	r2,r2,23456
    d8b8:	10800017 	ldw	r2,0(r2)
    d8bc:	1004c03a 	cmpne	r2,r2,zero
    d8c0:	1000031e 	bne	r2,zero,d8d0 <alt_timestamp_start+0x3c>
  {
    return -1;
    d8c4:	00bfffc4 	movi	r2,-1
    d8c8:	e0bfff15 	stw	r2,-4(fp)
    d8cc:	00001506 	br	d924 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    d8d0:	e0bffe17 	ldw	r2,-8(fp)
    d8d4:	10800104 	addi	r2,r2,4
    d8d8:	1007883a 	mov	r3,r2
    d8dc:	00800204 	movi	r2,8
    d8e0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    d8e4:	e0bffe17 	ldw	r2,-8(fp)
    d8e8:	10800204 	addi	r2,r2,8
    d8ec:	1007883a 	mov	r3,r2
    d8f0:	00bfffd4 	movui	r2,65535
    d8f4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    d8f8:	e0bffe17 	ldw	r2,-8(fp)
    d8fc:	10800304 	addi	r2,r2,12
    d900:	1007883a 	mov	r3,r2
    d904:	00bfffd4 	movui	r2,65535
    d908:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    d90c:	e0bffe17 	ldw	r2,-8(fp)
    d910:	10800104 	addi	r2,r2,4
    d914:	1007883a 	mov	r3,r2
    d918:	00800104 	movi	r2,4
    d91c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    d920:	e03fff15 	stw	zero,-4(fp)
    d924:	e0bfff17 	ldw	r2,-4(fp)
}
    d928:	e037883a 	mov	sp,fp
    d92c:	df000017 	ldw	fp,0(sp)
    d930:	dec00104 	addi	sp,sp,4
    d934:	f800283a 	ret

0000d938 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    d938:	defffb04 	addi	sp,sp,-20
    d93c:	df000415 	stw	fp,16(sp)
    d940:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
    d944:	00800074 	movhi	r2,1
    d948:	1096e704 	addi	r2,r2,23452
    d94c:	10800017 	ldw	r2,0(r2)
    d950:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    d954:	00800074 	movhi	r2,1
    d958:	1096e804 	addi	r2,r2,23456
    d95c:	10800017 	ldw	r2,0(r2)
    d960:	1004c03a 	cmpne	r2,r2,zero
    d964:	1000031e 	bne	r2,zero,d974 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    d968:	00bfffc4 	movi	r2,-1
    d96c:	e0bfff15 	stw	r2,-4(fp)
    d970:	00001306 	br	d9c0 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    d974:	e0bffe17 	ldw	r2,-8(fp)
    d978:	10800404 	addi	r2,r2,16
    d97c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    d980:	e0bffe17 	ldw	r2,-8(fp)
    d984:	10800404 	addi	r2,r2,16
    d988:	10800037 	ldwio	r2,0(r2)
    d98c:	10bfffcc 	andi	r2,r2,65535
    d990:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    d994:	e0bffe17 	ldw	r2,-8(fp)
    d998:	10800504 	addi	r2,r2,20
    d99c:	10800037 	ldwio	r2,0(r2)
    d9a0:	10bfffcc 	andi	r2,r2,65535
    d9a4:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    d9a8:	e0bffc17 	ldw	r2,-16(fp)
    d9ac:	1006943a 	slli	r3,r2,16
    d9b0:	e0bffd17 	ldw	r2,-12(fp)
    d9b4:	1884b03a 	or	r2,r3,r2
    d9b8:	0084303a 	nor	r2,zero,r2
    d9bc:	e0bfff15 	stw	r2,-4(fp)
    d9c0:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	df000017 	ldw	fp,0(sp)
    d9cc:	dec00104 	addi	sp,sp,4
    d9d0:	f800283a 	ret

0000d9d4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    d9d4:	deffff04 	addi	sp,sp,-4
    d9d8:	df000015 	stw	fp,0(sp)
    d9dc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    d9e0:	00800074 	movhi	r2,1
    d9e4:	1096e804 	addi	r2,r2,23456
    d9e8:	10800017 	ldw	r2,0(r2)
}
    d9ec:	e037883a 	mov	sp,fp
    d9f0:	df000017 	ldw	fp,0(sp)
    d9f4:	dec00104 	addi	sp,sp,4
    d9f8:	f800283a 	ret

0000d9fc <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    d9fc:	defffc04 	addi	sp,sp,-16
    da00:	dfc00315 	stw	ra,12(sp)
    da04:	df000215 	stw	fp,8(sp)
    da08:	df000204 	addi	fp,sp,8
    da0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    da10:	e13fff17 	ldw	r4,-4(fp)
    da14:	01400074 	movhi	r5,1
    da18:	294fe604 	addi	r5,r5,16280
    da1c:	0010a340 	call	10a34 <alt_find_dev>
    da20:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    da24:	e0bffe17 	ldw	r2,-8(fp)
}
    da28:	e037883a 	mov	sp,fp
    da2c:	dfc00117 	ldw	ra,4(sp)
    da30:	df000017 	ldw	fp,0(sp)
    da34:	dec00204 	addi	sp,sp,8
    da38:	f800283a 	ret

0000da3c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    da3c:	defffd04 	addi	sp,sp,-12
    da40:	df000215 	stw	fp,8(sp)
    da44:	df000204 	addi	fp,sp,8
    da48:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    da4c:	e0bfff17 	ldw	r2,-4(fp)
    da50:	10800a17 	ldw	r2,40(r2)
    da54:	10800037 	ldwio	r2,0(r2)
    da58:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    da5c:	e0bffe17 	ldw	r2,-8(fp)
    da60:	10800054 	ori	r2,r2,1
    da64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    da68:	e0bfff17 	ldw	r2,-4(fp)
    da6c:	10800a17 	ldw	r2,40(r2)
    da70:	e0fffe17 	ldw	r3,-8(fp)
    da74:	10c00035 	stwio	r3,0(r2)
}
    da78:	e037883a 	mov	sp,fp
    da7c:	df000017 	ldw	fp,0(sp)
    da80:	dec00104 	addi	sp,sp,4
    da84:	f800283a 	ret

0000da88 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    da88:	defffd04 	addi	sp,sp,-12
    da8c:	df000215 	stw	fp,8(sp)
    da90:	df000204 	addi	fp,sp,8
    da94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    da98:	e0bfff17 	ldw	r2,-4(fp)
    da9c:	10800a17 	ldw	r2,40(r2)
    daa0:	10800037 	ldwio	r2,0(r2)
    daa4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    daa8:	e0fffe17 	ldw	r3,-8(fp)
    daac:	00bfff84 	movi	r2,-2
    dab0:	1884703a 	and	r2,r3,r2
    dab4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    dab8:	e0bfff17 	ldw	r2,-4(fp)
    dabc:	10800a17 	ldw	r2,40(r2)
    dac0:	e0fffe17 	ldw	r3,-8(fp)
    dac4:	10c00035 	stwio	r3,0(r2)
}
    dac8:	e037883a 	mov	sp,fp
    dacc:	df000017 	ldw	fp,0(sp)
    dad0:	dec00104 	addi	sp,sp,4
    dad4:	f800283a 	ret

0000dad8 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    dad8:	defffd04 	addi	sp,sp,-12
    dadc:	df000215 	stw	fp,8(sp)
    dae0:	df000204 	addi	fp,sp,8
    dae4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    dae8:	e0bfff17 	ldw	r2,-4(fp)
    daec:	10800a17 	ldw	r2,40(r2)
    daf0:	10800037 	ldwio	r2,0(r2)
    daf4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    daf8:	e0bffe17 	ldw	r2,-8(fp)
    dafc:	10800094 	ori	r2,r2,2
    db00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    db04:	e0bfff17 	ldw	r2,-4(fp)
    db08:	10800a17 	ldw	r2,40(r2)
    db0c:	e0fffe17 	ldw	r3,-8(fp)
    db10:	10c00035 	stwio	r3,0(r2)
}
    db14:	e037883a 	mov	sp,fp
    db18:	df000017 	ldw	fp,0(sp)
    db1c:	dec00104 	addi	sp,sp,4
    db20:	f800283a 	ret

0000db24 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    db24:	defffd04 	addi	sp,sp,-12
    db28:	df000215 	stw	fp,8(sp)
    db2c:	df000204 	addi	fp,sp,8
    db30:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    db34:	e0bfff17 	ldw	r2,-4(fp)
    db38:	10800a17 	ldw	r2,40(r2)
    db3c:	10800037 	ldwio	r2,0(r2)
    db40:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    db44:	e0fffe17 	ldw	r3,-8(fp)
    db48:	00bfff44 	movi	r2,-3
    db4c:	1884703a 	and	r2,r3,r2
    db50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    db54:	e0bfff17 	ldw	r2,-4(fp)
    db58:	10800a17 	ldw	r2,40(r2)
    db5c:	e0fffe17 	ldw	r3,-8(fp)
    db60:	10c00035 	stwio	r3,0(r2)
}
    db64:	e037883a 	mov	sp,fp
    db68:	df000017 	ldw	fp,0(sp)
    db6c:	dec00104 	addi	sp,sp,4
    db70:	f800283a 	ret

0000db74 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    db74:	defffd04 	addi	sp,sp,-12
    db78:	df000215 	stw	fp,8(sp)
    db7c:	df000204 	addi	fp,sp,8
    db80:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    db84:	e0bfff17 	ldw	r2,-4(fp)
    db88:	10800a17 	ldw	r2,40(r2)
    db8c:	10800037 	ldwio	r2,0(r2)
    db90:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    db94:	e0bffe17 	ldw	r2,-8(fp)
    db98:	1080400c 	andi	r2,r2,256
    db9c:	1004c03a 	cmpne	r2,r2,zero
}
    dba0:	e037883a 	mov	sp,fp
    dba4:	df000017 	ldw	fp,0(sp)
    dba8:	dec00104 	addi	sp,sp,4
    dbac:	f800283a 	ret

0000dbb0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    dbb0:	defffd04 	addi	sp,sp,-12
    dbb4:	df000215 	stw	fp,8(sp)
    dbb8:	df000204 	addi	fp,sp,8
    dbbc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    dbc0:	e0bfff17 	ldw	r2,-4(fp)
    dbc4:	10800a17 	ldw	r2,40(r2)
    dbc8:	10800037 	ldwio	r2,0(r2)
    dbcc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    dbd0:	e0bffe17 	ldw	r2,-8(fp)
    dbd4:	1080800c 	andi	r2,r2,512
    dbd8:	1004c03a 	cmpne	r2,r2,zero
}
    dbdc:	e037883a 	mov	sp,fp
    dbe0:	df000017 	ldw	fp,0(sp)
    dbe4:	dec00104 	addi	sp,sp,4
    dbe8:	f800283a 	ret

0000dbec <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    dbec:	defffd04 	addi	sp,sp,-12
    dbf0:	df000215 	stw	fp,8(sp)
    dbf4:	df000204 	addi	fp,sp,8
    dbf8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    dbfc:	e0bfff17 	ldw	r2,-4(fp)
    dc00:	10800a17 	ldw	r2,40(r2)
    dc04:	10800037 	ldwio	r2,0(r2)
    dc08:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    dc0c:	e0bffe17 	ldw	r2,-8(fp)
    dc10:	10800114 	ori	r2,r2,4
    dc14:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    dc18:	e0bffe17 	ldw	r2,-8(fp)
    dc1c:	10800214 	ori	r2,r2,8
    dc20:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    dc24:	e0bfff17 	ldw	r2,-4(fp)
    dc28:	10800a17 	ldw	r2,40(r2)
    dc2c:	e0fffe17 	ldw	r3,-8(fp)
    dc30:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    dc34:	e0fffe17 	ldw	r3,-8(fp)
    dc38:	00bffec4 	movi	r2,-5
    dc3c:	1884703a 	and	r2,r3,r2
    dc40:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    dc44:	e0fffe17 	ldw	r3,-8(fp)
    dc48:	00bffdc4 	movi	r2,-9
    dc4c:	1884703a 	and	r2,r3,r2
    dc50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    dc54:	e0bfff17 	ldw	r2,-4(fp)
    dc58:	10800a17 	ldw	r2,40(r2)
    dc5c:	e0fffe17 	ldw	r3,-8(fp)
    dc60:	10c00035 	stwio	r3,0(r2)
}
    dc64:	e037883a 	mov	sp,fp
    dc68:	df000017 	ldw	fp,0(sp)
    dc6c:	dec00104 	addi	sp,sp,4
    dc70:	f800283a 	ret

0000dc74 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    dc74:	defffb04 	addi	sp,sp,-20
    dc78:	df000415 	stw	fp,16(sp)
    dc7c:	df000404 	addi	fp,sp,16
    dc80:	e13ffd15 	stw	r4,-12(fp)
    dc84:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    dc88:	e0bffd17 	ldw	r2,-12(fp)
    dc8c:	10800a17 	ldw	r2,40(r2)
    dc90:	10800104 	addi	r2,r2,4
    dc94:	10800037 	ldwio	r2,0(r2)
    dc98:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    dc9c:	e0bffe17 	ldw	r2,-8(fp)
    dca0:	1004c03a 	cmpne	r2,r2,zero
    dca4:	1000051e 	bne	r2,zero,dcbc <alt_up_audio_read_fifo_avail+0x48>
    dca8:	e0bffc17 	ldw	r2,-16(fp)
    dcac:	10bfc00c 	andi	r2,r2,65280
    dcb0:	1004d23a 	srli	r2,r2,8
    dcb4:	e0bfff15 	stw	r2,-4(fp)
    dcb8:	00000306 	br	dcc8 <alt_up_audio_read_fifo_avail+0x54>
    dcbc:	e0bffc17 	ldw	r2,-16(fp)
    dcc0:	10803fcc 	andi	r2,r2,255
    dcc4:	e0bfff15 	stw	r2,-4(fp)
    dcc8:	e0bfff17 	ldw	r2,-4(fp)
    dccc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    dcd0:	e0bffc17 	ldw	r2,-16(fp)
}
    dcd4:	e037883a 	mov	sp,fp
    dcd8:	df000017 	ldw	fp,0(sp)
    dcdc:	dec00104 	addi	sp,sp,4
    dce0:	f800283a 	ret

0000dce4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    dce4:	defff904 	addi	sp,sp,-28
    dce8:	dfc00615 	stw	ra,24(sp)
    dcec:	df000515 	stw	fp,20(sp)
    dcf0:	df000504 	addi	fp,sp,20
    dcf4:	e13ffc15 	stw	r4,-16(fp)
    dcf8:	e17ffd15 	stw	r5,-12(fp)
    dcfc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    dd00:	e13ffc17 	ldw	r4,-16(fp)
    dd04:	01400044 	movi	r5,1
    dd08:	000dc740 	call	dc74 <alt_up_audio_read_fifo_avail>
    dd0c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    dd10:	e0bffb17 	ldw	r2,-20(fp)
    dd14:	10801868 	cmpgeui	r2,r2,97
    dd18:	1000021e 	bne	r2,zero,dd24 <alt_up_audio_record_r+0x40>
		return 0;
    dd1c:	e03fff15 	stw	zero,-4(fp)
    dd20:	00000606 	br	dd3c <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    dd24:	e13ffc17 	ldw	r4,-16(fp)
    dd28:	e17ffd17 	ldw	r5,-12(fp)
    dd2c:	e1bffe17 	ldw	r6,-8(fp)
    dd30:	01c00044 	movi	r7,1
    dd34:	000df180 	call	df18 <alt_up_audio_read_fifo>
    dd38:	e0bfff15 	stw	r2,-4(fp)
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
}
    dd40:	e037883a 	mov	sp,fp
    dd44:	dfc00117 	ldw	ra,4(sp)
    dd48:	df000017 	ldw	fp,0(sp)
    dd4c:	dec00204 	addi	sp,sp,8
    dd50:	f800283a 	ret

0000dd54 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    dd54:	defff904 	addi	sp,sp,-28
    dd58:	dfc00615 	stw	ra,24(sp)
    dd5c:	df000515 	stw	fp,20(sp)
    dd60:	df000504 	addi	fp,sp,20
    dd64:	e13ffc15 	stw	r4,-16(fp)
    dd68:	e17ffd15 	stw	r5,-12(fp)
    dd6c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    dd70:	e13ffc17 	ldw	r4,-16(fp)
    dd74:	000b883a 	mov	r5,zero
    dd78:	000dc740 	call	dc74 <alt_up_audio_read_fifo_avail>
    dd7c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    dd80:	e0bffb17 	ldw	r2,-20(fp)
    dd84:	10801868 	cmpgeui	r2,r2,97
    dd88:	1000021e 	bne	r2,zero,dd94 <alt_up_audio_record_l+0x40>
		return 0;
    dd8c:	e03fff15 	stw	zero,-4(fp)
    dd90:	00000606 	br	ddac <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    dd94:	e13ffc17 	ldw	r4,-16(fp)
    dd98:	e17ffd17 	ldw	r5,-12(fp)
    dd9c:	e1bffe17 	ldw	r6,-8(fp)
    dda0:	000f883a 	mov	r7,zero
    dda4:	000df180 	call	df18 <alt_up_audio_read_fifo>
    dda8:	e0bfff15 	stw	r2,-4(fp)
    ddac:	e0bfff17 	ldw	r2,-4(fp)
}
    ddb0:	e037883a 	mov	sp,fp
    ddb4:	dfc00117 	ldw	ra,4(sp)
    ddb8:	df000017 	ldw	fp,0(sp)
    ddbc:	dec00204 	addi	sp,sp,8
    ddc0:	f800283a 	ret

0000ddc4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    ddc4:	defffb04 	addi	sp,sp,-20
    ddc8:	df000415 	stw	fp,16(sp)
    ddcc:	df000404 	addi	fp,sp,16
    ddd0:	e13ffd15 	stw	r4,-12(fp)
    ddd4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    ddd8:	e0bffd17 	ldw	r2,-12(fp)
    dddc:	10800a17 	ldw	r2,40(r2)
    dde0:	10800104 	addi	r2,r2,4
    dde4:	10800037 	ldwio	r2,0(r2)
    dde8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    ddec:	e0bffe17 	ldw	r2,-8(fp)
    ddf0:	1004c03a 	cmpne	r2,r2,zero
    ddf4:	1000051e 	bne	r2,zero,de0c <alt_up_audio_write_fifo_space+0x48>
    ddf8:	e0bffc17 	ldw	r2,-16(fp)
    ddfc:	10bfc02c 	andhi	r2,r2,65280
    de00:	1004d63a 	srli	r2,r2,24
    de04:	e0bfff15 	stw	r2,-4(fp)
    de08:	00000406 	br	de1c <alt_up_audio_write_fifo_space+0x58>
    de0c:	e0bffc17 	ldw	r2,-16(fp)
    de10:	10803fec 	andhi	r2,r2,255
    de14:	1004d43a 	srli	r2,r2,16
    de18:	e0bfff15 	stw	r2,-4(fp)
    de1c:	e0bfff17 	ldw	r2,-4(fp)
    de20:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    de24:	e0bffc17 	ldw	r2,-16(fp)
}
    de28:	e037883a 	mov	sp,fp
    de2c:	df000017 	ldw	fp,0(sp)
    de30:	dec00104 	addi	sp,sp,4
    de34:	f800283a 	ret

0000de38 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    de38:	defff904 	addi	sp,sp,-28
    de3c:	dfc00615 	stw	ra,24(sp)
    de40:	df000515 	stw	fp,20(sp)
    de44:	df000504 	addi	fp,sp,20
    de48:	e13ffc15 	stw	r4,-16(fp)
    de4c:	e17ffd15 	stw	r5,-12(fp)
    de50:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    de54:	e13ffc17 	ldw	r4,-16(fp)
    de58:	01400044 	movi	r5,1
    de5c:	000ddc40 	call	ddc4 <alt_up_audio_write_fifo_space>
    de60:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    de64:	e0bffb17 	ldw	r2,-20(fp)
    de68:	10801868 	cmpgeui	r2,r2,97
    de6c:	1000021e 	bne	r2,zero,de78 <alt_up_audio_play_r+0x40>
		return 0;
    de70:	e03fff15 	stw	zero,-4(fp)
    de74:	00000606 	br	de90 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    de78:	e13ffc17 	ldw	r4,-16(fp)
    de7c:	e17ffd17 	ldw	r5,-12(fp)
    de80:	e1bffe17 	ldw	r6,-8(fp)
    de84:	01c00044 	movi	r7,1
    de88:	000e01c0 	call	e01c <alt_up_audio_write_fifo>
    de8c:	e0bfff15 	stw	r2,-4(fp)
    de90:	e0bfff17 	ldw	r2,-4(fp)
}
    de94:	e037883a 	mov	sp,fp
    de98:	dfc00117 	ldw	ra,4(sp)
    de9c:	df000017 	ldw	fp,0(sp)
    dea0:	dec00204 	addi	sp,sp,8
    dea4:	f800283a 	ret

0000dea8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    dea8:	defff904 	addi	sp,sp,-28
    deac:	dfc00615 	stw	ra,24(sp)
    deb0:	df000515 	stw	fp,20(sp)
    deb4:	df000504 	addi	fp,sp,20
    deb8:	e13ffc15 	stw	r4,-16(fp)
    debc:	e17ffd15 	stw	r5,-12(fp)
    dec0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    dec4:	e13ffc17 	ldw	r4,-16(fp)
    dec8:	000b883a 	mov	r5,zero
    decc:	000ddc40 	call	ddc4 <alt_up_audio_write_fifo_space>
    ded0:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    ded4:	e0bffb17 	ldw	r2,-20(fp)
    ded8:	10801868 	cmpgeui	r2,r2,97
    dedc:	1000021e 	bne	r2,zero,dee8 <alt_up_audio_play_l+0x40>
		return 0;
    dee0:	e03fff15 	stw	zero,-4(fp)
    dee4:	00000606 	br	df00 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    dee8:	e13ffc17 	ldw	r4,-16(fp)
    deec:	e17ffd17 	ldw	r5,-12(fp)
    def0:	e1bffe17 	ldw	r6,-8(fp)
    def4:	000f883a 	mov	r7,zero
    def8:	000e01c0 	call	e01c <alt_up_audio_write_fifo>
    defc:	e0bfff15 	stw	r2,-4(fp)
    df00:	e0bfff17 	ldw	r2,-4(fp)
}
    df04:	e037883a 	mov	sp,fp
    df08:	dfc00117 	ldw	ra,4(sp)
    df0c:	df000017 	ldw	fp,0(sp)
    df10:	dec00204 	addi	sp,sp,8
    df14:	f800283a 	ret

0000df18 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    df18:	defff604 	addi	sp,sp,-40
    df1c:	df000915 	stw	fp,36(sp)
    df20:	df000904 	addi	fp,sp,36
    df24:	e13ff915 	stw	r4,-28(fp)
    df28:	e17ffa15 	stw	r5,-24(fp)
    df2c:	e1bffb15 	stw	r6,-20(fp)
    df30:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    df34:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    df38:	00003006 	br	dffc <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    df3c:	e0bff917 	ldw	r2,-28(fp)
    df40:	10800a17 	ldw	r2,40(r2)
    df44:	10800104 	addi	r2,r2,4
    df48:	10800037 	ldwio	r2,0(r2)
    df4c:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    df50:	e0bffc17 	ldw	r2,-16(fp)
    df54:	1004c03a 	cmpne	r2,r2,zero
    df58:	1000051e 	bne	r2,zero,df70 <alt_up_audio_read_fifo+0x58>
    df5c:	e0bff817 	ldw	r2,-32(fp)
    df60:	10bfc00c 	andi	r2,r2,65280
    df64:	1004d23a 	srli	r2,r2,8
    df68:	e0bfff15 	stw	r2,-4(fp)
    df6c:	00000306 	br	df7c <alt_up_audio_read_fifo+0x64>
    df70:	e0bff817 	ldw	r2,-32(fp)
    df74:	10803fcc 	andi	r2,r2,255
    df78:	e0bfff15 	stw	r2,-4(fp)
    df7c:	e0bfff17 	ldw	r2,-4(fp)
    df80:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    df84:	e0bff817 	ldw	r2,-32(fp)
    df88:	1005003a 	cmpeq	r2,r2,zero
    df8c:	10001e1e 	bne	r2,zero,e008 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    df90:	e0bff717 	ldw	r2,-36(fp)
    df94:	1085883a 	add	r2,r2,r2
    df98:	1085883a 	add	r2,r2,r2
    df9c:	1007883a 	mov	r3,r2
    dfa0:	e0bffa17 	ldw	r2,-24(fp)
    dfa4:	1887883a 	add	r3,r3,r2
    dfa8:	e0fffe15 	stw	r3,-8(fp)
    dfac:	e0bffc17 	ldw	r2,-16(fp)
    dfb0:	1004c03a 	cmpne	r2,r2,zero
    dfb4:	1000061e 	bne	r2,zero,dfd0 <alt_up_audio_read_fifo+0xb8>
    dfb8:	e0bff917 	ldw	r2,-28(fp)
    dfbc:	10800a17 	ldw	r2,40(r2)
    dfc0:	10800204 	addi	r2,r2,8
    dfc4:	10800037 	ldwio	r2,0(r2)
    dfc8:	e0bffd15 	stw	r2,-12(fp)
    dfcc:	00000506 	br	dfe4 <alt_up_audio_read_fifo+0xcc>
    dfd0:	e0bff917 	ldw	r2,-28(fp)
    dfd4:	10800a17 	ldw	r2,40(r2)
    dfd8:	10800304 	addi	r2,r2,12
    dfdc:	10800037 	ldwio	r2,0(r2)
    dfe0:	e0bffd15 	stw	r2,-12(fp)
    dfe4:	e0fffd17 	ldw	r3,-12(fp)
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
    dfec:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    dff0:	e0bff717 	ldw	r2,-36(fp)
    dff4:	10800044 	addi	r2,r2,1
    dff8:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    dffc:	e0fff717 	ldw	r3,-36(fp)
    e000:	e0bffb17 	ldw	r2,-20(fp)
    e004:	18bfcd16 	blt	r3,r2,df3c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    e008:	e0bff717 	ldw	r2,-36(fp)
}
    e00c:	e037883a 	mov	sp,fp
    e010:	df000017 	ldw	fp,0(sp)
    e014:	dec00104 	addi	sp,sp,4
    e018:	f800283a 	ret

0000e01c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    e01c:	defff804 	addi	sp,sp,-32
    e020:	df000715 	stw	fp,28(sp)
    e024:	df000704 	addi	fp,sp,28
    e028:	e13ffb15 	stw	r4,-20(fp)
    e02c:	e17ffc15 	stw	r5,-16(fp)
    e030:	e1bffd15 	stw	r6,-12(fp)
    e034:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    e038:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    e03c:	00003a06 	br	e128 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    e040:	e0bffb17 	ldw	r2,-20(fp)
    e044:	10800a17 	ldw	r2,40(r2)
    e048:	10800104 	addi	r2,r2,4
    e04c:	10800037 	ldwio	r2,0(r2)
    e050:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    e054:	e0bffe17 	ldw	r2,-8(fp)
    e058:	1004c03a 	cmpne	r2,r2,zero
    e05c:	1000051e 	bne	r2,zero,e074 <alt_up_audio_write_fifo+0x58>
    e060:	e0bffa17 	ldw	r2,-24(fp)
    e064:	10bfc02c 	andhi	r2,r2,65280
    e068:	1004d63a 	srli	r2,r2,24
    e06c:	e0bfff15 	stw	r2,-4(fp)
    e070:	00000406 	br	e084 <alt_up_audio_write_fifo+0x68>
    e074:	e0bffa17 	ldw	r2,-24(fp)
    e078:	10803fec 	andhi	r2,r2,255
    e07c:	1004d43a 	srli	r2,r2,16
    e080:	e0bfff15 	stw	r2,-4(fp)
    e084:	e0bfff17 	ldw	r2,-4(fp)
    e088:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    e08c:	e0bffa17 	ldw	r2,-24(fp)
    e090:	1005003a 	cmpeq	r2,r2,zero
    e094:	1000271e 	bne	r2,zero,e134 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    e098:	e0bffe17 	ldw	r2,-8(fp)
    e09c:	1004c03a 	cmpne	r2,r2,zero
    e0a0:	1000111e 	bne	r2,zero,e0e8 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    e0a4:	e0bffb17 	ldw	r2,-20(fp)
    e0a8:	10800a17 	ldw	r2,40(r2)
    e0ac:	11000204 	addi	r4,r2,8
    e0b0:	e0bff917 	ldw	r2,-28(fp)
    e0b4:	1085883a 	add	r2,r2,r2
    e0b8:	1085883a 	add	r2,r2,r2
    e0bc:	1007883a 	mov	r3,r2
    e0c0:	e0bffc17 	ldw	r2,-16(fp)
    e0c4:	1885883a 	add	r2,r3,r2
    e0c8:	10800017 	ldw	r2,0(r2)
    e0cc:	1007883a 	mov	r3,r2
    e0d0:	e0bff917 	ldw	r2,-28(fp)
    e0d4:	10800044 	addi	r2,r2,1
    e0d8:	e0bff915 	stw	r2,-28(fp)
    e0dc:	2005883a 	mov	r2,r4
    e0e0:	10c00035 	stwio	r3,0(r2)
    e0e4:	00001006 	br	e128 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    e0e8:	e0bffb17 	ldw	r2,-20(fp)
    e0ec:	10800a17 	ldw	r2,40(r2)
    e0f0:	11000304 	addi	r4,r2,12
    e0f4:	e0bff917 	ldw	r2,-28(fp)
    e0f8:	1085883a 	add	r2,r2,r2
    e0fc:	1085883a 	add	r2,r2,r2
    e100:	1007883a 	mov	r3,r2
    e104:	e0bffc17 	ldw	r2,-16(fp)
    e108:	1885883a 	add	r2,r3,r2
    e10c:	10800017 	ldw	r2,0(r2)
    e110:	1007883a 	mov	r3,r2
    e114:	e0bff917 	ldw	r2,-28(fp)
    e118:	10800044 	addi	r2,r2,1
    e11c:	e0bff915 	stw	r2,-28(fp)
    e120:	2005883a 	mov	r2,r4
    e124:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    e128:	e0fff917 	ldw	r3,-28(fp)
    e12c:	e0bffd17 	ldw	r2,-12(fp)
    e130:	18bfc316 	blt	r3,r2,e040 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    e134:	e0bff917 	ldw	r2,-28(fp)
}
    e138:	e037883a 	mov	sp,fp
    e13c:	df000017 	ldw	fp,0(sp)
    e140:	dec00104 	addi	sp,sp,4
    e144:	f800283a 	ret

0000e148 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    e148:	defffc04 	addi	sp,sp,-16
    e14c:	df000315 	stw	fp,12(sp)
    e150:	df000304 	addi	fp,sp,12
    e154:	e13ffd15 	stw	r4,-12(fp)
    e158:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    e15c:	e0bffe17 	ldw	r2,-8(fp)
    e160:	1004c03a 	cmpne	r2,r2,zero
    e164:	1000061e 	bne	r2,zero,e180 <alt_up_audio_read_fifo_head+0x38>
    e168:	e0bffd17 	ldw	r2,-12(fp)
    e16c:	10800a17 	ldw	r2,40(r2)
    e170:	10800204 	addi	r2,r2,8
    e174:	10800037 	ldwio	r2,0(r2)
    e178:	e0bfff15 	stw	r2,-4(fp)
    e17c:	00000506 	br	e194 <alt_up_audio_read_fifo_head+0x4c>
    e180:	e0bffd17 	ldw	r2,-12(fp)
    e184:	10800a17 	ldw	r2,40(r2)
    e188:	10800304 	addi	r2,r2,12
    e18c:	10800037 	ldwio	r2,0(r2)
    e190:	e0bfff15 	stw	r2,-4(fp)
    e194:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    e198:	e037883a 	mov	sp,fp
    e19c:	df000017 	ldw	fp,0(sp)
    e1a0:	dec00104 	addi	sp,sp,4
    e1a4:	f800283a 	ret

0000e1a8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    e1a8:	defffc04 	addi	sp,sp,-16
    e1ac:	df000315 	stw	fp,12(sp)
    e1b0:	df000304 	addi	fp,sp,12
    e1b4:	e13ffd15 	stw	r4,-12(fp)
    e1b8:	e17ffe15 	stw	r5,-8(fp)
    e1bc:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    e1c0:	e0bfff17 	ldw	r2,-4(fp)
    e1c4:	1004c03a 	cmpne	r2,r2,zero
    e1c8:	1000061e 	bne	r2,zero,e1e4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    e1cc:	e0bffd17 	ldw	r2,-12(fp)
    e1d0:	10800a17 	ldw	r2,40(r2)
    e1d4:	10800204 	addi	r2,r2,8
    e1d8:	e0fffe17 	ldw	r3,-8(fp)
    e1dc:	10c00035 	stwio	r3,0(r2)
    e1e0:	00000506 	br	e1f8 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    e1e4:	e0bffd17 	ldw	r2,-12(fp)
    e1e8:	10800a17 	ldw	r2,40(r2)
    e1ec:	10800304 	addi	r2,r2,12
    e1f0:	e0fffe17 	ldw	r3,-8(fp)
    e1f4:	10c00035 	stwio	r3,0(r2)
}
    e1f8:	e037883a 	mov	sp,fp
    e1fc:	df000017 	ldw	fp,0(sp)
    e200:	dec00104 	addi	sp,sp,4
    e204:	f800283a 	ret

0000e208 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e208:	defffc04 	addi	sp,sp,-16
    e20c:	df000315 	stw	fp,12(sp)
    e210:	df000304 	addi	fp,sp,12
    e214:	e13ffe15 	stw	r4,-8(fp)
    e218:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e21c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    e220:	e0bfff17 	ldw	r2,-4(fp)
    e224:	1004c03a 	cmpne	r2,r2,zero
    e228:	1000061e 	bne	r2,zero,e244 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    e22c:	e0bffe17 	ldw	r2,-8(fp)
    e230:	1007883a 	mov	r3,r2
    e234:	e0bffd03 	ldbu	r2,-12(fp)
    e238:	10c4b03a 	or	r2,r2,r3
    e23c:	e0bffd05 	stb	r2,-12(fp)
    e240:	00000806 	br	e264 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    e244:	e0bffe17 	ldw	r2,-8(fp)
    e248:	1007883a 	mov	r3,r2
    e24c:	e0bffd03 	ldbu	r2,-12(fp)
    e250:	10c4b03a 	or	r2,r2,r3
    e254:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    e258:	e0bffd03 	ldbu	r2,-12(fp)
    e25c:	10801014 	ori	r2,r2,64
    e260:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e264:	e0fffd03 	ldbu	r3,-12(fp)
    e268:	00bfe004 	movi	r2,-128
    e26c:	1884b03a 	or	r2,r3,r2
    e270:	10803fcc 	andi	r2,r2,255
}
    e274:	e037883a 	mov	sp,fp
    e278:	df000017 	ldw	fp,0(sp)
    e27c:	dec00104 	addi	sp,sp,4
    e280:	f800283a 	ret

0000e284 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e284:	defffd04 	addi	sp,sp,-12
    e288:	df000215 	stw	fp,8(sp)
    e28c:	df000204 	addi	fp,sp,8
    e290:	e13ffe15 	stw	r4,-8(fp)
    e294:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e298:	e0bffe17 	ldw	r2,-8(fp)
    e29c:	10800a17 	ldw	r2,40(r2)
    e2a0:	e0ffff03 	ldbu	r3,-4(fp)
    e2a4:	10c00025 	stbio	r3,0(r2)
}
    e2a8:	e037883a 	mov	sp,fp
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00104 	addi	sp,sp,4
    e2b4:	f800283a 	ret

0000e2b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e2b8:	defffe04 	addi	sp,sp,-8
    e2bc:	df000115 	stw	fp,4(sp)
    e2c0:	df000104 	addi	fp,sp,4
    e2c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e2c8:	e0bfff17 	ldw	r2,-4(fp)
    e2cc:	10800a17 	ldw	r2,40(r2)
    e2d0:	1007883a 	mov	r3,r2
    e2d4:	00800044 	movi	r2,1
    e2d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e2dc:	e037883a 	mov	sp,fp
    e2e0:	df000017 	ldw	fp,0(sp)
    e2e4:	dec00104 	addi	sp,sp,4
    e2e8:	f800283a 	ret

0000e2ec <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e2ec:	defffc04 	addi	sp,sp,-16
    e2f0:	dfc00315 	stw	ra,12(sp)
    e2f4:	df000215 	stw	fp,8(sp)
    e2f8:	df000204 	addi	fp,sp,8
    e2fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e300:	e13fff17 	ldw	r4,-4(fp)
    e304:	01400074 	movhi	r5,1
    e308:	294fe604 	addi	r5,r5,16280
    e30c:	0010a340 	call	10a34 <alt_find_dev>
    e310:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e314:	e0bffe17 	ldw	r2,-8(fp)
}
    e318:	e037883a 	mov	sp,fp
    e31c:	dfc00117 	ldw	ra,4(sp)
    e320:	df000017 	ldw	fp,0(sp)
    e324:	dec00204 	addi	sp,sp,8
    e328:	f800283a 	ret

0000e32c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    e32c:	defffb04 	addi	sp,sp,-20
    e330:	df000415 	stw	fp,16(sp)
    e334:	df000404 	addi	fp,sp,16
    e338:	e13ffd15 	stw	r4,-12(fp)
    e33c:	e17ffe15 	stw	r5,-8(fp)
    e340:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    e344:	e03ffc15 	stw	zero,-16(fp)
    e348:	00000f06 	br	e388 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e34c:	e0bffd17 	ldw	r2,-12(fp)
    e350:	10800a17 	ldw	r2,40(r2)
    e354:	11000044 	addi	r4,r2,1
    e358:	e0fffc17 	ldw	r3,-16(fp)
    e35c:	e0bffe17 	ldw	r2,-8(fp)
    e360:	1885883a 	add	r2,r3,r2
    e364:	10800003 	ldbu	r2,0(r2)
    e368:	10c03fcc 	andi	r3,r2,255
    e36c:	18c0201c 	xori	r3,r3,128
    e370:	18ffe004 	addi	r3,r3,-128
    e374:	2005883a 	mov	r2,r4
    e378:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e37c:	e0bffc17 	ldw	r2,-16(fp)
    e380:	10800044 	addi	r2,r2,1
    e384:	e0bffc15 	stw	r2,-16(fp)
    e388:	e0fffc17 	ldw	r3,-16(fp)
    e38c:	e0bfff17 	ldw	r2,-4(fp)
    e390:	18bfee36 	bltu	r3,r2,e34c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    e394:	e037883a 	mov	sp,fp
    e398:	df000017 	ldw	fp,0(sp)
    e39c:	dec00104 	addi	sp,sp,4
    e3a0:	f800283a 	ret

0000e3a4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    e3a4:	defffd04 	addi	sp,sp,-12
    e3a8:	df000215 	stw	fp,8(sp)
    e3ac:	df000204 	addi	fp,sp,8
    e3b0:	e13ffe15 	stw	r4,-8(fp)
    e3b4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    e3b8:	00000d06 	br	e3f0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e3bc:	e0bffe17 	ldw	r2,-8(fp)
    e3c0:	10800a17 	ldw	r2,40(r2)
    e3c4:	11000044 	addi	r4,r2,1
    e3c8:	e0bfff17 	ldw	r2,-4(fp)
    e3cc:	10800003 	ldbu	r2,0(r2)
    e3d0:	10c03fcc 	andi	r3,r2,255
    e3d4:	18c0201c 	xori	r3,r3,128
    e3d8:	18ffe004 	addi	r3,r3,-128
    e3dc:	2005883a 	mov	r2,r4
    e3e0:	10c00025 	stbio	r3,0(r2)
		++ptr;
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
    e3e8:	10800044 	addi	r2,r2,1
    e3ec:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e3f0:	e0bfff17 	ldw	r2,-4(fp)
    e3f4:	10800003 	ldbu	r2,0(r2)
    e3f8:	10803fcc 	andi	r2,r2,255
    e3fc:	1080201c 	xori	r2,r2,128
    e400:	10bfe004 	addi	r2,r2,-128
    e404:	1004c03a 	cmpne	r2,r2,zero
    e408:	103fec1e 	bne	r2,zero,e3bc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    e40c:	e037883a 	mov	sp,fp
    e410:	df000017 	ldw	fp,0(sp)
    e414:	dec00104 	addi	sp,sp,4
    e418:	f800283a 	ret

0000e41c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e41c:	defffb04 	addi	sp,sp,-20
    e420:	dfc00415 	stw	ra,16(sp)
    e424:	df000315 	stw	fp,12(sp)
    e428:	df000304 	addi	fp,sp,12
    e42c:	e13ffd15 	stw	r4,-12(fp)
    e430:	e17ffe15 	stw	r5,-8(fp)
    e434:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e438:	e0bffd17 	ldw	r2,-12(fp)
    e43c:	10800017 	ldw	r2,0(r2)
    e440:	1009883a 	mov	r4,r2
    e444:	e1bfff17 	ldw	r6,-4(fp)
    e448:	e17ffe17 	ldw	r5,-8(fp)
    e44c:	000e32c0 	call	e32c <alt_up_character_lcd_write>
	return 0;
    e450:	0005883a 	mov	r2,zero
}
    e454:	e037883a 	mov	sp,fp
    e458:	dfc00117 	ldw	ra,4(sp)
    e45c:	df000017 	ldw	fp,0(sp)
    e460:	dec00204 	addi	sp,sp,8
    e464:	f800283a 	ret

0000e468 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e468:	defff904 	addi	sp,sp,-28
    e46c:	dfc00615 	stw	ra,24(sp)
    e470:	df000515 	stw	fp,20(sp)
    e474:	df000504 	addi	fp,sp,20
    e478:	e13ffc15 	stw	r4,-16(fp)
    e47c:	e17ffd15 	stw	r5,-12(fp)
    e480:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e484:	e0bffd17 	ldw	r2,-12(fp)
    e488:	10800a28 	cmpgeui	r2,r2,40
    e48c:	1000031e 	bne	r2,zero,e49c <alt_up_character_lcd_set_cursor_pos+0x34>
    e490:	e0bffe17 	ldw	r2,-8(fp)
    e494:	108000b0 	cmpltui	r2,r2,2
    e498:	1000031e 	bne	r2,zero,e4a8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    e49c:	00bfffc4 	movi	r2,-1
    e4a0:	e0bfff15 	stw	r2,-4(fp)
    e4a4:	00000806 	br	e4c8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e4a8:	e13ffd17 	ldw	r4,-12(fp)
    e4ac:	e17ffe17 	ldw	r5,-8(fp)
    e4b0:	000e2080 	call	e208 <get_DDRAM_addr>
    e4b4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    e4b8:	e17ffb03 	ldbu	r5,-20(fp)
    e4bc:	e13ffc17 	ldw	r4,-16(fp)
    e4c0:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
	return 0;
    e4c4:	e03fff15 	stw	zero,-4(fp)
    e4c8:	e0bfff17 	ldw	r2,-4(fp)
}
    e4cc:	e037883a 	mov	sp,fp
    e4d0:	dfc00117 	ldw	ra,4(sp)
    e4d4:	df000017 	ldw	fp,0(sp)
    e4d8:	dec00204 	addi	sp,sp,8
    e4dc:	f800283a 	ret

0000e4e0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e4e0:	defff904 	addi	sp,sp,-28
    e4e4:	dfc00615 	stw	ra,24(sp)
    e4e8:	df000515 	stw	fp,20(sp)
    e4ec:	df000504 	addi	fp,sp,20
    e4f0:	e13ffc15 	stw	r4,-16(fp)
    e4f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    e4f8:	e0bffd17 	ldw	r2,-12(fp)
    e4fc:	1005003a 	cmpeq	r2,r2,zero
    e500:	10001e1e 	bne	r2,zero,e57c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    e504:	e0bffd17 	ldw	r2,-12(fp)
    e508:	10800050 	cmplti	r2,r2,1
    e50c:	1000031e 	bne	r2,zero,e51c <alt_up_character_lcd_shift_cursor+0x3c>
    e510:	00800504 	movi	r2,20
    e514:	e0bfff05 	stb	r2,-4(fp)
    e518:	00000206 	br	e524 <alt_up_character_lcd_shift_cursor+0x44>
    e51c:	00c00404 	movi	r3,16
    e520:	e0ffff05 	stb	r3,-4(fp)
    e524:	e0bfff03 	ldbu	r2,-4(fp)
    e528:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e52c:	e0fffd17 	ldw	r3,-12(fp)
    e530:	e0fffe15 	stw	r3,-8(fp)
    e534:	e0fffe17 	ldw	r3,-8(fp)
    e538:	1804403a 	cmpge	r2,r3,zero
    e53c:	1000031e 	bne	r2,zero,e54c <alt_up_character_lcd_shift_cursor+0x6c>
    e540:	e0bffe17 	ldw	r2,-8(fp)
    e544:	0085c83a 	sub	r2,zero,r2
    e548:	e0bffe15 	stw	r2,-8(fp)
    e54c:	e0fffe17 	ldw	r3,-8(fp)
    e550:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    e554:	00000306 	br	e564 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e558:	e17ffb43 	ldbu	r5,-19(fp)
    e55c:	e13ffc17 	ldw	r4,-16(fp)
    e560:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e564:	e0bffb03 	ldbu	r2,-20(fp)
    e568:	10bfffc4 	addi	r2,r2,-1
    e56c:	e0bffb05 	stb	r2,-20(fp)
    e570:	e0bffb03 	ldbu	r2,-20(fp)
    e574:	10803fd8 	cmpnei	r2,r2,255
    e578:	103ff71e 	bne	r2,zero,e558 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e57c:	e037883a 	mov	sp,fp
    e580:	dfc00117 	ldw	ra,4(sp)
    e584:	df000017 	ldw	fp,0(sp)
    e588:	dec00204 	addi	sp,sp,8
    e58c:	f800283a 	ret

0000e590 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e590:	defff904 	addi	sp,sp,-28
    e594:	dfc00615 	stw	ra,24(sp)
    e598:	df000515 	stw	fp,20(sp)
    e59c:	df000504 	addi	fp,sp,20
    e5a0:	e13ffc15 	stw	r4,-16(fp)
    e5a4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    e5a8:	e0bffd17 	ldw	r2,-12(fp)
    e5ac:	1005003a 	cmpeq	r2,r2,zero
    e5b0:	10001e1e 	bne	r2,zero,e62c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    e5b4:	e0bffd17 	ldw	r2,-12(fp)
    e5b8:	10800050 	cmplti	r2,r2,1
    e5bc:	1000031e 	bne	r2,zero,e5cc <alt_up_character_lcd_shift_display+0x3c>
    e5c0:	00800704 	movi	r2,28
    e5c4:	e0bfff05 	stb	r2,-4(fp)
    e5c8:	00000206 	br	e5d4 <alt_up_character_lcd_shift_display+0x44>
    e5cc:	00c00604 	movi	r3,24
    e5d0:	e0ffff05 	stb	r3,-4(fp)
    e5d4:	e0bfff03 	ldbu	r2,-4(fp)
    e5d8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e5dc:	e0fffd17 	ldw	r3,-12(fp)
    e5e0:	e0fffe15 	stw	r3,-8(fp)
    e5e4:	e0fffe17 	ldw	r3,-8(fp)
    e5e8:	1804403a 	cmpge	r2,r3,zero
    e5ec:	1000031e 	bne	r2,zero,e5fc <alt_up_character_lcd_shift_display+0x6c>
    e5f0:	e0bffe17 	ldw	r2,-8(fp)
    e5f4:	0085c83a 	sub	r2,zero,r2
    e5f8:	e0bffe15 	stw	r2,-8(fp)
    e5fc:	e0fffe17 	ldw	r3,-8(fp)
    e600:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    e604:	00000306 	br	e614 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e608:	e17ffb43 	ldbu	r5,-19(fp)
    e60c:	e13ffc17 	ldw	r4,-16(fp)
    e610:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e614:	e0bffb03 	ldbu	r2,-20(fp)
    e618:	10bfffc4 	addi	r2,r2,-1
    e61c:	e0bffb05 	stb	r2,-20(fp)
    e620:	e0bffb03 	ldbu	r2,-20(fp)
    e624:	10803fd8 	cmpnei	r2,r2,255
    e628:	103ff71e 	bne	r2,zero,e608 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e62c:	e037883a 	mov	sp,fp
    e630:	dfc00117 	ldw	ra,4(sp)
    e634:	df000017 	ldw	fp,0(sp)
    e638:	dec00204 	addi	sp,sp,8
    e63c:	f800283a 	ret

0000e640 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    e640:	defff904 	addi	sp,sp,-28
    e644:	dfc00615 	stw	ra,24(sp)
    e648:	df000515 	stw	fp,20(sp)
    e64c:	df000504 	addi	fp,sp,20
    e650:	e13ffc15 	stw	r4,-16(fp)
    e654:	e17ffd15 	stw	r5,-12(fp)
    e658:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    e65c:	e0bffd17 	ldw	r2,-12(fp)
    e660:	10800a28 	cmpgeui	r2,r2,40
    e664:	1000031e 	bne	r2,zero,e674 <alt_up_character_lcd_erase_pos+0x34>
    e668:	e0bffe17 	ldw	r2,-8(fp)
    e66c:	108000b0 	cmpltui	r2,r2,2
    e670:	1000031e 	bne	r2,zero,e680 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    e674:	00bfffc4 	movi	r2,-1
    e678:	e0bfff15 	stw	r2,-4(fp)
    e67c:	00000e06 	br	e6b8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e680:	e13ffd17 	ldw	r4,-12(fp)
    e684:	e17ffe17 	ldw	r5,-8(fp)
    e688:	000e2080 	call	e208 <get_DDRAM_addr>
    e68c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    e690:	e17ffb03 	ldbu	r5,-20(fp)
    e694:	e13ffc17 	ldw	r4,-16(fp)
    e698:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    e69c:	e0bffc17 	ldw	r2,-16(fp)
    e6a0:	10800a17 	ldw	r2,40(r2)
    e6a4:	10800044 	addi	r2,r2,1
    e6a8:	1007883a 	mov	r3,r2
    e6ac:	00800084 	movi	r2,2
    e6b0:	18800025 	stbio	r2,0(r3)
	return 0;
    e6b4:	e03fff15 	stw	zero,-4(fp)
    e6b8:	e0bfff17 	ldw	r2,-4(fp)
}
    e6bc:	e037883a 	mov	sp,fp
    e6c0:	dfc00117 	ldw	ra,4(sp)
    e6c4:	df000017 	ldw	fp,0(sp)
    e6c8:	dec00204 	addi	sp,sp,8
    e6cc:	f800283a 	ret

0000e6d0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    e6d0:	defffd04 	addi	sp,sp,-12
    e6d4:	dfc00215 	stw	ra,8(sp)
    e6d8:	df000115 	stw	fp,4(sp)
    e6dc:	df000104 	addi	fp,sp,4
    e6e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    e6e4:	e13fff17 	ldw	r4,-4(fp)
    e6e8:	01400304 	movi	r5,12
    e6ec:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
}
    e6f0:	e037883a 	mov	sp,fp
    e6f4:	dfc00117 	ldw	ra,4(sp)
    e6f8:	df000017 	ldw	fp,0(sp)
    e6fc:	dec00204 	addi	sp,sp,8
    e700:	f800283a 	ret

0000e704 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    e704:	defffd04 	addi	sp,sp,-12
    e708:	dfc00215 	stw	ra,8(sp)
    e70c:	df000115 	stw	fp,4(sp)
    e710:	df000104 	addi	fp,sp,4
    e714:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    e718:	e13fff17 	ldw	r4,-4(fp)
    e71c:	014003c4 	movi	r5,15
    e720:	000e2840 	call	e284 <alt_up_character_lcd_send_cmd>
}
    e724:	e037883a 	mov	sp,fp
    e728:	dfc00117 	ldw	ra,4(sp)
    e72c:	df000017 	ldw	fp,0(sp)
    e730:	dec00204 	addi	sp,sp,8
    e734:	f800283a 	ret

0000e738 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    e738:	defffc04 	addi	sp,sp,-16
    e73c:	dfc00315 	stw	ra,12(sp)
    e740:	df000215 	stw	fp,8(sp)
    e744:	df000204 	addi	fp,sp,8
    e748:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    e74c:	e13fff17 	ldw	r4,-4(fp)
    e750:	01400074 	movhi	r5,1
    e754:	294fe604 	addi	r5,r5,16280
    e758:	0010a340 	call	10a34 <alt_find_dev>
    e75c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e760:	e0bffe17 	ldw	r2,-8(fp)
}
    e764:	e037883a 	mov	sp,fp
    e768:	dfc00117 	ldw	ra,4(sp)
    e76c:	df000017 	ldw	fp,0(sp)
    e770:	dec00204 	addi	sp,sp,8
    e774:	f800283a 	ret

0000e778 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e778:	defffd04 	addi	sp,sp,-12
    e77c:	df000215 	stw	fp,8(sp)
    e780:	df000204 	addi	fp,sp,8
    e784:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    e788:	e0bfff17 	ldw	r2,-4(fp)
    e78c:	1080400c 	andi	r2,r2,256
    e790:	1004d23a 	srli	r2,r2,8
    e794:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    e798:	e0bffe03 	ldbu	r2,-8(fp)
}
    e79c:	e037883a 	mov	sp,fp
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00104 	addi	sp,sp,4
    e7a8:	f800283a 	ret

0000e7ac <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    e7ac:	defffd04 	addi	sp,sp,-12
    e7b0:	df000215 	stw	fp,8(sp)
    e7b4:	df000204 	addi	fp,sp,8
    e7b8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	1080004c 	andi	r2,r2,1
    e7c4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e7c8:	e0bffe03 	ldbu	r2,-8(fp)
}
    e7cc:	e037883a 	mov	sp,fp
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00104 	addi	sp,sp,4
    e7d8:	f800283a 	ret

0000e7dc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e7dc:	defffd04 	addi	sp,sp,-12
    e7e0:	df000215 	stw	fp,8(sp)
    e7e4:	df000204 	addi	fp,sp,8
    e7e8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    e7ec:	e0bfff17 	ldw	r2,-4(fp)
    e7f0:	1081000c 	andi	r2,r2,1024
    e7f4:	1004d2ba 	srli	r2,r2,10
    e7f8:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e7fc:	e0bffe03 	ldbu	r2,-8(fp)
}
    e800:	e037883a 	mov	sp,fp
    e804:	df000017 	ldw	fp,0(sp)
    e808:	dec00104 	addi	sp,sp,4
    e80c:	f800283a 	ret

0000e810 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    e810:	defffd04 	addi	sp,sp,-12
    e814:	df000215 	stw	fp,8(sp)
    e818:	df000204 	addi	fp,sp,8
    e81c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    e820:	e0bfff17 	ldw	r2,-4(fp)
    e824:	10bfffec 	andhi	r2,r2,65535
    e828:	1004d43a 	srli	r2,r2,16
    e82c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    e830:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e834:	e037883a 	mov	sp,fp
    e838:	df000017 	ldw	fp,0(sp)
    e83c:	dec00104 	addi	sp,sp,4
    e840:	f800283a 	ret

0000e844 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e844:	defffd04 	addi	sp,sp,-12
    e848:	df000215 	stw	fp,8(sp)
    e84c:	df000204 	addi	fp,sp,8
    e850:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10a0000c 	andi	r2,r2,32768
    e85c:	1004d3fa 	srli	r2,r2,15
    e860:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    e864:	e0bffe03 	ldbu	r2,-8(fp)
}
    e868:	e037883a 	mov	sp,fp
    e86c:	df000017 	ldw	fp,0(sp)
    e870:	dec00104 	addi	sp,sp,4
    e874:	f800283a 	ret

0000e878 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    e878:	defffd04 	addi	sp,sp,-12
    e87c:	df000215 	stw	fp,8(sp)
    e880:	df000204 	addi	fp,sp,8
    e884:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    e890:	e0bffe03 	ldbu	r2,-8(fp)
}
    e894:	e037883a 	mov	sp,fp
    e898:	df000017 	ldw	fp,0(sp)
    e89c:	dec00104 	addi	sp,sp,4
    e8a0:	f800283a 	ret

0000e8a4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    e8a4:	defffb04 	addi	sp,sp,-20
    e8a8:	dfc00415 	stw	ra,16(sp)
    e8ac:	df000315 	stw	fp,12(sp)
    e8b0:	df000304 	addi	fp,sp,12
    e8b4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    e8b8:	e13fff17 	ldw	r4,-4(fp)
    e8bc:	01403fc4 	movi	r5,255
    e8c0:	000eb040 	call	eb04 <alt_up_ps2_write_data_byte_with_ack>
    e8c4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    e8c8:	e0bffd17 	ldw	r2,-12(fp)
    e8cc:	1004c03a 	cmpne	r2,r2,zero
    e8d0:	1000221e 	bne	r2,zero,e95c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e8d4:	e17ffe04 	addi	r5,fp,-8
    e8d8:	e13fff17 	ldw	r4,-4(fp)
    e8dc:	000eb700 	call	eb70 <alt_up_ps2_read_data_byte_timeout>
    e8e0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    e8e4:	e0bffd17 	ldw	r2,-12(fp)
    e8e8:	1004c03a 	cmpne	r2,r2,zero
    e8ec:	10001b1e 	bne	r2,zero,e95c <alt_up_ps2_init+0xb8>
    e8f0:	e0bffe03 	ldbu	r2,-8(fp)
    e8f4:	10803fcc 	andi	r2,r2,255
    e8f8:	10802a98 	cmpnei	r2,r2,170
    e8fc:	1000171e 	bne	r2,zero,e95c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e900:	e17ffe04 	addi	r5,fp,-8
    e904:	e13fff17 	ldw	r4,-4(fp)
    e908:	000eb700 	call	eb70 <alt_up_ps2_read_data_byte_timeout>
    e90c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    e910:	e0bffd17 	ldw	r2,-12(fp)
    e914:	10bfe318 	cmpnei	r2,r2,-116
    e918:	1000041e 	bne	r2,zero,e92c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    e91c:	e0ffff17 	ldw	r3,-4(fp)
    e920:	00800044 	movi	r2,1
    e924:	18800d15 	stw	r2,52(r3)
    e928:	00000c06 	br	e95c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    e92c:	e0bffd17 	ldw	r2,-12(fp)
    e930:	1004c03a 	cmpne	r2,r2,zero
    e934:	1000091e 	bne	r2,zero,e95c <alt_up_ps2_init+0xb8>
    e938:	e0bffe03 	ldbu	r2,-8(fp)
    e93c:	10803fcc 	andi	r2,r2,255
    e940:	1004c03a 	cmpne	r2,r2,zero
    e944:	1000051e 	bne	r2,zero,e95c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    e948:	e0bfff17 	ldw	r2,-4(fp)
    e94c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    e950:	e13fff17 	ldw	r4,-4(fp)
    e954:	01403d04 	movi	r5,244
    e958:	000ea1c0 	call	ea1c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e95c:	e037883a 	mov	sp,fp
    e960:	dfc00117 	ldw	ra,4(sp)
    e964:	df000017 	ldw	fp,0(sp)
    e968:	dec00204 	addi	sp,sp,8
    e96c:	f800283a 	ret

0000e970 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e970:	defffd04 	addi	sp,sp,-12
    e974:	df000215 	stw	fp,8(sp)
    e978:	df000204 	addi	fp,sp,8
    e97c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e980:	e0bfff17 	ldw	r2,-4(fp)
    e984:	10800a17 	ldw	r2,40(r2)
    e988:	10800104 	addi	r2,r2,4
    e98c:	10800037 	ldwio	r2,0(r2)
    e990:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e994:	e0bffe17 	ldw	r2,-8(fp)
    e998:	10800054 	ori	r2,r2,1
    e99c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10800a17 	ldw	r2,40(r2)
    e9a8:	10800104 	addi	r2,r2,4
    e9ac:	e0fffe17 	ldw	r3,-8(fp)
    e9b0:	10c00035 	stwio	r3,0(r2)
}
    e9b4:	e037883a 	mov	sp,fp
    e9b8:	df000017 	ldw	fp,0(sp)
    e9bc:	dec00104 	addi	sp,sp,4
    e9c0:	f800283a 	ret

0000e9c4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e9c4:	defffd04 	addi	sp,sp,-12
    e9c8:	df000215 	stw	fp,8(sp)
    e9cc:	df000204 	addi	fp,sp,8
    e9d0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e9d4:	e0bfff17 	ldw	r2,-4(fp)
    e9d8:	10800a17 	ldw	r2,40(r2)
    e9dc:	10800104 	addi	r2,r2,4
    e9e0:	10800037 	ldwio	r2,0(r2)
    e9e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e9e8:	e0fffe17 	ldw	r3,-8(fp)
    e9ec:	00bfff84 	movi	r2,-2
    e9f0:	1884703a 	and	r2,r3,r2
    e9f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e9f8:	e0bfff17 	ldw	r2,-4(fp)
    e9fc:	10800a17 	ldw	r2,40(r2)
    ea00:	10800104 	addi	r2,r2,4
    ea04:	e0fffe17 	ldw	r3,-8(fp)
    ea08:	10c00035 	stwio	r3,0(r2)
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	df000017 	ldw	fp,0(sp)
    ea14:	dec00104 	addi	sp,sp,4
    ea18:	f800283a 	ret

0000ea1c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ea1c:	defffa04 	addi	sp,sp,-24
    ea20:	dfc00515 	stw	ra,20(sp)
    ea24:	df000415 	stw	fp,16(sp)
    ea28:	df000404 	addi	fp,sp,16
    ea2c:	e13ffd15 	stw	r4,-12(fp)
    ea30:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    ea34:	e0bffd17 	ldw	r2,-12(fp)
    ea38:	10800a17 	ldw	r2,40(r2)
    ea3c:	e0fffe03 	ldbu	r3,-8(fp)
    ea40:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    ea44:	e0bffd17 	ldw	r2,-12(fp)
    ea48:	10800a17 	ldw	r2,40(r2)
    ea4c:	10800104 	addi	r2,r2,4
    ea50:	10800037 	ldwio	r2,0(r2)
    ea54:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    ea58:	e13ffc17 	ldw	r4,-16(fp)
    ea5c:	000e7dc0 	call	e7dc <read_CE_bit>
    ea60:	10803fcc 	andi	r2,r2,255
    ea64:	1005003a 	cmpeq	r2,r2,zero
    ea68:	1000031e 	bne	r2,zero,ea78 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    ea6c:	00bffec4 	movi	r2,-5
    ea70:	e0bfff15 	stw	r2,-4(fp)
    ea74:	00000106 	br	ea7c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    ea78:	e03fff15 	stw	zero,-4(fp)
    ea7c:	e0bfff17 	ldw	r2,-4(fp)
}
    ea80:	e037883a 	mov	sp,fp
    ea84:	dfc00117 	ldw	ra,4(sp)
    ea88:	df000017 	ldw	fp,0(sp)
    ea8c:	dec00204 	addi	sp,sp,8
    ea90:	f800283a 	ret

0000ea94 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    ea94:	defffb04 	addi	sp,sp,-20
    ea98:	dfc00415 	stw	ra,16(sp)
    ea9c:	df000315 	stw	fp,12(sp)
    eaa0:	df000304 	addi	fp,sp,12
    eaa4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    eaa8:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    eaac:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    eab0:	e17ffd44 	addi	r5,fp,-11
    eab4:	e13ffe17 	ldw	r4,-8(fp)
    eab8:	000eb700 	call	eb70 <alt_up_ps2_read_data_byte_timeout>
    eabc:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    eac0:	e0bffd03 	ldbu	r2,-12(fp)
    eac4:	1004c03a 	cmpne	r2,r2,zero
    eac8:	1000061e 	bne	r2,zero,eae4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    eacc:	e0bffd43 	ldbu	r2,-11(fp)
    ead0:	10803fcc 	andi	r2,r2,255
    ead4:	10803e98 	cmpnei	r2,r2,250
    ead8:	103ff51e 	bne	r2,zero,eab0 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    eadc:	e03fff15 	stw	zero,-4(fp)
    eae0:	00000206 	br	eaec <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    eae4:	e0bffd03 	ldbu	r2,-12(fp)
    eae8:	e0bfff15 	stw	r2,-4(fp)
    eaec:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    eaf0:	e037883a 	mov	sp,fp
    eaf4:	dfc00117 	ldw	ra,4(sp)
    eaf8:	df000017 	ldw	fp,0(sp)
    eafc:	dec00204 	addi	sp,sp,8
    eb00:	f800283a 	ret

0000eb04 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    eb04:	defff904 	addi	sp,sp,-28
    eb08:	dfc00615 	stw	ra,24(sp)
    eb0c:	df000515 	stw	fp,20(sp)
    eb10:	df000504 	addi	fp,sp,20
    eb14:	e13ffd15 	stw	r4,-12(fp)
    eb18:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    eb1c:	e17ffe03 	ldbu	r5,-8(fp)
    eb20:	e13ffd17 	ldw	r4,-12(fp)
    eb24:	000ea1c0 	call	ea1c <alt_up_ps2_write_data_byte>
    eb28:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    eb2c:	e0bffc17 	ldw	r2,-16(fp)
    eb30:	1005003a 	cmpeq	r2,r2,zero
    eb34:	1000031e 	bne	r2,zero,eb44 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    eb38:	e0bffc17 	ldw	r2,-16(fp)
    eb3c:	e0bfff15 	stw	r2,-4(fp)
    eb40:	00000506 	br	eb58 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    eb44:	e13ffd17 	ldw	r4,-12(fp)
    eb48:	000ea940 	call	ea94 <alt_up_ps2_wait_for_ack>
    eb4c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    eb50:	e0bffb17 	ldw	r2,-20(fp)
    eb54:	e0bfff15 	stw	r2,-4(fp)
    eb58:	e0bfff17 	ldw	r2,-4(fp)
}
    eb5c:	e037883a 	mov	sp,fp
    eb60:	dfc00117 	ldw	ra,4(sp)
    eb64:	df000017 	ldw	fp,0(sp)
    eb68:	dec00204 	addi	sp,sp,8
    eb6c:	f800283a 	ret

0000eb70 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    eb70:	defff904 	addi	sp,sp,-28
    eb74:	dfc00615 	stw	ra,24(sp)
    eb78:	df000515 	stw	fp,20(sp)
    eb7c:	df000504 	addi	fp,sp,20
    eb80:	e13ffd15 	stw	r4,-12(fp)
    eb84:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    eb88:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    eb8c:	e03ffb15 	stw	zero,-20(fp)
    eb90:	00000006 	br	eb94 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    eb94:	e0bffb17 	ldw	r2,-20(fp)
    eb98:	10800044 	addi	r2,r2,1
    eb9c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    eba0:	e0bffd17 	ldw	r2,-12(fp)
    eba4:	10800a17 	ldw	r2,40(r2)
    eba8:	10800037 	ldwio	r2,0(r2)
    ebac:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    ebb0:	e13ffc17 	ldw	r4,-16(fp)
    ebb4:	000e8440 	call	e844 <read_data_valid>
    ebb8:	10803fcc 	andi	r2,r2,255
    ebbc:	1005003a 	cmpeq	r2,r2,zero
    ebc0:	1000071e 	bne	r2,zero,ebe0 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    ebc4:	e13ffc17 	ldw	r4,-16(fp)
    ebc8:	000e8780 	call	e878 <read_data_byte>
    ebcc:	1007883a 	mov	r3,r2
    ebd0:	e0bffe17 	ldw	r2,-8(fp)
    ebd4:	10c00005 	stb	r3,0(r2)
			return 0;
    ebd8:	e03fff15 	stw	zero,-4(fp)
    ebdc:	00000a06 	br	ec08 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    ebe0:	e0bffd17 	ldw	r2,-12(fp)
    ebe4:	10800c17 	ldw	r2,48(r2)
    ebe8:	1005003a 	cmpeq	r2,r2,zero
    ebec:	103fe91e 	bne	r2,zero,eb94 <alt_up_ps2_read_data_byte_timeout+0x24>
    ebf0:	e0bffd17 	ldw	r2,-12(fp)
    ebf4:	10c00c17 	ldw	r3,48(r2)
    ebf8:	e0bffb17 	ldw	r2,-20(fp)
    ebfc:	18bfe52e 	bgeu	r3,r2,eb94 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    ec00:	00bfe304 	movi	r2,-116
    ec04:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    ec08:	e0bfff17 	ldw	r2,-4(fp)
}
    ec0c:	e037883a 	mov	sp,fp
    ec10:	dfc00117 	ldw	ra,4(sp)
    ec14:	df000017 	ldw	fp,0(sp)
    ec18:	dec00204 	addi	sp,sp,8
    ec1c:	f800283a 	ret

0000ec20 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ec20:	defffa04 	addi	sp,sp,-24
    ec24:	dfc00515 	stw	ra,20(sp)
    ec28:	df000415 	stw	fp,16(sp)
    ec2c:	df000404 	addi	fp,sp,16
    ec30:	e13ffd15 	stw	r4,-12(fp)
    ec34:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    ec38:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ec3c:	e0bffd17 	ldw	r2,-12(fp)
    ec40:	10800a17 	ldw	r2,40(r2)
    ec44:	10800037 	ldwio	r2,0(r2)
    ec48:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    ec4c:	e13ffc17 	ldw	r4,-16(fp)
    ec50:	000e8440 	call	e844 <read_data_valid>
    ec54:	10803fcc 	andi	r2,r2,255
    ec58:	1005003a 	cmpeq	r2,r2,zero
    ec5c:	1000071e 	bne	r2,zero,ec7c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    ec60:	e13ffc17 	ldw	r4,-16(fp)
    ec64:	000e8780 	call	e878 <read_data_byte>
    ec68:	1007883a 	mov	r3,r2
    ec6c:	e0bffe17 	ldw	r2,-8(fp)
    ec70:	10c00005 	stb	r3,0(r2)
		return 0;
    ec74:	e03fff15 	stw	zero,-4(fp)
    ec78:	00000206 	br	ec84 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    ec7c:	00bfffc4 	movi	r2,-1
    ec80:	e0bfff15 	stw	r2,-4(fp)
    ec84:	e0bfff17 	ldw	r2,-4(fp)
}
    ec88:	e037883a 	mov	sp,fp
    ec8c:	dfc00117 	ldw	ra,4(sp)
    ec90:	df000017 	ldw	fp,0(sp)
    ec94:	dec00204 	addi	sp,sp,8
    ec98:	f800283a 	ret

0000ec9c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    ec9c:	defffb04 	addi	sp,sp,-20
    eca0:	dfc00415 	stw	ra,16(sp)
    eca4:	df000315 	stw	fp,12(sp)
    eca8:	df000304 	addi	fp,sp,12
    ecac:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    ecb0:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    ecb4:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ecb8:	e0bfff17 	ldw	r2,-4(fp)
    ecbc:	10800a17 	ldw	r2,40(r2)
    ecc0:	10800037 	ldwio	r2,0(r2)
    ecc4:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    ecc8:	e13ffd17 	ldw	r4,-12(fp)
    eccc:	000e8100 	call	e810 <read_num_bytes_available>
    ecd0:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    ecd4:	e0bffe0b 	ldhu	r2,-8(fp)
    ecd8:	1004c03a 	cmpne	r2,r2,zero
    ecdc:	103ff61e 	bne	r2,zero,ecb8 <alt_up_ps2_clear_fifo+0x1c>
}
    ece0:	e037883a 	mov	sp,fp
    ece4:	dfc00117 	ldw	ra,4(sp)
    ece8:	df000017 	ldw	fp,0(sp)
    ecec:	dec00204 	addi	sp,sp,8
    ecf0:	f800283a 	ret

0000ecf4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    ecf4:	defff704 	addi	sp,sp,-36
    ecf8:	dfc00815 	stw	ra,32(sp)
    ecfc:	df000715 	stw	fp,28(sp)
    ed00:	df000704 	addi	fp,sp,28
    ed04:	e13ffc15 	stw	r4,-16(fp)
    ed08:	e17ffd15 	stw	r5,-12(fp)
    ed0c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ed10:	e0bffc17 	ldw	r2,-16(fp)
    ed14:	10800017 	ldw	r2,0(r2)
    ed18:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    ed1c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    ed20:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    ed24:	e0fff917 	ldw	r3,-28(fp)
    ed28:	e0bffe17 	ldw	r2,-8(fp)
    ed2c:	18bffd16 	blt	r3,r2,ed24 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    ed30:	e17ffd17 	ldw	r5,-12(fp)
    ed34:	e0bffd17 	ldw	r2,-12(fp)
    ed38:	10800044 	addi	r2,r2,1
    ed3c:	e0bffd15 	stw	r2,-12(fp)
    ed40:	e13ffb17 	ldw	r4,-20(fp)
    ed44:	000eb700 	call	eb70 <alt_up_ps2_read_data_byte_timeout>
    ed48:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ed4c:	e0bffa17 	ldw	r2,-24(fp)
    ed50:	1005003a 	cmpeq	r2,r2,zero
    ed54:	1000031e 	bne	r2,zero,ed64 <alt_up_ps2_read_fd+0x70>
			return count;
    ed58:	e0bff917 	ldw	r2,-28(fp)
    ed5c:	e0bfff15 	stw	r2,-4(fp)
    ed60:	00000506 	br	ed78 <alt_up_ps2_read_fd+0x84>
		count++;
    ed64:	e0bff917 	ldw	r2,-28(fp)
    ed68:	10800044 	addi	r2,r2,1
    ed6c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    ed70:	e0bff917 	ldw	r2,-28(fp)
    ed74:	e0bfff15 	stw	r2,-4(fp)
    ed78:	e0bfff17 	ldw	r2,-4(fp)
}
    ed7c:	e037883a 	mov	sp,fp
    ed80:	dfc00117 	ldw	ra,4(sp)
    ed84:	df000017 	ldw	fp,0(sp)
    ed88:	dec00204 	addi	sp,sp,8
    ed8c:	f800283a 	ret

0000ed90 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ed90:	defff704 	addi	sp,sp,-36
    ed94:	dfc00815 	stw	ra,32(sp)
    ed98:	df000715 	stw	fp,28(sp)
    ed9c:	df000704 	addi	fp,sp,28
    eda0:	e13ffc15 	stw	r4,-16(fp)
    eda4:	e17ffd15 	stw	r5,-12(fp)
    eda8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    edac:	e0bffc17 	ldw	r2,-16(fp)
    edb0:	10800017 	ldw	r2,0(r2)
    edb4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    edb8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    edbc:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    edc0:	00001206 	br	ee0c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    edc4:	e0bffd17 	ldw	r2,-12(fp)
    edc8:	10800003 	ldbu	r2,0(r2)
    edcc:	11403fcc 	andi	r5,r2,255
    edd0:	e0bffd17 	ldw	r2,-12(fp)
    edd4:	10800044 	addi	r2,r2,1
    edd8:	e0bffd15 	stw	r2,-12(fp)
    eddc:	e13ffb17 	ldw	r4,-20(fp)
    ede0:	000ea1c0 	call	ea1c <alt_up_ps2_write_data_byte>
    ede4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ede8:	e0bffa17 	ldw	r2,-24(fp)
    edec:	1005003a 	cmpeq	r2,r2,zero
    edf0:	1000031e 	bne	r2,zero,ee00 <alt_up_ps2_write_fd+0x70>
			return count;
    edf4:	e0bff917 	ldw	r2,-28(fp)
    edf8:	e0bfff15 	stw	r2,-4(fp)
    edfc:	00000806 	br	ee20 <alt_up_ps2_write_fd+0x90>
		count++;
    ee00:	e0bff917 	ldw	r2,-28(fp)
    ee04:	10800044 	addi	r2,r2,1
    ee08:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    ee0c:	e0fff917 	ldw	r3,-28(fp)
    ee10:	e0bffe17 	ldw	r2,-8(fp)
    ee14:	18bfeb16 	blt	r3,r2,edc4 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    ee18:	e0bff917 	ldw	r2,-28(fp)
    ee1c:	e0bfff15 	stw	r2,-4(fp)
    ee20:	e0bfff17 	ldw	r2,-4(fp)
}
    ee24:	e037883a 	mov	sp,fp
    ee28:	dfc00117 	ldw	ra,4(sp)
    ee2c:	df000017 	ldw	fp,0(sp)
    ee30:	dec00204 	addi	sp,sp,8
    ee34:	f800283a 	ret

0000ee38 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    ee38:	defffc04 	addi	sp,sp,-16
    ee3c:	dfc00315 	stw	ra,12(sp)
    ee40:	df000215 	stw	fp,8(sp)
    ee44:	df000204 	addi	fp,sp,8
    ee48:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    ee4c:	e13fff17 	ldw	r4,-4(fp)
    ee50:	01400074 	movhi	r5,1
    ee54:	294fe604 	addi	r5,r5,16280
    ee58:	0010a340 	call	10a34 <alt_find_dev>
    ee5c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ee60:	e0bffe17 	ldw	r2,-8(fp)
}
    ee64:	e037883a 	mov	sp,fp
    ee68:	dfc00117 	ldw	ra,4(sp)
    ee6c:	df000017 	ldw	fp,0(sp)
    ee70:	dec00204 	addi	sp,sp,8
    ee74:	f800283a 	ret

0000ee78 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    ee78:	defffc04 	addi	sp,sp,-16
    ee7c:	dfc00315 	stw	ra,12(sp)
    ee80:	df000215 	stw	fp,8(sp)
    ee84:	df000204 	addi	fp,sp,8
    ee88:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    ee8c:	e0bfff17 	ldw	r2,-4(fp)
    ee90:	10800217 	ldw	r2,8(r2)
    ee94:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    ee98:	00000c06 	br	eecc <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    ee9c:	e13ffe17 	ldw	r4,-8(fp)
    eea0:	01400074 	movhi	r5,1
    eea4:	29490f04 	addi	r5,r5,9276
    eea8:	00097780 	call	9778 <strcmp>
    eeac:	1004c03a 	cmpne	r2,r2,zero
    eeb0:	1000031e 	bne	r2,zero,eec0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    eeb4:	e0bffe17 	ldw	r2,-8(fp)
    eeb8:	10000005 	stb	zero,0(r2)
			break;
    eebc:	00000a06 	br	eee8 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    eec0:	e0bffe17 	ldw	r2,-8(fp)
    eec4:	10800044 	addi	r2,r2,1
    eec8:	e0bffe15 	stw	r2,-8(fp)
    eecc:	e0bffe17 	ldw	r2,-8(fp)
    eed0:	10800003 	ldbu	r2,0(r2)
    eed4:	10803fcc 	andi	r2,r2,255
    eed8:	1080201c 	xori	r2,r2,128
    eedc:	10bfe004 	addi	r2,r2,-128
    eee0:	1004c03a 	cmpne	r2,r2,zero
    eee4:	103fed1e 	bne	r2,zero,ee9c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    eee8:	e037883a 	mov	sp,fp
    eeec:	dfc00117 	ldw	ra,4(sp)
    eef0:	df000017 	ldw	fp,0(sp)
    eef4:	dec00204 	addi	sp,sp,8
    eef8:	f800283a 	ret

0000eefc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    eefc:	defffc04 	addi	sp,sp,-16
    ef00:	dfc00315 	stw	ra,12(sp)
    ef04:	df000215 	stw	fp,8(sp)
    ef08:	df000204 	addi	fp,sp,8
    ef0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    ef10:	e13fff17 	ldw	r4,-4(fp)
    ef14:	01400074 	movhi	r5,1
    ef18:	294fe604 	addi	r5,r5,16280
    ef1c:	0010a340 	call	10a34 <alt_find_dev>
    ef20:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ef24:	e0bffe17 	ldw	r2,-8(fp)
}
    ef28:	e037883a 	mov	sp,fp
    ef2c:	dfc00117 	ldw	ra,4(sp)
    ef30:	df000017 	ldw	fp,0(sp)
    ef34:	dec00204 	addi	sp,sp,8
    ef38:	f800283a 	ret

0000ef3c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    ef3c:	defff904 	addi	sp,sp,-28
    ef40:	df000615 	stw	fp,24(sp)
    ef44:	df000604 	addi	fp,sp,24
    ef48:	e13ffb15 	stw	r4,-20(fp)
    ef4c:	e1bffd15 	stw	r6,-12(fp)
    ef50:	e1fffe15 	stw	r7,-8(fp)
    ef54:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ef58:	e0bffb17 	ldw	r2,-20(fp)
    ef5c:	10c00c17 	ldw	r3,48(r2)
    ef60:	e0bffd17 	ldw	r2,-12(fp)
    ef64:	10c0042e 	bgeu	r2,r3,ef78 <alt_up_char_buffer_draw+0x3c>
    ef68:	e0bffb17 	ldw	r2,-20(fp)
    ef6c:	10c00d17 	ldw	r3,52(r2)
    ef70:	e0bffe17 	ldw	r2,-8(fp)
    ef74:	10c00336 	bltu	r2,r3,ef84 <alt_up_char_buffer_draw+0x48>
		return -1;
    ef78:	00bfffc4 	movi	r2,-1
    ef7c:	e0bfff15 	stw	r2,-4(fp)
    ef80:	00001d06 	br	eff8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    ef84:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    ef88:	e0bffb17 	ldw	r2,-20(fp)
    ef8c:	10c00f17 	ldw	r3,60(r2)
    ef90:	e0bffd17 	ldw	r2,-12(fp)
    ef94:	1886703a 	and	r3,r3,r2
    ef98:	e0bffb17 	ldw	r2,-20(fp)
    ef9c:	10800e17 	ldw	r2,56(r2)
    efa0:	1886983a 	sll	r3,r3,r2
    efa4:	e0bffa17 	ldw	r2,-24(fp)
    efa8:	10c4b03a 	or	r2,r2,r3
    efac:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    efb0:	e0bffb17 	ldw	r2,-20(fp)
    efb4:	10c01117 	ldw	r3,68(r2)
    efb8:	e0bffe17 	ldw	r2,-8(fp)
    efbc:	1886703a 	and	r3,r3,r2
    efc0:	e0bffb17 	ldw	r2,-20(fp)
    efc4:	10801017 	ldw	r2,64(r2)
    efc8:	1886983a 	sll	r3,r3,r2
    efcc:	e0bffa17 	ldw	r2,-24(fp)
    efd0:	10c4b03a 	or	r2,r2,r3
    efd4:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    efd8:	e0bffb17 	ldw	r2,-20(fp)
    efdc:	10800b17 	ldw	r2,44(r2)
    efe0:	1007883a 	mov	r3,r2
    efe4:	e0bffa17 	ldw	r2,-24(fp)
    efe8:	1885883a 	add	r2,r3,r2
    efec:	e0fffc03 	ldbu	r3,-16(fp)
    eff0:	10c00025 	stbio	r3,0(r2)

	return 0;
    eff4:	e03fff15 	stw	zero,-4(fp)
    eff8:	e0bfff17 	ldw	r2,-4(fp)
}
    effc:	e037883a 	mov	sp,fp
    f000:	df000017 	ldw	fp,0(sp)
    f004:	dec00104 	addi	sp,sp,4
    f008:	f800283a 	ret

0000f00c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    f00c:	defff904 	addi	sp,sp,-28
    f010:	df000615 	stw	fp,24(sp)
    f014:	df000604 	addi	fp,sp,24
    f018:	e13ffb15 	stw	r4,-20(fp)
    f01c:	e17ffc15 	stw	r5,-16(fp)
    f020:	e1bffd15 	stw	r6,-12(fp)
    f024:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f028:	e0bffb17 	ldw	r2,-20(fp)
    f02c:	10c00c17 	ldw	r3,48(r2)
    f030:	e0bffd17 	ldw	r2,-12(fp)
    f034:	10c0042e 	bgeu	r2,r3,f048 <alt_up_char_buffer_string+0x3c>
    f038:	e0bffb17 	ldw	r2,-20(fp)
    f03c:	10c00d17 	ldw	r3,52(r2)
    f040:	e0bffe17 	ldw	r2,-8(fp)
    f044:	10c00336 	bltu	r2,r3,f054 <alt_up_char_buffer_string+0x48>
		return -1;
    f048:	00bfffc4 	movi	r2,-1
    f04c:	e0bfff15 	stw	r2,-4(fp)
    f050:	00002e06 	br	f10c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    f054:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    f058:	e0bffb17 	ldw	r2,-20(fp)
    f05c:	10801017 	ldw	r2,64(r2)
    f060:	1007883a 	mov	r3,r2
    f064:	e0bffe17 	ldw	r2,-8(fp)
    f068:	10c6983a 	sll	r3,r2,r3
    f06c:	e0bffd17 	ldw	r2,-12(fp)
    f070:	1885883a 	add	r2,r3,r2
    f074:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    f078:	00001c06 	br	f0ec <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f07c:	e0bffb17 	ldw	r2,-20(fp)
    f080:	10800b17 	ldw	r2,44(r2)
    f084:	1007883a 	mov	r3,r2
    f088:	e0bffa17 	ldw	r2,-24(fp)
    f08c:	1889883a 	add	r4,r3,r2
    f090:	e0bffc17 	ldw	r2,-16(fp)
    f094:	10800003 	ldbu	r2,0(r2)
    f098:	10c03fcc 	andi	r3,r2,255
    f09c:	18c0201c 	xori	r3,r3,128
    f0a0:	18ffe004 	addi	r3,r3,-128
    f0a4:	2005883a 	mov	r2,r4
    f0a8:	10c00025 	stbio	r3,0(r2)
		++ptr;
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	10800044 	addi	r2,r2,1
    f0b4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    f0b8:	e0bffd17 	ldw	r2,-12(fp)
    f0bc:	10800044 	addi	r2,r2,1
    f0c0:	e0bffd15 	stw	r2,-12(fp)
    f0c4:	e0bffb17 	ldw	r2,-20(fp)
    f0c8:	10c00c17 	ldw	r3,48(r2)
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10c00336 	bltu	r2,r3,f0e0 <alt_up_char_buffer_string+0xd4>
			return -1;
    f0d4:	00bfffc4 	movi	r2,-1
    f0d8:	e0bfff15 	stw	r2,-4(fp)
    f0dc:	00000b06 	br	f10c <alt_up_char_buffer_string+0x100>
		++offset;
    f0e0:	e0bffa17 	ldw	r2,-24(fp)
    f0e4:	10800044 	addi	r2,r2,1
    f0e8:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f0ec:	e0bffc17 	ldw	r2,-16(fp)
    f0f0:	10800003 	ldbu	r2,0(r2)
    f0f4:	10803fcc 	andi	r2,r2,255
    f0f8:	1080201c 	xori	r2,r2,128
    f0fc:	10bfe004 	addi	r2,r2,-128
    f100:	1004c03a 	cmpne	r2,r2,zero
    f104:	103fdd1e 	bne	r2,zero,f07c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    f108:	e03fff15 	stw	zero,-4(fp)
    f10c:	e0bfff17 	ldw	r2,-4(fp)
}
    f110:	e037883a 	mov	sp,fp
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00104 	addi	sp,sp,4
    f11c:	f800283a 	ret

0000f120 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    f120:	defffe04 	addi	sp,sp,-8
    f124:	df000115 	stw	fp,4(sp)
    f128:	df000104 	addi	fp,sp,4
    f12c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	10800a17 	ldw	r2,40(r2)
    f138:	10800084 	addi	r2,r2,2
    f13c:	1007883a 	mov	r3,r2
    f140:	00800044 	movi	r2,1
    f144:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f148:	e0bfff17 	ldw	r2,-4(fp)
    f14c:	10800a17 	ldw	r2,40(r2)
    f150:	10800084 	addi	r2,r2,2
    f154:	10800023 	ldbuio	r2,0(r2)
    f158:	1080004c 	andi	r2,r2,1
    f15c:	10803fcc 	andi	r2,r2,255
    f160:	1004c03a 	cmpne	r2,r2,zero
    f164:	103ff81e 	bne	r2,zero,f148 <alt_up_char_buffer_clear+0x28>
	return 0;
    f168:	0005883a 	mov	r2,zero
}
    f16c:	e037883a 	mov	sp,fp
    f170:	df000017 	ldw	fp,0(sp)
    f174:	dec00104 	addi	sp,sp,4
    f178:	f800283a 	ret

0000f17c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    f17c:	defffc04 	addi	sp,sp,-16
    f180:	dfc00315 	stw	ra,12(sp)
    f184:	df000215 	stw	fp,8(sp)
    f188:	df000204 	addi	fp,sp,8
    f18c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    f190:	e13fff17 	ldw	r4,-4(fp)
    f194:	01400074 	movhi	r5,1
    f198:	294fe604 	addi	r5,r5,16280
    f19c:	0010a340 	call	10a34 <alt_find_dev>
    f1a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f1a4:	e0bffe17 	ldw	r2,-8(fp)
}
    f1a8:	e037883a 	mov	sp,fp
    f1ac:	dfc00117 	ldw	ra,4(sp)
    f1b0:	df000017 	ldw	fp,0(sp)
    f1b4:	dec00204 	addi	sp,sp,8
    f1b8:	f800283a 	ret

0000f1bc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    f1bc:	defff904 	addi	sp,sp,-28
    f1c0:	df000615 	stw	fp,24(sp)
    f1c4:	df000604 	addi	fp,sp,24
    f1c8:	e13ffb15 	stw	r4,-20(fp)
    f1cc:	e17ffc15 	stw	r5,-16(fp)
    f1d0:	e1bffd15 	stw	r6,-12(fp)
    f1d4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    f1d8:	e0bffb17 	ldw	r2,-20(fp)
    f1dc:	10c00f17 	ldw	r3,60(r2)
    f1e0:	e0bffd17 	ldw	r2,-12(fp)
    f1e4:	10c0042e 	bgeu	r2,r3,f1f8 <alt_up_pixel_buffer_dma_draw+0x3c>
    f1e8:	e0bffb17 	ldw	r2,-20(fp)
    f1ec:	10c01017 	ldw	r3,64(r2)
    f1f0:	e0bffe17 	ldw	r2,-8(fp)
    f1f4:	10c00336 	bltu	r2,r3,f204 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    f1f8:	00bfffc4 	movi	r2,-1
    f1fc:	e0bfff15 	stw	r2,-4(fp)
    f200:	00005106 	br	f348 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    f204:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f208:	e0bffb17 	ldw	r2,-20(fp)
    f20c:	10800d17 	ldw	r2,52(r2)
    f210:	1004c03a 	cmpne	r2,r2,zero
    f214:	1000151e 	bne	r2,zero,f26c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f218:	e0bffb17 	ldw	r2,-20(fp)
    f21c:	10c01217 	ldw	r3,72(r2)
    f220:	e0bffd17 	ldw	r2,-12(fp)
    f224:	1886703a 	and	r3,r3,r2
    f228:	e0bffb17 	ldw	r2,-20(fp)
    f22c:	10801117 	ldw	r2,68(r2)
    f230:	1886983a 	sll	r3,r3,r2
    f234:	e0bffa17 	ldw	r2,-24(fp)
    f238:	10c4b03a 	or	r2,r2,r3
    f23c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    f240:	e0bffb17 	ldw	r2,-20(fp)
    f244:	10c01417 	ldw	r3,80(r2)
    f248:	e0bffe17 	ldw	r2,-8(fp)
    f24c:	1886703a 	and	r3,r3,r2
    f250:	e0bffb17 	ldw	r2,-20(fp)
    f254:	10801317 	ldw	r2,76(r2)
    f258:	1886983a 	sll	r3,r3,r2
    f25c:	e0bffa17 	ldw	r2,-24(fp)
    f260:	10c4b03a 	or	r2,r2,r3
    f264:	e0bffa15 	stw	r2,-24(fp)
    f268:	00001706 	br	f2c8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f26c:	e0bffb17 	ldw	r2,-20(fp)
    f270:	10c01217 	ldw	r3,72(r2)
    f274:	e0bffd17 	ldw	r2,-12(fp)
    f278:	1886703a 	and	r3,r3,r2
    f27c:	e0bffb17 	ldw	r2,-20(fp)
    f280:	10801117 	ldw	r2,68(r2)
    f284:	1886983a 	sll	r3,r3,r2
    f288:	e0bffa17 	ldw	r2,-24(fp)
    f28c:	10c5883a 	add	r2,r2,r3
    f290:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    f294:	e0bffb17 	ldw	r2,-20(fp)
    f298:	10c01417 	ldw	r3,80(r2)
    f29c:	e0bffe17 	ldw	r2,-8(fp)
    f2a0:	1886703a 	and	r3,r3,r2
    f2a4:	e0bffb17 	ldw	r2,-20(fp)
    f2a8:	10800f17 	ldw	r2,60(r2)
    f2ac:	1887383a 	mul	r3,r3,r2
    f2b0:	e0bffb17 	ldw	r2,-20(fp)
    f2b4:	10801117 	ldw	r2,68(r2)
    f2b8:	1886983a 	sll	r3,r3,r2
    f2bc:	e0bffa17 	ldw	r2,-24(fp)
    f2c0:	10c5883a 	add	r2,r2,r3
    f2c4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f2c8:	e0bffb17 	ldw	r2,-20(fp)
    f2cc:	10800e17 	ldw	r2,56(r2)
    f2d0:	10800058 	cmpnei	r2,r2,1
    f2d4:	1000081e 	bne	r2,zero,f2f8 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f2d8:	e0bffb17 	ldw	r2,-20(fp)
    f2dc:	10800c17 	ldw	r2,48(r2)
    f2e0:	1007883a 	mov	r3,r2
    f2e4:	e0bffa17 	ldw	r2,-24(fp)
    f2e8:	1885883a 	add	r2,r3,r2
    f2ec:	e0fffc17 	ldw	r3,-16(fp)
    f2f0:	10c00025 	stbio	r3,0(r2)
    f2f4:	00001306 	br	f344 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10800e17 	ldw	r2,56(r2)
    f300:	10800098 	cmpnei	r2,r2,2
    f304:	1000081e 	bne	r2,zero,f328 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f308:	e0bffb17 	ldw	r2,-20(fp)
    f30c:	10800c17 	ldw	r2,48(r2)
    f310:	1007883a 	mov	r3,r2
    f314:	e0bffa17 	ldw	r2,-24(fp)
    f318:	1885883a 	add	r2,r3,r2
    f31c:	e0fffc17 	ldw	r3,-16(fp)
    f320:	10c0002d 	sthio	r3,0(r2)
    f324:	00000706 	br	f344 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f328:	e0bffb17 	ldw	r2,-20(fp)
    f32c:	10800c17 	ldw	r2,48(r2)
    f330:	1007883a 	mov	r3,r2
    f334:	e0bffa17 	ldw	r2,-24(fp)
    f338:	1885883a 	add	r2,r3,r2
    f33c:	e0fffc17 	ldw	r3,-16(fp)
    f340:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    f344:	e03fff15 	stw	zero,-4(fp)
    f348:	e0bfff17 	ldw	r2,-4(fp)
}
    f34c:	e037883a 	mov	sp,fp
    f350:	df000017 	ldw	fp,0(sp)
    f354:	dec00104 	addi	sp,sp,4
    f358:	f800283a 	ret

0000f35c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    f35c:	defffd04 	addi	sp,sp,-12
    f360:	df000215 	stw	fp,8(sp)
    f364:	df000204 	addi	fp,sp,8
    f368:	e13ffe15 	stw	r4,-8(fp)
    f36c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    f370:	e0bffe17 	ldw	r2,-8(fp)
    f374:	10800a17 	ldw	r2,40(r2)
    f378:	10800104 	addi	r2,r2,4
    f37c:	e0ffff17 	ldw	r3,-4(fp)
    f380:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    f384:	e0bffe17 	ldw	r2,-8(fp)
    f388:	10800a17 	ldw	r2,40(r2)
    f38c:	10800104 	addi	r2,r2,4
    f390:	10800037 	ldwio	r2,0(r2)
    f394:	1007883a 	mov	r3,r2
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	10c00c15 	stw	r3,48(r2)
	return 0;
    f3a0:	0005883a 	mov	r2,zero
}
    f3a4:	e037883a 	mov	sp,fp
    f3a8:	df000017 	ldw	fp,0(sp)
    f3ac:	dec00104 	addi	sp,sp,4
    f3b0:	f800283a 	ret

0000f3b4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    f3b4:	defffe04 	addi	sp,sp,-8
    f3b8:	df000115 	stw	fp,4(sp)
    f3bc:	df000104 	addi	fp,sp,4
    f3c0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    f3c4:	e0bfff17 	ldw	r2,-4(fp)
    f3c8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    f3cc:	e0bfff17 	ldw	r2,-4(fp)
    f3d0:	10800a17 	ldw	r2,40(r2)
    f3d4:	1007883a 	mov	r3,r2
    f3d8:	00800044 	movi	r2,1
    f3dc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    f3e0:	e0bfff17 	ldw	r2,-4(fp)
    f3e4:	10c00b17 	ldw	r3,44(r2)
    f3e8:	e0bfff17 	ldw	r2,-4(fp)
    f3ec:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    f3f0:	e0bfff17 	ldw	r2,-4(fp)
    f3f4:	11000b15 	stw	r4,44(r2)
	return 0;
    f3f8:	0005883a 	mov	r2,zero
}
    f3fc:	e037883a 	mov	sp,fp
    f400:	df000017 	ldw	fp,0(sp)
    f404:	dec00104 	addi	sp,sp,4
    f408:	f800283a 	ret

0000f40c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    f40c:	defffe04 	addi	sp,sp,-8
    f410:	df000115 	stw	fp,4(sp)
    f414:	df000104 	addi	fp,sp,4
    f418:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    f41c:	e0bfff17 	ldw	r2,-4(fp)
    f420:	10800a17 	ldw	r2,40(r2)
    f424:	10800304 	addi	r2,r2,12
    f428:	10800037 	ldwio	r2,0(r2)
    f42c:	1080004c 	andi	r2,r2,1
}
    f430:	e037883a 	mov	sp,fp
    f434:	df000017 	ldw	fp,0(sp)
    f438:	dec00104 	addi	sp,sp,4
    f43c:	f800283a 	ret

0000f440 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    f440:	defff604 	addi	sp,sp,-40
    f444:	df000915 	stw	fp,36(sp)
    f448:	df000904 	addi	fp,sp,36
    f44c:	e13ff715 	stw	r4,-36(fp)
    f450:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f454:	e0bff817 	ldw	r2,-32(fp)
    f458:	10800058 	cmpnei	r2,r2,1
    f45c:	1000041e 	bne	r2,zero,f470 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    f460:	e0bff717 	ldw	r2,-36(fp)
    f464:	10800c17 	ldw	r2,48(r2)
    f468:	e0bfff15 	stw	r2,-4(fp)
    f46c:	00000306 	br	f47c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    f470:	e0bff717 	ldw	r2,-36(fp)
    f474:	10800b17 	ldw	r2,44(r2)
    f478:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    f47c:	e0bff717 	ldw	r2,-36(fp)
    f480:	10800f17 	ldw	r2,60(r2)
    f484:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f488:	e0bff717 	ldw	r2,-36(fp)
    f48c:	10800e17 	ldw	r2,56(r2)
    f490:	10800098 	cmpnei	r2,r2,2
    f494:	1000051e 	bne	r2,zero,f4ac <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    f498:	e0fffe17 	ldw	r3,-8(fp)
    f49c:	e0fffe17 	ldw	r3,-8(fp)
    f4a0:	18c5883a 	add	r2,r3,r3
    f4a4:	e0bffe15 	stw	r2,-8(fp)
    f4a8:	00000506 	br	f4c0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    f4ac:	e13ffe17 	ldw	r4,-8(fp)
    f4b0:	e13ffe17 	ldw	r4,-8(fp)
    f4b4:	2105883a 	add	r2,r4,r4
    f4b8:	1085883a 	add	r2,r2,r2
    f4bc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    f4c0:	e0bff717 	ldw	r2,-36(fp)
    f4c4:	10801017 	ldw	r2,64(r2)
    f4c8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f4cc:	e0bff717 	ldw	r2,-36(fp)
    f4d0:	10800d17 	ldw	r2,52(r2)
    f4d4:	1004c03a 	cmpne	r2,r2,zero
    f4d8:	10001e1e 	bne	r2,zero,f554 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f4dc:	e0bff717 	ldw	r2,-36(fp)
    f4e0:	10801317 	ldw	r2,76(r2)
    f4e4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    f4e8:	e03ffb15 	stw	zero,-20(fp)
    f4ec:	00001506 	br	f544 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    f4f0:	e03ffc15 	stw	zero,-16(fp)
    f4f4:	00000706 	br	f514 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    f4f8:	e0ffff17 	ldw	r3,-4(fp)
    f4fc:	e0bffc17 	ldw	r2,-16(fp)
    f500:	1885883a 	add	r2,r3,r2
    f504:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    f508:	e0bffc17 	ldw	r2,-16(fp)
    f50c:	10800104 	addi	r2,r2,4
    f510:	e0bffc15 	stw	r2,-16(fp)
    f514:	e0fffc17 	ldw	r3,-16(fp)
    f518:	e13ffe17 	ldw	r4,-8(fp)
    f51c:	193ff636 	bltu	r3,r4,f4f8 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    f520:	e0fffa17 	ldw	r3,-24(fp)
    f524:	00800044 	movi	r2,1
    f528:	10c4983a 	sll	r2,r2,r3
    f52c:	e0ffff17 	ldw	r3,-4(fp)
    f530:	1887883a 	add	r3,r3,r2
    f534:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    f538:	e13ffb17 	ldw	r4,-20(fp)
    f53c:	21000044 	addi	r4,r4,1
    f540:	e13ffb15 	stw	r4,-20(fp)
    f544:	e0bffb17 	ldw	r2,-20(fp)
    f548:	e0fffd17 	ldw	r3,-12(fp)
    f54c:	10ffe836 	bltu	r2,r3,f4f0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    f550:	00001006 	br	f594 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    f554:	e13ffd17 	ldw	r4,-12(fp)
    f558:	e0bffe17 	ldw	r2,-8(fp)
    f55c:	2089383a 	mul	r4,r4,r2
    f560:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    f564:	e03ff915 	stw	zero,-28(fp)
    f568:	00000706 	br	f588 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    f56c:	e0ffff17 	ldw	r3,-4(fp)
    f570:	e0bff917 	ldw	r2,-28(fp)
    f574:	1885883a 	add	r2,r3,r2
    f578:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    f57c:	e0fff917 	ldw	r3,-28(fp)
    f580:	18c00104 	addi	r3,r3,4
    f584:	e0fff915 	stw	r3,-28(fp)
    f588:	e0bff917 	ldw	r2,-28(fp)
    f58c:	e13ffd17 	ldw	r4,-12(fp)
    f590:	113ff636 	bltu	r2,r4,f56c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    f594:	e037883a 	mov	sp,fp
    f598:	df000017 	ldw	fp,0(sp)
    f59c:	dec00104 	addi	sp,sp,4
    f5a0:	f800283a 	ret

0000f5a4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    f5a4:	deffed04 	addi	sp,sp,-76
    f5a8:	df001215 	stw	fp,72(sp)
    f5ac:	df001204 	addi	fp,sp,72
    f5b0:	e13fee15 	stw	r4,-72(fp)
    f5b4:	e17fef15 	stw	r5,-68(fp)
    f5b8:	e1bff015 	stw	r6,-64(fp)
    f5bc:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f5c0:	e0bfee17 	ldw	r2,-72(fp)
    f5c4:	10800f17 	ldw	r2,60(r2)
    f5c8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f5cc:	e0bfee17 	ldw	r2,-72(fp)
    f5d0:	10801017 	ldw	r2,64(r2)
    f5d4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    f5d8:	e0bfef17 	ldw	r2,-68(fp)
    f5dc:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    f5e0:	e0fff117 	ldw	r3,-60(fp)
    f5e4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    f5e8:	e13ff017 	ldw	r4,-64(fp)
    f5ec:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    f5f0:	e0800117 	ldw	r2,4(fp)
    f5f4:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    f5f8:	e0c00217 	ldw	r3,8(fp)
    f5fc:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    f600:	e13ffa17 	ldw	r4,-24(fp)
    f604:	e0bffb17 	ldw	r2,-20(fp)
    f608:	2080062e 	bgeu	r4,r2,f624 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    f60c:	e0fffb17 	ldw	r3,-20(fp)
    f610:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    f614:	e13ffa17 	ldw	r4,-24(fp)
    f618:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    f61c:	e0bffc17 	ldw	r2,-16(fp)
    f620:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    f624:	e0fff817 	ldw	r3,-32(fp)
    f628:	e13ff917 	ldw	r4,-28(fp)
    f62c:	1900062e 	bgeu	r3,r4,f648 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    f630:	e0bff917 	ldw	r2,-28(fp)
    f634:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    f638:	e0fff817 	ldw	r3,-32(fp)
    f63c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    f640:	e13ffc17 	ldw	r4,-16(fp)
    f644:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    f648:	e0bffb17 	ldw	r2,-20(fp)
    f64c:	e0fffe17 	ldw	r3,-8(fp)
    f650:	10c10d2e 	bgeu	r2,r3,fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    f654:	e13ff917 	ldw	r4,-28(fp)
    f658:	e0bffd17 	ldw	r2,-12(fp)
    f65c:	20800136 	bltu	r4,r2,f664 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f660:	00010906 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    f664:	e0fffa17 	ldw	r3,-24(fp)
    f668:	e13ffe17 	ldw	r4,-8(fp)
    f66c:	19000336 	bltu	r3,r4,f67c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    f670:	e0bffe17 	ldw	r2,-8(fp)
    f674:	10bfffc4 	addi	r2,r2,-1
    f678:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f67c:	e0fff817 	ldw	r3,-32(fp)
    f680:	e13ffd17 	ldw	r4,-12(fp)
    f684:	19000336 	bltu	r3,r4,f694 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    f688:	e0bffd17 	ldw	r2,-12(fp)
    f68c:	10bfffc4 	addi	r2,r2,-1
    f690:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f694:	e0800317 	ldw	r2,12(fp)
    f698:	10800058 	cmpnei	r2,r2,1
    f69c:	1000041e 	bne	r2,zero,f6b0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    f6a0:	e0bfee17 	ldw	r2,-72(fp)
    f6a4:	10800c17 	ldw	r2,48(r2)
    f6a8:	e0bfff15 	stw	r2,-4(fp)
    f6ac:	00000306 	br	f6bc <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    f6b0:	e0bfee17 	ldw	r2,-72(fp)
    f6b4:	10800b17 	ldw	r2,44(r2)
    f6b8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f6bc:	e0bfee17 	ldw	r2,-72(fp)
    f6c0:	10800d17 	ldw	r2,52(r2)
    f6c4:	1004c03a 	cmpne	r2,r2,zero
    f6c8:	1000721e 	bne	r2,zero,f894 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f6cc:	e0bfee17 	ldw	r2,-72(fp)
    f6d0:	10801317 	ldw	r2,76(r2)
    f6d4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    f6d8:	e0bff417 	ldw	r2,-48(fp)
    f6dc:	e0fff917 	ldw	r3,-28(fp)
    f6e0:	1884983a 	sll	r2,r3,r2
    f6e4:	e13fff17 	ldw	r4,-4(fp)
    f6e8:	2089883a 	add	r4,r4,r2
    f6ec:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f6f0:	e0bfee17 	ldw	r2,-72(fp)
    f6f4:	10800e17 	ldw	r2,56(r2)
    f6f8:	10800058 	cmpnei	r2,r2,1
    f6fc:	10001e1e 	bne	r2,zero,f778 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    f700:	e0bff917 	ldw	r2,-28(fp)
    f704:	e0bff515 	stw	r2,-44(fp)
    f708:	00001706 	br	f768 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    f70c:	e0fffb17 	ldw	r3,-20(fp)
    f710:	e0fff615 	stw	r3,-40(fp)
    f714:	00000806 	br	f738 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    f718:	e0ffff17 	ldw	r3,-4(fp)
    f71c:	e0bff617 	ldw	r2,-40(fp)
    f720:	1885883a 	add	r2,r3,r2
    f724:	e0fff717 	ldw	r3,-36(fp)
    f728:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f72c:	e13ff617 	ldw	r4,-40(fp)
    f730:	21000044 	addi	r4,r4,1
    f734:	e13ff615 	stw	r4,-40(fp)
    f738:	e0bffa17 	ldw	r2,-24(fp)
    f73c:	e0fff617 	ldw	r3,-40(fp)
    f740:	10fff52e 	bgeu	r2,r3,f718 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    f744:	e0fff417 	ldw	r3,-48(fp)
    f748:	00800044 	movi	r2,1
    f74c:	10c4983a 	sll	r2,r2,r3
    f750:	e13fff17 	ldw	r4,-4(fp)
    f754:	2089883a 	add	r4,r4,r2
    f758:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f75c:	e0bff517 	ldw	r2,-44(fp)
    f760:	10800044 	addi	r2,r2,1
    f764:	e0bff515 	stw	r2,-44(fp)
    f768:	e0fff817 	ldw	r3,-32(fp)
    f76c:	e13ff517 	ldw	r4,-44(fp)
    f770:	193fe62e 	bgeu	r3,r4,f70c <alt_up_pixel_buffer_dma_draw_box+0x168>
    f774:	0000c406 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f778:	e0bfee17 	ldw	r2,-72(fp)
    f77c:	10800e17 	ldw	r2,56(r2)
    f780:	10800098 	cmpnei	r2,r2,2
    f784:	1000211e 	bne	r2,zero,f80c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    f788:	e0bff917 	ldw	r2,-28(fp)
    f78c:	e0bff515 	stw	r2,-44(fp)
    f790:	00001a06 	br	f7fc <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    f794:	e0fffb17 	ldw	r3,-20(fp)
    f798:	e0fff615 	stw	r3,-40(fp)
    f79c:	00000b06 	br	f7cc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    f7a0:	e13ff617 	ldw	r4,-40(fp)
    f7a4:	e13ff617 	ldw	r4,-40(fp)
    f7a8:	2105883a 	add	r2,r4,r4
    f7ac:	1007883a 	mov	r3,r2
    f7b0:	e0bfff17 	ldw	r2,-4(fp)
    f7b4:	1885883a 	add	r2,r3,r2
    f7b8:	e0fff717 	ldw	r3,-36(fp)
    f7bc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f7c0:	e0bff617 	ldw	r2,-40(fp)
    f7c4:	10800044 	addi	r2,r2,1
    f7c8:	e0bff615 	stw	r2,-40(fp)
    f7cc:	e0fffa17 	ldw	r3,-24(fp)
    f7d0:	e13ff617 	ldw	r4,-40(fp)
    f7d4:	193ff22e 	bgeu	r3,r4,f7a0 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    f7d8:	e0fff417 	ldw	r3,-48(fp)
    f7dc:	00800044 	movi	r2,1
    f7e0:	10c4983a 	sll	r2,r2,r3
    f7e4:	e0ffff17 	ldw	r3,-4(fp)
    f7e8:	1887883a 	add	r3,r3,r2
    f7ec:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f7f0:	e13ff517 	ldw	r4,-44(fp)
    f7f4:	21000044 	addi	r4,r4,1
    f7f8:	e13ff515 	stw	r4,-44(fp)
    f7fc:	e0bff817 	ldw	r2,-32(fp)
    f800:	e0fff517 	ldw	r3,-44(fp)
    f804:	10ffe32e 	bgeu	r2,r3,f794 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    f808:	00009f06 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f80c:	e13ff917 	ldw	r4,-28(fp)
    f810:	e13ff515 	stw	r4,-44(fp)
    f814:	00001b06 	br	f884 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    f818:	e0bffb17 	ldw	r2,-20(fp)
    f81c:	e0bff615 	stw	r2,-40(fp)
    f820:	00000c06 	br	f854 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    f824:	e0fff617 	ldw	r3,-40(fp)
    f828:	e0fff617 	ldw	r3,-40(fp)
    f82c:	18c5883a 	add	r2,r3,r3
    f830:	1085883a 	add	r2,r2,r2
    f834:	1007883a 	mov	r3,r2
    f838:	e0bfff17 	ldw	r2,-4(fp)
    f83c:	1885883a 	add	r2,r3,r2
    f840:	e0fff717 	ldw	r3,-36(fp)
    f844:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f848:	e13ff617 	ldw	r4,-40(fp)
    f84c:	21000044 	addi	r4,r4,1
    f850:	e13ff615 	stw	r4,-40(fp)
    f854:	e0bffa17 	ldw	r2,-24(fp)
    f858:	e0fff617 	ldw	r3,-40(fp)
    f85c:	10fff12e 	bgeu	r2,r3,f824 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    f860:	e0fff417 	ldw	r3,-48(fp)
    f864:	00800044 	movi	r2,1
    f868:	10c4983a 	sll	r2,r2,r3
    f86c:	e13fff17 	ldw	r4,-4(fp)
    f870:	2089883a 	add	r4,r4,r2
    f874:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f878:	e0bff517 	ldw	r2,-44(fp)
    f87c:	10800044 	addi	r2,r2,1
    f880:	e0bff515 	stw	r2,-44(fp)
    f884:	e0fff817 	ldw	r3,-32(fp)
    f888:	e13ff517 	ldw	r4,-44(fp)
    f88c:	193fe22e 	bgeu	r3,r4,f818 <alt_up_pixel_buffer_dma_draw_box+0x274>
    f890:	00007d06 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f894:	e0bfee17 	ldw	r2,-72(fp)
    f898:	10800e17 	ldw	r2,56(r2)
    f89c:	10800058 	cmpnei	r2,r2,1
    f8a0:	1000221e 	bne	r2,zero,f92c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    f8a4:	e0fff917 	ldw	r3,-28(fp)
    f8a8:	e13ffe17 	ldw	r4,-8(fp)
    f8ac:	1905383a 	mul	r2,r3,r4
    f8b0:	e0ffff17 	ldw	r3,-4(fp)
    f8b4:	1887883a 	add	r3,r3,r2
    f8b8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    f8bc:	e13ff917 	ldw	r4,-28(fp)
    f8c0:	e13ff215 	stw	r4,-56(fp)
    f8c4:	00001506 	br	f91c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    f8c8:	e0bffb17 	ldw	r2,-20(fp)
    f8cc:	e0bff315 	stw	r2,-52(fp)
    f8d0:	00000806 	br	f8f4 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    f8d4:	e0ffff17 	ldw	r3,-4(fp)
    f8d8:	e0bff317 	ldw	r2,-52(fp)
    f8dc:	1885883a 	add	r2,r3,r2
    f8e0:	e0fff717 	ldw	r3,-36(fp)
    f8e4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f8e8:	e0fff317 	ldw	r3,-52(fp)
    f8ec:	18c00044 	addi	r3,r3,1
    f8f0:	e0fff315 	stw	r3,-52(fp)
    f8f4:	e13ffa17 	ldw	r4,-24(fp)
    f8f8:	e0bff317 	ldw	r2,-52(fp)
    f8fc:	20bff52e 	bgeu	r4,r2,f8d4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    f900:	e0ffff17 	ldw	r3,-4(fp)
    f904:	e13ffe17 	ldw	r4,-8(fp)
    f908:	1907883a 	add	r3,r3,r4
    f90c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f910:	e0bff217 	ldw	r2,-56(fp)
    f914:	10800044 	addi	r2,r2,1
    f918:	e0bff215 	stw	r2,-56(fp)
    f91c:	e0fff817 	ldw	r3,-32(fp)
    f920:	e13ff217 	ldw	r4,-56(fp)
    f924:	193fe82e 	bgeu	r3,r4,f8c8 <alt_up_pixel_buffer_dma_draw_box+0x324>
    f928:	00005706 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f92c:	e0bfee17 	ldw	r2,-72(fp)
    f930:	10800e17 	ldw	r2,56(r2)
    f934:	10800098 	cmpnei	r2,r2,2
    f938:	1000291e 	bne	r2,zero,f9e0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    f93c:	e0fffe17 	ldw	r3,-8(fp)
    f940:	e0fffe17 	ldw	r3,-8(fp)
    f944:	18c5883a 	add	r2,r3,r3
    f948:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    f94c:	e13ff917 	ldw	r4,-28(fp)
    f950:	e0fffe17 	ldw	r3,-8(fp)
    f954:	20c5383a 	mul	r2,r4,r3
    f958:	e13fff17 	ldw	r4,-4(fp)
    f95c:	2089883a 	add	r4,r4,r2
    f960:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    f964:	e0bff917 	ldw	r2,-28(fp)
    f968:	e0bff215 	stw	r2,-56(fp)
    f96c:	00001806 	br	f9d0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    f970:	e0fffb17 	ldw	r3,-20(fp)
    f974:	e0fff315 	stw	r3,-52(fp)
    f978:	00000b06 	br	f9a8 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    f97c:	e13ff317 	ldw	r4,-52(fp)
    f980:	e13ff317 	ldw	r4,-52(fp)
    f984:	2105883a 	add	r2,r4,r4
    f988:	1007883a 	mov	r3,r2
    f98c:	e0bfff17 	ldw	r2,-4(fp)
    f990:	1885883a 	add	r2,r3,r2
    f994:	e0fff717 	ldw	r3,-36(fp)
    f998:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f99c:	e0bff317 	ldw	r2,-52(fp)
    f9a0:	10800044 	addi	r2,r2,1
    f9a4:	e0bff315 	stw	r2,-52(fp)
    f9a8:	e0fffa17 	ldw	r3,-24(fp)
    f9ac:	e13ff317 	ldw	r4,-52(fp)
    f9b0:	193ff22e 	bgeu	r3,r4,f97c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    f9b4:	e0bfff17 	ldw	r2,-4(fp)
    f9b8:	e0fffe17 	ldw	r3,-8(fp)
    f9bc:	10c5883a 	add	r2,r2,r3
    f9c0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f9c4:	e13ff217 	ldw	r4,-56(fp)
    f9c8:	21000044 	addi	r4,r4,1
    f9cc:	e13ff215 	stw	r4,-56(fp)
    f9d0:	e0bff817 	ldw	r2,-32(fp)
    f9d4:	e0fff217 	ldw	r3,-56(fp)
    f9d8:	10ffe52e 	bgeu	r2,r3,f970 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    f9dc:	00002a06 	br	fa88 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    f9e0:	e13ffe17 	ldw	r4,-8(fp)
    f9e4:	e13ffe17 	ldw	r4,-8(fp)
    f9e8:	2105883a 	add	r2,r4,r4
    f9ec:	1085883a 	add	r2,r2,r2
    f9f0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    f9f4:	e0fff917 	ldw	r3,-28(fp)
    f9f8:	e13ffe17 	ldw	r4,-8(fp)
    f9fc:	1905383a 	mul	r2,r3,r4
    fa00:	e0ffff17 	ldw	r3,-4(fp)
    fa04:	1887883a 	add	r3,r3,r2
    fa08:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fa0c:	e13ff917 	ldw	r4,-28(fp)
    fa10:	e13ff215 	stw	r4,-56(fp)
    fa14:	00001906 	br	fa7c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    fa18:	e0bffb17 	ldw	r2,-20(fp)
    fa1c:	e0bff315 	stw	r2,-52(fp)
    fa20:	00000c06 	br	fa54 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    fa24:	e0fff317 	ldw	r3,-52(fp)
    fa28:	e0fff317 	ldw	r3,-52(fp)
    fa2c:	18c5883a 	add	r2,r3,r3
    fa30:	1085883a 	add	r2,r2,r2
    fa34:	1007883a 	mov	r3,r2
    fa38:	e0bfff17 	ldw	r2,-4(fp)
    fa3c:	1885883a 	add	r2,r3,r2
    fa40:	e0fff717 	ldw	r3,-36(fp)
    fa44:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fa48:	e13ff317 	ldw	r4,-52(fp)
    fa4c:	21000044 	addi	r4,r4,1
    fa50:	e13ff315 	stw	r4,-52(fp)
    fa54:	e0bffa17 	ldw	r2,-24(fp)
    fa58:	e0fff317 	ldw	r3,-52(fp)
    fa5c:	10fff12e 	bgeu	r2,r3,fa24 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    fa60:	e13fff17 	ldw	r4,-4(fp)
    fa64:	e0bffe17 	ldw	r2,-8(fp)
    fa68:	2089883a 	add	r4,r4,r2
    fa6c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fa70:	e0fff217 	ldw	r3,-56(fp)
    fa74:	18c00044 	addi	r3,r3,1
    fa78:	e0fff215 	stw	r3,-56(fp)
    fa7c:	e13ff817 	ldw	r4,-32(fp)
    fa80:	e0bff217 	ldw	r2,-56(fp)
    fa84:	20bfe42e 	bgeu	r4,r2,fa18 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    fa88:	e037883a 	mov	sp,fp
    fa8c:	df000017 	ldw	fp,0(sp)
    fa90:	dec00104 	addi	sp,sp,4
    fa94:	f800283a 	ret

0000fa98 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    fa98:	defff204 	addi	sp,sp,-56
    fa9c:	df000d15 	stw	fp,52(sp)
    faa0:	df000d04 	addi	fp,sp,52
    faa4:	e13ff315 	stw	r4,-52(fp)
    faa8:	e17ff415 	stw	r5,-48(fp)
    faac:	e1bff515 	stw	r6,-44(fp)
    fab0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    fab4:	e0bff317 	ldw	r2,-52(fp)
    fab8:	10800f17 	ldw	r2,60(r2)
    fabc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    fac0:	e0bff317 	ldw	r2,-52(fp)
    fac4:	10801017 	ldw	r2,64(r2)
    fac8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    facc:	e0bff417 	ldw	r2,-48(fp)
    fad0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    fad4:	e0fff517 	ldw	r3,-44(fp)
    fad8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    fadc:	e13ff617 	ldw	r4,-40(fp)
    fae0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    fae4:	e0800117 	ldw	r2,4(fp)
    fae8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    faec:	e0fffb17 	ldw	r3,-20(fp)
    faf0:	e13ffc17 	ldw	r4,-16(fp)
    faf4:	1900042e 	bgeu	r3,r4,fb08 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    faf8:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    fafc:	e0fffb17 	ldw	r3,-20(fp)
    fb00:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    fb04:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    fb08:	e13ffc17 	ldw	r4,-16(fp)
    fb0c:	e0bffe17 	ldw	r2,-8(fp)
    fb10:	2080b12e 	bgeu	r4,r2,fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    fb14:	e0fffa17 	ldw	r3,-24(fp)
    fb18:	e13ffd17 	ldw	r4,-12(fp)
    fb1c:	19000136 	bltu	r3,r4,fb24 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    fb20:	0000ad06 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    fb24:	e0bffb17 	ldw	r2,-20(fp)
    fb28:	e0fffe17 	ldw	r3,-8(fp)
    fb2c:	10c00336 	bltu	r2,r3,fb3c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    fb30:	e13ffe17 	ldw	r4,-8(fp)
    fb34:	213fffc4 	addi	r4,r4,-1
    fb38:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fb3c:	e0800217 	ldw	r2,8(fp)
    fb40:	10800058 	cmpnei	r2,r2,1
    fb44:	1000041e 	bne	r2,zero,fb58 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    fb48:	e0bff317 	ldw	r2,-52(fp)
    fb4c:	10800c17 	ldw	r2,48(r2)
    fb50:	e0bfff15 	stw	r2,-4(fp)
    fb54:	00000306 	br	fb64 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    fb58:	e0bff317 	ldw	r2,-52(fp)
    fb5c:	10800b17 	ldw	r2,44(r2)
    fb60:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    fb64:	e0bff317 	ldw	r2,-52(fp)
    fb68:	10800d17 	ldw	r2,52(r2)
    fb6c:	1004c03a 	cmpne	r2,r2,zero
    fb70:	1000431e 	bne	r2,zero,fc80 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fb74:	e0bff317 	ldw	r2,-52(fp)
    fb78:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    fb7c:	e0fffa17 	ldw	r3,-24(fp)
    fb80:	1884983a 	sll	r2,r3,r2
    fb84:	e13fff17 	ldw	r4,-4(fp)
    fb88:	2089883a 	add	r4,r4,r2
    fb8c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fb90:	e0bff317 	ldw	r2,-52(fp)
    fb94:	10800e17 	ldw	r2,56(r2)
    fb98:	10800058 	cmpnei	r2,r2,1
    fb9c:	10000f1e 	bne	r2,zero,fbdc <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    fba0:	e0bffc17 	ldw	r2,-16(fp)
    fba4:	e0bff815 	stw	r2,-32(fp)
    fba8:	00000806 	br	fbcc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    fbac:	e0ffff17 	ldw	r3,-4(fp)
    fbb0:	e0bff817 	ldw	r2,-32(fp)
    fbb4:	1885883a 	add	r2,r3,r2
    fbb8:	e0fff917 	ldw	r3,-28(fp)
    fbbc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    fbc0:	e0fff817 	ldw	r3,-32(fp)
    fbc4:	18c00044 	addi	r3,r3,1
    fbc8:	e0fff815 	stw	r3,-32(fp)
    fbcc:	e13ffb17 	ldw	r4,-20(fp)
    fbd0:	e0bff817 	ldw	r2,-32(fp)
    fbd4:	20bff52e 	bgeu	r4,r2,fbac <alt_up_pixel_buffer_dma_draw_hline+0x114>
    fbd8:	00007f06 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fbdc:	e0bff317 	ldw	r2,-52(fp)
    fbe0:	10800e17 	ldw	r2,56(r2)
    fbe4:	10800098 	cmpnei	r2,r2,2
    fbe8:	1000121e 	bne	r2,zero,fc34 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    fbec:	e0fffc17 	ldw	r3,-16(fp)
    fbf0:	e0fff815 	stw	r3,-32(fp)
    fbf4:	00000b06 	br	fc24 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    fbf8:	e13ff817 	ldw	r4,-32(fp)
    fbfc:	e13ff817 	ldw	r4,-32(fp)
    fc00:	2105883a 	add	r2,r4,r4
    fc04:	1007883a 	mov	r3,r2
    fc08:	e0bfff17 	ldw	r2,-4(fp)
    fc0c:	1885883a 	add	r2,r3,r2
    fc10:	e0fff917 	ldw	r3,-28(fp)
    fc14:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    fc18:	e0bff817 	ldw	r2,-32(fp)
    fc1c:	10800044 	addi	r2,r2,1
    fc20:	e0bff815 	stw	r2,-32(fp)
    fc24:	e0fffb17 	ldw	r3,-20(fp)
    fc28:	e13ff817 	ldw	r4,-32(fp)
    fc2c:	193ff22e 	bgeu	r3,r4,fbf8 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    fc30:	00006906 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    fc34:	e0bffc17 	ldw	r2,-16(fp)
    fc38:	e0bff815 	stw	r2,-32(fp)
    fc3c:	00000c06 	br	fc70 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    fc40:	e0fff817 	ldw	r3,-32(fp)
    fc44:	e0fff817 	ldw	r3,-32(fp)
    fc48:	18c5883a 	add	r2,r3,r3
    fc4c:	1085883a 	add	r2,r2,r2
    fc50:	1007883a 	mov	r3,r2
    fc54:	e0bfff17 	ldw	r2,-4(fp)
    fc58:	1885883a 	add	r2,r3,r2
    fc5c:	e0fff917 	ldw	r3,-28(fp)
    fc60:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    fc64:	e13ff817 	ldw	r4,-32(fp)
    fc68:	21000044 	addi	r4,r4,1
    fc6c:	e13ff815 	stw	r4,-32(fp)
    fc70:	e0bffb17 	ldw	r2,-20(fp)
    fc74:	e0fff817 	ldw	r3,-32(fp)
    fc78:	10fff12e 	bgeu	r2,r3,fc40 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    fc7c:	00005606 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fc80:	e0bff317 	ldw	r2,-52(fp)
    fc84:	10800e17 	ldw	r2,56(r2)
    fc88:	10800058 	cmpnei	r2,r2,1
    fc8c:	1000151e 	bne	r2,zero,fce4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    fc90:	e13ffa17 	ldw	r4,-24(fp)
    fc94:	e0fffe17 	ldw	r3,-8(fp)
    fc98:	20c5383a 	mul	r2,r4,r3
    fc9c:	e13fff17 	ldw	r4,-4(fp)
    fca0:	2089883a 	add	r4,r4,r2
    fca4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    fca8:	e0bffc17 	ldw	r2,-16(fp)
    fcac:	e0bff715 	stw	r2,-36(fp)
    fcb0:	00000806 	br	fcd4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    fcb4:	e0ffff17 	ldw	r3,-4(fp)
    fcb8:	e0bff717 	ldw	r2,-36(fp)
    fcbc:	1885883a 	add	r2,r3,r2
    fcc0:	e0fff917 	ldw	r3,-28(fp)
    fcc4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    fcc8:	e0fff717 	ldw	r3,-36(fp)
    fccc:	18c00044 	addi	r3,r3,1
    fcd0:	e0fff715 	stw	r3,-36(fp)
    fcd4:	e13ffb17 	ldw	r4,-20(fp)
    fcd8:	e0bff717 	ldw	r2,-36(fp)
    fcdc:	20bff52e 	bgeu	r4,r2,fcb4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    fce0:	00003d06 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fce4:	e0bff317 	ldw	r2,-52(fp)
    fce8:	10800e17 	ldw	r2,56(r2)
    fcec:	10800098 	cmpnei	r2,r2,2
    fcf0:	10001c1e 	bne	r2,zero,fd64 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    fcf4:	e0fffe17 	ldw	r3,-8(fp)
    fcf8:	e0fffe17 	ldw	r3,-8(fp)
    fcfc:	18c5883a 	add	r2,r3,r3
    fd00:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    fd04:	e13ffa17 	ldw	r4,-24(fp)
    fd08:	e0fffe17 	ldw	r3,-8(fp)
    fd0c:	20c5383a 	mul	r2,r4,r3
    fd10:	e13fff17 	ldw	r4,-4(fp)
    fd14:	2089883a 	add	r4,r4,r2
    fd18:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    fd1c:	e0bffc17 	ldw	r2,-16(fp)
    fd20:	e0bff715 	stw	r2,-36(fp)
    fd24:	00000b06 	br	fd54 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    fd28:	e0fff717 	ldw	r3,-36(fp)
    fd2c:	e0fff717 	ldw	r3,-36(fp)
    fd30:	18c5883a 	add	r2,r3,r3
    fd34:	1007883a 	mov	r3,r2
    fd38:	e0bfff17 	ldw	r2,-4(fp)
    fd3c:	1885883a 	add	r2,r3,r2
    fd40:	e0fff917 	ldw	r3,-28(fp)
    fd44:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    fd48:	e13ff717 	ldw	r4,-36(fp)
    fd4c:	21000044 	addi	r4,r4,1
    fd50:	e13ff715 	stw	r4,-36(fp)
    fd54:	e0bffb17 	ldw	r2,-20(fp)
    fd58:	e0fff717 	ldw	r3,-36(fp)
    fd5c:	10fff22e 	bgeu	r2,r3,fd28 <alt_up_pixel_buffer_dma_draw_hline+0x290>
    fd60:	00001d06 	br	fdd8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    fd64:	e13ffe17 	ldw	r4,-8(fp)
    fd68:	e13ffe17 	ldw	r4,-8(fp)
    fd6c:	2105883a 	add	r2,r4,r4
    fd70:	1085883a 	add	r2,r2,r2
    fd74:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    fd78:	e0fffa17 	ldw	r3,-24(fp)
    fd7c:	e13ffe17 	ldw	r4,-8(fp)
    fd80:	1905383a 	mul	r2,r3,r4
    fd84:	e0ffff17 	ldw	r3,-4(fp)
    fd88:	1887883a 	add	r3,r3,r2
    fd8c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
    fd90:	e13ffc17 	ldw	r4,-16(fp)
    fd94:	e13ff715 	stw	r4,-36(fp)
    fd98:	00000c06 	br	fdcc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    fd9c:	e0fff717 	ldw	r3,-36(fp)
    fda0:	e0fff717 	ldw	r3,-36(fp)
    fda4:	18c5883a 	add	r2,r3,r3
    fda8:	1085883a 	add	r2,r2,r2
    fdac:	1007883a 	mov	r3,r2
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	1885883a 	add	r2,r3,r2
    fdb8:	e0fff917 	ldw	r3,-28(fp)
    fdbc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    fdc0:	e13ff717 	ldw	r4,-36(fp)
    fdc4:	21000044 	addi	r4,r4,1
    fdc8:	e13ff715 	stw	r4,-36(fp)
    fdcc:	e0bffb17 	ldw	r2,-20(fp)
    fdd0:	e0fff717 	ldw	r3,-36(fp)
    fdd4:	10fff12e 	bgeu	r2,r3,fd9c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    fdd8:	e037883a 	mov	sp,fp
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00104 	addi	sp,sp,4
    fde4:	f800283a 	ret

0000fde8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    fde8:	defff104 	addi	sp,sp,-60
    fdec:	df000e15 	stw	fp,56(sp)
    fdf0:	df000e04 	addi	fp,sp,56
    fdf4:	e13ff215 	stw	r4,-56(fp)
    fdf8:	e17ff315 	stw	r5,-52(fp)
    fdfc:	e1bff415 	stw	r6,-48(fp)
    fe00:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    fe04:	e0bff217 	ldw	r2,-56(fp)
    fe08:	10800f17 	ldw	r2,60(r2)
    fe0c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    fe10:	e0bff217 	ldw	r2,-56(fp)
    fe14:	10801017 	ldw	r2,64(r2)
    fe18:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
    fe1c:	e0bff317 	ldw	r2,-52(fp)
    fe20:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
    fe24:	e0fff417 	ldw	r3,-48(fp)
    fe28:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
    fe2c:	e13ff517 	ldw	r4,-44(fp)
    fe30:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    fe34:	e0800117 	ldw	r2,4(fp)
    fe38:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    fe3c:	e0fffa17 	ldw	r3,-24(fp)
    fe40:	e13ffb17 	ldw	r4,-20(fp)
    fe44:	1900042e 	bgeu	r3,r4,fe58 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
    fe48:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
    fe4c:	e0fffa17 	ldw	r3,-24(fp)
    fe50:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
    fe54:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    fe58:	e13ffc17 	ldw	r4,-16(fp)
    fe5c:	e0bffe17 	ldw	r2,-8(fp)
    fe60:	2080d12e 	bgeu	r4,r2,101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
    fe64:	e0fffb17 	ldw	r3,-20(fp)
    fe68:	e13ffd17 	ldw	r4,-12(fp)
    fe6c:	19000136 	bltu	r3,r4,fe74 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    fe70:	0000cd06 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    fe74:	e0bffa17 	ldw	r2,-24(fp)
    fe78:	e0fffd17 	ldw	r3,-12(fp)
    fe7c:	10c00336 	bltu	r2,r3,fe8c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
    fe80:	e13ffd17 	ldw	r4,-12(fp)
    fe84:	213fffc4 	addi	r4,r4,-1
    fe88:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fe8c:	e0800217 	ldw	r2,8(fp)
    fe90:	10800058 	cmpnei	r2,r2,1
    fe94:	1000041e 	bne	r2,zero,fea8 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    fe98:	e0bff217 	ldw	r2,-56(fp)
    fe9c:	10800c17 	ldw	r2,48(r2)
    fea0:	e0bfff15 	stw	r2,-4(fp)
    fea4:	00000306 	br	feb4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    fea8:	e0bff217 	ldw	r2,-56(fp)
    feac:	10800b17 	ldw	r2,44(r2)
    feb0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    feb4:	e0bff217 	ldw	r2,-56(fp)
    feb8:	10800d17 	ldw	r2,52(r2)
    febc:	1004c03a 	cmpne	r2,r2,zero
    fec0:	1000571e 	bne	r2,zero,10020 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fec4:	e0bff217 	ldw	r2,-56(fp)
    fec8:	10801317 	ldw	r2,76(r2)
    fecc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
    fed0:	e0bff717 	ldw	r2,-36(fp)
    fed4:	e0fffb17 	ldw	r3,-20(fp)
    fed8:	1884983a 	sll	r2,r3,r2
    fedc:	e13fff17 	ldw	r4,-4(fp)
    fee0:	2089883a 	add	r4,r4,r2
    fee4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fee8:	e0bff217 	ldw	r2,-56(fp)
    feec:	10800e17 	ldw	r2,56(r2)
    fef0:	10800058 	cmpnei	r2,r2,1
    fef4:	1000151e 	bne	r2,zero,ff4c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
    fef8:	e0bffb17 	ldw	r2,-20(fp)
    fefc:	e0bff815 	stw	r2,-32(fp)
    ff00:	00000e06 	br	ff3c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    ff04:	e0ffff17 	ldw	r3,-4(fp)
    ff08:	e0bffc17 	ldw	r2,-16(fp)
    ff0c:	1885883a 	add	r2,r3,r2
    ff10:	e0fff917 	ldw	r3,-28(fp)
    ff14:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    ff18:	e0fff717 	ldw	r3,-36(fp)
    ff1c:	00800044 	movi	r2,1
    ff20:	10c4983a 	sll	r2,r2,r3
    ff24:	e0ffff17 	ldw	r3,-4(fp)
    ff28:	1887883a 	add	r3,r3,r2
    ff2c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    ff30:	e13ff817 	ldw	r4,-32(fp)
    ff34:	21000044 	addi	r4,r4,1
    ff38:	e13ff815 	stw	r4,-32(fp)
    ff3c:	e0bffa17 	ldw	r2,-24(fp)
    ff40:	e0fff817 	ldw	r3,-32(fp)
    ff44:	10ffef2e 	bgeu	r2,r3,ff04 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
    ff48:	00009706 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ff4c:	e0bff217 	ldw	r2,-56(fp)
    ff50:	10800e17 	ldw	r2,56(r2)
    ff54:	10800098 	cmpnei	r2,r2,2
    ff58:	1000181e 	bne	r2,zero,ffbc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
    ff5c:	e13ffb17 	ldw	r4,-20(fp)
    ff60:	e13ff815 	stw	r4,-32(fp)
    ff64:	00001106 	br	ffac <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    ff68:	e0fffc17 	ldw	r3,-16(fp)
    ff6c:	e0fffc17 	ldw	r3,-16(fp)
    ff70:	18c5883a 	add	r2,r3,r3
    ff74:	1007883a 	mov	r3,r2
    ff78:	e0bfff17 	ldw	r2,-4(fp)
    ff7c:	1885883a 	add	r2,r3,r2
    ff80:	e0fff917 	ldw	r3,-28(fp)
    ff84:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    ff88:	e0fff717 	ldw	r3,-36(fp)
    ff8c:	00800044 	movi	r2,1
    ff90:	10c4983a 	sll	r2,r2,r3
    ff94:	e13fff17 	ldw	r4,-4(fp)
    ff98:	2089883a 	add	r4,r4,r2
    ff9c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    ffa0:	e0bff817 	ldw	r2,-32(fp)
    ffa4:	10800044 	addi	r2,r2,1
    ffa8:	e0bff815 	stw	r2,-32(fp)
    ffac:	e0fffa17 	ldw	r3,-24(fp)
    ffb0:	e13ff817 	ldw	r4,-32(fp)
    ffb4:	193fec2e 	bgeu	r3,r4,ff68 <alt_up_pixel_buffer_dma_draw_vline+0x180>
    ffb8:	00007b06 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    ffbc:	e0bffb17 	ldw	r2,-20(fp)
    ffc0:	e0bff815 	stw	r2,-32(fp)
    ffc4:	00001206 	br	10010 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    ffc8:	e0fffc17 	ldw	r3,-16(fp)
    ffcc:	e0fffc17 	ldw	r3,-16(fp)
    ffd0:	18c5883a 	add	r2,r3,r3
    ffd4:	1085883a 	add	r2,r2,r2
    ffd8:	1007883a 	mov	r3,r2
    ffdc:	e0bfff17 	ldw	r2,-4(fp)
    ffe0:	1885883a 	add	r2,r3,r2
    ffe4:	e0fff917 	ldw	r3,-28(fp)
    ffe8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    ffec:	e0fff717 	ldw	r3,-36(fp)
    fff0:	00800044 	movi	r2,1
    fff4:	10c4983a 	sll	r2,r2,r3
    fff8:	e13fff17 	ldw	r4,-4(fp)
    fffc:	2089883a 	add	r4,r4,r2
   10000:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10004:	e0bff817 	ldw	r2,-32(fp)
   10008:	10800044 	addi	r2,r2,1
   1000c:	e0bff815 	stw	r2,-32(fp)
   10010:	e0fffa17 	ldw	r3,-24(fp)
   10014:	e13ff817 	ldw	r4,-32(fp)
   10018:	193feb2e 	bgeu	r3,r4,ffc8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   1001c:	00006206 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10020:	e0bff217 	ldw	r2,-56(fp)
   10024:	10800e17 	ldw	r2,56(r2)
   10028:	10800058 	cmpnei	r2,r2,1
   1002c:	1000191e 	bne	r2,zero,10094 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   10030:	e0fffb17 	ldw	r3,-20(fp)
   10034:	e13ffe17 	ldw	r4,-8(fp)
   10038:	1905383a 	mul	r2,r3,r4
   1003c:	e0ffff17 	ldw	r3,-4(fp)
   10040:	1887883a 	add	r3,r3,r2
   10044:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10048:	e13ffb17 	ldw	r4,-20(fp)
   1004c:	e13ff615 	stw	r4,-40(fp)
   10050:	00000c06 	br	10084 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   10054:	e0ffff17 	ldw	r3,-4(fp)
   10058:	e0bffc17 	ldw	r2,-16(fp)
   1005c:	1885883a 	add	r2,r3,r2
   10060:	e0fff917 	ldw	r3,-28(fp)
   10064:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	e0fffe17 	ldw	r3,-8(fp)
   10070:	10c5883a 	add	r2,r2,r3
   10074:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10078:	e13ff617 	ldw	r4,-40(fp)
   1007c:	21000044 	addi	r4,r4,1
   10080:	e13ff615 	stw	r4,-40(fp)
   10084:	e0bffa17 	ldw	r2,-24(fp)
   10088:	e0fff617 	ldw	r3,-40(fp)
   1008c:	10fff12e 	bgeu	r2,r3,10054 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   10090:	00004506 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10094:	e0bff217 	ldw	r2,-56(fp)
   10098:	10800e17 	ldw	r2,56(r2)
   1009c:	10800098 	cmpnei	r2,r2,2
   100a0:	1000201e 	bne	r2,zero,10124 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   100a4:	e13ffe17 	ldw	r4,-8(fp)
   100a8:	e13ffe17 	ldw	r4,-8(fp)
   100ac:	2105883a 	add	r2,r4,r4
   100b0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   100b4:	e0fffb17 	ldw	r3,-20(fp)
   100b8:	e13ffe17 	ldw	r4,-8(fp)
   100bc:	1905383a 	mul	r2,r3,r4
   100c0:	e0ffff17 	ldw	r3,-4(fp)
   100c4:	1887883a 	add	r3,r3,r2
   100c8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   100cc:	e13ffb17 	ldw	r4,-20(fp)
   100d0:	e13ff615 	stw	r4,-40(fp)
   100d4:	00000f06 	br	10114 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   100d8:	e0fffc17 	ldw	r3,-16(fp)
   100dc:	e0fffc17 	ldw	r3,-16(fp)
   100e0:	18c5883a 	add	r2,r3,r3
   100e4:	1007883a 	mov	r3,r2
   100e8:	e0bfff17 	ldw	r2,-4(fp)
   100ec:	1885883a 	add	r2,r3,r2
   100f0:	e0fff917 	ldw	r3,-28(fp)
   100f4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   100f8:	e13fff17 	ldw	r4,-4(fp)
   100fc:	e0bffe17 	ldw	r2,-8(fp)
   10100:	2089883a 	add	r4,r4,r2
   10104:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10108:	e0fff617 	ldw	r3,-40(fp)
   1010c:	18c00044 	addi	r3,r3,1
   10110:	e0fff615 	stw	r3,-40(fp)
   10114:	e13ffa17 	ldw	r4,-24(fp)
   10118:	e0bff617 	ldw	r2,-40(fp)
   1011c:	20bfee2e 	bgeu	r4,r2,100d8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   10120:	00002106 	br	101a8 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10124:	e0fffe17 	ldw	r3,-8(fp)
   10128:	e0fffe17 	ldw	r3,-8(fp)
   1012c:	18c5883a 	add	r2,r3,r3
   10130:	1085883a 	add	r2,r2,r2
   10134:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   10138:	e13ffb17 	ldw	r4,-20(fp)
   1013c:	e0fffe17 	ldw	r3,-8(fp)
   10140:	20c5383a 	mul	r2,r4,r3
   10144:	e13fff17 	ldw	r4,-4(fp)
   10148:	2089883a 	add	r4,r4,r2
   1014c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10150:	e0bffb17 	ldw	r2,-20(fp)
   10154:	e0bff615 	stw	r2,-40(fp)
   10158:	00001006 	br	1019c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   1015c:	e0fffc17 	ldw	r3,-16(fp)
   10160:	e0fffc17 	ldw	r3,-16(fp)
   10164:	18c5883a 	add	r2,r3,r3
   10168:	1085883a 	add	r2,r2,r2
   1016c:	1007883a 	mov	r3,r2
   10170:	e0bfff17 	ldw	r2,-4(fp)
   10174:	1885883a 	add	r2,r3,r2
   10178:	e0fff917 	ldw	r3,-28(fp)
   1017c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   10180:	e13fff17 	ldw	r4,-4(fp)
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	2089883a 	add	r4,r4,r2
   1018c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10190:	e0fff617 	ldw	r3,-40(fp)
   10194:	18c00044 	addi	r3,r3,1
   10198:	e0fff615 	stw	r3,-40(fp)
   1019c:	e13ffa17 	ldw	r4,-24(fp)
   101a0:	e0bff617 	ldw	r2,-40(fp)
   101a4:	20bfed2e 	bgeu	r4,r2,1015c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   101a8:	e037883a 	mov	sp,fp
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00104 	addi	sp,sp,4
   101b4:	f800283a 	ret

000101b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   101b8:	defff804 	addi	sp,sp,-32
   101bc:	dfc00715 	stw	ra,28(sp)
   101c0:	df000615 	stw	fp,24(sp)
   101c4:	df000604 	addi	fp,sp,24
   101c8:	e13ffc15 	stw	r4,-16(fp)
   101cc:	e17ffd15 	stw	r5,-12(fp)
   101d0:	e1bffe15 	stw	r6,-8(fp)
   101d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   101d8:	e0800317 	ldw	r2,12(fp)
   101dc:	d8800015 	stw	r2,0(sp)
   101e0:	e0800417 	ldw	r2,16(fp)
   101e4:	d8800115 	stw	r2,4(sp)
   101e8:	e13ffc17 	ldw	r4,-16(fp)
   101ec:	e17ffd17 	ldw	r5,-12(fp)
   101f0:	e1bfff17 	ldw	r6,-4(fp)
   101f4:	e1fffe17 	ldw	r7,-8(fp)
   101f8:	000fa980 	call	fa98 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   101fc:	e0800317 	ldw	r2,12(fp)
   10200:	d8800015 	stw	r2,0(sp)
   10204:	e0800417 	ldw	r2,16(fp)
   10208:	d8800115 	stw	r2,4(sp)
   1020c:	e13ffc17 	ldw	r4,-16(fp)
   10210:	e17ffd17 	ldw	r5,-12(fp)
   10214:	e1bfff17 	ldw	r6,-4(fp)
   10218:	e1c00217 	ldw	r7,8(fp)
   1021c:	000fa980 	call	fa98 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10220:	e0800317 	ldw	r2,12(fp)
   10224:	d8800015 	stw	r2,0(sp)
   10228:	e0800417 	ldw	r2,16(fp)
   1022c:	d8800115 	stw	r2,4(sp)
   10230:	e13ffc17 	ldw	r4,-16(fp)
   10234:	e17ffd17 	ldw	r5,-12(fp)
   10238:	e1bffe17 	ldw	r6,-8(fp)
   1023c:	e1c00217 	ldw	r7,8(fp)
   10240:	000fde80 	call	fde8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   10244:	e0800317 	ldw	r2,12(fp)
   10248:	d8800015 	stw	r2,0(sp)
   1024c:	e0800417 	ldw	r2,16(fp)
   10250:	d8800115 	stw	r2,4(sp)
   10254:	e13ffc17 	ldw	r4,-16(fp)
   10258:	e17fff17 	ldw	r5,-4(fp)
   1025c:	e1bffe17 	ldw	r6,-8(fp)
   10260:	e1c00217 	ldw	r7,8(fp)
   10264:	000fde80 	call	fde8 <alt_up_pixel_buffer_dma_draw_vline>
}
   10268:	e037883a 	mov	sp,fp
   1026c:	dfc00117 	ldw	ra,4(sp)
   10270:	df000017 	ldw	fp,0(sp)
   10274:	dec00204 	addi	sp,sp,8
   10278:	f800283a 	ret

0001027c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   1027c:	defffb04 	addi	sp,sp,-20
   10280:	df000415 	stw	fp,16(sp)
   10284:	df000404 	addi	fp,sp,16
   10288:	e13ffc15 	stw	r4,-16(fp)
   1028c:	e17ffd15 	stw	r5,-12(fp)
   10290:	e1bffe15 	stw	r6,-8(fp)
   10294:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   10298:	e0c00217 	ldw	r3,8(fp)
   1029c:	1804c03a 	cmpne	r2,r3,zero
   102a0:	10000b1e 	bne	r2,zero,102d0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   102a4:	e13ffd17 	ldw	r4,-12(fp)
   102a8:	e0ffff17 	ldw	r3,-4(fp)
   102ac:	20c5383a 	mul	r2,r4,r3
   102b0:	e13ffe17 	ldw	r4,-8(fp)
   102b4:	1105883a 	add	r2,r2,r4
   102b8:	1007883a 	mov	r3,r2
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	1885883a 	add	r2,r3,r2
   102c4:	e0c00117 	ldw	r3,4(fp)
   102c8:	10c00025 	stbio	r3,0(r2)
   102cc:	00001b06 	br	1033c <helper_plot_pixel+0xc0>
	else if (mode == 1)
   102d0:	e1000217 	ldw	r4,8(fp)
   102d4:	20800058 	cmpnei	r2,r4,1
   102d8:	10000c1e 	bne	r2,zero,1030c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   102dc:	e0fffd17 	ldw	r3,-12(fp)
   102e0:	e13fff17 	ldw	r4,-4(fp)
   102e4:	1905383a 	mul	r2,r3,r4
   102e8:	e0fffe17 	ldw	r3,-8(fp)
   102ec:	10c5883a 	add	r2,r2,r3
   102f0:	1085883a 	add	r2,r2,r2
   102f4:	1007883a 	mov	r3,r2
   102f8:	e0bffc17 	ldw	r2,-16(fp)
   102fc:	1885883a 	add	r2,r3,r2
   10300:	e1000117 	ldw	r4,4(fp)
   10304:	1100002d 	sthio	r4,0(r2)
   10308:	00000c06 	br	1033c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   1030c:	e0fffd17 	ldw	r3,-12(fp)
   10310:	e13fff17 	ldw	r4,-4(fp)
   10314:	1905383a 	mul	r2,r3,r4
   10318:	e0fffe17 	ldw	r3,-8(fp)
   1031c:	10c5883a 	add	r2,r2,r3
   10320:	1085883a 	add	r2,r2,r2
   10324:	1085883a 	add	r2,r2,r2
   10328:	1007883a 	mov	r3,r2
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	1885883a 	add	r2,r3,r2
   10334:	e1000117 	ldw	r4,4(fp)
   10338:	11000035 	stwio	r4,0(r2)
}
   1033c:	e037883a 	mov	sp,fp
   10340:	df000017 	ldw	fp,0(sp)
   10344:	dec00104 	addi	sp,sp,4
   10348:	f800283a 	ret

0001034c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   1034c:	deffe404 	addi	sp,sp,-112
   10350:	dfc01b15 	stw	ra,108(sp)
   10354:	df001a15 	stw	fp,104(sp)
   10358:	df001a04 	addi	fp,sp,104
   1035c:	e13fe815 	stw	r4,-96(fp)
   10360:	e17fe915 	stw	r5,-92(fp)
   10364:	e1bfea15 	stw	r6,-88(fp)
   10368:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   1036c:	e0bfe917 	ldw	r2,-92(fp)
   10370:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   10374:	e0ffea17 	ldw	r3,-88(fp)
   10378:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   1037c:	e13feb17 	ldw	r4,-84(fp)
   10380:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   10384:	e0800217 	ldw	r2,8(fp)
   10388:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   1038c:	e0fff717 	ldw	r3,-36(fp)
   10390:	e13ff917 	ldw	r4,-28(fp)
   10394:	1905c83a 	sub	r2,r3,r4
   10398:	e0bfff15 	stw	r2,-4(fp)
   1039c:	e0ffff17 	ldw	r3,-4(fp)
   103a0:	1804403a 	cmpge	r2,r3,zero
   103a4:	1000031e 	bne	r2,zero,103b4 <alt_up_pixel_buffer_dma_draw_line+0x68>
   103a8:	e13fff17 	ldw	r4,-4(fp)
   103ac:	0109c83a 	sub	r4,zero,r4
   103b0:	e13fff15 	stw	r4,-4(fp)
   103b4:	e0fff817 	ldw	r3,-32(fp)
   103b8:	e13ffa17 	ldw	r4,-24(fp)
   103bc:	1905c83a 	sub	r2,r3,r4
   103c0:	e0bffe15 	stw	r2,-8(fp)
   103c4:	e0fffe17 	ldw	r3,-8(fp)
   103c8:	1804403a 	cmpge	r2,r3,zero
   103cc:	1000031e 	bne	r2,zero,103dc <alt_up_pixel_buffer_dma_draw_line+0x90>
   103d0:	e13ffe17 	ldw	r4,-8(fp)
   103d4:	0109c83a 	sub	r4,zero,r4
   103d8:	e13ffe15 	stw	r4,-8(fp)
   103dc:	e0fffe17 	ldw	r3,-8(fp)
   103e0:	e13fff17 	ldw	r4,-4(fp)
   103e4:	1904803a 	cmplt	r2,r3,r4
   103e8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   103ec:	e0bfe817 	ldw	r2,-96(fp)
   103f0:	10800e17 	ldw	r2,56(r2)
   103f4:	10800060 	cmpeqi	r2,r2,1
   103f8:	10000c1e 	bne	r2,zero,1042c <alt_up_pixel_buffer_dma_draw_line+0xe0>
   103fc:	e0bfe817 	ldw	r2,-96(fp)
   10400:	10800e17 	ldw	r2,56(r2)
   10404:	10800098 	cmpnei	r2,r2,2
   10408:	1000031e 	bne	r2,zero,10418 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   1040c:	00800044 	movi	r2,1
   10410:	e0bffc15 	stw	r2,-16(fp)
   10414:	00000206 	br	10420 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   10418:	00c00084 	movi	r3,2
   1041c:	e0fffc15 	stw	r3,-16(fp)
   10420:	e13ffc17 	ldw	r4,-16(fp)
   10424:	e13ffd15 	stw	r4,-12(fp)
   10428:	00000106 	br	10430 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   1042c:	e03ffd15 	stw	zero,-12(fp)
   10430:	e0bffd17 	ldw	r2,-12(fp)
   10434:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   10438:	e0c00317 	ldw	r3,12(fp)
   1043c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10440:	e0bfe817 	ldw	r2,-96(fp)
   10444:	10800d17 	ldw	r2,52(r2)
   10448:	1004c03a 	cmpne	r2,r2,zero
   1044c:	1000091e 	bne	r2,zero,10474 <alt_up_pixel_buffer_dma_draw_line+0x128>
   10450:	e0bfe817 	ldw	r2,-96(fp)
   10454:	10c01317 	ldw	r3,76(r2)
   10458:	e0bfef17 	ldw	r2,-68(fp)
   1045c:	1885c83a 	sub	r2,r3,r2
   10460:	1007883a 	mov	r3,r2
   10464:	00800044 	movi	r2,1
   10468:	10c4983a 	sll	r2,r2,r3
   1046c:	e0bffb15 	stw	r2,-20(fp)
   10470:	00000306 	br	10480 <alt_up_pixel_buffer_dma_draw_line+0x134>
   10474:	e0bfe817 	ldw	r2,-96(fp)
   10478:	10800f17 	ldw	r2,60(r2)
   1047c:	e0bffb15 	stw	r2,-20(fp)
   10480:	e13ffb17 	ldw	r4,-20(fp)
   10484:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   10488:	e0800417 	ldw	r2,16(fp)
   1048c:	10800058 	cmpnei	r2,r2,1
   10490:	1000041e 	bne	r2,zero,104a4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   10494:	e0bfe817 	ldw	r2,-96(fp)
   10498:	10800c17 	ldw	r2,48(r2)
   1049c:	e0bfed15 	stw	r2,-76(fp)
   104a0:	00000306 	br	104b0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   104a4:	e0bfe817 	ldw	r2,-96(fp)
   104a8:	10800b17 	ldw	r2,44(r2)
   104ac:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   104b0:	e0fff603 	ldbu	r3,-40(fp)
   104b4:	18803fcc 	andi	r2,r3,255
   104b8:	1080201c 	xori	r2,r2,128
   104bc:	10bfe004 	addi	r2,r2,-128
   104c0:	10800050 	cmplti	r2,r2,1
   104c4:	10000c1e 	bne	r2,zero,104f8 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   104c8:	e13ffa17 	ldw	r4,-24(fp)
   104cc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   104d0:	e0bff917 	ldw	r2,-28(fp)
   104d4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   104d8:	e0fff317 	ldw	r3,-52(fp)
   104dc:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   104e0:	e13ff817 	ldw	r4,-32(fp)
   104e4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   104e8:	e0bff717 	ldw	r2,-36(fp)
   104ec:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   104f0:	e0fff317 	ldw	r3,-52(fp)
   104f4:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   104f8:	e13ff817 	ldw	r4,-32(fp)
   104fc:	e0bffa17 	ldw	r2,-24(fp)
   10500:	20800c0e 	bge	r4,r2,10534 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   10504:	e0fffa17 	ldw	r3,-24(fp)
   10508:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   1050c:	e13ff817 	ldw	r4,-32(fp)
   10510:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   10514:	e0bff317 	ldw	r2,-52(fp)
   10518:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   1051c:	e0fff917 	ldw	r3,-28(fp)
   10520:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   10524:	e13ff717 	ldw	r4,-36(fp)
   10528:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   1052c:	e0bff317 	ldw	r2,-52(fp)
   10530:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   10534:	e0fff817 	ldw	r3,-32(fp)
   10538:	e13ffa17 	ldw	r4,-24(fp)
   1053c:	1907c83a 	sub	r3,r3,r4
   10540:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   10544:	e0fff717 	ldw	r3,-36(fp)
   10548:	e13ff917 	ldw	r4,-28(fp)
   1054c:	1905c83a 	sub	r2,r3,r4
   10550:	e0bff415 	stw	r2,-48(fp)
   10554:	e0fff417 	ldw	r3,-48(fp)
   10558:	1804403a 	cmpge	r2,r3,zero
   1055c:	1000031e 	bne	r2,zero,1056c <alt_up_pixel_buffer_dma_draw_line+0x220>
   10560:	e13ff417 	ldw	r4,-48(fp)
   10564:	0109c83a 	sub	r4,zero,r4
   10568:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   1056c:	e0fff517 	ldw	r3,-44(fp)
   10570:	1804d7fa 	srli	r2,r3,31
   10574:	e13ff517 	ldw	r4,-44(fp)
   10578:	1105883a 	add	r2,r2,r4
   1057c:	1005d07a 	srai	r2,r2,1
   10580:	0085c83a 	sub	r2,zero,r2
   10584:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   10588:	e0bff917 	ldw	r2,-28(fp)
   1058c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   10590:	e0fff917 	ldw	r3,-28(fp)
   10594:	e13ff717 	ldw	r4,-36(fp)
   10598:	1900030e 	bge	r3,r4,105a8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   1059c:	00800044 	movi	r2,1
   105a0:	e0bff215 	stw	r2,-56(fp)
   105a4:	00000206 	br	105b0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   105a8:	00ffffc4 	movi	r3,-1
   105ac:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   105b0:	e13ff603 	ldbu	r4,-40(fp)
   105b4:	20803fcc 	andi	r2,r4,255
   105b8:	1080201c 	xori	r2,r2,128
   105bc:	10bfe004 	addi	r2,r2,-128
   105c0:	10800058 	cmpnei	r2,r2,1
   105c4:	1000221e 	bne	r2,zero,10650 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   105c8:	e0bffa17 	ldw	r2,-24(fp)
   105cc:	e0bff115 	stw	r2,-60(fp)
   105d0:	00001b06 	br	10640 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   105d4:	e0ffee17 	ldw	r3,-72(fp)
   105d8:	d8c00015 	stw	r3,0(sp)
   105dc:	e13fef17 	ldw	r4,-68(fp)
   105e0:	d9000115 	stw	r4,4(sp)
   105e4:	e13fed17 	ldw	r4,-76(fp)
   105e8:	e17fec17 	ldw	r5,-80(fp)
   105ec:	e1bff017 	ldw	r6,-64(fp)
   105f0:	e1fff117 	ldw	r7,-60(fp)
   105f4:	001027c0 	call	1027c <helper_plot_pixel>
			error = error + deltay;
   105f8:	e0bff317 	ldw	r2,-52(fp)
   105fc:	e0fff417 	ldw	r3,-48(fp)
   10600:	10c5883a 	add	r2,r2,r3
   10604:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   10608:	e13ff317 	ldw	r4,-52(fp)
   1060c:	20800050 	cmplti	r2,r4,1
   10610:	1000081e 	bne	r2,zero,10634 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   10614:	e0bff017 	ldw	r2,-64(fp)
   10618:	e0fff217 	ldw	r3,-56(fp)
   1061c:	10c5883a 	add	r2,r2,r3
   10620:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   10624:	e13ff317 	ldw	r4,-52(fp)
   10628:	e0bff517 	ldw	r2,-44(fp)
   1062c:	2089c83a 	sub	r4,r4,r2
   10630:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   10634:	e0fff117 	ldw	r3,-60(fp)
   10638:	18c00044 	addi	r3,r3,1
   1063c:	e0fff115 	stw	r3,-60(fp)
   10640:	e13ff817 	ldw	r4,-32(fp)
   10644:	e0bff117 	ldw	r2,-60(fp)
   10648:	20bfe20e 	bge	r4,r2,105d4 <alt_up_pixel_buffer_dma_draw_line+0x288>
   1064c:	00002106 	br	106d4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10650:	e0fffa17 	ldw	r3,-24(fp)
   10654:	e0fff115 	stw	r3,-60(fp)
   10658:	00001b06 	br	106c8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   1065c:	e13fee17 	ldw	r4,-72(fp)
   10660:	d9000015 	stw	r4,0(sp)
   10664:	e0bfef17 	ldw	r2,-68(fp)
   10668:	d8800115 	stw	r2,4(sp)
   1066c:	e13fed17 	ldw	r4,-76(fp)
   10670:	e17fec17 	ldw	r5,-80(fp)
   10674:	e1bff117 	ldw	r6,-60(fp)
   10678:	e1fff017 	ldw	r7,-64(fp)
   1067c:	001027c0 	call	1027c <helper_plot_pixel>
			error = error + deltay;
   10680:	e0fff317 	ldw	r3,-52(fp)
   10684:	e13ff417 	ldw	r4,-48(fp)
   10688:	1907883a 	add	r3,r3,r4
   1068c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   10690:	e0fff317 	ldw	r3,-52(fp)
   10694:	18800050 	cmplti	r2,r3,1
   10698:	1000081e 	bne	r2,zero,106bc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   1069c:	e13ff017 	ldw	r4,-64(fp)
   106a0:	e0bff217 	ldw	r2,-56(fp)
   106a4:	2089883a 	add	r4,r4,r2
   106a8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   106ac:	e0fff317 	ldw	r3,-52(fp)
   106b0:	e13ff517 	ldw	r4,-44(fp)
   106b4:	1907c83a 	sub	r3,r3,r4
   106b8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   106bc:	e0bff117 	ldw	r2,-60(fp)
   106c0:	10800044 	addi	r2,r2,1
   106c4:	e0bff115 	stw	r2,-60(fp)
   106c8:	e0fff817 	ldw	r3,-32(fp)
   106cc:	e13ff117 	ldw	r4,-60(fp)
   106d0:	193fe20e 	bge	r3,r4,1065c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   106d4:	e037883a 	mov	sp,fp
   106d8:	dfc00117 	ldw	ra,4(sp)
   106dc:	df000017 	ldw	fp,0(sp)
   106e0:	dec00204 	addi	sp,sp,8
   106e4:	f800283a 	ret

000106e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   106e8:	defff404 	addi	sp,sp,-48
   106ec:	df000b15 	stw	fp,44(sp)
   106f0:	df000b04 	addi	fp,sp,44
   106f4:	e13ffb15 	stw	r4,-20(fp)
   106f8:	e17ffc15 	stw	r5,-16(fp)
   106fc:	e1bffd15 	stw	r6,-12(fp)
   10700:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10704:	e03ff915 	stw	zero,-28(fp)
   10708:	00800074 	movhi	r2,1
   1070c:	1096e904 	addi	r2,r2,23460
   10710:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10714:	1005003a 	cmpeq	r2,r2,zero
   10718:	1000411e 	bne	r2,zero,10820 <alt_alarm_start+0x138>
  {
    if (alarm)
   1071c:	e0bffb17 	ldw	r2,-20(fp)
   10720:	1005003a 	cmpeq	r2,r2,zero
   10724:	10003b1e 	bne	r2,zero,10814 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   10728:	e0fffb17 	ldw	r3,-20(fp)
   1072c:	e0bffd17 	ldw	r2,-12(fp)
   10730:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10734:	e0fffb17 	ldw	r3,-20(fp)
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10740:	0005303a 	rdctl	r2,status
   10744:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10748:	e0fff817 	ldw	r3,-32(fp)
   1074c:	00bfff84 	movi	r2,-2
   10750:	1884703a 	and	r2,r3,r2
   10754:	1001703a 	wrctl	status,r2
  
  return context;
   10758:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1075c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10760:	00800074 	movhi	r2,1
   10764:	1096ea04 	addi	r2,r2,23464
   10768:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1076c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10770:	e0fffc17 	ldw	r3,-16(fp)
   10774:	e0bff917 	ldw	r2,-28(fp)
   10778:	1885883a 	add	r2,r3,r2
   1077c:	10c00044 	addi	r3,r2,1
   10780:	e0bffb17 	ldw	r2,-20(fp)
   10784:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10788:	e0bffb17 	ldw	r2,-20(fp)
   1078c:	10c00217 	ldw	r3,8(r2)
   10790:	e0bff917 	ldw	r2,-28(fp)
   10794:	1880042e 	bgeu	r3,r2,107a8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   10798:	e0fffb17 	ldw	r3,-20(fp)
   1079c:	00800044 	movi	r2,1
   107a0:	18800405 	stb	r2,16(r3)
   107a4:	00000206 	br	107b0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   107a8:	e0bffb17 	ldw	r2,-20(fp)
   107ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   107b0:	e0fffb17 	ldw	r3,-20(fp)
   107b4:	00800074 	movhi	r2,1
   107b8:	108fec04 	addi	r2,r2,16304
   107bc:	e0bff615 	stw	r2,-40(fp)
   107c0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   107c4:	e0fff717 	ldw	r3,-36(fp)
   107c8:	e0bff617 	ldw	r2,-40(fp)
   107cc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   107d0:	e0bff617 	ldw	r2,-40(fp)
   107d4:	10c00017 	ldw	r3,0(r2)
   107d8:	e0bff717 	ldw	r2,-36(fp)
   107dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   107e0:	e0bff617 	ldw	r2,-40(fp)
   107e4:	10c00017 	ldw	r3,0(r2)
   107e8:	e0bff717 	ldw	r2,-36(fp)
   107ec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   107f0:	e0fff617 	ldw	r3,-40(fp)
   107f4:	e0bff717 	ldw	r2,-36(fp)
   107f8:	18800015 	stw	r2,0(r3)
   107fc:	e0bffa17 	ldw	r2,-24(fp)
   10800:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10804:	e0bff517 	ldw	r2,-44(fp)
   10808:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1080c:	e03fff15 	stw	zero,-4(fp)
   10810:	00000506 	br	10828 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10814:	00bffa84 	movi	r2,-22
   10818:	e0bfff15 	stw	r2,-4(fp)
   1081c:	00000206 	br	10828 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10820:	00bfde84 	movi	r2,-134
   10824:	e0bfff15 	stw	r2,-4(fp)
   10828:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1082c:	e037883a 	mov	sp,fp
   10830:	df000017 	ldw	fp,0(sp)
   10834:	dec00104 	addi	sp,sp,4
   10838:	f800283a 	ret

0001083c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1083c:	deffff04 	addi	sp,sp,-4
   10840:	df000015 	stw	fp,0(sp)
   10844:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10848:	e037883a 	mov	sp,fp
   1084c:	df000017 	ldw	fp,0(sp)
   10850:	dec00104 	addi	sp,sp,4
   10854:	f800283a 	ret

00010858 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10858:	defff904 	addi	sp,sp,-28
   1085c:	dfc00615 	stw	ra,24(sp)
   10860:	df000515 	stw	fp,20(sp)
   10864:	df000504 	addi	fp,sp,20
   10868:	e13ffd15 	stw	r4,-12(fp)
   1086c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10870:	e0bffd17 	ldw	r2,-12(fp)
   10874:	1005003a 	cmpeq	r2,r2,zero
   10878:	1000041e 	bne	r2,zero,1088c <alt_dev_llist_insert+0x34>
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	10800217 	ldw	r2,8(r2)
   10884:	1004c03a 	cmpne	r2,r2,zero
   10888:	1000071e 	bne	r2,zero,108a8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1088c:	001090c0 	call	1090c <alt_get_errno>
   10890:	1007883a 	mov	r3,r2
   10894:	00800584 	movi	r2,22
   10898:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1089c:	00bffa84 	movi	r2,-22
   108a0:	e0bfff15 	stw	r2,-4(fp)
   108a4:	00001306 	br	108f4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   108a8:	e0fffd17 	ldw	r3,-12(fp)
   108ac:	e0bffe17 	ldw	r2,-8(fp)
   108b0:	e0bffb15 	stw	r2,-20(fp)
   108b4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   108b8:	e0fffc17 	ldw	r3,-16(fp)
   108bc:	e0bffb17 	ldw	r2,-20(fp)
   108c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   108c4:	e0bffb17 	ldw	r2,-20(fp)
   108c8:	10c00017 	ldw	r3,0(r2)
   108cc:	e0bffc17 	ldw	r2,-16(fp)
   108d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   108d4:	e0bffb17 	ldw	r2,-20(fp)
   108d8:	10c00017 	ldw	r3,0(r2)
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   108e4:	e0fffb17 	ldw	r3,-20(fp)
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	18800015 	stw	r2,0(r3)

  return 0;  
   108f0:	e03fff15 	stw	zero,-4(fp)
   108f4:	e0bfff17 	ldw	r2,-4(fp)
}
   108f8:	e037883a 	mov	sp,fp
   108fc:	dfc00117 	ldw	ra,4(sp)
   10900:	df000017 	ldw	fp,0(sp)
   10904:	dec00204 	addi	sp,sp,8
   10908:	f800283a 	ret

0001090c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1090c:	defffd04 	addi	sp,sp,-12
   10910:	dfc00215 	stw	ra,8(sp)
   10914:	df000115 	stw	fp,4(sp)
   10918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1091c:	00800074 	movhi	r2,1
   10920:	108fe904 	addi	r2,r2,16292
   10924:	10800017 	ldw	r2,0(r2)
   10928:	1005003a 	cmpeq	r2,r2,zero
   1092c:	1000061e 	bne	r2,zero,10948 <alt_get_errno+0x3c>
   10930:	00800074 	movhi	r2,1
   10934:	108fe904 	addi	r2,r2,16292
   10938:	10800017 	ldw	r2,0(r2)
   1093c:	103ee83a 	callr	r2
   10940:	e0bfff15 	stw	r2,-4(fp)
   10944:	00000306 	br	10954 <alt_get_errno+0x48>
   10948:	00800074 	movhi	r2,1
   1094c:	1096e204 	addi	r2,r2,23432
   10950:	e0bfff15 	stw	r2,-4(fp)
   10954:	e0bfff17 	ldw	r2,-4(fp)
}
   10958:	e037883a 	mov	sp,fp
   1095c:	dfc00117 	ldw	ra,4(sp)
   10960:	df000017 	ldw	fp,0(sp)
   10964:	dec00204 	addi	sp,sp,8
   10968:	f800283a 	ret

0001096c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1096c:	defffd04 	addi	sp,sp,-12
   10970:	dfc00215 	stw	ra,8(sp)
   10974:	df000115 	stw	fp,4(sp)
   10978:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1097c:	00bfff04 	movi	r2,-4
   10980:	00c00074 	movhi	r3,1
   10984:	18c74d04 	addi	r3,r3,7476
   10988:	1885883a 	add	r2,r3,r2
   1098c:	e0bfff15 	stw	r2,-4(fp)
   10990:	00000606 	br	109ac <_do_ctors+0x40>
        (*ctor) (); 
   10994:	e0bfff17 	ldw	r2,-4(fp)
   10998:	10800017 	ldw	r2,0(r2)
   1099c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   109a0:	e0bfff17 	ldw	r2,-4(fp)
   109a4:	10bfff04 	addi	r2,r2,-4
   109a8:	e0bfff15 	stw	r2,-4(fp)
   109ac:	e0ffff17 	ldw	r3,-4(fp)
   109b0:	00800074 	movhi	r2,1
   109b4:	10874c04 	addi	r2,r2,7472
   109b8:	18bff62e 	bgeu	r3,r2,10994 <_do_ctors+0x28>
        (*ctor) (); 
}
   109bc:	e037883a 	mov	sp,fp
   109c0:	dfc00117 	ldw	ra,4(sp)
   109c4:	df000017 	ldw	fp,0(sp)
   109c8:	dec00204 	addi	sp,sp,8
   109cc:	f800283a 	ret

000109d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   109d0:	defffd04 	addi	sp,sp,-12
   109d4:	dfc00215 	stw	ra,8(sp)
   109d8:	df000115 	stw	fp,4(sp)
   109dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   109e0:	00bfff04 	movi	r2,-4
   109e4:	00c00074 	movhi	r3,1
   109e8:	18c74d04 	addi	r3,r3,7476
   109ec:	1885883a 	add	r2,r3,r2
   109f0:	e0bfff15 	stw	r2,-4(fp)
   109f4:	00000606 	br	10a10 <_do_dtors+0x40>
        (*dtor) (); 
   109f8:	e0bfff17 	ldw	r2,-4(fp)
   109fc:	10800017 	ldw	r2,0(r2)
   10a00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10a04:	e0bfff17 	ldw	r2,-4(fp)
   10a08:	10bfff04 	addi	r2,r2,-4
   10a0c:	e0bfff15 	stw	r2,-4(fp)
   10a10:	e0ffff17 	ldw	r3,-4(fp)
   10a14:	00800074 	movhi	r2,1
   10a18:	10874d04 	addi	r2,r2,7476
   10a1c:	18bff62e 	bgeu	r3,r2,109f8 <_do_dtors+0x28>
        (*dtor) (); 
}
   10a20:	e037883a 	mov	sp,fp
   10a24:	dfc00117 	ldw	ra,4(sp)
   10a28:	df000017 	ldw	fp,0(sp)
   10a2c:	dec00204 	addi	sp,sp,8
   10a30:	f800283a 	ret

00010a34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10a34:	defff904 	addi	sp,sp,-28
   10a38:	dfc00615 	stw	ra,24(sp)
   10a3c:	df000515 	stw	fp,20(sp)
   10a40:	df000504 	addi	fp,sp,20
   10a44:	e13ffd15 	stw	r4,-12(fp)
   10a48:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10a4c:	e0bffe17 	ldw	r2,-8(fp)
   10a50:	10800017 	ldw	r2,0(r2)
   10a54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10a58:	e13ffd17 	ldw	r4,-12(fp)
   10a5c:	00098340 	call	9834 <strlen>
   10a60:	10800044 	addi	r2,r2,1
   10a64:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10a68:	00000d06 	br	10aa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	11000217 	ldw	r4,8(r2)
   10a74:	e1bffb17 	ldw	r6,-20(fp)
   10a78:	e17ffd17 	ldw	r5,-12(fp)
   10a7c:	001163c0 	call	1163c <memcmp>
   10a80:	1004c03a 	cmpne	r2,r2,zero
   10a84:	1000031e 	bne	r2,zero,10a94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10a88:	e0bffc17 	ldw	r2,-16(fp)
   10a8c:	e0bfff15 	stw	r2,-4(fp)
   10a90:	00000706 	br	10ab0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10a94:	e0bffc17 	ldw	r2,-16(fp)
   10a98:	10800017 	ldw	r2,0(r2)
   10a9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10aa0:	e0fffe17 	ldw	r3,-8(fp)
   10aa4:	e0bffc17 	ldw	r2,-16(fp)
   10aa8:	10fff01e 	bne	r2,r3,10a6c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10aac:	e03fff15 	stw	zero,-4(fp)
   10ab0:	e0bfff17 	ldw	r2,-4(fp)
}
   10ab4:	e037883a 	mov	sp,fp
   10ab8:	dfc00117 	ldw	ra,4(sp)
   10abc:	df000017 	ldw	fp,0(sp)
   10ac0:	dec00204 	addi	sp,sp,8
   10ac4:	f800283a 	ret

00010ac8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10ac8:	defffe04 	addi	sp,sp,-8
   10acc:	dfc00115 	stw	ra,4(sp)
   10ad0:	df000015 	stw	fp,0(sp)
   10ad4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10ad8:	0009883a 	mov	r4,zero
   10adc:	01440004 	movi	r5,4096
   10ae0:	00115600 	call	11560 <alt_icache_flush>
#endif
}
   10ae4:	e037883a 	mov	sp,fp
   10ae8:	dfc00117 	ldw	ra,4(sp)
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00204 	addi	sp,sp,8
   10af4:	f800283a 	ret

00010af8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10af8:	defff904 	addi	sp,sp,-28
   10afc:	dfc00615 	stw	ra,24(sp)
   10b00:	df000515 	stw	fp,20(sp)
   10b04:	df000504 	addi	fp,sp,20
   10b08:	e13ffc15 	stw	r4,-16(fp)
   10b0c:	e17ffd15 	stw	r5,-12(fp)
   10b10:	e1bffe15 	stw	r6,-8(fp)
   10b14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10b18:	e0800217 	ldw	r2,8(fp)
   10b1c:	d8800015 	stw	r2,0(sp)
   10b20:	e13ffc17 	ldw	r4,-16(fp)
   10b24:	e17ffd17 	ldw	r5,-12(fp)
   10b28:	e1bffe17 	ldw	r6,-8(fp)
   10b2c:	e1ffff17 	ldw	r7,-4(fp)
   10b30:	0010ccc0 	call	10ccc <alt_iic_isr_register>
}  
   10b34:	e037883a 	mov	sp,fp
   10b38:	dfc00117 	ldw	ra,4(sp)
   10b3c:	df000017 	ldw	fp,0(sp)
   10b40:	dec00204 	addi	sp,sp,8
   10b44:	f800283a 	ret

00010b48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10b48:	defff904 	addi	sp,sp,-28
   10b4c:	df000615 	stw	fp,24(sp)
   10b50:	df000604 	addi	fp,sp,24
   10b54:	e13ffe15 	stw	r4,-8(fp)
   10b58:	e17fff15 	stw	r5,-4(fp)
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b64:	0005303a 	rdctl	r2,status
   10b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b6c:	e0fffb17 	ldw	r3,-20(fp)
   10b70:	00bfff84 	movi	r2,-2
   10b74:	1884703a 	and	r2,r3,r2
   10b78:	1001703a 	wrctl	status,r2
  
  return context;
   10b7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10b80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10b84:	e0fffc17 	ldw	r3,-16(fp)
   10b88:	00800044 	movi	r2,1
   10b8c:	10c4983a 	sll	r2,r2,r3
   10b90:	1007883a 	mov	r3,r2
   10b94:	00800074 	movhi	r2,1
   10b98:	1096e304 	addi	r2,r2,23436
   10b9c:	10800017 	ldw	r2,0(r2)
   10ba0:	1886b03a 	or	r3,r3,r2
   10ba4:	00800074 	movhi	r2,1
   10ba8:	1096e304 	addi	r2,r2,23436
   10bac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10bb0:	00800074 	movhi	r2,1
   10bb4:	1096e304 	addi	r2,r2,23436
   10bb8:	10800017 	ldw	r2,0(r2)
   10bbc:	100170fa 	wrctl	ienable,r2
   10bc0:	e0bffd17 	ldw	r2,-12(fp)
   10bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bc8:	e0bffa17 	ldw	r2,-24(fp)
   10bcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10bd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   10bd4:	e037883a 	mov	sp,fp
   10bd8:	df000017 	ldw	fp,0(sp)
   10bdc:	dec00104 	addi	sp,sp,4
   10be0:	f800283a 	ret

00010be4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10be4:	defff904 	addi	sp,sp,-28
   10be8:	df000615 	stw	fp,24(sp)
   10bec:	df000604 	addi	fp,sp,24
   10bf0:	e13ffe15 	stw	r4,-8(fp)
   10bf4:	e17fff15 	stw	r5,-4(fp)
   10bf8:	e0bfff17 	ldw	r2,-4(fp)
   10bfc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c00:	0005303a 	rdctl	r2,status
   10c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c08:	e0fffb17 	ldw	r3,-20(fp)
   10c0c:	00bfff84 	movi	r2,-2
   10c10:	1884703a 	and	r2,r3,r2
   10c14:	1001703a 	wrctl	status,r2
  
  return context;
   10c18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   10c20:	e0fffc17 	ldw	r3,-16(fp)
   10c24:	00800044 	movi	r2,1
   10c28:	10c4983a 	sll	r2,r2,r3
   10c2c:	0084303a 	nor	r2,zero,r2
   10c30:	1007883a 	mov	r3,r2
   10c34:	00800074 	movhi	r2,1
   10c38:	1096e304 	addi	r2,r2,23436
   10c3c:	10800017 	ldw	r2,0(r2)
   10c40:	1886703a 	and	r3,r3,r2
   10c44:	00800074 	movhi	r2,1
   10c48:	1096e304 	addi	r2,r2,23436
   10c4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c50:	00800074 	movhi	r2,1
   10c54:	1096e304 	addi	r2,r2,23436
   10c58:	10800017 	ldw	r2,0(r2)
   10c5c:	100170fa 	wrctl	ienable,r2
   10c60:	e0bffd17 	ldw	r2,-12(fp)
   10c64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c68:	e0bffa17 	ldw	r2,-24(fp)
   10c6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10c70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   10c74:	e037883a 	mov	sp,fp
   10c78:	df000017 	ldw	fp,0(sp)
   10c7c:	dec00104 	addi	sp,sp,4
   10c80:	f800283a 	ret

00010c84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10c84:	defffc04 	addi	sp,sp,-16
   10c88:	df000315 	stw	fp,12(sp)
   10c8c:	df000304 	addi	fp,sp,12
   10c90:	e13ffe15 	stw	r4,-8(fp)
   10c94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c98:	000530fa 	rdctl	r2,ienable
   10c9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10ca0:	e0ffff17 	ldw	r3,-4(fp)
   10ca4:	00800044 	movi	r2,1
   10ca8:	10c4983a 	sll	r2,r2,r3
   10cac:	1007883a 	mov	r3,r2
   10cb0:	e0bffd17 	ldw	r2,-12(fp)
   10cb4:	1884703a 	and	r2,r3,r2
   10cb8:	1004c03a 	cmpne	r2,r2,zero
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
   10cc8:	f800283a 	ret

00010ccc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ccc:	defff404 	addi	sp,sp,-48
   10cd0:	dfc00b15 	stw	ra,44(sp)
   10cd4:	df000a15 	stw	fp,40(sp)
   10cd8:	df000a04 	addi	fp,sp,40
   10cdc:	e13ffb15 	stw	r4,-20(fp)
   10ce0:	e17ffc15 	stw	r5,-16(fp)
   10ce4:	e1bffd15 	stw	r6,-12(fp)
   10ce8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   10cec:	00bffa84 	movi	r2,-22
   10cf0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10cfc:	e0bff917 	ldw	r2,-28(fp)
   10d00:	10800808 	cmpgei	r2,r2,32
   10d04:	1000291e 	bne	r2,zero,10dac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d08:	0005303a 	rdctl	r2,status
   10d0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d10:	e0fff717 	ldw	r3,-36(fp)
   10d14:	00bfff84 	movi	r2,-2
   10d18:	1884703a 	and	r2,r3,r2
   10d1c:	1001703a 	wrctl	status,r2
  
  return context;
   10d20:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10d24:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   10d28:	e0bff917 	ldw	r2,-28(fp)
   10d2c:	00c006b4 	movhi	r3,26
   10d30:	18f17d04 	addi	r3,r3,-14860
   10d34:	100490fa 	slli	r2,r2,3
   10d38:	10c7883a 	add	r3,r2,r3
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   10d44:	e0bff917 	ldw	r2,-28(fp)
   10d48:	00c006b4 	movhi	r3,26
   10d4c:	18f17d04 	addi	r3,r3,-14860
   10d50:	100490fa 	slli	r2,r2,3
   10d54:	10c5883a 	add	r2,r2,r3
   10d58:	10c00104 	addi	r3,r2,4
   10d5c:	e0bffe17 	ldw	r2,-8(fp)
   10d60:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10d64:	e0bffd17 	ldw	r2,-12(fp)
   10d68:	1005003a 	cmpeq	r2,r2,zero
   10d6c:	1000051e 	bne	r2,zero,10d84 <alt_iic_isr_register+0xb8>
   10d70:	e17ff917 	ldw	r5,-28(fp)
   10d74:	e13ffb17 	ldw	r4,-20(fp)
   10d78:	0010b480 	call	10b48 <alt_ic_irq_enable>
   10d7c:	e0bfff15 	stw	r2,-4(fp)
   10d80:	00000406 	br	10d94 <alt_iic_isr_register+0xc8>
   10d84:	e17ff917 	ldw	r5,-28(fp)
   10d88:	e13ffb17 	ldw	r4,-20(fp)
   10d8c:	0010be40 	call	10be4 <alt_ic_irq_disable>
   10d90:	e0bfff15 	stw	r2,-4(fp)
   10d94:	e0bfff17 	ldw	r2,-4(fp)
   10d98:	e0bffa15 	stw	r2,-24(fp)
   10d9c:	e0bff817 	ldw	r2,-32(fp)
   10da0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10da4:	e0bff617 	ldw	r2,-40(fp)
   10da8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10dac:	e0bffa17 	ldw	r2,-24(fp)
}
   10db0:	e037883a 	mov	sp,fp
   10db4:	dfc00117 	ldw	ra,4(sp)
   10db8:	df000017 	ldw	fp,0(sp)
   10dbc:	dec00204 	addi	sp,sp,8
   10dc0:	f800283a 	ret

00010dc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10dc4:	defff904 	addi	sp,sp,-28
   10dc8:	dfc00615 	stw	ra,24(sp)
   10dcc:	df000515 	stw	fp,20(sp)
   10dd0:	df000504 	addi	fp,sp,20
   10dd4:	e13ffc15 	stw	r4,-16(fp)
   10dd8:	e17ffd15 	stw	r5,-12(fp)
   10ddc:	e1bffe15 	stw	r6,-8(fp)
   10de0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10de4:	e13ffd17 	ldw	r4,-12(fp)
   10de8:	e17ffe17 	ldw	r5,-8(fp)
   10dec:	e1bfff17 	ldw	r6,-4(fp)
   10df0:	0010fdc0 	call	10fdc <open>
   10df4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10df8:	e0bffb17 	ldw	r2,-20(fp)
   10dfc:	1004803a 	cmplt	r2,r2,zero
   10e00:	10001c1e 	bne	r2,zero,10e74 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   10e04:	e0bffb17 	ldw	r2,-20(fp)
   10e08:	00c00074 	movhi	r3,1
   10e0c:	18cb6504 	addi	r3,r3,11668
   10e10:	10800324 	muli	r2,r2,12
   10e14:	10c5883a 	add	r2,r2,r3
   10e18:	10c00017 	ldw	r3,0(r2)
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e24:	e0bffb17 	ldw	r2,-20(fp)
   10e28:	00c00074 	movhi	r3,1
   10e2c:	18cb6504 	addi	r3,r3,11668
   10e30:	10800324 	muli	r2,r2,12
   10e34:	10c5883a 	add	r2,r2,r3
   10e38:	10800104 	addi	r2,r2,4
   10e3c:	10c00017 	ldw	r3,0(r2)
   10e40:	e0bffc17 	ldw	r2,-16(fp)
   10e44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10e48:	e0bffb17 	ldw	r2,-20(fp)
   10e4c:	00c00074 	movhi	r3,1
   10e50:	18cb6504 	addi	r3,r3,11668
   10e54:	10800324 	muli	r2,r2,12
   10e58:	10c5883a 	add	r2,r2,r3
   10e5c:	10800204 	addi	r2,r2,8
   10e60:	10c00017 	ldw	r3,0(r2)
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10e6c:	e13ffb17 	ldw	r4,-20(fp)
   10e70:	000ca740 	call	ca74 <alt_release_fd>
  }
} 
   10e74:	e037883a 	mov	sp,fp
   10e78:	dfc00117 	ldw	ra,4(sp)
   10e7c:	df000017 	ldw	fp,0(sp)
   10e80:	dec00204 	addi	sp,sp,8
   10e84:	f800283a 	ret

00010e88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10e88:	defffb04 	addi	sp,sp,-20
   10e8c:	dfc00415 	stw	ra,16(sp)
   10e90:	df000315 	stw	fp,12(sp)
   10e94:	df000304 	addi	fp,sp,12
   10e98:	e13ffd15 	stw	r4,-12(fp)
   10e9c:	e17ffe15 	stw	r5,-8(fp)
   10ea0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10ea4:	01000074 	movhi	r4,1
   10ea8:	210b6804 	addi	r4,r4,11680
   10eac:	e17ffd17 	ldw	r5,-12(fp)
   10eb0:	01800044 	movi	r6,1
   10eb4:	01c07fc4 	movi	r7,511
   10eb8:	0010dc40 	call	10dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10ebc:	01000074 	movhi	r4,1
   10ec0:	210b6504 	addi	r4,r4,11668
   10ec4:	e17ffe17 	ldw	r5,-8(fp)
   10ec8:	000d883a 	mov	r6,zero
   10ecc:	01c07fc4 	movi	r7,511
   10ed0:	0010dc40 	call	10dc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ed4:	01000074 	movhi	r4,1
   10ed8:	210b6b04 	addi	r4,r4,11692
   10edc:	e17fff17 	ldw	r5,-4(fp)
   10ee0:	01800044 	movi	r6,1
   10ee4:	01c07fc4 	movi	r7,511
   10ee8:	0010dc40 	call	10dc4 <alt_open_fd>
}  
   10eec:	e037883a 	mov	sp,fp
   10ef0:	dfc00117 	ldw	ra,4(sp)
   10ef4:	df000017 	ldw	fp,0(sp)
   10ef8:	dec00204 	addi	sp,sp,8
   10efc:	f800283a 	ret

00010f00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10f00:	defffc04 	addi	sp,sp,-16
   10f04:	df000315 	stw	fp,12(sp)
   10f08:	df000304 	addi	fp,sp,12
   10f0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10f10:	e0bffe17 	ldw	r2,-8(fp)
   10f14:	10800217 	ldw	r2,8(r2)
   10f18:	10d00034 	orhi	r3,r2,16384
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f24:	e03ffd15 	stw	zero,-12(fp)
   10f28:	00002006 	br	10fac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10f2c:	e0bffd17 	ldw	r2,-12(fp)
   10f30:	00c00074 	movhi	r3,1
   10f34:	18cb6504 	addi	r3,r3,11668
   10f38:	10800324 	muli	r2,r2,12
   10f3c:	10c5883a 	add	r2,r2,r3
   10f40:	10c00017 	ldw	r3,0(r2)
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	10800017 	ldw	r2,0(r2)
   10f4c:	1880141e 	bne	r3,r2,10fa0 <alt_file_locked+0xa0>
   10f50:	e0bffd17 	ldw	r2,-12(fp)
   10f54:	00c00074 	movhi	r3,1
   10f58:	18cb6504 	addi	r3,r3,11668
   10f5c:	10800324 	muli	r2,r2,12
   10f60:	10c5883a 	add	r2,r2,r3
   10f64:	10800204 	addi	r2,r2,8
   10f68:	10800017 	ldw	r2,0(r2)
   10f6c:	1004403a 	cmpge	r2,r2,zero
   10f70:	10000b1e 	bne	r2,zero,10fa0 <alt_file_locked+0xa0>
   10f74:	e0bffd17 	ldw	r2,-12(fp)
   10f78:	10800324 	muli	r2,r2,12
   10f7c:	1007883a 	mov	r3,r2
   10f80:	00800074 	movhi	r2,1
   10f84:	108b6504 	addi	r2,r2,11668
   10f88:	1887883a 	add	r3,r3,r2
   10f8c:	e0bffe17 	ldw	r2,-8(fp)
   10f90:	18800326 	beq	r3,r2,10fa0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10f94:	00bffcc4 	movi	r2,-13
   10f98:	e0bfff15 	stw	r2,-4(fp)
   10f9c:	00000a06 	br	10fc8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10fa0:	e0bffd17 	ldw	r2,-12(fp)
   10fa4:	10800044 	addi	r2,r2,1
   10fa8:	e0bffd15 	stw	r2,-12(fp)
   10fac:	00800074 	movhi	r2,1
   10fb0:	108fe804 	addi	r2,r2,16288
   10fb4:	10800017 	ldw	r2,0(r2)
   10fb8:	1007883a 	mov	r3,r2
   10fbc:	e0bffd17 	ldw	r2,-12(fp)
   10fc0:	18bfda2e 	bgeu	r3,r2,10f2c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10fc4:	e03fff15 	stw	zero,-4(fp)
   10fc8:	e0bfff17 	ldw	r2,-4(fp)
}
   10fcc:	e037883a 	mov	sp,fp
   10fd0:	df000017 	ldw	fp,0(sp)
   10fd4:	dec00104 	addi	sp,sp,4
   10fd8:	f800283a 	ret

00010fdc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10fdc:	defff404 	addi	sp,sp,-48
   10fe0:	dfc00b15 	stw	ra,44(sp)
   10fe4:	df000a15 	stw	fp,40(sp)
   10fe8:	df000a04 	addi	fp,sp,40
   10fec:	e13ffb15 	stw	r4,-20(fp)
   10ff0:	e17ffc15 	stw	r5,-16(fp)
   10ff4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10ff8:	00bfffc4 	movi	r2,-1
   10ffc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   11000:	00bffb44 	movi	r2,-19
   11004:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   11008:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1100c:	e13ffb17 	ldw	r4,-20(fp)
   11010:	01400074 	movhi	r5,1
   11014:	294fe604 	addi	r5,r5,16280
   11018:	0010a340 	call	10a34 <alt_find_dev>
   1101c:	e0bffa15 	stw	r2,-24(fp)
   11020:	e0bffa17 	ldw	r2,-24(fp)
   11024:	1004c03a 	cmpne	r2,r2,zero
   11028:	1000051e 	bne	r2,zero,11040 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1102c:	e13ffb17 	ldw	r4,-20(fp)
   11030:	00113880 	call	11388 <alt_find_file>
   11034:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11038:	00800044 	movi	r2,1
   1103c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11040:	e0bffa17 	ldw	r2,-24(fp)
   11044:	1005003a 	cmpeq	r2,r2,zero
   11048:	1000301e 	bne	r2,zero,1110c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1104c:	e13ffa17 	ldw	r4,-24(fp)
   11050:	00114a80 	call	114a8 <alt_get_fd>
   11054:	e0bff815 	stw	r2,-32(fp)
   11058:	e0bff817 	ldw	r2,-32(fp)
   1105c:	1004403a 	cmpge	r2,r2,zero
   11060:	1000031e 	bne	r2,zero,11070 <open+0x94>
    {
      status = index;
   11064:	e0bff817 	ldw	r2,-32(fp)
   11068:	e0bff715 	stw	r2,-36(fp)
   1106c:	00002906 	br	11114 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   11070:	e0bff817 	ldw	r2,-32(fp)
   11074:	10800324 	muli	r2,r2,12
   11078:	1007883a 	mov	r3,r2
   1107c:	00800074 	movhi	r2,1
   11080:	108b6504 	addi	r2,r2,11668
   11084:	1885883a 	add	r2,r3,r2
   11088:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1108c:	e0fffc17 	ldw	r3,-16(fp)
   11090:	00900034 	movhi	r2,16384
   11094:	10bfffc4 	addi	r2,r2,-1
   11098:	1886703a 	and	r3,r3,r2
   1109c:	e0bff917 	ldw	r2,-28(fp)
   110a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   110a4:	e0bff617 	ldw	r2,-40(fp)
   110a8:	1004c03a 	cmpne	r2,r2,zero
   110ac:	1000061e 	bne	r2,zero,110c8 <open+0xec>
   110b0:	e13ff917 	ldw	r4,-28(fp)
   110b4:	0010f000 	call	10f00 <alt_file_locked>
   110b8:	e0bff715 	stw	r2,-36(fp)
   110bc:	e0bff717 	ldw	r2,-36(fp)
   110c0:	1004803a 	cmplt	r2,r2,zero
   110c4:	1000131e 	bne	r2,zero,11114 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   110c8:	e0bffa17 	ldw	r2,-24(fp)
   110cc:	10800317 	ldw	r2,12(r2)
   110d0:	1005003a 	cmpeq	r2,r2,zero
   110d4:	1000091e 	bne	r2,zero,110fc <open+0x120>
   110d8:	e0bffa17 	ldw	r2,-24(fp)
   110dc:	10800317 	ldw	r2,12(r2)
   110e0:	e13ff917 	ldw	r4,-28(fp)
   110e4:	e17ffb17 	ldw	r5,-20(fp)
   110e8:	e1bffc17 	ldw	r6,-16(fp)
   110ec:	e1fffd17 	ldw	r7,-12(fp)
   110f0:	103ee83a 	callr	r2
   110f4:	e0bfff15 	stw	r2,-4(fp)
   110f8:	00000106 	br	11100 <open+0x124>
   110fc:	e03fff15 	stw	zero,-4(fp)
   11100:	e0bfff17 	ldw	r2,-4(fp)
   11104:	e0bff715 	stw	r2,-36(fp)
   11108:	00000206 	br	11114 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1110c:	00bffb44 	movi	r2,-19
   11110:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11114:	e0bff717 	ldw	r2,-36(fp)
   11118:	1004403a 	cmpge	r2,r2,zero
   1111c:	1000091e 	bne	r2,zero,11144 <open+0x168>
  {
    alt_release_fd (index);  
   11120:	e13ff817 	ldw	r4,-32(fp)
   11124:	000ca740 	call	ca74 <alt_release_fd>
    ALT_ERRNO = -status;
   11128:	00111640 	call	11164 <alt_get_errno>
   1112c:	e0fff717 	ldw	r3,-36(fp)
   11130:	00c7c83a 	sub	r3,zero,r3
   11134:	10c00015 	stw	r3,0(r2)
    return -1;
   11138:	00bfffc4 	movi	r2,-1
   1113c:	e0bffe15 	stw	r2,-8(fp)
   11140:	00000206 	br	1114c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   11144:	e0bff817 	ldw	r2,-32(fp)
   11148:	e0bffe15 	stw	r2,-8(fp)
   1114c:	e0bffe17 	ldw	r2,-8(fp)
}
   11150:	e037883a 	mov	sp,fp
   11154:	dfc00117 	ldw	ra,4(sp)
   11158:	df000017 	ldw	fp,0(sp)
   1115c:	dec00204 	addi	sp,sp,8
   11160:	f800283a 	ret

00011164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11164:	defffd04 	addi	sp,sp,-12
   11168:	dfc00215 	stw	ra,8(sp)
   1116c:	df000115 	stw	fp,4(sp)
   11170:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11174:	00800074 	movhi	r2,1
   11178:	108fe904 	addi	r2,r2,16292
   1117c:	10800017 	ldw	r2,0(r2)
   11180:	1005003a 	cmpeq	r2,r2,zero
   11184:	1000061e 	bne	r2,zero,111a0 <alt_get_errno+0x3c>
   11188:	00800074 	movhi	r2,1
   1118c:	108fe904 	addi	r2,r2,16292
   11190:	10800017 	ldw	r2,0(r2)
   11194:	103ee83a 	callr	r2
   11198:	e0bfff15 	stw	r2,-4(fp)
   1119c:	00000306 	br	111ac <alt_get_errno+0x48>
   111a0:	00800074 	movhi	r2,1
   111a4:	1096e204 	addi	r2,r2,23432
   111a8:	e0bfff15 	stw	r2,-4(fp)
   111ac:	e0bfff17 	ldw	r2,-4(fp)
}
   111b0:	e037883a 	mov	sp,fp
   111b4:	dfc00117 	ldw	ra,4(sp)
   111b8:	df000017 	ldw	fp,0(sp)
   111bc:	dec00204 	addi	sp,sp,8
   111c0:	f800283a 	ret

000111c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   111c4:	defffa04 	addi	sp,sp,-24
   111c8:	df000515 	stw	fp,20(sp)
   111cc:	df000504 	addi	fp,sp,20
   111d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111d4:	0005303a 	rdctl	r2,status
   111d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111dc:	e0fffd17 	ldw	r3,-12(fp)
   111e0:	00bfff84 	movi	r2,-2
   111e4:	1884703a 	and	r2,r3,r2
   111e8:	1001703a 	wrctl	status,r2
  
  return context;
   111ec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   111f0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   111f4:	e0bfff17 	ldw	r2,-4(fp)
   111f8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   111fc:	e0bffc17 	ldw	r2,-16(fp)
   11200:	10c00017 	ldw	r3,0(r2)
   11204:	e0bffc17 	ldw	r2,-16(fp)
   11208:	10800117 	ldw	r2,4(r2)
   1120c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   11210:	e0bffc17 	ldw	r2,-16(fp)
   11214:	10c00117 	ldw	r3,4(r2)
   11218:	e0bffc17 	ldw	r2,-16(fp)
   1121c:	10800017 	ldw	r2,0(r2)
   11220:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11224:	e0fffc17 	ldw	r3,-16(fp)
   11228:	e0bffc17 	ldw	r2,-16(fp)
   1122c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   11230:	e0fffc17 	ldw	r3,-16(fp)
   11234:	e0bffc17 	ldw	r2,-16(fp)
   11238:	18800015 	stw	r2,0(r3)
   1123c:	e0bffe17 	ldw	r2,-8(fp)
   11240:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11244:	e0bffb17 	ldw	r2,-20(fp)
   11248:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1124c:	e037883a 	mov	sp,fp
   11250:	df000017 	ldw	fp,0(sp)
   11254:	dec00104 	addi	sp,sp,4
   11258:	f800283a 	ret

0001125c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1125c:	defffb04 	addi	sp,sp,-20
   11260:	dfc00415 	stw	ra,16(sp)
   11264:	df000315 	stw	fp,12(sp)
   11268:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1126c:	d0a00f17 	ldw	r2,-32708(gp)
   11270:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11274:	d0a70d17 	ldw	r2,-25548(gp)
   11278:	10800044 	addi	r2,r2,1
   1127c:	d0a70d15 	stw	r2,-25548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11280:	00003106 	br	11348 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   11284:	e0bffe17 	ldw	r2,-8(fp)
   11288:	10800017 	ldw	r2,0(r2)
   1128c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11290:	e0bffe17 	ldw	r2,-8(fp)
   11294:	10800403 	ldbu	r2,16(r2)
   11298:	10803fcc 	andi	r2,r2,255
   1129c:	1005003a 	cmpeq	r2,r2,zero
   112a0:	1000051e 	bne	r2,zero,112b8 <alt_tick+0x5c>
   112a4:	d0a70d17 	ldw	r2,-25548(gp)
   112a8:	1004c03a 	cmpne	r2,r2,zero
   112ac:	1000021e 	bne	r2,zero,112b8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   112b0:	e0bffe17 	ldw	r2,-8(fp)
   112b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   112b8:	e0bffe17 	ldw	r2,-8(fp)
   112bc:	10c00217 	ldw	r3,8(r2)
   112c0:	d0a70d17 	ldw	r2,-25548(gp)
   112c4:	10c01e36 	bltu	r2,r3,11340 <alt_tick+0xe4>
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	10800403 	ldbu	r2,16(r2)
   112d0:	10803fcc 	andi	r2,r2,255
   112d4:	1004c03a 	cmpne	r2,r2,zero
   112d8:	1000191e 	bne	r2,zero,11340 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   112dc:	e0bffe17 	ldw	r2,-8(fp)
   112e0:	10c00317 	ldw	r3,12(r2)
   112e4:	e0bffe17 	ldw	r2,-8(fp)
   112e8:	11000517 	ldw	r4,20(r2)
   112ec:	183ee83a 	callr	r3
   112f0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   112f4:	e0bffd17 	ldw	r2,-12(fp)
   112f8:	1004c03a 	cmpne	r2,r2,zero
   112fc:	1000031e 	bne	r2,zero,1130c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   11300:	e13ffe17 	ldw	r4,-8(fp)
   11304:	00111c40 	call	111c4 <alt_alarm_stop>
   11308:	00000d06 	br	11340 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1130c:	e0bffe17 	ldw	r2,-8(fp)
   11310:	10c00217 	ldw	r3,8(r2)
   11314:	e0bffd17 	ldw	r2,-12(fp)
   11318:	1887883a 	add	r3,r3,r2
   1131c:	e0bffe17 	ldw	r2,-8(fp)
   11320:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11324:	e0bffe17 	ldw	r2,-8(fp)
   11328:	10c00217 	ldw	r3,8(r2)
   1132c:	d0a70d17 	ldw	r2,-25548(gp)
   11330:	1880032e 	bgeu	r3,r2,11340 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   11334:	e0fffe17 	ldw	r3,-8(fp)
   11338:	00800044 	movi	r2,1
   1133c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   11340:	e0bfff17 	ldw	r2,-4(fp)
   11344:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11348:	d0e00f04 	addi	r3,gp,-32708
   1134c:	e0bffe17 	ldw	r2,-8(fp)
   11350:	10ffcc1e 	bne	r2,r3,11284 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11354:	e037883a 	mov	sp,fp
   11358:	dfc00117 	ldw	ra,4(sp)
   1135c:	df000017 	ldw	fp,0(sp)
   11360:	dec00204 	addi	sp,sp,8
   11364:	f800283a 	ret

00011368 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11368:	deffff04 	addi	sp,sp,-4
   1136c:	df000015 	stw	fp,0(sp)
   11370:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11374:	000170fa 	wrctl	ienable,zero
}
   11378:	e037883a 	mov	sp,fp
   1137c:	df000017 	ldw	fp,0(sp)
   11380:	dec00104 	addi	sp,sp,4
   11384:	f800283a 	ret

00011388 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11388:	defffa04 	addi	sp,sp,-24
   1138c:	dfc00515 	stw	ra,20(sp)
   11390:	df000415 	stw	fp,16(sp)
   11394:	df000404 	addi	fp,sp,16
   11398:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1139c:	00800074 	movhi	r2,1
   113a0:	108fe404 	addi	r2,r2,16272
   113a4:	10800017 	ldw	r2,0(r2)
   113a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   113ac:	00003306 	br	1147c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   113b0:	e0bffd17 	ldw	r2,-12(fp)
   113b4:	11000217 	ldw	r4,8(r2)
   113b8:	00098340 	call	9834 <strlen>
   113bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   113c0:	e0bffd17 	ldw	r2,-12(fp)
   113c4:	10c00217 	ldw	r3,8(r2)
   113c8:	e0bffc17 	ldw	r2,-16(fp)
   113cc:	1885883a 	add	r2,r3,r2
   113d0:	10bfffc4 	addi	r2,r2,-1
   113d4:	10800003 	ldbu	r2,0(r2)
   113d8:	10803fcc 	andi	r2,r2,255
   113dc:	1080201c 	xori	r2,r2,128
   113e0:	10bfe004 	addi	r2,r2,-128
   113e4:	10800bd8 	cmpnei	r2,r2,47
   113e8:	1000031e 	bne	r2,zero,113f8 <alt_find_file+0x70>
    {
      len -= 1;
   113ec:	e0bffc17 	ldw	r2,-16(fp)
   113f0:	10bfffc4 	addi	r2,r2,-1
   113f4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   113f8:	e0bffc17 	ldw	r2,-16(fp)
   113fc:	1007883a 	mov	r3,r2
   11400:	e0bffe17 	ldw	r2,-8(fp)
   11404:	1885883a 	add	r2,r3,r2
   11408:	10800003 	ldbu	r2,0(r2)
   1140c:	10803fcc 	andi	r2,r2,255
   11410:	1080201c 	xori	r2,r2,128
   11414:	10bfe004 	addi	r2,r2,-128
   11418:	10800be0 	cmpeqi	r2,r2,47
   1141c:	10000a1e 	bne	r2,zero,11448 <alt_find_file+0xc0>
   11420:	e0bffc17 	ldw	r2,-16(fp)
   11424:	1007883a 	mov	r3,r2
   11428:	e0bffe17 	ldw	r2,-8(fp)
   1142c:	1885883a 	add	r2,r3,r2
   11430:	10800003 	ldbu	r2,0(r2)
   11434:	10803fcc 	andi	r2,r2,255
   11438:	1080201c 	xori	r2,r2,128
   1143c:	10bfe004 	addi	r2,r2,-128
   11440:	1004c03a 	cmpne	r2,r2,zero
   11444:	10000a1e 	bne	r2,zero,11470 <alt_find_file+0xe8>
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	11000217 	ldw	r4,8(r2)
   11450:	e1bffc17 	ldw	r6,-16(fp)
   11454:	e17ffe17 	ldw	r5,-8(fp)
   11458:	001163c0 	call	1163c <memcmp>
   1145c:	1004c03a 	cmpne	r2,r2,zero
   11460:	1000031e 	bne	r2,zero,11470 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	e0bfff15 	stw	r2,-4(fp)
   1146c:	00000806 	br	11490 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   11470:	e0bffd17 	ldw	r2,-12(fp)
   11474:	10800017 	ldw	r2,0(r2)
   11478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1147c:	00c00074 	movhi	r3,1
   11480:	18cfe404 	addi	r3,r3,16272
   11484:	e0bffd17 	ldw	r2,-12(fp)
   11488:	10ffc91e 	bne	r2,r3,113b0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1148c:	e03fff15 	stw	zero,-4(fp)
   11490:	e0bfff17 	ldw	r2,-4(fp)
}
   11494:	e037883a 	mov	sp,fp
   11498:	dfc00117 	ldw	ra,4(sp)
   1149c:	df000017 	ldw	fp,0(sp)
   114a0:	dec00204 	addi	sp,sp,8
   114a4:	f800283a 	ret

000114a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   114a8:	defffc04 	addi	sp,sp,-16
   114ac:	df000315 	stw	fp,12(sp)
   114b0:	df000304 	addi	fp,sp,12
   114b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   114b8:	00bffa04 	movi	r2,-24
   114bc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   114c0:	e03ffe15 	stw	zero,-8(fp)
   114c4:	00001e06 	br	11540 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   114c8:	e0bffe17 	ldw	r2,-8(fp)
   114cc:	00c00074 	movhi	r3,1
   114d0:	18cb6504 	addi	r3,r3,11668
   114d4:	10800324 	muli	r2,r2,12
   114d8:	10c5883a 	add	r2,r2,r3
   114dc:	10800017 	ldw	r2,0(r2)
   114e0:	1004c03a 	cmpne	r2,r2,zero
   114e4:	1000131e 	bne	r2,zero,11534 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   114e8:	e0bffe17 	ldw	r2,-8(fp)
   114ec:	00c00074 	movhi	r3,1
   114f0:	18cb6504 	addi	r3,r3,11668
   114f4:	10800324 	muli	r2,r2,12
   114f8:	10c7883a 	add	r3,r2,r3
   114fc:	e0bfff17 	ldw	r2,-4(fp)
   11500:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   11504:	00800074 	movhi	r2,1
   11508:	108fe804 	addi	r2,r2,16288
   1150c:	10c00017 	ldw	r3,0(r2)
   11510:	e0bffe17 	ldw	r2,-8(fp)
   11514:	1880040e 	bge	r3,r2,11528 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   11518:	00c00074 	movhi	r3,1
   1151c:	18cfe804 	addi	r3,r3,16288
   11520:	e0bffe17 	ldw	r2,-8(fp)
   11524:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11528:	e0bffe17 	ldw	r2,-8(fp)
   1152c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11530:	00000606 	br	1154c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11534:	e0bffe17 	ldw	r2,-8(fp)
   11538:	10800044 	addi	r2,r2,1
   1153c:	e0bffe15 	stw	r2,-8(fp)
   11540:	e0bffe17 	ldw	r2,-8(fp)
   11544:	10800810 	cmplti	r2,r2,32
   11548:	103fdf1e 	bne	r2,zero,114c8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1154c:	e0bffd17 	ldw	r2,-12(fp)
}
   11550:	e037883a 	mov	sp,fp
   11554:	df000017 	ldw	fp,0(sp)
   11558:	dec00104 	addi	sp,sp,4
   1155c:	f800283a 	ret

00011560 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11560:	defffb04 	addi	sp,sp,-20
   11564:	df000415 	stw	fp,16(sp)
   11568:	df000404 	addi	fp,sp,16
   1156c:	e13ffe15 	stw	r4,-8(fp)
   11570:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11574:	e0bfff17 	ldw	r2,-4(fp)
   11578:	10840070 	cmpltui	r2,r2,4097
   1157c:	1000021e 	bne	r2,zero,11588 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11580:	00840004 	movi	r2,4096
   11584:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11588:	e0fffe17 	ldw	r3,-8(fp)
   1158c:	e0bfff17 	ldw	r2,-4(fp)
   11590:	1885883a 	add	r2,r3,r2
   11594:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11598:	e0bffe17 	ldw	r2,-8(fp)
   1159c:	e0bffd15 	stw	r2,-12(fp)
   115a0:	00000506 	br	115b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   115a4:	e0bffd17 	ldw	r2,-12(fp)
   115a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   115ac:	e0bffd17 	ldw	r2,-12(fp)
   115b0:	10800804 	addi	r2,r2,32
   115b4:	e0bffd15 	stw	r2,-12(fp)
   115b8:	e0fffd17 	ldw	r3,-12(fp)
   115bc:	e0bffc17 	ldw	r2,-16(fp)
   115c0:	18bff836 	bltu	r3,r2,115a4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	108007cc 	andi	r2,r2,31
   115cc:	1005003a 	cmpeq	r2,r2,zero
   115d0:	1000021e 	bne	r2,zero,115dc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   115d4:	e0bffd17 	ldw	r2,-12(fp)
   115d8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   115dc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   115e0:	e037883a 	mov	sp,fp
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00104 	addi	sp,sp,4
   115ec:	f800283a 	ret

000115f0 <atexit>:
   115f0:	200b883a 	mov	r5,r4
   115f4:	000d883a 	mov	r6,zero
   115f8:	0009883a 	mov	r4,zero
   115fc:	000f883a 	mov	r7,zero
   11600:	00119e81 	jmpi	119e8 <__register_exitproc>

00011604 <exit>:
   11604:	defffe04 	addi	sp,sp,-8
   11608:	000b883a 	mov	r5,zero
   1160c:	dc000015 	stw	r16,0(sp)
   11610:	dfc00115 	stw	ra,4(sp)
   11614:	2021883a 	mov	r16,r4
   11618:	0011b200 	call	11b20 <__call_exitprocs>
   1161c:	00800074 	movhi	r2,1
   11620:	108fdf04 	addi	r2,r2,16252
   11624:	11000017 	ldw	r4,0(r2)
   11628:	20800f17 	ldw	r2,60(r4)
   1162c:	10000126 	beq	r2,zero,11634 <exit+0x30>
   11630:	103ee83a 	callr	r2
   11634:	8009883a 	mov	r4,r16
   11638:	0011d100 	call	11d10 <_exit>

0001163c <memcmp>:
   1163c:	00c000c4 	movi	r3,3
   11640:	1980032e 	bgeu	r3,r6,11650 <memcmp+0x14>
   11644:	2144b03a 	or	r2,r4,r5
   11648:	10c4703a 	and	r2,r2,r3
   1164c:	10000f26 	beq	r2,zero,1168c <memcmp+0x50>
   11650:	31ffffc4 	addi	r7,r6,-1
   11654:	3000061e 	bne	r6,zero,11670 <memcmp+0x34>
   11658:	00000a06 	br	11684 <memcmp+0x48>
   1165c:	39ffffc4 	addi	r7,r7,-1
   11660:	00bfffc4 	movi	r2,-1
   11664:	21000044 	addi	r4,r4,1
   11668:	29400044 	addi	r5,r5,1
   1166c:	38800526 	beq	r7,r2,11684 <memcmp+0x48>
   11670:	20c00003 	ldbu	r3,0(r4)
   11674:	28800003 	ldbu	r2,0(r5)
   11678:	18bff826 	beq	r3,r2,1165c <memcmp+0x20>
   1167c:	1885c83a 	sub	r2,r3,r2
   11680:	f800283a 	ret
   11684:	0005883a 	mov	r2,zero
   11688:	f800283a 	ret
   1168c:	180f883a 	mov	r7,r3
   11690:	20c00017 	ldw	r3,0(r4)
   11694:	28800017 	ldw	r2,0(r5)
   11698:	18bfed1e 	bne	r3,r2,11650 <memcmp+0x14>
   1169c:	31bfff04 	addi	r6,r6,-4
   116a0:	21000104 	addi	r4,r4,4
   116a4:	29400104 	addi	r5,r5,4
   116a8:	39bff936 	bltu	r7,r6,11690 <memcmp+0x54>
   116ac:	003fe806 	br	11650 <memcmp+0x14>

000116b0 <putc>:
   116b0:	defffc04 	addi	sp,sp,-16
   116b4:	dc800215 	stw	r18,8(sp)
   116b8:	04800074 	movhi	r18,1
   116bc:	948fde04 	addi	r18,r18,16248
   116c0:	90c00017 	ldw	r3,0(r18)
   116c4:	dc400115 	stw	r17,4(sp)
   116c8:	dc000015 	stw	r16,0(sp)
   116cc:	dfc00315 	stw	ra,12(sp)
   116d0:	2023883a 	mov	r17,r4
   116d4:	2821883a 	mov	r16,r5
   116d8:	18000226 	beq	r3,zero,116e4 <putc+0x34>
   116dc:	18800e17 	ldw	r2,56(r3)
   116e0:	10001126 	beq	r2,zero,11728 <putc+0x78>
   116e4:	80800217 	ldw	r2,8(r16)
   116e8:	10ffffc4 	addi	r3,r2,-1
   116ec:	80c00215 	stw	r3,8(r16)
   116f0:	18001316 	blt	r3,zero,11740 <putc+0x90>
   116f4:	80800017 	ldw	r2,0(r16)
   116f8:	14400005 	stb	r17,0(r2)
   116fc:	80c00017 	ldw	r3,0(r16)
   11700:	18800044 	addi	r2,r3,1
   11704:	18c00003 	ldbu	r3,0(r3)
   11708:	80800015 	stw	r2,0(r16)
   1170c:	1805883a 	mov	r2,r3
   11710:	dfc00317 	ldw	ra,12(sp)
   11714:	dc800217 	ldw	r18,8(sp)
   11718:	dc400117 	ldw	r17,4(sp)
   1171c:	dc000017 	ldw	r16,0(sp)
   11720:	dec00404 	addi	sp,sp,16
   11724:	f800283a 	ret
   11728:	1809883a 	mov	r4,r3
   1172c:	00067540 	call	6754 <__sinit>
   11730:	80800217 	ldw	r2,8(r16)
   11734:	10ffffc4 	addi	r3,r2,-1
   11738:	80c00215 	stw	r3,8(r16)
   1173c:	183fed0e 	bge	r3,zero,116f4 <putc+0x44>
   11740:	80800617 	ldw	r2,24(r16)
   11744:	18800f16 	blt	r3,r2,11784 <putc+0xd4>
   11748:	80800017 	ldw	r2,0(r16)
   1174c:	14400005 	stb	r17,0(r2)
   11750:	81000017 	ldw	r4,0(r16)
   11754:	00800284 	movi	r2,10
   11758:	20c00003 	ldbu	r3,0(r4)
   1175c:	18801226 	beq	r3,r2,117a8 <putc+0xf8>
   11760:	20800044 	addi	r2,r4,1
   11764:	80800015 	stw	r2,0(r16)
   11768:	1805883a 	mov	r2,r3
   1176c:	dfc00317 	ldw	ra,12(sp)
   11770:	dc800217 	ldw	r18,8(sp)
   11774:	dc400117 	ldw	r17,4(sp)
   11778:	dc000017 	ldw	r16,0(sp)
   1177c:	dec00404 	addi	sp,sp,16
   11780:	f800283a 	ret
   11784:	91000017 	ldw	r4,0(r18)
   11788:	880b883a 	mov	r5,r17
   1178c:	800d883a 	mov	r6,r16
   11790:	dfc00317 	ldw	ra,12(sp)
   11794:	dc800217 	ldw	r18,8(sp)
   11798:	dc400117 	ldw	r17,4(sp)
   1179c:	dc000017 	ldw	r16,0(sp)
   117a0:	dec00404 	addi	sp,sp,16
   117a4:	001189c1 	jmpi	1189c <__swbuf_r>
   117a8:	91000017 	ldw	r4,0(r18)
   117ac:	180b883a 	mov	r5,r3
   117b0:	003ff606 	br	1178c <putc+0xdc>

000117b4 <_putc_r>:
   117b4:	defffc04 	addi	sp,sp,-16
   117b8:	dc400215 	stw	r17,8(sp)
   117bc:	dc000115 	stw	r16,4(sp)
   117c0:	dfc00315 	stw	ra,12(sp)
   117c4:	2021883a 	mov	r16,r4
   117c8:	2823883a 	mov	r17,r5
   117cc:	20000226 	beq	r4,zero,117d8 <_putc_r+0x24>
   117d0:	20800e17 	ldw	r2,56(r4)
   117d4:	10001026 	beq	r2,zero,11818 <_putc_r+0x64>
   117d8:	30800217 	ldw	r2,8(r6)
   117dc:	10ffffc4 	addi	r3,r2,-1
   117e0:	30c00215 	stw	r3,8(r6)
   117e4:	18001316 	blt	r3,zero,11834 <_putc_r+0x80>
   117e8:	30800017 	ldw	r2,0(r6)
   117ec:	14400005 	stb	r17,0(r2)
   117f0:	30c00017 	ldw	r3,0(r6)
   117f4:	18800044 	addi	r2,r3,1
   117f8:	18c00003 	ldbu	r3,0(r3)
   117fc:	30800015 	stw	r2,0(r6)
   11800:	1805883a 	mov	r2,r3
   11804:	dfc00317 	ldw	ra,12(sp)
   11808:	dc400217 	ldw	r17,8(sp)
   1180c:	dc000117 	ldw	r16,4(sp)
   11810:	dec00404 	addi	sp,sp,16
   11814:	f800283a 	ret
   11818:	d9800015 	stw	r6,0(sp)
   1181c:	00067540 	call	6754 <__sinit>
   11820:	d9800017 	ldw	r6,0(sp)
   11824:	30800217 	ldw	r2,8(r6)
   11828:	10ffffc4 	addi	r3,r2,-1
   1182c:	30c00215 	stw	r3,8(r6)
   11830:	183fed0e 	bge	r3,zero,117e8 <_putc_r+0x34>
   11834:	30800617 	ldw	r2,24(r6)
   11838:	18800e16 	blt	r3,r2,11874 <_putc_r+0xc0>
   1183c:	30800017 	ldw	r2,0(r6)
   11840:	14400005 	stb	r17,0(r2)
   11844:	31000017 	ldw	r4,0(r6)
   11848:	00800284 	movi	r2,10
   1184c:	20c00003 	ldbu	r3,0(r4)
   11850:	18800f26 	beq	r3,r2,11890 <_putc_r+0xdc>
   11854:	20800044 	addi	r2,r4,1
   11858:	30800015 	stw	r2,0(r6)
   1185c:	1805883a 	mov	r2,r3
   11860:	dfc00317 	ldw	ra,12(sp)
   11864:	dc400217 	ldw	r17,8(sp)
   11868:	dc000117 	ldw	r16,4(sp)
   1186c:	dec00404 	addi	sp,sp,16
   11870:	f800283a 	ret
   11874:	8009883a 	mov	r4,r16
   11878:	880b883a 	mov	r5,r17
   1187c:	dfc00317 	ldw	ra,12(sp)
   11880:	dc400217 	ldw	r17,8(sp)
   11884:	dc000117 	ldw	r16,4(sp)
   11888:	dec00404 	addi	sp,sp,16
   1188c:	001189c1 	jmpi	1189c <__swbuf_r>
   11890:	8009883a 	mov	r4,r16
   11894:	180b883a 	mov	r5,r3
   11898:	003ff806 	br	1187c <_putc_r+0xc8>

0001189c <__swbuf_r>:
   1189c:	defffc04 	addi	sp,sp,-16
   118a0:	dc400215 	stw	r17,8(sp)
   118a4:	dc000115 	stw	r16,4(sp)
   118a8:	dfc00315 	stw	ra,12(sp)
   118ac:	2023883a 	mov	r17,r4
   118b0:	2821883a 	mov	r16,r5
   118b4:	20000226 	beq	r4,zero,118c0 <__swbuf_r+0x24>
   118b8:	20800e17 	ldw	r2,56(r4)
   118bc:	10002f26 	beq	r2,zero,1197c <__swbuf_r+0xe0>
   118c0:	3080030b 	ldhu	r2,12(r6)
   118c4:	30c00617 	ldw	r3,24(r6)
   118c8:	1080020c 	andi	r2,r2,8
   118cc:	30c00215 	stw	r3,8(r6)
   118d0:	10002226 	beq	r2,zero,1195c <__swbuf_r+0xc0>
   118d4:	30c00417 	ldw	r3,16(r6)
   118d8:	18002026 	beq	r3,zero,1195c <__swbuf_r+0xc0>
   118dc:	31000017 	ldw	r4,0(r6)
   118e0:	30800517 	ldw	r2,20(r6)
   118e4:	20c7c83a 	sub	r3,r4,r3
   118e8:	18802f0e 	bge	r3,r2,119a8 <__swbuf_r+0x10c>
   118ec:	19400044 	addi	r5,r3,1
   118f0:	30800217 	ldw	r2,8(r6)
   118f4:	84003fcc 	andi	r16,r16,255
   118f8:	20c00044 	addi	r3,r4,1
   118fc:	10bfffc4 	addi	r2,r2,-1
   11900:	30800215 	stw	r2,8(r6)
   11904:	24000005 	stb	r16,0(r4)
   11908:	30800517 	ldw	r2,20(r6)
   1190c:	30c00015 	stw	r3,0(r6)
   11910:	11400c26 	beq	r2,r5,11944 <__swbuf_r+0xa8>
   11914:	3080030b 	ldhu	r2,12(r6)
   11918:	1080004c 	andi	r2,r2,1
   1191c:	1005003a 	cmpeq	r2,r2,zero
   11920:	10000626 	beq	r2,zero,1193c <__swbuf_r+0xa0>
   11924:	8005883a 	mov	r2,r16
   11928:	dfc00317 	ldw	ra,12(sp)
   1192c:	dc400217 	ldw	r17,8(sp)
   11930:	dc000117 	ldw	r16,4(sp)
   11934:	dec00404 	addi	sp,sp,16
   11938:	f800283a 	ret
   1193c:	00800284 	movi	r2,10
   11940:	80bff81e 	bne	r16,r2,11924 <__swbuf_r+0x88>
   11944:	8809883a 	mov	r4,r17
   11948:	300b883a 	mov	r5,r6
   1194c:	00064bc0 	call	64bc <_fflush_r>
   11950:	103ff426 	beq	r2,zero,11924 <__swbuf_r+0x88>
   11954:	043fffc4 	movi	r16,-1
   11958:	003ff206 	br	11924 <__swbuf_r+0x88>
   1195c:	300b883a 	mov	r5,r6
   11960:	8809883a 	mov	r4,r17
   11964:	d9800015 	stw	r6,0(sp)
   11968:	0004bb40 	call	4bb4 <__swsetup_r>
   1196c:	d9800017 	ldw	r6,0(sp)
   11970:	1000061e 	bne	r2,zero,1198c <__swbuf_r+0xf0>
   11974:	30c00417 	ldw	r3,16(r6)
   11978:	003fd806 	br	118dc <__swbuf_r+0x40>
   1197c:	d9800015 	stw	r6,0(sp)
   11980:	00067540 	call	6754 <__sinit>
   11984:	d9800017 	ldw	r6,0(sp)
   11988:	003fcd06 	br	118c0 <__swbuf_r+0x24>
   1198c:	3080030b 	ldhu	r2,12(r6)
   11990:	00c00244 	movi	r3,9
   11994:	043fffc4 	movi	r16,-1
   11998:	10801014 	ori	r2,r2,64
   1199c:	3080030d 	sth	r2,12(r6)
   119a0:	88c00015 	stw	r3,0(r17)
   119a4:	003fdf06 	br	11924 <__swbuf_r+0x88>
   119a8:	300b883a 	mov	r5,r6
   119ac:	8809883a 	mov	r4,r17
   119b0:	d9800015 	stw	r6,0(sp)
   119b4:	00064bc0 	call	64bc <_fflush_r>
   119b8:	d9800017 	ldw	r6,0(sp)
   119bc:	103fe51e 	bne	r2,zero,11954 <__swbuf_r+0xb8>
   119c0:	31000017 	ldw	r4,0(r6)
   119c4:	01400044 	movi	r5,1
   119c8:	003fc906 	br	118f0 <__swbuf_r+0x54>

000119cc <__swbuf>:
   119cc:	01800074 	movhi	r6,1
   119d0:	318fde04 	addi	r6,r6,16248
   119d4:	2007883a 	mov	r3,r4
   119d8:	31000017 	ldw	r4,0(r6)
   119dc:	280d883a 	mov	r6,r5
   119e0:	180b883a 	mov	r5,r3
   119e4:	001189c1 	jmpi	1189c <__swbuf_r>

000119e8 <__register_exitproc>:
   119e8:	defffa04 	addi	sp,sp,-24
   119ec:	00800074 	movhi	r2,1
   119f0:	108fdf04 	addi	r2,r2,16252
   119f4:	dc000015 	stw	r16,0(sp)
   119f8:	14000017 	ldw	r16,0(r2)
   119fc:	dd000415 	stw	r20,16(sp)
   11a00:	2829883a 	mov	r20,r5
   11a04:	81405217 	ldw	r5,328(r16)
   11a08:	dcc00315 	stw	r19,12(sp)
   11a0c:	dc800215 	stw	r18,8(sp)
   11a10:	dc400115 	stw	r17,4(sp)
   11a14:	dfc00515 	stw	ra,20(sp)
   11a18:	2023883a 	mov	r17,r4
   11a1c:	3027883a 	mov	r19,r6
   11a20:	3825883a 	mov	r18,r7
   11a24:	28002526 	beq	r5,zero,11abc <__register_exitproc+0xd4>
   11a28:	29000117 	ldw	r4,4(r5)
   11a2c:	008007c4 	movi	r2,31
   11a30:	11002716 	blt	r2,r4,11ad0 <__register_exitproc+0xe8>
   11a34:	8800101e 	bne	r17,zero,11a78 <__register_exitproc+0x90>
   11a38:	2105883a 	add	r2,r4,r4
   11a3c:	1085883a 	add	r2,r2,r2
   11a40:	20c00044 	addi	r3,r4,1
   11a44:	1145883a 	add	r2,r2,r5
   11a48:	0009883a 	mov	r4,zero
   11a4c:	15000215 	stw	r20,8(r2)
   11a50:	28c00115 	stw	r3,4(r5)
   11a54:	2005883a 	mov	r2,r4
   11a58:	dfc00517 	ldw	ra,20(sp)
   11a5c:	dd000417 	ldw	r20,16(sp)
   11a60:	dcc00317 	ldw	r19,12(sp)
   11a64:	dc800217 	ldw	r18,8(sp)
   11a68:	dc400117 	ldw	r17,4(sp)
   11a6c:	dc000017 	ldw	r16,0(sp)
   11a70:	dec00604 	addi	sp,sp,24
   11a74:	f800283a 	ret
   11a78:	29802204 	addi	r6,r5,136
   11a7c:	00800044 	movi	r2,1
   11a80:	110e983a 	sll	r7,r2,r4
   11a84:	30c04017 	ldw	r3,256(r6)
   11a88:	2105883a 	add	r2,r4,r4
   11a8c:	1085883a 	add	r2,r2,r2
   11a90:	1185883a 	add	r2,r2,r6
   11a94:	19c6b03a 	or	r3,r3,r7
   11a98:	14802015 	stw	r18,128(r2)
   11a9c:	14c00015 	stw	r19,0(r2)
   11aa0:	00800084 	movi	r2,2
   11aa4:	30c04015 	stw	r3,256(r6)
   11aa8:	88bfe31e 	bne	r17,r2,11a38 <__register_exitproc+0x50>
   11aac:	30804117 	ldw	r2,260(r6)
   11ab0:	11c4b03a 	or	r2,r2,r7
   11ab4:	30804115 	stw	r2,260(r6)
   11ab8:	003fdf06 	br	11a38 <__register_exitproc+0x50>
   11abc:	008006b4 	movhi	r2,26
   11ac0:	10b1bd04 	addi	r2,r2,-14604
   11ac4:	100b883a 	mov	r5,r2
   11ac8:	80805215 	stw	r2,328(r16)
   11acc:	003fd606 	br	11a28 <__register_exitproc+0x40>
   11ad0:	00800034 	movhi	r2,0
   11ad4:	10800004 	addi	r2,r2,0
   11ad8:	1000021e 	bne	r2,zero,11ae4 <__register_exitproc+0xfc>
   11adc:	013fffc4 	movi	r4,-1
   11ae0:	003fdc06 	br	11a54 <__register_exitproc+0x6c>
   11ae4:	01006404 	movi	r4,400
   11ae8:	103ee83a 	callr	r2
   11aec:	1007883a 	mov	r3,r2
   11af0:	103ffa26 	beq	r2,zero,11adc <__register_exitproc+0xf4>
   11af4:	80805217 	ldw	r2,328(r16)
   11af8:	180b883a 	mov	r5,r3
   11afc:	18000115 	stw	zero,4(r3)
   11b00:	18800015 	stw	r2,0(r3)
   11b04:	80c05215 	stw	r3,328(r16)
   11b08:	18006215 	stw	zero,392(r3)
   11b0c:	18006315 	stw	zero,396(r3)
   11b10:	0009883a 	mov	r4,zero
   11b14:	883fc826 	beq	r17,zero,11a38 <__register_exitproc+0x50>
   11b18:	003fd706 	br	11a78 <__register_exitproc+0x90>

00011b1c <register_fini>:
   11b1c:	f800283a 	ret

00011b20 <__call_exitprocs>:
   11b20:	00800074 	movhi	r2,1
   11b24:	108fdf04 	addi	r2,r2,16252
   11b28:	10800017 	ldw	r2,0(r2)
   11b2c:	defff304 	addi	sp,sp,-52
   11b30:	df000b15 	stw	fp,44(sp)
   11b34:	d8800115 	stw	r2,4(sp)
   11b38:	00800034 	movhi	r2,0
   11b3c:	10800004 	addi	r2,r2,0
   11b40:	1005003a 	cmpeq	r2,r2,zero
   11b44:	d8800215 	stw	r2,8(sp)
   11b48:	d8800117 	ldw	r2,4(sp)
   11b4c:	dd400815 	stw	r21,32(sp)
   11b50:	dd000715 	stw	r20,28(sp)
   11b54:	10805204 	addi	r2,r2,328
   11b58:	dfc00c15 	stw	ra,48(sp)
   11b5c:	ddc00a15 	stw	r23,40(sp)
   11b60:	dd800915 	stw	r22,36(sp)
   11b64:	dcc00615 	stw	r19,24(sp)
   11b68:	dc800515 	stw	r18,20(sp)
   11b6c:	dc400415 	stw	r17,16(sp)
   11b70:	dc000315 	stw	r16,12(sp)
   11b74:	282b883a 	mov	r21,r5
   11b78:	2039883a 	mov	fp,r4
   11b7c:	d8800015 	stw	r2,0(sp)
   11b80:	2829003a 	cmpeq	r20,r5,zero
   11b84:	d8800117 	ldw	r2,4(sp)
   11b88:	14405217 	ldw	r17,328(r2)
   11b8c:	88001026 	beq	r17,zero,11bd0 <__call_exitprocs+0xb0>
   11b90:	ddc00017 	ldw	r23,0(sp)
   11b94:	88800117 	ldw	r2,4(r17)
   11b98:	8c802204 	addi	r18,r17,136
   11b9c:	143fffc4 	addi	r16,r2,-1
   11ba0:	80000916 	blt	r16,zero,11bc8 <__call_exitprocs+0xa8>
   11ba4:	05bfffc4 	movi	r22,-1
   11ba8:	a000151e 	bne	r20,zero,11c00 <__call_exitprocs+0xe0>
   11bac:	8409883a 	add	r4,r16,r16
   11bb0:	2105883a 	add	r2,r4,r4
   11bb4:	1485883a 	add	r2,r2,r18
   11bb8:	10c02017 	ldw	r3,128(r2)
   11bbc:	a8c01126 	beq	r21,r3,11c04 <__call_exitprocs+0xe4>
   11bc0:	843fffc4 	addi	r16,r16,-1
   11bc4:	85bff81e 	bne	r16,r22,11ba8 <__call_exitprocs+0x88>
   11bc8:	d8800217 	ldw	r2,8(sp)
   11bcc:	10003126 	beq	r2,zero,11c94 <__call_exitprocs+0x174>
   11bd0:	dfc00c17 	ldw	ra,48(sp)
   11bd4:	df000b17 	ldw	fp,44(sp)
   11bd8:	ddc00a17 	ldw	r23,40(sp)
   11bdc:	dd800917 	ldw	r22,36(sp)
   11be0:	dd400817 	ldw	r21,32(sp)
   11be4:	dd000717 	ldw	r20,28(sp)
   11be8:	dcc00617 	ldw	r19,24(sp)
   11bec:	dc800517 	ldw	r18,20(sp)
   11bf0:	dc400417 	ldw	r17,16(sp)
   11bf4:	dc000317 	ldw	r16,12(sp)
   11bf8:	dec00d04 	addi	sp,sp,52
   11bfc:	f800283a 	ret
   11c00:	8409883a 	add	r4,r16,r16
   11c04:	88c00117 	ldw	r3,4(r17)
   11c08:	2105883a 	add	r2,r4,r4
   11c0c:	1445883a 	add	r2,r2,r17
   11c10:	18ffffc4 	addi	r3,r3,-1
   11c14:	11800217 	ldw	r6,8(r2)
   11c18:	1c001526 	beq	r3,r16,11c70 <__call_exitprocs+0x150>
   11c1c:	10000215 	stw	zero,8(r2)
   11c20:	303fe726 	beq	r6,zero,11bc0 <__call_exitprocs+0xa0>
   11c24:	00c00044 	movi	r3,1
   11c28:	1c06983a 	sll	r3,r3,r16
   11c2c:	90804017 	ldw	r2,256(r18)
   11c30:	8cc00117 	ldw	r19,4(r17)
   11c34:	1884703a 	and	r2,r3,r2
   11c38:	10001426 	beq	r2,zero,11c8c <__call_exitprocs+0x16c>
   11c3c:	90804117 	ldw	r2,260(r18)
   11c40:	1884703a 	and	r2,r3,r2
   11c44:	10000c1e 	bne	r2,zero,11c78 <__call_exitprocs+0x158>
   11c48:	2105883a 	add	r2,r4,r4
   11c4c:	1485883a 	add	r2,r2,r18
   11c50:	11400017 	ldw	r5,0(r2)
   11c54:	e009883a 	mov	r4,fp
   11c58:	303ee83a 	callr	r6
   11c5c:	88800117 	ldw	r2,4(r17)
   11c60:	98bfc81e 	bne	r19,r2,11b84 <__call_exitprocs+0x64>
   11c64:	b8800017 	ldw	r2,0(r23)
   11c68:	147fd526 	beq	r2,r17,11bc0 <__call_exitprocs+0xa0>
   11c6c:	003fc506 	br	11b84 <__call_exitprocs+0x64>
   11c70:	8c000115 	stw	r16,4(r17)
   11c74:	003fea06 	br	11c20 <__call_exitprocs+0x100>
   11c78:	2105883a 	add	r2,r4,r4
   11c7c:	1485883a 	add	r2,r2,r18
   11c80:	11000017 	ldw	r4,0(r2)
   11c84:	303ee83a 	callr	r6
   11c88:	003ff406 	br	11c5c <__call_exitprocs+0x13c>
   11c8c:	303ee83a 	callr	r6
   11c90:	003ff206 	br	11c5c <__call_exitprocs+0x13c>
   11c94:	88800117 	ldw	r2,4(r17)
   11c98:	1000081e 	bne	r2,zero,11cbc <__call_exitprocs+0x19c>
   11c9c:	89000017 	ldw	r4,0(r17)
   11ca0:	20000726 	beq	r4,zero,11cc0 <__call_exitprocs+0x1a0>
   11ca4:	b9000015 	stw	r4,0(r23)
   11ca8:	8809883a 	mov	r4,r17
   11cac:	00000000 	call	0 <__alt_mem_SDRAM>
   11cb0:	bc400017 	ldw	r17,0(r23)
   11cb4:	883fb71e 	bne	r17,zero,11b94 <__call_exitprocs+0x74>
   11cb8:	003fc506 	br	11bd0 <__call_exitprocs+0xb0>
   11cbc:	89000017 	ldw	r4,0(r17)
   11cc0:	882f883a 	mov	r23,r17
   11cc4:	2023883a 	mov	r17,r4
   11cc8:	883fb21e 	bne	r17,zero,11b94 <__call_exitprocs+0x74>
   11ccc:	003fc006 	br	11bd0 <__call_exitprocs+0xb0>

00011cd0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   11cd0:	defffd04 	addi	sp,sp,-12
   11cd4:	df000215 	stw	fp,8(sp)
   11cd8:	df000204 	addi	fp,sp,8
   11cdc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   11ce0:	e0bfff17 	ldw	r2,-4(fp)
   11ce4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11ce8:	e0bffe17 	ldw	r2,-8(fp)
   11cec:	1005003a 	cmpeq	r2,r2,zero
   11cf0:	1000021e 	bne	r2,zero,11cfc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   11cf4:	002af070 	cmpltui	zero,zero,43969
   11cf8:	00000106 	br	11d00 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   11cfc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11d00:	e037883a 	mov	sp,fp
   11d04:	df000017 	ldw	fp,0(sp)
   11d08:	dec00104 	addi	sp,sp,4
   11d0c:	f800283a 	ret

00011d10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11d10:	defffd04 	addi	sp,sp,-12
   11d14:	dfc00215 	stw	ra,8(sp)
   11d18:	df000115 	stw	fp,4(sp)
   11d1c:	df000104 	addi	fp,sp,4
   11d20:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   11d24:	e13fff17 	ldw	r4,-4(fp)
   11d28:	0011cd00 	call	11cd0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11d2c:	003fff06 	br	11d2c <_exit+0x1c>
   11d30:	00011b1c 	xori	zero,zero,1132
