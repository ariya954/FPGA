
lab4_software.elf:     file format elf32-littlenios2
lab4_software.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00013a5c memsz 0x00013a5c flags r-x
    LOAD off    0x00014a7c vaddr 0x00013a7c paddr 0x000159a8 align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x000178d4 vaddr 0x000178d4 paddr 0x000178d4 align 2**12
         filesz 0x00000000 memsz 0x007a1580 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013028  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000089c  000131e0  000131e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  00013a7c  000159a8  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          007a185a  000178d4  000178d4  000178d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000169a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  000169d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000026e8  00000000  00000000  00017968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002fc65  00000000  00000000  0001a050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000098df  00000000  00000000  00049cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001959c  00000000  00000000  00053594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027a0  00000000  00000000  0006cb30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c35  00000000  00000000  0006f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d75e  00000000  00000000  00071f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007f664  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e8  00000000  00000000  0007f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00084f24  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00084f27  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084f2a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084f2b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00084f2c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00084f30  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00084f34  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00084f38  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00084f41  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00084f4a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00084f53  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  00084f5e  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  00084faf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00106270  00000000  00000000  00089e77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
000131e0 l    d  .rodata	00000000 .rodata
00013a7c l    d  .rwdata	00000000 .rwdata
000178d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
0001354e l     O .rodata	00000010 C.63.2430
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003454 l     F .text	00000058 __sprint_r
0001372a l     O .rodata	00000010 blanks.3452
0001371a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000054b8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006eb4 l     F .text	00000058 std
00006fc0 l     F .text	00000008 __fp_lock
00006fc8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013b7c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00015974 l     O .rwdata	00000004 charset
00013760 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000138a8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000b090 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c1bc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c69c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000c6fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c7fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cadc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cbbc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000cd18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d1dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001599c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d478 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014538 l     O .rwdata	00001060 JTAG_UART
00015598 l     O .rwdata	00000030 AV_Config
000155c8 l     O .rwdata	00000030 Audio
000155f8 l     O .rwdata	0000002c Char_LCD_16x2
00015624 l     O .rwdata	0000003c Ethernet
00015660 l     O .rwdata	0000002c IrDA_UART
0001568c l     O .rwdata	0000002c Expansion_JP1
000156b8 l     O .rwdata	0000002c Expansion_JP2
000156e4 l     O .rwdata	0000002c Green_LEDs
00015710 l     O .rwdata	0000002c HEX3_HEX0
0001573c l     O .rwdata	0000002c HEX7_HEX4
00015768 l     O .rwdata	0000002c Pushbuttons
00015794 l     O .rwdata	0000002c Red_LEDs
000157c0 l     O .rwdata	0000002c Slider_Switches
000157ec l     O .rwdata	00000038 PS2_Port
00015824 l     O .rwdata	0000002c Serial_Port
00015850 l     O .rwdata	00000034 USB
00015884 l     O .rwdata	00000048 VGA_Char_Buffer
000158cc l     O .rwdata	00000054 VGA_Pixel_Buffer
00015920 l     O .rwdata	0000002c SD_Card
0000d91c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000db54 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000dd80 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012114 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00012250 l     F .text	000000dc alt_file_locked
000124b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012fc8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001317c l     F .text	00000040 alt_sim_halt
00008b38 g     F .text	00000094 _mprec_log10
00008c24 g     F .text	00000088 __any_on
0000a3a4 g     F .text	00000070 _isatty_r
00013880 g     O .rodata	00000028 __mprec_tinytens
0000cd78 g     F .text	0000006c alt_main
00015960 g     O .rwdata	00000004 N
00011404 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00000830 g     F .text	00000060 interval_timer_ISR
0000fc48 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
007b8bc4 g     O .bss	00000100 alt_irq
0000a414 g     F .text	00000078 _lseek_r
000159a8 g       *ABS*	00000000 __flash_rwdata_start
0000edec g     F .text	00000034 alt_up_character_lcd_send_cmd
00015954 g     O .rwdata	00000004 width_of_screen
0000bbb0 g     F .text	00000088 __eqdf2
000178e0 g     O .bss	00000001 byte2
0000e7dc g     F .text	00000070 alt_up_audio_read_fifo_avail
007b8e54 g       *ABS*	00000000 __alt_heap_start
000033dc g     F .text	00000044 printf
00001ef4 g     F .text	00000218 print_screen
0000e84c g     F .text	00000070 alt_up_audio_record_r
000178e1 g     O .bss	00000001 byte3
00009dfc g     F .text	00000068 __sseek
00006f1c g     F .text	000000a4 __sinit
00012d48 g     F .text	00000130 __swbuf_r
00010628 g     F .text	00000114 alt_up_char_buffer_string
0000fa60 g     F .text	00000034 read_CE_bit
000178e2 g     O .bss	00000001 copy_byte3
00007bf4 g     F .text	00000084 _setlocale_r
0000701c g     F .text	00000068 __sfmoreglue
0000ce04 g     F .text	00000020 __malloc_unlock
0000fdf4 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00010330 g     F .text	00000090 alt_up_rs232_read_fd
00015958 g     O .rwdata	00000004 x_of_current_drawing_plot
00010558 g     F .text	000000d0 alt_up_char_buffer_draw
000179a4 g     O .bss	001e8480 record_l_buf
0000e754 g     F .text	00000088 alt_up_audio_reset_audio_core
00002948 g     F .text	00000070 amplitude_operation
00017970 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000864c g     F .text	000000e0 memmove
000178e3 g     O .bss	00000001 byte1
0000700c g     F .text	00000010 _cleanup
00001ce4 g     F .text	00000034 setMouseBounds
00008cac g     F .text	000000bc _Balloc
00002b08 g     F .text	00000094 __fixsfsi
00017900 g     O .bss	00000004 prev_y_mouse
000107d8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000bcc0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000210c g     F .text	00000158 denoise_the_noisy_sound
0000ed70 g     F .text	0000007c get_DDRAM_addr
00010798 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a330 g     F .text	00000074 _fstat_r
00017958 g     O .bss	00000004 errno
00002cb0 g     F .text	00000038 __make_dp
0000e718 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00017964 g     O .bss	00000004 alt_argv
0001d94c g       *ABS*	00000000 _gp
000126b8 g     F .text	00000030 usleep
00010978 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
000143b8 g     O .rwdata	00000180 alt_fd_list
00012050 g     F .text	00000094 alt_find_dev
000032a4 g     F .text	000000a0 memcpy
0000ef84 g     F .text	0000004c alt_up_character_lcd_write_fd
0001073c g     F .text	0000005c alt_up_char_buffer_clear
00007000 g     F .text	0000000c _cleanup_r
0000be58 g     F .text	000000f8 __floatsidf
000121d8 g     F .text	00000078 alt_io_redirect
0000bdd0 g     F .text	00000088 __ltdf2
000131e0 g       *ABS*	00000000 __DTOR_END__
00001680 g     F .text	0000008c check_for_click
000027d4 g     F .text	00000048 amplitude_circute_set_size
000178e4 g     O .bss	00000001 copy_byte1
0000f8ec g     F .text	00000090 alt_up_irda_write_fd
000027b8 g     F .text	0000001c amplitude_circute_stop
000102bc g     F .text	00000074 alt_up_rs232_read_data
00008a88 g     F .text	000000b0 __ratio
0000ecb0 g     F .text	00000060 alt_up_audio_read_fifo_head
00010a28 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000f6d4 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000df98 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003420 g     F .text	00000034 _printf_r
0000c2f8 g     F .text	00000008 __udivsi3
0000ca1c g     F .text	000000c0 isatty
0000f42c g     F .text	00000044 alt_up_ethernet_reg_write
00013790 g     O .rodata	000000c8 __mprec_tens
00017904 g     O .bss	00000004 y_mouse
000110b4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00007bd0 g     F .text	00000008 __locale_charset
0000f67c g     F .text	00000058 alt_up_irda_disable_read_interrupt
00012a0c g     F .text	00000090 alt_icache_flush
0001794c g     O .bss	00000004 __malloc_top_pad
000178d8 g     O .bss	00000004 flag
0000281c g     F .text	00000044 amplitude_circute_set_num
000024d4 g     F .text	000002e4 plot_audio
00015970 g     O .rwdata	00000004 __mb_cur_max
00007bd8 g     F .text	0000000c _localeconv_r
000093a4 g     F .text	0000003c __i2b
000075b4 g     F .text	0000049c __sfvwrite_r
00009d84 g     F .text	00000070 _sbrk_r
007b8ba4 g     O .bss	00000020 up_dev
00011898 g     F .text	000000d0 helper_plot_pixel
00015950 g     O .rwdata	00000004 y_of_each_plot
00017908 g     O .bss	00000004 flag_denoise
0000a48c g     F .text	00000078 _read_r
001ffe24 g     O .bss	001e8480 play_l_buf
000178dc g     O .bss	00000004 k
00013f7c g     O .rwdata	0000000c __lc_ctype
00015990 g     O .rwdata	00000004 alt_max_fd
00010224 g     F .text	00000050 alt_up_rs232_check_parity
0000ed10 g     F .text	00000060 alt_up_audio_write_fifo_head
0000f2a0 g     F .text	00000110 alt_up_ethernet_init
0000c3a0 g     F .text	00000138 __unpack_d
0000a20c g     F .text	00000110 _fclose_r
0000fa94 g     F .text	00000034 read_num_bytes_available
00006e80 g     F .text	00000034 fflush
00017950 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c85c g     F .text	000001c0 alt_irq_register
0000f9fc g     F .text	00000034 read_RI_bit
00002b9c g     F .text	00000054 __extendsfdf2
0000b520 g     F .text	00000074 __adddf3
000014d0 g     F .text	000000b8 PS2_Init
0001790c g     O .bss	00000004 prev_y_mouse_front
00008968 g     F .text	00000120 __b2d
00010a5c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000aae0 g     F .text	000005b0 __umoddi3
0000cc28 g     F .text	000000f0 lseek
0001596c g     O .rwdata	00000004 _global_impure_ptr
00009720 g     F .text	000005f4 _realloc_r
003e82a4 g     O .bss	001e8480 record_r_buf
007b8e54 g       *ABS*	00000000 __bss_end
00010bc0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
000125ac g     F .text	0000010c alt_tick
0000a504 g     F .text	000005dc __udivdi3
00013858 g     O .rodata	00000028 __mprec_bigtens
00009600 g     F .text	00000120 __s2b
0000c028 g     F .text	00000194 __floatunsidf
00013a7c g     O .rwdata	00000100 denoise_filter_coefficients
00008888 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000e564 g     F .text	00000040 alt_up_audio_open_dev
0000fafc g     F .text	0000002c read_data_byte
000178f8 g     O .bss	00000004 echo
00006fe8 g     F .text	00000018 __fp_lock_all
0000170c g     F .text	000001f0 check_KEYs
00017910 g     O .bss	00000004 prev_y_mouse_back
0000e9a0 g     F .text	00000070 alt_up_audio_play_r
00012514 g     F .text	00000098 alt_alarm_stop
0000fa30 g     F .text	00000030 read_RE_bit
0001795c g     O .bss	00000004 alt_irq_active
0000f710 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00014390 g     O .rwdata	00000028 alt_dev_null
00002ec8 g     F .text	000000c8 __unpack_f
0000f26c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00002264 g     F .text	00000270 echo_maker
0000f9bc g     F .text	00000040 alt_up_parallel_port_open_dev
00017914 g     O .bss	00000004 max_y_mouse
0000fca0 g     F .text	00000078 alt_up_ps2_write_data_byte
00002890 g     F .text	00000030 amplitude_circute_set_lbuff_addr
00011e58 g     F .text	0000001c alt_dcache_flush_all
00008754 g     F .text	00000070 __hi0bits
000117d4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000bf50 g     F .text	000000d8 __fixdfsi
000159a8 g       *ABS*	00000000 __ram_rwdata_end
00015988 g     O .rwdata	00000008 alt_dev_list
0000d358 g     F .text	00000120 write
00012c60 g     F .text	000000e8 _putc_r
00017918 g     O .bss	00000004 prev_x_mouse
0000e53c g     F .text	00000028 alt_timestamp_freq
00011968 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00013a7c g       *ABS*	00000000 __ram_rodata_end
0000c728 g     F .text	000000d4 fstat
000103c0 g     F .text	00000094 alt_up_rs232_write_fd
00002920 g     F .text	00000028 amplitude_circute_get_status
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00001588 g     F .text	000000f8 show_mouse_buttons_states_on_Red_LEDs
000094e0 g     F .text	00000120 __pow5mult
00017940 g     O .bss	00000004 __nlocale_changed
0000c300 g     F .text	00000008 __umodsi3
0001791c g     O .bss	00000004 max_x_mouse
000178e5 g     O .bss	00000001 copy_byte2
007b8e54 g       *ABS*	00000000 end
00010014 g     F .text	000000a8 alt_up_ps2_write_fd
00002d68 g     F .text	00000160 __pack_f
0000f750 g     F .text	00000050 alt_up_irda_check_parity
00010494 g     F .text	00000084 alt_up_char_buffer_init
0000da9c g     F .text	000000b8 altera_avalon_jtag_uart_init
00001d18 g     F .text	000001dc getMouseState
00017920 g     O .bss	00000004 flag_play
000131dc g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000013ac g     F .text	00000124 HEX_PS2
00002ce8 g     F .text	00000080 __clzsi2
0000e1bc g     F .text	00000240 altera_avalon_jtag_uart_write
00017924 g     O .bss	00000004 right_button_click
00006f0c g     F .text	00000004 __sfp_lock_acquire
00008568 g     F .text	000000e4 memchr
0000ee94 g     F .text	00000078 alt_up_character_lcd_write
000034ac g     F .text	00001eac ___vfprintf_internal_r
00002860 g     F .text	00000030 amplitude_circute_set_rbuff_addr
000072a0 g     F .text	00000314 _free_r
0000ce24 g     F .text	00000258 alt_printf
00012fcc g     F .text	000001b0 __call_exitprocs
00017944 g     O .bss	00000004 __mlocale_changed
0001597c g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00017974 g     O .bss	00000004 _alt_tick_rate
000178fc g     O .bss	00000004 mouse_width
0000eb84 g     F .text	0000012c alt_up_audio_write_fifo
00009070 g     F .text	0000014c __lshift
00017978 g     O .bss	00000004 _alt_nticks
0000d0bc g     F .text	00000120 read
0000d50c g     F .text	00000410 alt_sys_init
0000f0f8 g     F .text	000000b0 alt_up_character_lcd_shift_display
00002a70 g     F .text	00000098 __floatsisf
0000ea80 g     F .text	00000104 alt_up_audio_read_fifo
00012e94 g     F .text	00000134 __register_exitproc
0000e68c g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000ff20 g     F .text	00000058 alt_up_ps2_clear_fifo
000101e4 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
000091bc g     F .text	000001e8 __multiply
0000f1a8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000de30 g     F .text	00000074 altera_avalon_jtag_uart_close
00013a7c g       *ABS*	00000000 __ram_rwdata_start
000131e0 g       *ABS*	00000000 __ram_rodata_start
0001797c g     O .bss	00000028 __malloc_current_mallinfo
00008d68 g     F .text	0000017c __d2b
00015964 g     O .rwdata	00000004 number_of_coefficients
0000d954 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012954 g     F .text	000000b8 alt_get_fd
00012708 g     F .text	0000012c alt_busy_sleep
0000c4d8 g     F .text	000000c8 __fpcmp_parts_d
0000a19c g     F .text	00000070 _close_r
0001595c g     O .rwdata	00000004 Base_Addr
0000e640 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00012ae8 g     F .text	00000074 memcmp
0000da04 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
007b8e54 g       *ABS*	00000000 __alt_stack_base
0000da4c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000f628 g     F .text	00000054 alt_up_irda_enable_read_interrupt
0000537c g     F .text	0000013c __swsetup_r
0000b958 g     F .text	00000258 __divdf3
0000e5f0 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00007084 g     F .text	000000f0 __sfp
00008bcc g     F .text	00000058 __copybits
00013f88 g     O .rwdata	00000408 __malloc_av_
00006f18 g     F .text	00000004 __sinit_lock_release
0000b594 g     F .text	000003c4 __muldf3
00009ee0 g     F .text	00000060 __sread
00010150 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00012834 g     F .text	00000120 alt_find_file
00011e74 g     F .text	000000b4 alt_dev_llist_insert
0000cde4 g     F .text	00000020 __malloc_lock
0000d29c g     F .text	000000bc sbrk
00006c84 g     F .text	000001fc _fflush_r
0000a0e8 g     F .text	000000b4 _calloc_r
000178d4 g       *ABS*	00000000 __bss_start
00003344 g     F .text	00000098 memset
00000890 g     F .text	00000b1c main
0000e92c g     F .text	00000074 alt_up_audio_write_fifo_space
00017968 g     O .bss	00000004 alt_envp
00017954 g     O .bss	00000004 __malloc_max_total_mem
000109d0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00010518 g     F .text	00000040 alt_up_char_buffer_open_dev
0000d9ac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012e78 g     F .text	0000001c __swbuf
00017928 g     O .bss	00000004 left_button_click
000178f4 g     O .bss	00000004 flag_plot
0000f048 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00009df4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000a31c g     F .text	00000014 fclose
0000fea4 g     F .text	0000007c alt_up_ps2_read_data_byte
0001792c g     O .bss	00000004 prev_x_mouse_back
000178e8 g     O .bss	00000004 timeout
0000e3fc g     F .text	000000a4 alt_timestamp_start
007b8cc4 g     O .bss	00000190 _atexit0
000056d0 g     F .text	000015b4 _dtoa_r
00007e28 g     F .text	00000740 _malloc_r
00015994 g     O .rwdata	00000004 alt_errno
00007b18 g     F .text	000000b8 _fwalk
0000f7a0 g     F .text	00000048 alt_up_irda_write_data
000100bc g     F .text	00000040 alt_up_ps2_open_dev
00012b5c g     F .text	00000104 putc
0000c238 g     F .text	00000060 __divsi3
000138b4 g     O .rodata	00000014 __thenan_df
0000ee54 g     F .text	00000040 alt_up_character_lcd_open_dev
00007174 g     F .text	0000012c _malloc_trim_r
0000fbf4 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
000131e0 g       *ABS*	00000000 __CTOR_END__
0000ee20 g     F .text	00000034 alt_up_character_lcd_init
00009f40 g     F .text	000000bc strcmp
000131e0 g       *ABS*	00000000 __flash_rodata_start
000131e0 g       *ABS*	00000000 __DTOR_LIST__
0001594c g     O .rwdata	00000004 color
00010454 g     F .text	00000040 alt_up_rs232_open_dev
000178d4 g     O .bss	00000004 count
0000bc38 g     F .text	00000088 __nedf2
0000d4d8 g     F .text	00000034 alt_irq_init
0000d23c g     F .text	00000060 alt_release_fd
0000fac8 g     F .text	00000034 read_data_valid
0000f238 g     F .text	00000034 alt_up_character_lcd_cursor_off
000135bc g     O .rodata	00000100 __clz_tab
00017948 g     O .bss	00000004 _PathLocale
00012a9c g     F .text	00000014 atexit
0000fd88 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0000a070 g     F .text	00000078 _write_r
00007c78 g     F .text	0000001c setlocale
000029b8 g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	00000150 PS2_ISR
00015968 g     O .rwdata	00000004 _impure_ptr
000178ec g     O .bss	00000004 buf_index_play
000019a0 g     F .text	00000344 erase_previous_mouse_position
00017960 g     O .bss	00000004 alt_argc
0001796c g     O .bss	00000004 altera_avalon_timer_ts_base
00011fec g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000088e8 g     F .text	00000080 __ulp
00009d14 g     F .text	00000040 __isinfd
00006fd0 g     F .text	00000018 __fp_unlock_all
00015980 g     O .rwdata	00000008 alt_fs_list
00017930 g     O .bss	00000004 pixel_buffer_dev
000100fc g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000e8bc g     F .text	00000070 alt_up_audio_record_l
00010274 g     F .text	00000048 alt_up_rs232_write_data
0000f470 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007be4 g     F .text	00000010 localeconv
0000e4a0 g     F .text	0000009c alt_timestamp
000018fc g     F .text	000000a4 print_mouse_on_given_position
000159a8 g       *ABS*	00000000 _edata
007b8e54 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000dea4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000344 g     F .text	000004ec audio_ISR
0000ea10 g     F .text	00000070 alt_up_audio_play_l
00009e64 g     F .text	0000007c __swrite
00015978 g     O .rwdata	00000004 __malloc_trim_threshold
000126e8 g     F .text	00000020 altera_nios2_qsys_irq_init
00012ab0 g     F .text	00000038 exit
0000f7e8 g     F .text	00000074 alt_up_irda_read_data
00017934 g     O .bss	00000004 x_mouse
00007a50 g     F .text	000000c8 _fwalk_reent
00002bf0 g     F .text	000000c0 __floatunsisf
0000fb28 g     F .text	000000cc alt_up_ps2_init
00008ee4 g     F .text	0000018c __mdiff
0000c298 g     F .text	00000060 __modsi3
00017938 g     O .bss	00000004 middle_button_click
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006f10 g     F .text	00000004 __sfp_lock_release
0000ef0c g     F .text	00000078 alt_up_character_lcd_string
0000f97c g     F .text	00000040 alt_up_irda_open_dev
000131bc g     F .text	00000020 _exit
00009d54 g     F .text	00000030 __isnand
00011d04 g     F .text	00000154 alt_alarm_start
005d0724 g     O .bss	001e8480 play_r_buf
0000c308 g     F .text	00000098 __muldi3
00007c94 g     F .text	00000194 __smakebuf_r
0000fd18 g     F .text	00000070 alt_up_ps2_wait_for_ack
00009ffc g     F .text	00000074 strlen
0000f3b0 g     F .text	00000040 alt_up_ethernet_open_dev
0001232c g     F .text	00000188 open
0000bd48 g     F .text	00000088 __gedf2
0000d07c g     F .text	00000040 alt_putchar
000178f0 g     O .bss	00000004 buf_index_record
0001793c g     O .bss	00000004 prev_x_mouse_front
000120e4 g     F .text	00000030 alt_icache_flush_all
0000f550 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000efd0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00015998 g     O .rwdata	00000004 alt_priority_mask
00005358 g     F .text	00000024 __vfprintf_internal
0000ff78 g     F .text	0000009c alt_up_ps2_read_fd
000028f0 g     F .text	00000030 amplitude_circute_start
0000b4a0 g     F .text	00000080 __subdf3
0000f85c g     F .text	00000090 alt_up_irda_read_fd
000087c4 g     F .text	000000c4 __lo0bits
000159a0 g     O .rwdata	00000008 alt_alarm_list
00011f88 g     F .text	00000064 _do_ctors
000101a8 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0000c5a0 g     F .text	000000fc close
0000cb3c g     F .text	00000080 alt_load
0000f3f0 g     F .text	0000003c alt_up_ethernet_reg_read
0000e5a4 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00002f90 g     F .text	00000314 __pack_d
000028c0 g     F .text	00000030 amplitude_circute_set_dest_addr
00000000  w      *UND*	00000000 free
00006f14 g     F .text	00000004 __sinit_lock_acquire
000093e0 g     F .text	00000100 __multadd
0000872c g     F .text	00000028 _Bfree
0000e6dc g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01f34 	movhi	r3,124
 134:	18e2f104 	addi	r3,r3,-29756
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01f34 	movhi	r3,124
 14c:	18e2f104 	addi	r3,r3,-29756
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b65314 	ori	gp,gp,55628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	109e3514 	ori	r2,r2,30932

    movhi r3, %hi(__bss_end)
     1d0:	00c01ef4 	movhi	r3,123
    ori r3, r3, %lo(__bss_end)
     1d4:	18e39514 	ori	r3,r3,36436

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000cb3c0 	call	cb3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000cd780 	call	cd78 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	000fea40 	call	fea4 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000431e 	bne	r2,zero,330 <PS2_ISR+0x13c>
	{
		/* allows save the last three bytes of data */
		copy_byte1 = copy_byte2;
     224:	00800074 	movhi	r2,1
     228:	109e3944 	addi	r2,r2,30949
     22c:	10c00003 	ldbu	r3,0(r2)
     230:	00800074 	movhi	r2,1
     234:	109e3904 	addi	r2,r2,30948
     238:	10c00005 	stb	r3,0(r2)
		copy_byte2 = copy_byte3;
     23c:	00800074 	movhi	r2,1
     240:	109e3884 	addi	r2,r2,30946
     244:	10c00003 	ldbu	r3,0(r2)
     248:	00800074 	movhi	r2,1
     24c:	109e3944 	addi	r2,r2,30949
     250:	10c00005 	stb	r3,0(r2)
		copy_byte3 = PS2_data;
     254:	e0fffd03 	ldbu	r3,-12(fp)
     258:	00800074 	movhi	r2,1
     25c:	109e3884 	addi	r2,r2,30946
     260:	10c00005 	stb	r3,0(r2)

		if(count > 0){
     264:	d0a7e217 	ldw	r2,-24696(gp)
     268:	10800050 	cmplti	r2,r2,1
     26c:	10001b1e 	bne	r2,zero,2dc <PS2_ISR+0xe8>
			if(count != 4){
     270:	d0a7e217 	ldw	r2,-24696(gp)
     274:	10800120 	cmpeqi	r2,r2,4
     278:	1000031e 	bne	r2,zero,288 <PS2_ISR+0x94>
				count++;
     27c:	d0a7e217 	ldw	r2,-24696(gp)
     280:	10800044 	addi	r2,r2,1
     284:	d0a7e215 	stw	r2,-24696(gp)
			}
			if(count == 4){
     288:	d0a7e217 	ldw	r2,-24696(gp)
     28c:	10800118 	cmpnei	r2,r2,4
     290:	1000121e 	bne	r2,zero,2dc <PS2_ISR+0xe8>
				byte1 = copy_byte1;
     294:	00800074 	movhi	r2,1
     298:	109e3904 	addi	r2,r2,30948
     29c:	10c00003 	ldbu	r3,0(r2)
     2a0:	00800074 	movhi	r2,1
     2a4:	109e38c4 	addi	r2,r2,30947
     2a8:	10c00005 	stb	r3,0(r2)
				byte2 = copy_byte2;
     2ac:	00800074 	movhi	r2,1
     2b0:	109e3944 	addi	r2,r2,30949
     2b4:	10c00003 	ldbu	r3,0(r2)
     2b8:	00800074 	movhi	r2,1
     2bc:	109e3804 	addi	r2,r2,30944
     2c0:	10c00005 	stb	r3,0(r2)
				byte3 = copy_byte3;
     2c4:	00800074 	movhi	r2,1
     2c8:	109e3884 	addi	r2,r2,30946
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	00800074 	movhi	r2,1
     2d4:	109e3844 	addi	r2,r2,30945
     2d8:	10c00005 	stb	r3,0(r2)
			}
		}
		if(count == 0){
     2dc:	d0a7e217 	ldw	r2,-24696(gp)
     2e0:	1004c03a 	cmpne	r2,r2,zero
     2e4:	1000121e 	bne	r2,zero,330 <PS2_ISR+0x13c>
			if ( (copy_byte2 == (unsigned char) 0xAA) && (copy_byte3 == (unsigned char) 0x00) ){
     2e8:	00800074 	movhi	r2,1
     2ec:	109e3944 	addi	r2,r2,30949
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	10802a98 	cmpnei	r2,r2,170
     2fc:	10000c1e 	bne	r2,zero,330 <PS2_ISR+0x13c>
     300:	00800074 	movhi	r2,1
     304:	109e3884 	addi	r2,r2,30946
     308:	10800003 	ldbu	r2,0(r2)
     30c:	10803fcc 	andi	r2,r2,255
     310:	1004c03a 	cmpne	r2,r2,zero
     314:	1000061e 	bne	r2,zero,330 <PS2_ISR+0x13c>
					// mouse inserted; initialize sending of data
					(void) alt_up_ps2_write_data_byte_with_ack (up_dev->PS2_dev, (unsigned char) 0xF4);
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	11000317 	ldw	r4,12(r2)
     320:	01403d04 	movi	r5,244
     324:	000fd880 	call	fd88 <alt_up_ps2_write_data_byte_with_ack>
					count = 1;
     328:	00800044 	movi	r2,1
     32c:	d0a7e215 	stw	r2,-24696(gp)
		}


	}
	return;
}
     330:	e037883a 	mov	sp,fp
     334:	dfc00117 	ldw	ra,4(sp)
     338:	df000017 	ldw	fp,0(sp)
     33c:	dec00204 	addi	sp,sp,8
     340:	f800283a 	ret

00000344 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     344:	defff304 	addi	sp,sp,-52
     348:	dfc00c15 	stw	ra,48(sp)
     34c:	df000b15 	stw	fp,44(sp)
     350:	df000b04 	addi	fp,sp,44
     354:	e13ffe15 	stw	r4,-8(fp)
     358:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	11000517 	ldw	r4,20(r2)
     364:	000e6dc0 	call	e6dc <alt_up_audio_read_interrupt_pending>
     368:	1005003a 	cmpeq	r2,r2,zero
     36c:	1000481e 	bne	r2,zero,490 <audio_ISR+0x14c>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     370:	e0bffe17 	ldw	r2,-8(fp)
     374:	10800117 	ldw	r2,4(r2)
     378:	10800a17 	ldw	r2,40(r2)
     37c:	1007883a 	mov	r3,r2
     380:	00800044 	movi	r2,1
     384:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     388:	00800074 	movhi	r2,1
     38c:	109e3c04 	addi	r2,r2,30960
     390:	10c00017 	ldw	r3,0(r2)
     394:	00800234 	movhi	r2,8
     398:	10a847c4 	addi	r2,r2,-24289
     39c:	10c03c16 	blt	r2,r3,490 <audio_ISR+0x14c>
		{
			//printf("record is runnig...\n");
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(record_r_buf[buf_index_record]),
     3a0:	e0bffe17 	ldw	r2,-8(fp)
     3a4:	11000517 	ldw	r4,20(r2)
     3a8:	00800074 	movhi	r2,1
     3ac:	109e3c04 	addi	r2,r2,30960
     3b0:	10800017 	ldw	r2,0(r2)
     3b4:	1085883a 	add	r2,r2,r2
     3b8:	1085883a 	add	r2,r2,r2
     3bc:	1007883a 	mov	r3,r2
     3c0:	00800ff4 	movhi	r2,63
     3c4:	10a0a904 	addi	r2,r2,-32092
     3c8:	188b883a 	add	r5,r3,r2
     3cc:	00800074 	movhi	r2,1
     3d0:	109e3c04 	addi	r2,r2,30960
     3d4:	10c00017 	ldw	r3,0(r2)
     3d8:	00800234 	movhi	r2,8
     3dc:	10a84804 	addi	r2,r2,-24288
     3e0:	10cdc83a 	sub	r6,r2,r3
     3e4:	000e84c0 	call	e84c <alt_up_audio_record_r>
     3e8:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(record_l_buf[buf_index_record]),
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	11000517 	ldw	r4,20(r2)
     3f4:	00800074 	movhi	r2,1
     3f8:	109e3c04 	addi	r2,r2,30960
     3fc:	10800017 	ldw	r2,0(r2)
     400:	1085883a 	add	r2,r2,r2
     404:	1085883a 	add	r2,r2,r2
     408:	1007883a 	mov	r3,r2
     40c:	00800074 	movhi	r2,1
     410:	109e6904 	addi	r2,r2,31140
     414:	188b883a 	add	r5,r3,r2
     418:	e1bffd17 	ldw	r6,-12(fp)
     41c:	000e8bc0 	call	e8bc <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     420:	00800074 	movhi	r2,1
     424:	109e3c04 	addi	r2,r2,30960
     428:	10c00017 	ldw	r3,0(r2)
     42c:	e0bffd17 	ldw	r2,-12(fp)
     430:	1887883a 	add	r3,r3,r2
     434:	00800074 	movhi	r2,1
     438:	109e3c04 	addi	r2,r2,30960
     43c:	10c00015 	stw	r3,0(r2)
			//printf("buf_index_record: %d\n", buf_index_record);
			if (buf_index_record >= BUF_SIZE)
     440:	00800074 	movhi	r2,1
     444:	109e3c04 	addi	r2,r2,30960
     448:	10c00017 	ldw	r3,0(r2)
     44c:	00800234 	movhi	r2,8
     450:	10a847c4 	addi	r2,r2,-24289
     454:	10c00e0e 	bge	r2,r3,490 <audio_ISR+0x14c>
			{
				// done recording
				flag_plot = 1;
     458:	00c00074 	movhi	r3,1
     45c:	18de3d04 	addi	r3,r3,30964
     460:	00800044 	movi	r2,1
     464:	18800015 	stw	r2,0(r3)
				buf_index_record = 0;
     468:	00800074 	movhi	r2,1
     46c:	109e3c04 	addi	r2,r2,30960
     470:	10000015 	stw	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     474:	e0bffe17 	ldw	r2,-8(fp)
     478:	10800117 	ldw	r2,4(r2)
     47c:	10800a17 	ldw	r2,40(r2)
     480:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     484:	e0bffe17 	ldw	r2,-8(fp)
     488:	11000517 	ldw	r4,20(r2)
     48c:	000e5f00 	call	e5f0 <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if(flag_play){
     490:	00800074 	movhi	r2,1
     494:	109e4804 	addi	r2,r2,31008
     498:	10800017 	ldw	r2,0(r2)
     49c:	1005003a 	cmpeq	r2,r2,zero
     4a0:	1000891e 	bne	r2,zero,6c8 <audio_ISR+0x384>

		int width_of_each_plot = (width_of_screen / N);
     4a4:	d0e00217 	ldw	r3,-32760(gp)
     4a8:	00800074 	movhi	r2,1
     4ac:	10965804 	addi	r2,r2,22880
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	1885283a 	div	r2,r3,r2
     4b8:	e0bffa15 	stw	r2,-24(fp)
		if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     4bc:	e0bffe17 	ldw	r2,-8(fp)
     4c0:	11000517 	ldw	r4,20(r2)
     4c4:	000e7180 	call	e718 <alt_up_audio_write_interrupt_pending>
     4c8:	1005003a 	cmpeq	r2,r2,zero
     4cc:	10007e1e 	bne	r2,zero,6c8 <audio_ISR+0x384>
		{
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x4); // set LEDG[2] on
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10800117 	ldw	r2,4(r2)
     4d8:	10800a17 	ldw	r2,40(r2)
     4dc:	1007883a 	mov	r3,r2
     4e0:	00800104 	movi	r2,4
     4e4:	18800035 	stwio	r2,0(r3)


			// output data until the buffer is empty
			if (buf_index_play < BUF_SIZE)
     4e8:	00800074 	movhi	r2,1
     4ec:	109e3b04 	addi	r2,r2,30956
     4f0:	10c00017 	ldw	r3,0(r2)
     4f4:	00800234 	movhi	r2,8
     4f8:	10a847c4 	addi	r2,r2,-24289
     4fc:	10c07216 	blt	r2,r3,6c8 <audio_ISR+0x384>
			{
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(record_r_buf[buf_index_play]),
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	11000517 	ldw	r4,20(r2)
     508:	00800074 	movhi	r2,1
     50c:	109e3b04 	addi	r2,r2,30956
     510:	10800017 	ldw	r2,0(r2)
     514:	1085883a 	add	r2,r2,r2
     518:	1085883a 	add	r2,r2,r2
     51c:	1007883a 	mov	r3,r2
     520:	00800ff4 	movhi	r2,63
     524:	10a0a904 	addi	r2,r2,-32092
     528:	188b883a 	add	r5,r3,r2
     52c:	00800074 	movhi	r2,1
     530:	109e3b04 	addi	r2,r2,30956
     534:	10c00017 	ldw	r3,0(r2)
     538:	00800234 	movhi	r2,8
     53c:	10a84804 	addi	r2,r2,-24288
     540:	10cdc83a 	sub	r6,r2,r3
     544:	000e9a00 	call	e9a0 <alt_up_audio_play_r>
     548:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(record_l_buf[buf_index_play]),
     54c:	e0bffe17 	ldw	r2,-8(fp)
     550:	11000517 	ldw	r4,20(r2)
     554:	00800074 	movhi	r2,1
     558:	109e3b04 	addi	r2,r2,30956
     55c:	10800017 	ldw	r2,0(r2)
     560:	1085883a 	add	r2,r2,r2
     564:	1085883a 	add	r2,r2,r2
     568:	1007883a 	mov	r3,r2
     56c:	00800074 	movhi	r2,1
     570:	109e6904 	addi	r2,r2,31140
     574:	188b883a 	add	r5,r3,r2
     578:	e1bffc17 	ldw	r6,-16(fp)
     57c:	000ea100 	call	ea10 <alt_up_audio_play_l>
					num_written);

				int i;
				int n = (buf_index_play) / (BUF_SIZE/N);
     580:	00800074 	movhi	r2,1
     584:	109e3b04 	addi	r2,r2,30956
     588:	11000017 	ldw	r4,0(r2)
     58c:	00800074 	movhi	r2,1
     590:	10965804 	addi	r2,r2,22880
     594:	10c00017 	ldw	r3,0(r2)
     598:	00800234 	movhi	r2,8
     59c:	10a84804 	addi	r2,r2,-24288
     5a0:	10c5283a 	div	r2,r2,r3
     5a4:	2085283a 	div	r2,r4,r2
     5a8:	e0bff815 	stw	r2,-32(fp)
				printf("%d , %d\n", n , k);
     5ac:	d1a7e417 	ldw	r6,-24688(gp)
     5b0:	01000074 	movhi	r4,1
     5b4:	210c7804 	addi	r4,r4,12768
     5b8:	e17ff817 	ldw	r5,-32(fp)
     5bc:	00033dc0 	call	33dc <printf>
				if(n >= k)
     5c0:	d0e7e417 	ldw	r3,-24688(gp)
     5c4:	e0bff817 	ldw	r2,-32(fp)
     5c8:	10c02016 	blt	r2,r3,64c <audio_ISR+0x308>
				{

					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_of_current_drawing_plot * 4, (y_of_each_plot - 3) * 4, (x_of_current_drawing_plot + width_of_each_plot-2) * 4,
     5cc:	00800074 	movhi	r2,1
     5d0:	109e4c04 	addi	r2,r2,31024
     5d4:	11000017 	ldw	r4,0(r2)
     5d8:	d0a00317 	ldw	r2,-32756(gp)
     5dc:	1085883a 	add	r2,r2,r2
     5e0:	1085883a 	add	r2,r2,r2
     5e4:	100b883a 	mov	r5,r2
     5e8:	d0a00117 	ldw	r2,-32764(gp)
     5ec:	1085883a 	add	r2,r2,r2
     5f0:	1085883a 	add	r2,r2,r2
     5f4:	11bffd04 	addi	r6,r2,-12
     5f8:	d0e00317 	ldw	r3,-32756(gp)
     5fc:	e0bffa17 	ldw	r2,-24(fp)
     600:	1885883a 	add	r2,r3,r2
     604:	1085883a 	add	r2,r2,r2
     608:	1085883a 	add	r2,r2,r2
     60c:	11fffe04 	addi	r7,r2,-8
     610:	d0a00117 	ldw	r2,-32764(gp)
     614:	1085883a 	add	r2,r2,r2
     618:	1085883a 	add	r2,r2,r2
     61c:	d0e00017 	ldw	r3,-32768(gp)
     620:	d8800015 	stw	r2,0(sp)
     624:	d8c00115 	stw	r3,4(sp)
     628:	d8000215 	stw	zero,8(sp)
     62c:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
						y_of_each_plot * 4, color, 0);

					x_of_current_drawing_plot += width_of_each_plot;
     630:	d0e00317 	ldw	r3,-32756(gp)
     634:	e0bffa17 	ldw	r2,-24(fp)
     638:	1885883a 	add	r2,r3,r2
     63c:	d0a00315 	stw	r2,-32756(gp)

					k++;
     640:	d0a7e417 	ldw	r2,-24688(gp)
     644:	10800044 	addi	r2,r2,1
     648:	d0a7e415 	stw	r2,-24688(gp)

				}

				buf_index_play += num_written;
     64c:	00800074 	movhi	r2,1
     650:	109e3b04 	addi	r2,r2,30956
     654:	10c00017 	ldw	r3,0(r2)
     658:	e0bffc17 	ldw	r2,-16(fp)
     65c:	1887883a 	add	r3,r3,r2
     660:	00800074 	movhi	r2,1
     664:	109e3b04 	addi	r2,r2,30956
     668:	10c00015 	stw	r3,0(r2)
				//printf("buf_index_play: %d\n", buf_index_play);

				if (buf_index_play >= BUF_SIZE)
     66c:	00800074 	movhi	r2,1
     670:	109e3b04 	addi	r2,r2,30956
     674:	10c00017 	ldw	r3,0(r2)
     678:	00800234 	movhi	r2,8
     67c:	10a847c4 	addi	r2,r2,-24289
     680:	10c0110e 	bge	r2,r3,6c8 <audio_ISR+0x384>
				{
					// done playback
					printf("done playing");
     684:	01000074 	movhi	r4,1
     688:	210c7b04 	addi	r4,r4,12780
     68c:	00033dc0 	call	33dc <printf>
					buf_index_play = 0;
     690:	00800074 	movhi	r2,1
     694:	109e3b04 	addi	r2,r2,30956
     698:	10000015 	stw	zero,0(r2)
					num_written = 0;
     69c:	e03ffc15 	stw	zero,-16(fp)
					flag_play = 0;
     6a0:	00800074 	movhi	r2,1
     6a4:	109e4804 	addi	r2,r2,31008
     6a8:	10000015 	stw	zero,0(r2)
					alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     6ac:	e0bffe17 	ldw	r2,-8(fp)
     6b0:	10800117 	ldw	r2,4(r2)
     6b4:	10800a17 	ldw	r2,40(r2)
     6b8:	10000035 	stwio	zero,0(r2)
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	11000517 	ldw	r4,20(r2)
     6c4:	000e68c0 	call	e68c <alt_up_audio_disable_write_interrupt>
				}
			}
		}
	}
	if(flag_denoise){
     6c8:	00800074 	movhi	r2,1
     6cc:	109e4204 	addi	r2,r2,30984
     6d0:	10800017 	ldw	r2,0(r2)
     6d4:	1005003a 	cmpeq	r2,r2,zero
     6d8:	1000501e 	bne	r2,zero,81c <audio_ISR+0x4d8>
		if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	11000517 	ldw	r4,20(r2)
     6e4:	000e7180 	call	e718 <alt_up_audio_write_interrupt_pending>
     6e8:	1005003a 	cmpeq	r2,r2,zero
     6ec:	10004b1e 	bne	r2,zero,81c <audio_ISR+0x4d8>
		{
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x4); // set LEDG[2] on
     6f0:	e0bffe17 	ldw	r2,-8(fp)
     6f4:	10800117 	ldw	r2,4(r2)
     6f8:	10800a17 	ldw	r2,40(r2)
     6fc:	1007883a 	mov	r3,r2
     700:	00800104 	movi	r2,4
     704:	18800035 	stwio	r2,0(r3)

			// output data until the buffer is empty
			if (buf_index_play < BUF_SIZE)
     708:	00800074 	movhi	r2,1
     70c:	109e3b04 	addi	r2,r2,30956
     710:	10c00017 	ldw	r3,0(r2)
     714:	00800234 	movhi	r2,8
     718:	10a847c4 	addi	r2,r2,-24289
     71c:	10c03f16 	blt	r2,r3,81c <audio_ISR+0x4d8>
			{
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(play_r_buf[buf_index_play]),
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	11000517 	ldw	r4,20(r2)
     728:	00800074 	movhi	r2,1
     72c:	109e3b04 	addi	r2,r2,30956
     730:	10800017 	ldw	r2,0(r2)
     734:	1085883a 	add	r2,r2,r2
     738:	1085883a 	add	r2,r2,r2
     73c:	1007883a 	mov	r3,r2
     740:	00801774 	movhi	r2,93
     744:	1081c904 	addi	r2,r2,1828
     748:	188b883a 	add	r5,r3,r2
     74c:	00800074 	movhi	r2,1
     750:	109e3b04 	addi	r2,r2,30956
     754:	10c00017 	ldw	r3,0(r2)
     758:	00800234 	movhi	r2,8
     75c:	10a84804 	addi	r2,r2,-24288
     760:	10cdc83a 	sub	r6,r2,r3
     764:	000e9a00 	call	e9a0 <alt_up_audio_play_r>
     768:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(play_l_buf[buf_index_play]),
     76c:	e0bffe17 	ldw	r2,-8(fp)
     770:	11000517 	ldw	r4,20(r2)
     774:	00800074 	movhi	r2,1
     778:	109e3b04 	addi	r2,r2,30956
     77c:	10800017 	ldw	r2,0(r2)
     780:	1085883a 	add	r2,r2,r2
     784:	1085883a 	add	r2,r2,r2
     788:	1007883a 	mov	r3,r2
     78c:	00800834 	movhi	r2,32
     790:	10bf8904 	addi	r2,r2,-476
     794:	188b883a 	add	r5,r3,r2
     798:	e1bffc17 	ldw	r6,-16(fp)
     79c:	000ea100 	call	ea10 <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     7a0:	00800074 	movhi	r2,1
     7a4:	109e3b04 	addi	r2,r2,30956
     7a8:	10c00017 	ldw	r3,0(r2)
     7ac:	e0bffc17 	ldw	r2,-16(fp)
     7b0:	1887883a 	add	r3,r3,r2
     7b4:	00800074 	movhi	r2,1
     7b8:	109e3b04 	addi	r2,r2,30956
     7bc:	10c00015 	stw	r3,0(r2)
				//printf("buf_index_play: %d\n", buf_index_play);

				if (buf_index_play >= BUF_SIZE)
     7c0:	00800074 	movhi	r2,1
     7c4:	109e3b04 	addi	r2,r2,30956
     7c8:	10c00017 	ldw	r3,0(r2)
     7cc:	00800234 	movhi	r2,8
     7d0:	10a847c4 	addi	r2,r2,-24289
     7d4:	10c0110e 	bge	r2,r3,81c <audio_ISR+0x4d8>
				{
					// done playback
					printf("done playing");
     7d8:	01000074 	movhi	r4,1
     7dc:	210c7b04 	addi	r4,r4,12780
     7e0:	00033dc0 	call	33dc <printf>
					buf_index_play = 0;
     7e4:	00800074 	movhi	r2,1
     7e8:	109e3b04 	addi	r2,r2,30956
     7ec:	10000015 	stw	zero,0(r2)
					num_written = 0;
     7f0:	e03ffc15 	stw	zero,-16(fp)
					flag_denoise = 0;
     7f4:	00800074 	movhi	r2,1
     7f8:	109e4204 	addi	r2,r2,30984
     7fc:	10000015 	stw	zero,0(r2)
					alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     800:	e0bffe17 	ldw	r2,-8(fp)
     804:	10800117 	ldw	r2,4(r2)
     808:	10800a17 	ldw	r2,40(r2)
     80c:	10000035 	stwio	zero,0(r2)
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     810:	e0bffe17 	ldw	r2,-8(fp)
     814:	11000517 	ldw	r4,20(r2)
     818:	000e68c0 	call	e68c <alt_up_audio_disable_write_interrupt>
				}
			}
		}
	}
	return;
}
     81c:	e037883a 	mov	sp,fp
     820:	dfc00117 	ldw	ra,4(sp)
     824:	df000017 	ldw	fp,0(sp)
     828:	dec00204 	addi	sp,sp,8
     82c:	f800283a 	ret

00000830 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     830:	defffb04 	addi	sp,sp,-20
     834:	dfc00415 	stw	ra,16(sp)
     838:	df000315 	stw	fp,12(sp)
     83c:	df000304 	addi	fp,sp,12
     840:	e13ffe15 	stw	r4,-8(fp)
     844:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     848:	00840034 	movhi	r2,4096
     84c:	10880004 	addi	r2,r2,8192
     850:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     854:	e0bffd17 	ldw	r2,-12(fp)
     858:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     85c:	00c00074 	movhi	r3,1
     860:	18de3a04 	addi	r3,r3,30952
     864:	00800044 	movi	r2,1
     868:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     86c:	e0bffe17 	ldw	r2,-8(fp)
     870:	11000417 	ldw	r4,16(r2)
     874:	017fffc4 	movi	r5,-1
     878:	000f0f80 	call	f0f8 <alt_up_character_lcd_shift_display>

	return;
}
     87c:	e037883a 	mov	sp,fp
     880:	dfc00117 	ldw	ra,4(sp)
     884:	df000017 	ldw	fp,0(sp)
     888:	dec00204 	addi	sp,sp,8
     88c:	f800283a 	ret

00000890 <main>:
********************************************************************************/

alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;

int main(void)
{
     890:	defffe04 	addi	sp,sp,-8
     894:	dfc00115 	stw	ra,4(sp)
     898:	df000015 	stw	fp,0(sp)
     89c:	d839883a 	mov	fp,sp
     8a0:	023fe1b4 	movhi	r8,65414
     8a4:	423b3304 	addi	r8,r8,-4916
     8a8:	da37883a 	add	sp,sp,r8
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;

	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interval timer base address
     8ac:	00840034 	movhi	r2,4096
     8b0:	10880004 	addi	r2,r2,8192
     8b4:	00ffe1b4 	movhi	r3,65414
     8b8:	18fb5204 	addi	r3,r3,-4792
     8bc:	1f07883a 	add	r3,r3,fp
     8c0:	18800015 	stw	r2,0(r3)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0;
     8c4:	00800074 	movhi	r2,1
     8c8:	109e38c4 	addi	r2,r2,30947
     8cc:	10000005 	stb	zero,0(r2)
     8d0:	00800074 	movhi	r2,1
     8d4:	109e3804 	addi	r2,r2,30944
     8d8:	10000005 	stb	zero,0(r2)
     8dc:	00800074 	movhi	r2,1
     8e0:	109e3844 	addi	r2,r2,30945
     8e4:	10000005 	stb	zero,0(r2)
	copy_byte1 = 0; copy_byte2 = 0; copy_byte3 = 0;// used to hold PS/2 data
     8e8:	00800074 	movhi	r2,1
     8ec:	109e3904 	addi	r2,r2,30948
     8f0:	10000005 	stb	zero,0(r2)
     8f4:	00800074 	movhi	r2,1
     8f8:	109e3944 	addi	r2,r2,30949
     8fc:	10000005 	stb	zero,0(r2)
     900:	00800074 	movhi	r2,1
     904:	109e3884 	addi	r2,r2,30946
     908:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     90c:	00800074 	movhi	r2,1
     910:	109e3a04 	addi	r2,r2,30952
     914:	10000015 	stw	zero,0(r2)
	count = 0;
     918:	00800074 	movhi	r2,1
     91c:	109e3504 	addi	r2,r2,30932
     920:	10000015 	stw	zero,0(r2)
	flag_denoise = 0; flag_play = 0;
     924:	d027ef15 	stw	zero,-24644(gp)
     928:	d027f515 	stw	zero,-24620(gp)

	x_mouse = 0; y_mouse = 0;                       // first mouse position is (0,0)
     92c:	d027fa15 	stw	zero,-24600(gp)
     930:	d027ee15 	stw	zero,-24648(gp)
	setMouseBounds(319, 239);                   // screen size is 319 * 239
     934:	01004fc4 	movi	r4,319
     938:	01403bc4 	movi	r5,239
     93c:	0001ce40 	call	1ce4 <setMouseBounds>
	prev_x_mouse_front = x_mouse;
     940:	d0a7fa17 	ldw	r2,-24600(gp)
     944:	d0a7fc15 	stw	r2,-24592(gp)
	prev_y_mouse_front = y_mouse;
     948:	d0a7ee17 	ldw	r2,-24648(gp)
     94c:	d0a7f015 	stw	r2,-24640(gp)
	prev_x_mouse_back = x_mouse;
     950:	d0a7fa17 	ldw	r2,-24600(gp)
     954:	d0a7f815 	stw	r2,-24608(gp)
	prev_y_mouse_back = y_mouse;
     958:	d0a7ee17 	ldw	r2,-24648(gp)
     95c:	d0a7f115 	stw	r2,-24636(gp)
	prev_x_mouse = prev_x_mouse_front;
     960:	d0a7fc17 	ldw	r2,-24592(gp)
     964:	d0a7f315 	stw	r2,-24628(gp)
	prev_y_mouse = prev_y_mouse_front;
     968:	d0a7f017 	ldw	r2,-24640(gp)
     96c:	d0a7ed15 	stw	r2,-24652(gp)
	/* these variables are used for the VGA screen */
	int ALT_x1; int ALT_x2; int ALT_y;
	int ALT_inc_x; int ALT_inc_y;
	int blue_x1; int blue_y1; int blue_x2; int blue_y2;
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color; short trans_color = 0x1863;
     970:	008618c4 	movi	r2,6243
     974:	013fe1b4 	movhi	r4,65414
     978:	213b4384 	addi	r4,r4,-4850
     97c:	2709883a 	add	r4,r4,fp
     980:	2080000d 	sth	r2,0(r4)
	alt_u8 buffer_type = 1;
     984:	00800044 	movi	r2,1
     988:	023fe1b4 	movhi	r8,65414
     98c:	423b4304 	addi	r8,r8,-4852
     990:	4711883a 	add	r8,r8,fp
     994:	40800005 	stb	r2,0(r8)

	// variables for Play, Record and Echo boxes on VGA screen
	int y1_boxes = 26; int y2_boxes = 34;
     998:	00800684 	movi	r2,26
     99c:	027fe1b4 	movhi	r9,65414
     9a0:	4a7b4204 	addi	r9,r9,-4856
     9a4:	4f13883a 	add	r9,r9,fp
     9a8:	48800015 	stw	r2,0(r9)
     9ac:	00800884 	movi	r2,34
     9b0:	00ffe1b4 	movhi	r3,65414
     9b4:	18fb4104 	addi	r3,r3,-4860
     9b8:	1f07883a 	add	r3,r3,fp
     9bc:	18800015 	stw	r2,0(r3)
	int x1_box_record = 8; int x2_box_record = 26;
     9c0:	00800204 	movi	r2,8
     9c4:	013fe1b4 	movhi	r4,65414
     9c8:	213b4004 	addi	r4,r4,-4864
     9cc:	2709883a 	add	r4,r4,fp
     9d0:	20800015 	stw	r2,0(r4)
     9d4:	00800684 	movi	r2,26
     9d8:	023fe1b4 	movhi	r8,65414
     9dc:	423b3f04 	addi	r8,r8,-4868
     9e0:	4711883a 	add	r8,r8,fp
     9e4:	40800015 	stw	r2,0(r8)
	int x1_box_play = 30; int x2_box_play = 48;
     9e8:	00800784 	movi	r2,30
     9ec:	027fe1b4 	movhi	r9,65414
     9f0:	4a7b3e04 	addi	r9,r9,-4872
     9f4:	4f13883a 	add	r9,r9,fp
     9f8:	48800015 	stw	r2,0(r9)
     9fc:	00800c04 	movi	r2,48
     a00:	00ffe1b4 	movhi	r3,65414
     a04:	18fb3d04 	addi	r3,r3,-4876
     a08:	1f07883a 	add	r3,r3,fp
     a0c:	18800015 	stw	r2,0(r3)
	int x1_box_echo = 52; int x2_box_echo = 70;
     a10:	00800d04 	movi	r2,52
     a14:	013fe1b4 	movhi	r4,65414
     a18:	213b3c04 	addi	r4,r4,-4880
     a1c:	2709883a 	add	r4,r4,fp
     a20:	20800015 	stw	r2,0(r4)
     a24:	00801184 	movi	r2,70
     a28:	023fe1b4 	movhi	r8,65414
     a2c:	423b3b04 	addi	r8,r8,-4884
     a30:	4711883a 	add	r8,r8,fp
     a34:	40800015 	stw	r2,0(r8)
	int play = 0; int record = 0;  int denoise = 0;
     a38:	027fe1b4 	movhi	r9,65414
     a3c:	4a7b3a04 	addi	r9,r9,-4888
     a40:	4f13883a 	add	r9,r9,fp
     a44:	48000015 	stw	zero,0(r9)
     a48:	00bfe1b4 	movhi	r2,65414
     a4c:	10bb5a04 	addi	r2,r2,-4760
     a50:	1705883a 	add	r2,r2,fp
     a54:	10000015 	stw	zero,0(r2)
     a58:	00ffe1b4 	movhi	r3,65414
     a5c:	18fb3904 	addi	r3,r3,-4892
     a60:	1f07883a 	add	r3,r3,fp
     a64:	18000015 	stw	zero,0(r3)

	// variables for audio buffer
	int buffer_index = 0;
     a68:	013fe1b4 	movhi	r4,65414
     a6c:	213b5b04 	addi	r4,r4,-4756
     a70:	2709883a 	add	r4,r4,fp
     a74:	20000015 	stw	zero,0(r4)
	unsigned int echo_left_buf[BUF_SIZE];
	unsigned int echo_right_buf[BUF_SIZE];
	int num_read; int num_written;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     a78:	008025b4 	movhi	r2,150
     a7c:	023fe1b4 	movhi	r8,65414
     a80:	423b3604 	addi	r8,r8,-4904
     a84:	4711883a 	add	r8,r8,fp
     a88:	40800015 	stw	r2,0(r8)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     a8c:	027fe1b4 	movhi	r9,65414
     a90:	4a7b5204 	addi	r9,r9,-4792
     a94:	4f13883a 	add	r9,r9,fp
     a98:	48800017 	ldw	r2,0(r9)
     a9c:	10c00204 	addi	r3,r2,8
     aa0:	013fe1b4 	movhi	r4,65414
     aa4:	213b3604 	addi	r4,r4,-4904
     aa8:	2709883a 	add	r4,r4,fp
     aac:	20800017 	ldw	r2,0(r4)
     ab0:	10bfffcc 	andi	r2,r2,65535
     ab4:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     ab8:	023fe1b4 	movhi	r8,65414
     abc:	423b5204 	addi	r8,r8,-4792
     ac0:	4711883a 	add	r8,r8,fp
     ac4:	40800017 	ldw	r2,0(r8)
     ac8:	10c00304 	addi	r3,r2,12
     acc:	027fe1b4 	movhi	r9,65414
     ad0:	4a7b3604 	addi	r9,r9,-4904
     ad4:	4f13883a 	add	r9,r9,fp
     ad8:	48800017 	ldw	r2,0(r9)
     adc:	1005d43a 	srai	r2,r2,16
     ae0:	10bfffcc 	andi	r2,r2,65535
     ae4:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     ae8:	00ffe1b4 	movhi	r3,65414
     aec:	18fb5204 	addi	r3,r3,-4792
     af0:	1f07883a 	add	r3,r3,fp
     af4:	18800017 	ldw	r2,0(r3)
     af8:	10c00104 	addi	r3,r2,4
     afc:	008001c4 	movi	r2,7
     b00:	18800015 	stw	r2,0(r3)


	// open the pushbutton KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     b04:	01000074 	movhi	r4,1
     b08:	210c7f04 	addi	r4,r4,12796
     b0c:	000f9bc0 	call	f9bc <alt_up_parallel_port_open_dev>
     b10:	013fe1b4 	movhi	r4,65414
     b14:	213b5904 	addi	r4,r4,-4764
     b18:	2709883a 	add	r4,r4,fp
     b1c:	20800015 	stw	r2,0(r4)
	if ( KEY_dev == NULL)
     b20:	023fe1b4 	movhi	r8,65414
     b24:	423b5904 	addi	r8,r8,-4764
     b28:	4711883a 	add	r8,r8,fp
     b2c:	40800017 	ldw	r2,0(r8)
     b30:	1004c03a 	cmpne	r2,r2,zero
     b34:	1000061e 	bne	r2,zero,b50 <main+0x2c0>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     b38:	01000074 	movhi	r4,1
     b3c:	210c8404 	addi	r4,r4,12816
     b40:	000ce240 	call	ce24 <alt_printf>
		return -1;
     b44:	027fffc4 	movi	r9,-1
     b48:	e27fff15 	stw	r9,-4(fp)
     b4c:	00021106 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     b50:	01000074 	movhi	r4,1
     b54:	210c9004 	addi	r4,r4,12864
     b58:	000ce240 	call	ce24 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     b5c:	00c01f34 	movhi	r3,124
     b60:	18e2e904 	addi	r3,r3,-29788
     b64:	013fe1b4 	movhi	r4,65414
     b68:	213b5904 	addi	r4,r4,-4764
     b6c:	2709883a 	add	r4,r4,fp
     b70:	20800017 	ldw	r2,0(r4)
     b74:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     b78:	023fe1b4 	movhi	r8,65414
     b7c:	423b5904 	addi	r8,r8,-4764
     b80:	4711883a 	add	r8,r8,fp
     b84:	40800017 	ldw	r2,0(r8)
     b88:	10800a17 	ldw	r2,40(r2)
     b8c:	10800204 	addi	r2,r2,8
     b90:	1007883a 	mov	r3,r2
     b94:	00800384 	movi	r2,14
     b98:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     b9c:	01000074 	movhi	r4,1
     ba0:	210c9804 	addi	r4,r4,12896
     ba4:	000f9bc0 	call	f9bc <alt_up_parallel_port_open_dev>
     ba8:	027fe1b4 	movhi	r9,65414
     bac:	4a7b5804 	addi	r9,r9,-4768
     bb0:	4f13883a 	add	r9,r9,fp
     bb4:	48800015 	stw	r2,0(r9)
	if ( green_LEDs_dev == NULL)
     bb8:	00ffe1b4 	movhi	r3,65414
     bbc:	18fb5804 	addi	r3,r3,-4768
     bc0:	1f07883a 	add	r3,r3,fp
     bc4:	18800017 	ldw	r2,0(r3)
     bc8:	1004c03a 	cmpne	r2,r2,zero
     bcc:	1000061e 	bne	r2,zero,be8 <main+0x358>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     bd0:	01000074 	movhi	r4,1
     bd4:	210c9c04 	addi	r4,r4,12912
     bd8:	000ce240 	call	ce24 <alt_printf>
		return -1;
     bdc:	013fffc4 	movi	r4,-1
     be0:	e13fff15 	stw	r4,-4(fp)
     be4:	0001eb06 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     be8:	01000074 	movhi	r4,1
     bec:	210ca704 	addi	r4,r4,12956
     bf0:	000ce240 	call	ce24 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     bf4:	00c01f34 	movhi	r3,124
     bf8:	18e2e904 	addi	r3,r3,-29788
     bfc:	023fe1b4 	movhi	r8,65414
     c00:	423b5804 	addi	r8,r8,-4768
     c04:	4711883a 	add	r8,r8,fp
     c08:	40800017 	ldw	r2,0(r8)
     c0c:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	red_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     c10:	01000074 	movhi	r4,1
     c14:	210cae04 	addi	r4,r4,12984
     c18:	000f9bc0 	call	f9bc <alt_up_parallel_port_open_dev>
     c1c:	027fe1b4 	movhi	r9,65414
     c20:	4a7b5704 	addi	r9,r9,-4772
     c24:	4f13883a 	add	r9,r9,fp
     c28:	48800015 	stw	r2,0(r9)
	if ( red_LEDs_dev == NULL)
     c2c:	00ffe1b4 	movhi	r3,65414
     c30:	18fb5704 	addi	r3,r3,-4772
     c34:	1f07883a 	add	r3,r3,fp
     c38:	18800017 	ldw	r2,0(r3)
     c3c:	1004c03a 	cmpne	r2,r2,zero
     c40:	1000061e 	bne	r2,zero,c5c <main+0x3cc>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     c44:	01000074 	movhi	r4,1
     c48:	210cb204 	addi	r4,r4,13000
     c4c:	000ce240 	call	ce24 <alt_printf>
		return -1;
     c50:	013fffc4 	movi	r4,-1
     c54:	e13fff15 	stw	r4,-4(fp)
     c58:	0001ce06 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     c5c:	01000074 	movhi	r4,1
     c60:	210cbc04 	addi	r4,r4,13040
     c64:	000ce240 	call	ce24 <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     c68:	00c01f34 	movhi	r3,124
     c6c:	18e2e904 	addi	r3,r3,-29788
     c70:	023fe1b4 	movhi	r8,65414
     c74:	423b5704 	addi	r8,r8,-4772
     c78:	4711883a 	add	r8,r8,fp
     c7c:	40800017 	ldw	r2,0(r8)
     c80:	18800215 	stw	r2,8(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     c84:	01000074 	movhi	r4,1
     c88:	210cc204 	addi	r4,r4,13064
     c8c:	00100bc0 	call	100bc <alt_up_ps2_open_dev>
     c90:	027fe1b4 	movhi	r9,65414
     c94:	4a7b5604 	addi	r9,r9,-4776
     c98:	4f13883a 	add	r9,r9,fp
     c9c:	48800015 	stw	r2,0(r9)
	if ( PS2_dev == NULL)
     ca0:	00ffe1b4 	movhi	r3,65414
     ca4:	18fb5604 	addi	r3,r3,-4776
     ca8:	1f07883a 	add	r3,r3,fp
     cac:	18800017 	ldw	r2,0(r3)
     cb0:	1004c03a 	cmpne	r2,r2,zero
     cb4:	1000061e 	bne	r2,zero,cd0 <main+0x440>
	{
		alt_printf ("Error: could not open PS2 device\n");
     cb8:	01000074 	movhi	r4,1
     cbc:	210cc604 	addi	r4,r4,13080
     cc0:	000ce240 	call	ce24 <alt_printf>
		return -1;
     cc4:	013fffc4 	movi	r4,-1
     cc8:	e13fff15 	stw	r4,-4(fp)
     ccc:	0001b106 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     cd0:	01000074 	movhi	r4,1
     cd4:	210ccf04 	addi	r4,r4,13116
     cd8:	000ce240 	call	ce24 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     cdc:	00c01f34 	movhi	r3,124
     ce0:	18e2e904 	addi	r3,r3,-29788
     ce4:	023fe1b4 	movhi	r8,65414
     ce8:	423b5604 	addi	r8,r8,-4776
     cec:	4711883a 	add	r8,r8,fp
     cf0:	40800017 	ldw	r2,0(r8)
     cf4:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     cf8:	027fe1b4 	movhi	r9,65414
     cfc:	4a7b5604 	addi	r9,r9,-4776
     d00:	4f13883a 	add	r9,r9,fp
     d04:	49000017 	ldw	r4,0(r9)
     d08:	01403fc4 	movi	r5,255
     d0c:	000fca00 	call	fca0 <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     d10:	00bfe1b4 	movhi	r2,65414
     d14:	10bb5604 	addi	r2,r2,-4776
     d18:	1705883a 	add	r2,r2,fp
     d1c:	11000017 	ldw	r4,0(r2)
     d20:	000fbf40 	call	fbf4 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     d24:	01000074 	movhi	r4,1
     d28:	210cd404 	addi	r4,r4,13136
     d2c:	000e5640 	call	e564 <alt_up_audio_open_dev>
     d30:	00ffe1b4 	movhi	r3,65414
     d34:	18fb5404 	addi	r3,r3,-4784
     d38:	1f07883a 	add	r3,r3,fp
     d3c:	18800015 	stw	r2,0(r3)
	if ( audio_dev == NULL)
     d40:	013fe1b4 	movhi	r4,65414
     d44:	213b5404 	addi	r4,r4,-4784
     d48:	2709883a 	add	r4,r4,fp
     d4c:	20800017 	ldw	r2,0(r4)
     d50:	1004c03a 	cmpne	r2,r2,zero
     d54:	1000061e 	bne	r2,zero,d70 <main+0x4e0>
	{
		alt_printf ("Error: could not open audio device\n");
     d58:	01000074 	movhi	r4,1
     d5c:	210cd704 	addi	r4,r4,13148
     d60:	000ce240 	call	ce24 <alt_printf>
		return -1;
     d64:	023fffc4 	movi	r8,-1
     d68:	e23fff15 	stw	r8,-4(fp)
     d6c:	00018906 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     d70:	01000074 	movhi	r4,1
     d74:	210ce004 	addi	r4,r4,13184
     d78:	000ce240 	call	ce24 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     d7c:	00c01f34 	movhi	r3,124
     d80:	18e2e904 	addi	r3,r3,-29788
     d84:	027fe1b4 	movhi	r9,65414
     d88:	4a7b5404 	addi	r9,r9,-4784
     d8c:	4f13883a 	add	r9,r9,fp
     d90:	48800017 	ldw	r2,0(r9)
     d94:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     d98:	01000074 	movhi	r4,1
     d9c:	210ce604 	addi	r4,r4,13208
     da0:	000ee540 	call	ee54 <alt_up_character_lcd_open_dev>
     da4:	00ffe1b4 	movhi	r3,65414
     da8:	18fb5504 	addi	r3,r3,-4780
     dac:	1f07883a 	add	r3,r3,fp
     db0:	18800015 	stw	r2,0(r3)
	if ( lcd_dev == NULL)
     db4:	013fe1b4 	movhi	r4,65414
     db8:	213b5504 	addi	r4,r4,-4780
     dbc:	2709883a 	add	r4,r4,fp
     dc0:	20800017 	ldw	r2,0(r4)
     dc4:	1004c03a 	cmpne	r2,r2,zero
     dc8:	1000061e 	bne	r2,zero,de4 <main+0x554>
	{
		alt_printf ("Error: could not open character LCD device\n");
     dcc:	01000074 	movhi	r4,1
     dd0:	210ceb04 	addi	r4,r4,13228
     dd4:	000ce240 	call	ce24 <alt_printf>
		return -1;
     dd8:	023fffc4 	movi	r8,-1
     ddc:	e23fff15 	stw	r8,-4(fp)
     de0:	00016c06 	br	1394 <main+0xb04>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     de4:	01000074 	movhi	r4,1
     de8:	210cf604 	addi	r4,r4,13272
     dec:	000ce240 	call	ce24 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     df0:	00c01f34 	movhi	r3,124
     df4:	18e2e904 	addi	r3,r3,-29788
     df8:	027fe1b4 	movhi	r9,65414
     dfc:	4a7b5504 	addi	r9,r9,-4780
     e00:	4f13883a 	add	r9,r9,fp
     e04:	48800017 	ldw	r2,0(r9)
     e08:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passing a pointer to up_dev to each ISR (using the context argument) as
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     e0c:	01800034 	movhi	r6,0
     e10:	31820c04 	addi	r6,r6,2096
     e14:	0009883a 	mov	r4,zero
     e18:	01401f34 	movhi	r5,124
     e1c:	2962e904 	addi	r5,r5,-29788
     e20:	000c85c0 	call	c85c <alt_irq_register>
	//alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     e24:	01800034 	movhi	r6,0
     e28:	3180d104 	addi	r6,r6,836
     e2c:	01000184 	movi	r4,6
     e30:	01401f34 	movhi	r5,124
     e34:	2962e904 	addi	r5,r5,-29788
     e38:	000c85c0 	call	c85c <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     e3c:	01800034 	movhi	r6,0
     e40:	31807d04 	addi	r6,r6,500
     e44:	010001c4 	movi	r4,7
     e48:	01401f34 	movhi	r5,124
     e4c:	2962e904 	addi	r5,r5,-29788
     e50:	000c85c0 	call	c85c <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     e54:	00801eb4 	movhi	r2,122
     e58:	1084a604 	addi	r2,r2,4760
     e5c:	013fe1b4 	movhi	r4,65414
     e60:	213b3604 	addi	r4,r4,-4904
     e64:	2709883a 	add	r4,r4,fp
     e68:	2087883a 	add	r3,r4,r2
     e6c:	01000074 	movhi	r4,1
     e70:	210d3004 	addi	r4,r4,13504
     e74:	20800017 	ldw	r2,0(r4)
     e78:	18800015 	stw	r2,0(r3)
     e7c:	20800117 	ldw	r2,4(r4)
     e80:	18800115 	stw	r2,4(r3)
     e84:	20800217 	ldw	r2,8(r4)
     e88:	18800215 	stw	r2,8(r3)
     e8c:	20800317 	ldw	r2,12(r4)
     e90:	18800315 	stw	r2,12(r3)
     e94:	20800417 	ldw	r2,16(r4)
     e98:	18800415 	stw	r2,16(r3)
     e9c:	20800517 	ldw	r2,20(r4)
     ea0:	18800515 	stw	r2,20(r3)
     ea4:	20800617 	ldw	r2,24(r4)
     ea8:	18800615 	stw	r2,24(r3)
     eac:	20800717 	ldw	r2,28(r4)
     eb0:	18800715 	stw	r2,28(r3)
     eb4:	20800817 	ldw	r2,32(r4)
     eb8:	18800815 	stw	r2,32(r3)
     ebc:	2080090b 	ldhu	r2,36(r4)
     ec0:	1880090d 	sth	r2,36(r3)
     ec4:	19000984 	addi	r4,r3,38
     ec8:	01800a84 	movi	r6,42
     ecc:	000b883a 	mov	r5,zero
     ed0:	00033440 	call	3344 <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     ed4:	00801eb4 	movhi	r2,122
     ed8:	1084ba04 	addi	r2,r2,4840
     edc:	023fe1b4 	movhi	r8,65414
     ee0:	423b3604 	addi	r8,r8,-4904
     ee4:	4711883a 	add	r8,r8,fp
     ee8:	4089883a 	add	r4,r8,r2
     eec:	00c00074 	movhi	r3,1
     ef0:	18cd4404 	addi	r3,r3,13584
     ef4:	18800017 	ldw	r2,0(r3)
     ef8:	20800015 	stw	r2,0(r4)
     efc:	18800117 	ldw	r2,4(r3)
     f00:	20800115 	stw	r2,4(r4)
     f04:	18800217 	ldw	r2,8(r3)
     f08:	20800215 	stw	r2,8(r4)
     f0c:	20000315 	stw	zero,12(r4)
     f10:	20000415 	stw	zero,16(r4)
	char text_bottom_VGA[20] = "Media Computer\0";
     f14:	00801eb4 	movhi	r2,122
     f18:	1084bf04 	addi	r2,r2,4860
     f1c:	027fe1b4 	movhi	r9,65414
     f20:	4a7b3604 	addi	r9,r9,-4904
     f24:	4f13883a 	add	r9,r9,fp
     f28:	4889883a 	add	r4,r9,r2
     f2c:	00c00074 	movhi	r3,1
     f30:	18cd4904 	addi	r3,r3,13604
     f34:	18800017 	ldw	r2,0(r3)
     f38:	20800015 	stw	r2,0(r4)
     f3c:	18800117 	ldw	r2,4(r3)
     f40:	20800115 	stw	r2,4(r4)
     f44:	18800217 	ldw	r2,8(r3)
     f48:	20800215 	stw	r2,8(r4)
     f4c:	18800317 	ldw	r2,12(r3)
     f50:	20800315 	stw	r2,12(r4)
     f54:	20000415 	stw	zero,16(r4)
	char text_ALTERA[10] = "ALTERA\0";
     f58:	00801eb4 	movhi	r2,122
     f5c:	1084c404 	addi	r2,r2,4880
     f60:	013fe1b4 	movhi	r4,65414
     f64:	213b3604 	addi	r4,r4,-4904
     f68:	2709883a 	add	r4,r4,fp
     f6c:	2087883a 	add	r3,r4,r2
     f70:	01000074 	movhi	r4,1
     f74:	210d4e04 	addi	r4,r4,13624
     f78:	20800017 	ldw	r2,0(r4)
     f7c:	18800015 	stw	r2,0(r3)
     f80:	20800117 	ldw	r2,4(r4)
     f84:	18800115 	stw	r2,4(r3)
     f88:	1800020d 	sth	zero,8(r3)
	char text_erase[10] = "      \0";
     f8c:	00801eb4 	movhi	r2,122
     f90:	1084c684 	addi	r2,r2,4890
     f94:	023fe1b4 	movhi	r8,65414
     f98:	423b3604 	addi	r8,r8,-4904
     f9c:	4711883a 	add	r8,r8,fp
     fa0:	4089883a 	add	r4,r8,r2
     fa4:	00c00074 	movhi	r3,1
     fa8:	18cd5104 	addi	r3,r3,13636
     fac:	1880000b 	ldhu	r2,0(r3)
     fb0:	2080000d 	sth	r2,0(r4)
     fb4:	1880008b 	ldhu	r2,2(r3)
     fb8:	2080008d 	sth	r2,2(r4)
     fbc:	1880010b 	ldhu	r2,4(r3)
     fc0:	2080010d 	sth	r2,4(r4)
     fc4:	1880018b 	ldhu	r2,6(r3)
     fc8:	2080018d 	sth	r2,6(r4)
     fcc:	2000020d 	sth	zero,8(r4)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     fd0:	027fe1b4 	movhi	r9,65414
     fd4:	4a7b5504 	addi	r9,r9,-4780
     fd8:	4f13883a 	add	r9,r9,fp
     fdc:	49000017 	ldw	r4,0(r9)
     fe0:	000b883a 	mov	r5,zero
     fe4:	000d883a 	mov	r6,zero
     fe8:	000efd00 	call	efd0 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     fec:	00801eb4 	movhi	r2,122
     ff0:	1084a604 	addi	r2,r2,4760
     ff4:	00ffe1b4 	movhi	r3,65414
     ff8:	18fb3604 	addi	r3,r3,-4904
     ffc:	1f07883a 	add	r3,r3,fp
    1000:	188b883a 	add	r5,r3,r2
    1004:	023fe1b4 	movhi	r8,65414
    1008:	423b5504 	addi	r8,r8,-4780
    100c:	4711883a 	add	r8,r8,fp
    1010:	41000017 	ldw	r4,0(r8)
    1014:	000ef0c0 	call	ef0c <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor
    1018:	027fe1b4 	movhi	r9,65414
    101c:	4a7b5504 	addi	r9,r9,-4780
    1020:	4f13883a 	add	r9,r9,fp
    1024:	49000017 	ldw	r4,0(r9)
    1028:	000f2380 	call	f238 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
    102c:	01000074 	movhi	r4,1
    1030:	210cfe04 	addi	r4,r4,13304
    1034:	00107980 	call	10798 <alt_up_pixel_buffer_dma_open_dev>
    1038:	d0a7f915 	stw	r2,-24604(gp)
	if ( pixel_buffer_dev == NULL)
    103c:	d0a7f917 	ldw	r2,-24604(gp)
    1040:	1004c03a 	cmpne	r2,r2,zero
    1044:	1000041e 	bne	r2,zero,1058 <main+0x7c8>
		alt_printf ("Error: could not open pixel buffer device\n");
    1048:	01000074 	movhi	r4,1
    104c:	210d0404 	addi	r4,r4,13328
    1050:	000ce240 	call	ce24 <alt_printf>
    1054:	00000306 	br	1064 <main+0x7d4>
	else
		alt_printf ("Opened pixel buffer device\n");
    1058:	01000074 	movhi	r4,1
    105c:	210d0f04 	addi	r4,r4,13372
    1060:	000ce240 	call	ce24 <alt_printf>
	color = 0x187F;		// a medium blue color
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
		blue_y2 * 4, color, 0);
*/
	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
    1064:	01000074 	movhi	r4,1
    1068:	210d1604 	addi	r4,r4,13400
    106c:	00105180 	call	10518 <alt_up_char_buffer_open_dev>
    1070:	00ffe1b4 	movhi	r3,65414
    1074:	18fb5304 	addi	r3,r3,-4788
    1078:	1f07883a 	add	r3,r3,fp
    107c:	18800015 	stw	r2,0(r3)
	if ( char_buffer_dev == NULL)
    1080:	013fe1b4 	movhi	r4,65414
    1084:	213b5304 	addi	r4,r4,-4788
    1088:	2709883a 	add	r4,r4,fp
    108c:	20800017 	ldw	r2,0(r4)
    1090:	1004c03a 	cmpne	r2,r2,zero
    1094:	1000041e 	bne	r2,zero,10a8 <main+0x818>
		alt_printf ("Error: could not open character buffer device\n");
    1098:	01000074 	movhi	r4,1
    109c:	210d1c04 	addi	r4,r4,13424
    10a0:	000ce240 	call	ce24 <alt_printf>
    10a4:	00000306 	br	10b4 <main+0x824>
	else
		alt_printf ("Opened character buffer device\n");
    10a8:	01000074 	movhi	r4,1
    10ac:	210d2804 	addi	r4,r4,13472
    10b0:	000ce240 	call	ce24 <alt_printf>

	char_buffer_x = 79; char_buffer_y = 59;
	ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars /; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
	alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
*/
	print_screen(pixel_buffer_dev, char_buffer_dev);
    10b4:	d127f917 	ldw	r4,-24604(gp)
    10b8:	023fe1b4 	movhi	r8,65414
    10bc:	423b5304 	addi	r8,r8,-4788
    10c0:	4711883a 	add	r8,r8,fp
    10c4:	41400017 	ldw	r5,0(r8)
    10c8:	0001ef40 	call	1ef4 <print_screen>
		if(byte2 > 0 || byte3 > 0)
		{
			erase_previous_mouse_position(pixel_buffer_dev, char_buffer_dev);
		}

*/		if(count == 4){
    10cc:	00800074 	movhi	r2,1
    10d0:	109e3504 	addi	r2,r2,30932
    10d4:	10800017 	ldw	r2,0(r2)
    10d8:	10800118 	cmpnei	r2,r2,4
    10dc:	1000341e 	bne	r2,zero,11b0 <main+0x920>
			getMouseState();
    10e0:	0001d180 	call	1d18 <getMouseState>
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, prev_x_mouse, prev_y_mouse,
    10e4:	d167f917 	ldw	r5,-24604(gp)
    10e8:	d1a7f317 	ldw	r6,-24628(gp)
    10ec:	d1e7ed17 	ldw	r7,-24652(gp)
    10f0:	d0e7f317 	ldw	r3,-24628(gp)
    10f4:	d0a7ec17 	ldw	r2,-24656(gp)
    10f8:	1891883a 	add	r8,r3,r2
    10fc:	d0e7ed17 	ldw	r3,-24652(gp)
    1100:	d0a7ec17 	ldw	r2,-24656(gp)
    1104:	1885883a 	add	r2,r3,r2
    1108:	027fe1b4 	movhi	r9,65414
    110c:	4a7b4384 	addi	r9,r9,-4850
    1110:	4f13883a 	add	r9,r9,fp
    1114:	48c0000f 	ldh	r3,0(r9)
    1118:	027fe1b4 	movhi	r9,65414
    111c:	4a7b4304 	addi	r9,r9,-4852
    1120:	4f13883a 	add	r9,r9,fp
    1124:	49000003 	ldbu	r4,0(r9)
    1128:	d8800015 	stw	r2,0(sp)
    112c:	d8c00115 	stw	r3,4(sp)
    1130:	d9000215 	stw	r4,8(sp)
    1134:	2809883a 	mov	r4,r5
    1138:	300b883a 	mov	r5,r6
    113c:	380d883a 	mov	r6,r7
    1140:	400f883a 	mov	r7,r8
    1144:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
						prev_x_mouse + mouse_width, prev_y_mouse + mouse_width, trans_color, buffer_type);

			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, x_mouse, y_mouse,
    1148:	d127f917 	ldw	r4,-24604(gp)
    114c:	d167fa17 	ldw	r5,-24600(gp)
    1150:	d1a7ee17 	ldw	r6,-24648(gp)
    1154:	d0e7fa17 	ldw	r3,-24600(gp)
    1158:	d0a7ec17 	ldw	r2,-24656(gp)
    115c:	188f883a 	add	r7,r3,r2
    1160:	d0e7ee17 	ldw	r3,-24648(gp)
    1164:	d0a7ec17 	ldw	r2,-24656(gp)
    1168:	1885883a 	add	r2,r3,r2
    116c:	023fe1b4 	movhi	r8,65414
    1170:	423b4304 	addi	r8,r8,-4852
    1174:	4711883a 	add	r8,r8,fp
    1178:	40c00003 	ldbu	r3,0(r8)
    117c:	d8800015 	stw	r2,0(sp)
    1180:	00bfffc4 	movi	r2,-1
    1184:	d8800115 	stw	r2,4(sp)
    1188:	d8c00215 	stw	r3,8(sp)
    118c:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>

					//alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);

					//buffer_type = 1 - buffer_type; //toggle back and front buffer

			prev_x_mouse = x_mouse;
    1190:	d0a7fa17 	ldw	r2,-24600(gp)
    1194:	d0a7f315 	stw	r2,-24628(gp)
			prev_y_mouse = y_mouse;
    1198:	d0a7ee17 	ldw	r2,-24648(gp)
    119c:	d0a7ed15 	stw	r2,-24652(gp)
			//byte1 = 0; byte2 = 0; byte3 = 0;
			count = 1;
    11a0:	00c00074 	movhi	r3,1
    11a4:	18de3504 	addi	r3,r3,30932
    11a8:	00800044 	movi	r2,1
    11ac:	18800015 	stw	r2,0(r3)
        }

		// check if either KEY1 or KEY2 is pressed for record and play
        check_KEYs(pixel_buffer_dev, &record, &flag_play, &flag_denoise, &buffer_index, KEY_dev, audio_dev);
    11b0:	d127f917 	ldw	r4,-24604(gp)
    11b4:	d1a7f504 	addi	r6,gp,-24620
    11b8:	d1e7ef04 	addi	r7,gp,-24644
    11bc:	027fe1b4 	movhi	r9,65414
    11c0:	4a7b5a04 	addi	r9,r9,-4760
    11c4:	e24b883a 	add	r5,fp,r9
    11c8:	00ffe1b4 	movhi	r3,65414
    11cc:	18fb5b04 	addi	r3,r3,-4756
    11d0:	e0c5883a 	add	r2,fp,r3
    11d4:	d8800015 	stw	r2,0(sp)
    11d8:	023fe1b4 	movhi	r8,65414
    11dc:	423b5904 	addi	r8,r8,-4764
    11e0:	4711883a 	add	r8,r8,fp
    11e4:	40800017 	ldw	r2,0(r8)
    11e8:	d8800115 	stw	r2,4(sp)
    11ec:	027fe1b4 	movhi	r9,65414
    11f0:	4a7b5404 	addi	r9,r9,-4784
    11f4:	4f13883a 	add	r9,r9,fp
    11f8:	48800017 	ldw	r2,0(r9)
    11fc:	d8800215 	stw	r2,8(sp)
    1200:	000170c0 	call	170c <check_KEYs>
		alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
*/
		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */

		//VGA screen update
		if((byte2 > 0 || byte3 > 0))
    1204:	00800074 	movhi	r2,1
    1208:	109e3804 	addi	r2,r2,30944
    120c:	10800003 	ldbu	r2,0(r2)
    1210:	10803fcc 	andi	r2,r2,255
    1214:	1004c03a 	cmpne	r2,r2,zero
    1218:	1000031e 	bne	r2,zero,1228 <main+0x998>
    121c:	00800074 	movhi	r2,1
    1220:	109e3844 	addi	r2,r2,30945
    1224:	10800003 	ldbu	r2,0(r2)
						prev_y_mouse = prev_y_mouse_front;
					}*/
		}

		// check if either Record, Play or Echo box is clicked
		if(check_for_click(x1_box_record, x2_box_record, y1_boxes, y2_boxes)){
    1228:	00bfe1b4 	movhi	r2,65414
    122c:	10bb4004 	addi	r2,r2,-4864
    1230:	1705883a 	add	r2,r2,fp
    1234:	11000017 	ldw	r4,0(r2)
    1238:	00ffe1b4 	movhi	r3,65414
    123c:	18fb3f04 	addi	r3,r3,-4868
    1240:	1f07883a 	add	r3,r3,fp
    1244:	19400017 	ldw	r5,0(r3)
    1248:	023fe1b4 	movhi	r8,65414
    124c:	423b4204 	addi	r8,r8,-4856
    1250:	4711883a 	add	r8,r8,fp
    1254:	41800017 	ldw	r6,0(r8)
    1258:	027fe1b4 	movhi	r9,65414
    125c:	4a7b4104 	addi	r9,r9,-4860
    1260:	4f13883a 	add	r9,r9,fp
    1264:	49c00017 	ldw	r7,0(r9)
    1268:	00016800 	call	1680 <check_for_click>
    126c:	10803fcc 	andi	r2,r2,255
    1270:	1005003a 	cmpeq	r2,r2,zero
    1274:	1000051e 	bne	r2,zero,128c <main+0x9fc>
			record = 1;
    1278:	00800044 	movi	r2,1
    127c:	00ffe1b4 	movhi	r3,65414
    1280:	18fb5a04 	addi	r3,r3,-4760
    1284:	1f07883a 	add	r3,r3,fp
    1288:	18800015 	stw	r2,0(r3)
		}
		if(check_for_click(x1_box_play, x2_box_play, y1_boxes, y2_boxes)){
    128c:	023fe1b4 	movhi	r8,65414
    1290:	423b3e04 	addi	r8,r8,-4872
    1294:	4711883a 	add	r8,r8,fp
    1298:	41000017 	ldw	r4,0(r8)
    129c:	027fe1b4 	movhi	r9,65414
    12a0:	4a7b3d04 	addi	r9,r9,-4876
    12a4:	4f13883a 	add	r9,r9,fp
    12a8:	49400017 	ldw	r5,0(r9)
    12ac:	00bfe1b4 	movhi	r2,65414
    12b0:	10bb4204 	addi	r2,r2,-4856
    12b4:	1705883a 	add	r2,r2,fp
    12b8:	11800017 	ldw	r6,0(r2)
    12bc:	00ffe1b4 	movhi	r3,65414
    12c0:	18fb4104 	addi	r3,r3,-4860
    12c4:	1f07883a 	add	r3,r3,fp
    12c8:	19c00017 	ldw	r7,0(r3)
    12cc:	00016800 	call	1680 <check_for_click>
    12d0:	10803fcc 	andi	r2,r2,255
    12d4:	1005003a 	cmpeq	r2,r2,zero
    12d8:	1000051e 	bne	r2,zero,12f0 <main+0xa60>
			play = 1;
    12dc:	00800044 	movi	r2,1
    12e0:	013fe1b4 	movhi	r4,65414
    12e4:	213b3a04 	addi	r4,r4,-4888
    12e8:	2709883a 	add	r4,r4,fp
    12ec:	20800015 	stw	r2,0(r4)
		}
		if(check_for_click(x1_box_echo, x2_box_echo, y1_boxes, y2_boxes)){
    12f0:	023fe1b4 	movhi	r8,65414
    12f4:	423b3c04 	addi	r8,r8,-4880
    12f8:	4711883a 	add	r8,r8,fp
    12fc:	41000017 	ldw	r4,0(r8)
    1300:	027fe1b4 	movhi	r9,65414
    1304:	4a7b3b04 	addi	r9,r9,-4884
    1308:	4f13883a 	add	r9,r9,fp
    130c:	49400017 	ldw	r5,0(r9)
    1310:	00bfe1b4 	movhi	r2,65414
    1314:	10bb4204 	addi	r2,r2,-4856
    1318:	1705883a 	add	r2,r2,fp
    131c:	11800017 	ldw	r6,0(r2)
    1320:	00ffe1b4 	movhi	r3,65414
    1324:	18fb4104 	addi	r3,r3,-4860
    1328:	1f07883a 	add	r3,r3,fp
    132c:	19c00017 	ldw	r7,0(r3)
    1330:	00016800 	call	1680 <check_for_click>
    1334:	10803fcc 	andi	r2,r2,255
    1338:	1005003a 	cmpeq	r2,r2,zero
    133c:	1000021e 	bne	r2,zero,1348 <main+0xab8>
			echo = 1;
    1340:	00800044 	movi	r2,1
    1344:	d0a7eb15 	stw	r2,-24660(gp)
		}

		HEX_PS2 (byte1, byte2, byte3);
    1348:	00800074 	movhi	r2,1
    134c:	109e38c4 	addi	r2,r2,30947
    1350:	10800003 	ldbu	r2,0(r2)
    1354:	11003fcc 	andi	r4,r2,255
    1358:	00800074 	movhi	r2,1
    135c:	109e3804 	addi	r2,r2,30944
    1360:	10800003 	ldbu	r2,0(r2)
    1364:	11403fcc 	andi	r5,r2,255
    1368:	00800074 	movhi	r2,1
    136c:	109e3844 	addi	r2,r2,30945
    1370:	10800003 	ldbu	r2,0(r2)
    1374:	11803fcc 	andi	r6,r2,255
    1378:	00013ac0 	call	13ac <HEX_PS2>
		show_mouse_buttons_states_on_Red_LEDs (byte1);
    137c:	00800074 	movhi	r2,1
    1380:	109e38c4 	addi	r2,r2,30947
    1384:	10800003 	ldbu	r2,0(r2)
    1388:	11003fcc 	andi	r4,r2,255
    138c:	00015880 	call	1588 <show_mouse_buttons_states_on_Red_LEDs>
		//timeout = 0;
	}
    1390:	003f4e06 	br	10cc <main+0x83c>
    1394:	e0bfff17 	ldw	r2,-4(fp)
}
    1398:	e037883a 	mov	sp,fp
    139c:	dfc00117 	ldw	ra,4(sp)
    13a0:	df000017 	ldw	fp,0(sp)
    13a4:	dec00204 	addi	sp,sp,8
    13a8:	f800283a 	ret

000013ac <HEX_PS2>:
 * Subroutine to show a string of HEX data on the HEX displays
 * Note that we are using pointer accesses for the HEX displays parallel port. We could
 * also use the HAL functions for these ports instead
****************************************************************************************/
void HEX_PS2(unsigned char b1, unsigned char b2, unsigned char b3)
{
    13ac:	deffef04 	addi	sp,sp,-68
    13b0:	dfc01015 	stw	ra,64(sp)
    13b4:	df000f15 	stw	fp,60(sp)
    13b8:	df000f04 	addi	fp,sp,60
    13bc:	e13ffd05 	stb	r4,-12(fp)
    13c0:	e17ffe05 	stb	r5,-8(fp)
    13c4:	e1bfff05 	stb	r6,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    13c8:	00840034 	movhi	r2,4096
    13cc:	10800804 	addi	r2,r2,32
    13d0:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    13d4:	00840034 	movhi	r2,4096
    13d8:	10800c04 	addi	r2,r2,48
    13dc:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    13e0:	00800074 	movhi	r2,1
    13e4:	108d5384 	addi	r2,r2,13646
    13e8:	e13ff704 	addi	r4,fp,-36
    13ec:	100b883a 	mov	r5,r2
    13f0:	01800404 	movi	r6,16
    13f4:	00032a40 	call	32a4 <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    13f8:	e03ffb05 	stb	zero,-20(fp)
    13fc:	e03ffb45 	stb	zero,-19(fp)
    1400:	e03ffb85 	stb	zero,-18(fp)
    1404:	e03ffbc5 	stb	zero,-17(fp)
    1408:	e03ffc05 	stb	zero,-16(fp)
    140c:	e03ffc45 	stb	zero,-15(fp)
    1410:	e03ffc85 	stb	zero,-14(fp)
    1414:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    1418:	e0bffd03 	ldbu	r2,-12(fp)
    141c:	1006943a 	slli	r3,r2,16
    1420:	e0bffe03 	ldbu	r2,-8(fp)
    1424:	1004923a 	slli	r2,r2,8
    1428:	1886b03a 	or	r3,r3,r2
    142c:	e0bfff03 	ldbu	r2,-4(fp)
    1430:	1884b03a 	or	r2,r3,r2
    1434:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
    1438:	e03ff115 	stw	zero,-60(fp)
    143c:	00001306 	br	148c <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    1440:	e0bff417 	ldw	r2,-48(fp)
    1444:	108003cc 	andi	r2,r2,15
    1448:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
    144c:	e0fff317 	ldw	r3,-52(fp)
    1450:	e0bff704 	addi	r2,fp,-36
    1454:	10c5883a 	add	r2,r2,r3
    1458:	10800003 	ldbu	r2,0(r2)
    145c:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
    1460:	e0fff117 	ldw	r3,-60(fp)
    1464:	e0bffb04 	addi	r2,fp,-20
    1468:	10c7883a 	add	r3,r2,r3
    146c:	e0bff203 	ldbu	r2,-56(fp)
    1470:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
    1474:	e0bff417 	ldw	r2,-48(fp)
    1478:	1004d13a 	srli	r2,r2,4
    147c:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
    1480:	e0bff117 	ldw	r2,-60(fp)
    1484:	10800044 	addi	r2,r2,1
    1488:	e0bff115 	stw	r2,-60(fp)
    148c:	e0bff117 	ldw	r2,-60(fp)
    1490:	10800190 	cmplti	r2,r2,6
    1494:	103fea1e 	bne	r2,zero,1440 <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1498:	e0bffb04 	addi	r2,fp,-20
    149c:	10c00017 	ldw	r3,0(r2)
    14a0:	e0bff617 	ldw	r2,-40(fp)
    14a4:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    14a8:	e0bffb04 	addi	r2,fp,-20
    14ac:	10800104 	addi	r2,r2,4
    14b0:	10c00017 	ldw	r3,0(r2)
    14b4:	e0bff517 	ldw	r2,-44(fp)
    14b8:	10c00015 	stw	r3,0(r2)
}
    14bc:	e037883a 	mov	sp,fp
    14c0:	dfc00117 	ldw	ra,4(sp)
    14c4:	df000017 	ldw	fp,0(sp)
    14c8:	dec00204 	addi	sp,sp,8
    14cc:	f800283a 	ret

000014d0 <PS2_Init>:
void PS2_Init(alt_up_ps2_dev *PS2_dev)
{
    14d0:	defffc04 	addi	sp,sp,-16
    14d4:	dfc00315 	stw	ra,12(sp)
    14d8:	df000215 	stw	fp,8(sp)
    14dc:	df000204 	addi	fp,sp,8
    14e0:	e13fff15 	stw	r4,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    14e4:	e13fff17 	ldw	r4,-4(fp)
    14e8:	e17ffe04 	addi	r5,fp,-8
    14ec:	000fea40 	call	fea4 <alt_up_ps2_read_data_byte>
    14f0:	1004c03a 	cmpne	r2,r2,zero
    14f4:	10001f1e 	bne	r2,zero,1574 <PS2_Init+0xa4>
	{
		/* allows save the last three bytes of data */
		byte1 = byte2;
    14f8:	00800074 	movhi	r2,1
    14fc:	109e3804 	addi	r2,r2,30944
    1500:	10c00003 	ldbu	r3,0(r2)
    1504:	00800074 	movhi	r2,1
    1508:	109e38c4 	addi	r2,r2,30947
    150c:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
    1510:	00800074 	movhi	r2,1
    1514:	109e3844 	addi	r2,r2,30945
    1518:	10c00003 	ldbu	r3,0(r2)
    151c:	00800074 	movhi	r2,1
    1520:	109e3804 	addi	r2,r2,30944
    1524:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
    1528:	e0fffe03 	ldbu	r3,-8(fp)
    152c:	00800074 	movhi	r2,1
    1530:	109e3844 	addi	r2,r2,30945
    1534:	10c00005 	stb	r3,0(r2)

		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) )
    1538:	00800074 	movhi	r2,1
    153c:	109e3804 	addi	r2,r2,30944
    1540:	10800003 	ldbu	r2,0(r2)
    1544:	10803fcc 	andi	r2,r2,255
    1548:	10802a98 	cmpnei	r2,r2,170
    154c:	1000091e 	bne	r2,zero,1574 <PS2_Init+0xa4>
    1550:	00800074 	movhi	r2,1
    1554:	109e3844 	addi	r2,r2,30945
    1558:	10800003 	ldbu	r2,0(r2)
    155c:	10803fcc 	andi	r2,r2,255
    1560:	1004c03a 	cmpne	r2,r2,zero
    1564:	1000031e 	bne	r2,zero,1574 <PS2_Init+0xa4>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (PS2_dev, (unsigned char) 0xF4);
    1568:	e13fff17 	ldw	r4,-4(fp)
    156c:	01403d04 	movi	r5,244
    1570:	000fca00 	call	fca0 <alt_up_ps2_write_data_byte>
	}
	return;
}
    1574:	e037883a 	mov	sp,fp
    1578:	dfc00117 	ldw	ra,4(sp)
    157c:	df000017 	ldw	fp,0(sp)
    1580:	dec00204 	addi	sp,sp,8
    1584:	f800283a 	ret

00001588 <show_mouse_buttons_states_on_Red_LEDs>:
void show_mouse_buttons_states_on_Red_LEDs(unsigned char b1)
{
    1588:	defffe04 	addi	sp,sp,-8
    158c:	df000115 	stw	fp,4(sp)
    1590:	df000104 	addi	fp,sp,4
    1594:	e13fff05 	stb	r4,-4(fp)
	/* writing mouse buttons states on Red LEDs 1, 2 and 3 */

	if(b1 % 2){ /* left button is in b1[0] */
    1598:	e0bfff03 	ldbu	r2,-4(fp)
    159c:	1080004c 	andi	r2,r2,1
    15a0:	10803fcc 	andi	r2,r2,255
    15a4:	1005003a 	cmpeq	r2,r2,zero
    15a8:	1000071e 	bne	r2,zero,15c8 <show_mouse_buttons_states_on_Red_LEDs+0x40>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x4);
    15ac:	00801f34 	movhi	r2,124
    15b0:	10a2e904 	addi	r2,r2,-29788
    15b4:	10800217 	ldw	r2,8(r2)
    15b8:	10800a17 	ldw	r2,40(r2)
    15bc:	1007883a 	mov	r3,r2
    15c0:	00800104 	movi	r2,4
    15c4:	18800035 	stwio	r2,0(r3)
	}

	if((b1 >> 1) % 2){ /* right button is in b1[1] */
    15c8:	e0bfff03 	ldbu	r2,-4(fp)
    15cc:	1004d07a 	srli	r2,r2,1
    15d0:	10803fcc 	andi	r2,r2,255
    15d4:	1080004c 	andi	r2,r2,1
    15d8:	10803fcc 	andi	r2,r2,255
    15dc:	1005003a 	cmpeq	r2,r2,zero
    15e0:	1000071e 	bne	r2,zero,1600 <show_mouse_buttons_states_on_Red_LEDs+0x78>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x1);
    15e4:	00801f34 	movhi	r2,124
    15e8:	10a2e904 	addi	r2,r2,-29788
    15ec:	10800217 	ldw	r2,8(r2)
    15f0:	10800a17 	ldw	r2,40(r2)
    15f4:	1007883a 	mov	r3,r2
    15f8:	00800044 	movi	r2,1
    15fc:	18800035 	stwio	r2,0(r3)
	}

	if((b1 >> 2) % 2){ /* middle button is in b1[2] */
    1600:	e0bfff03 	ldbu	r2,-4(fp)
    1604:	1004d0ba 	srli	r2,r2,2
    1608:	10803fcc 	andi	r2,r2,255
    160c:	1080004c 	andi	r2,r2,1
    1610:	10803fcc 	andi	r2,r2,255
    1614:	1005003a 	cmpeq	r2,r2,zero
    1618:	1000071e 	bne	r2,zero,1638 <show_mouse_buttons_states_on_Red_LEDs+0xb0>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0x2);
    161c:	00801f34 	movhi	r2,124
    1620:	10a2e904 	addi	r2,r2,-29788
    1624:	10800217 	ldw	r2,8(r2)
    1628:	10800a17 	ldw	r2,40(r2)
    162c:	1007883a 	mov	r3,r2
    1630:	00800084 	movi	r2,2
    1634:	18800035 	stwio	r2,0(r3)
	}

    if((b1 != 12) && (b1 != 10) && (b1 != 9)){
    1638:	e0bfff03 	ldbu	r2,-4(fp)
    163c:	10800320 	cmpeqi	r2,r2,12
    1640:	10000b1e 	bne	r2,zero,1670 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
    1644:	e0bfff03 	ldbu	r2,-4(fp)
    1648:	108002a0 	cmpeqi	r2,r2,10
    164c:	1000081e 	bne	r2,zero,1670 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
    1650:	e0bfff03 	ldbu	r2,-4(fp)
    1654:	10800260 	cmpeqi	r2,r2,9
    1658:	1000051e 	bne	r2,zero,1670 <show_mouse_buttons_states_on_Red_LEDs+0xe8>
		alt_up_parallel_port_write_data (up_dev.red_LEDs_dev, 0);
    165c:	00801f34 	movhi	r2,124
    1660:	10a2e904 	addi	r2,r2,-29788
    1664:	10800217 	ldw	r2,8(r2)
    1668:	10800a17 	ldw	r2,40(r2)
    166c:	10000035 	stwio	zero,0(r2)
	}

}
    1670:	e037883a 	mov	sp,fp
    1674:	df000017 	ldw	fp,0(sp)
    1678:	dec00104 	addi	sp,sp,4
    167c:	f800283a 	ret

00001680 <check_for_click>:
alt_u8 check_for_click(unsigned int start_x_region, unsigned int end_x_region, unsigned int start_y_region, unsigned int end_y_region) {
    1680:	defffa04 	addi	sp,sp,-24
    1684:	df000515 	stw	fp,20(sp)
    1688:	df000504 	addi	fp,sp,20
    168c:	e13ffb15 	stw	r4,-20(fp)
    1690:	e17ffc15 	stw	r5,-16(fp)
    1694:	e1bffd15 	stw	r6,-12(fp)
    1698:	e1fffe15 	stw	r7,-8(fp)
	if (left_button_click && x_mouse > start_x_region && x_mouse < end_x_region
    169c:	d0a7f717 	ldw	r2,-24612(gp)
    16a0:	1005003a 	cmpeq	r2,r2,zero
    16a4:	1000131e 	bne	r2,zero,16f4 <check_for_click+0x74>
    16a8:	d0a7fa17 	ldw	r2,-24600(gp)
    16ac:	1007883a 	mov	r3,r2
    16b0:	e0bffb17 	ldw	r2,-20(fp)
    16b4:	10c00f2e 	bgeu	r2,r3,16f4 <check_for_click+0x74>
    16b8:	d0a7fa17 	ldw	r2,-24600(gp)
    16bc:	1007883a 	mov	r3,r2
    16c0:	e0bffc17 	ldw	r2,-16(fp)
    16c4:	18800b2e 	bgeu	r3,r2,16f4 <check_for_click+0x74>
    16c8:	d0a7ee17 	ldw	r2,-24648(gp)
    16cc:	1007883a 	mov	r3,r2
    16d0:	e0bffd17 	ldw	r2,-12(fp)
    16d4:	10c0072e 	bgeu	r2,r3,16f4 <check_for_click+0x74>
    16d8:	d0a7ee17 	ldw	r2,-24648(gp)
    16dc:	1007883a 	mov	r3,r2
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	1880032e 	bgeu	r3,r2,16f4 <check_for_click+0x74>
			&& y_mouse > start_y_region && y_mouse < end_y_region) {
		return 1;
    16e8:	00800044 	movi	r2,1
    16ec:	e0bfff15 	stw	r2,-4(fp)
    16f0:	00000106 	br	16f8 <check_for_click+0x78>
	} else {
		return 0;
    16f4:	e03fff15 	stw	zero,-4(fp)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
	}
}
    16fc:	e037883a 	mov	sp,fp
    1700:	df000017 	ldw	fp,0(sp)
    1704:	dec00104 	addi	sp,sp,4
    1708:	f800283a 	ret

0000170c <check_KEYs>:
void check_KEYs(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, int* KEY1, int* KEY2, int* KEY3, int* counter, alt_up_parallel_port_dev* KEY_dev, alt_up_audio_dev* audio_dev)
{
    170c:	defff604 	addi	sp,sp,-40
    1710:	dfc00915 	stw	ra,36(sp)
    1714:	df000815 	stw	fp,32(sp)
    1718:	dc000715 	stw	r16,28(sp)
    171c:	df000704 	addi	fp,sp,28
    1720:	e13ffc15 	stw	r4,-16(fp)
    1724:	e17ffd15 	stw	r5,-12(fp)
    1728:	e1bffe15 	stw	r6,-8(fp)
    172c:	e1ffff15 	stw	r7,-4(fp)
	int KEY_value;

	KEY_value = alt_up_parallel_port_read_data(KEY_dev);
    1730:	e0800417 	ldw	r2,16(fp)
    1734:	10800a17 	ldw	r2,40(r2)
    1738:	10800037 	ldwio	r2,0(r2)
    173c:	e0bffb15 	stw	r2,-20(fp)

	while (alt_up_parallel_port_read_data(KEY_dev));	// wait for pushbutton KEY release
    1740:	e0800417 	ldw	r2,16(fp)
    1744:	10800a17 	ldw	r2,40(r2)
    1748:	10800037 	ldwio	r2,0(r2)
    174c:	1004c03a 	cmpne	r2,r2,zero
    1750:	103ffb1e 	bne	r2,zero,1740 <check_KEYs+0x34>

	if (KEY_value == 0x8)					// check KEY1
    1754:	e0bffb17 	ldw	r2,-20(fp)
    1758:	10800218 	cmpnei	r2,r2,8
    175c:	1000091e 	bne	r2,zero,1784 <check_KEYs+0x78>
	{
		// reset counter to start recording
		*counter = 0;
    1760:	e0800317 	ldw	r2,12(fp)
    1764:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1768:	e1000517 	ldw	r4,20(fp)
    176c:	000e7540 	call	e754 <alt_up_audio_reset_audio_core>
		alt_up_audio_enable_read_interrupt (audio_dev);
    1770:	e1000517 	ldw	r4,20(fp)
    1774:	000e5a40 	call	e5a4 <alt_up_audio_enable_read_interrupt>
		*KEY1 = 1;
    1778:	e0fffd17 	ldw	r3,-12(fp)
    177c:	00800044 	movi	r2,1
    1780:	18800015 	stw	r2,0(r3)

	}
	if(flag_plot)
    1784:	d0a7ea17 	ldw	r2,-24664(gp)
    1788:	1005003a 	cmpeq	r2,r2,zero
    178c:	1000181e 	bne	r2,zero,17f0 <check_KEYs+0xe4>
	{
		alt_timestamp_start();
    1790:	000e3fc0 	call	e3fc <alt_timestamp_start>

		plot_audio(pixel_buffer_dev, N);
    1794:	d0a00517 	ldw	r2,-32748(gp)
    1798:	100b883a 	mov	r5,r2
    179c:	e13ffc17 	ldw	r4,-16(fp)
    17a0:	00024d40 	call	24d4 <plot_audio>

		printf("Time taken to remove noise from the noisy sound was %3.f seconds\n", (float)alt_timestamp() / (float)alt_timestamp_freq());
    17a4:	000e4a00 	call	e4a0 <alt_timestamp>
    17a8:	1009883a 	mov	r4,r2
    17ac:	0002bf00 	call	2bf0 <__floatunsisf>
    17b0:	1021883a 	mov	r16,r2
    17b4:	000e53c0 	call	e53c <alt_timestamp_freq>
    17b8:	1009883a 	mov	r4,r2
    17bc:	0002bf00 	call	2bf0 <__floatunsisf>
    17c0:	8085fff2 	custom	255,r2,r16,r2
    17c4:	1009883a 	mov	r4,r2
    17c8:	0002b9c0 	call	2b9c <__extendsfdf2>
    17cc:	100d883a 	mov	r6,r2
    17d0:	180f883a 	mov	r7,r3
    17d4:	01000074 	movhi	r4,1
    17d8:	210d5804 	addi	r4,r4,13664
    17dc:	300b883a 	mov	r5,r6
    17e0:	380d883a 	mov	r6,r7
    17e4:	00033dc0 	call	33dc <printf>
		flag_plot = 0;
    17e8:	d027ea15 	stw	zero,-24664(gp)
    17ec:	00003d06 	br	18e4 <check_KEYs+0x1d8>

	}
	else if (KEY_value == 0x4)				// check KEY2
    17f0:	e0bffb17 	ldw	r2,-20(fp)
    17f4:	10800118 	cmpnei	r2,r2,4
    17f8:	1000091e 	bne	r2,zero,1820 <check_KEYs+0x114>
	{
		// reset counter to start playback
		*counter = 0;
    17fc:	e0800317 	ldw	r2,12(fp)
    1800:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1804:	e1000517 	ldw	r4,20(fp)
    1808:	000e7540 	call	e754 <alt_up_audio_reset_audio_core>
		flag_play = 1;
    180c:	00800044 	movi	r2,1
    1810:	d0a7f515 	stw	r2,-24620(gp)
		alt_up_audio_enable_write_interrupt (audio_dev);
    1814:	e1000517 	ldw	r4,20(fp)
    1818:	000e6400 	call	e640 <alt_up_audio_enable_write_interrupt>
    181c:	00003106 	br	18e4 <check_KEYs+0x1d8>
	}
	else if (KEY_value == 0x1)				// check KEY3
    1820:	e0bffb17 	ldw	r2,-20(fp)
    1824:	10800058 	cmpnei	r2,r2,1
    1828:	10002e1e 	bne	r2,zero,18e4 <check_KEYs+0x1d8>
	{

		// reset counter to start playback
		*counter = 0;
    182c:	e0800317 	ldw	r2,12(fp)
    1830:	10000015 	stw	zero,0(r2)
		alt_up_audio_reset_audio_core(audio_dev);
    1834:	e1000517 	ldw	r4,20(fp)
    1838:	000e7540 	call	e754 <alt_up_audio_reset_audio_core>
		alt_timestamp_start();
    183c:	000e3fc0 	call	e3fc <alt_timestamp_start>

		int j = 0;
    1840:	e03ffa15 	stw	zero,-24(fp)
		int k = 0;
    1844:	e03ff915 	stw	zero,-28(fp)
		for(j = 0; j < BUF_SIZE; j++){
    1848:	e03ffa15 	stw	zero,-24(fp)
    184c:	00000306 	br	185c <check_KEYs+0x150>
    1850:	e0bffa17 	ldw	r2,-24(fp)
    1854:	10800044 	addi	r2,r2,1
    1858:	e0bffa15 	stw	r2,-24(fp)
    185c:	e0fffa17 	ldw	r3,-24(fp)
    1860:	00800234 	movhi	r2,8
    1864:	10a847c4 	addi	r2,r2,-24289
    1868:	10fff90e 	bge	r2,r3,1850 <check_KEYs+0x144>
		//	play_r_buf[j] = ALT_CI_FIR_FILTER_0(record_r_buf[j]);
		}
		for(k = 0; k < BUF_SIZE; k++){
    186c:	e03ff915 	stw	zero,-28(fp)
    1870:	00000306 	br	1880 <check_KEYs+0x174>
    1874:	e0bff917 	ldw	r2,-28(fp)
    1878:	10800044 	addi	r2,r2,1
    187c:	e0bff915 	stw	r2,-28(fp)
    1880:	e0fff917 	ldw	r3,-28(fp)
    1884:	00800234 	movhi	r2,8
    1888:	10a847c4 	addi	r2,r2,-24289
    188c:	10fff90e 	bge	r2,r3,1874 <check_KEYs+0x168>
		//	play_l_buf[k] = ALT_CI_FIR_FILTER_0(record_l_buf[k]);
		}
		printf("Time taken to remove noise from the noisy sound was %3.f seconds\n", (float)alt_timestamp() / (float)alt_timestamp_freq());
    1890:	000e4a00 	call	e4a0 <alt_timestamp>
    1894:	1009883a 	mov	r4,r2
    1898:	0002bf00 	call	2bf0 <__floatunsisf>
    189c:	1021883a 	mov	r16,r2
    18a0:	000e53c0 	call	e53c <alt_timestamp_freq>
    18a4:	1009883a 	mov	r4,r2
    18a8:	0002bf00 	call	2bf0 <__floatunsisf>
    18ac:	8085fff2 	custom	255,r2,r16,r2
    18b0:	1009883a 	mov	r4,r2
    18b4:	0002b9c0 	call	2b9c <__extendsfdf2>
    18b8:	100d883a 	mov	r6,r2
    18bc:	180f883a 	mov	r7,r3
    18c0:	01000074 	movhi	r4,1
    18c4:	210d5804 	addi	r4,r4,13664
    18c8:	300b883a 	mov	r5,r6
    18cc:	380d883a 	mov	r6,r7
    18d0:	00033dc0 	call	33dc <printf>
		flag_denoise = 1;
    18d4:	00800044 	movi	r2,1
    18d8:	d0a7ef15 	stw	r2,-24644(gp)
		alt_up_audio_enable_write_interrupt (audio_dev);
    18dc:	e1000517 	ldw	r4,20(fp)
    18e0:	000e6400 	call	e640 <alt_up_audio_enable_write_interrupt>
	}
}
    18e4:	e037883a 	mov	sp,fp
    18e8:	dfc00217 	ldw	ra,8(sp)
    18ec:	df000117 	ldw	fp,4(sp)
    18f0:	dc000017 	ldw	r16,0(sp)
    18f4:	dec00304 	addi	sp,sp,12
    18f8:	f800283a 	ret

000018fc <print_mouse_on_given_position>:
void print_mouse_on_given_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, unsigned int x_mouse, unsigned int y_mouse)
{
    18fc:	defff704 	addi	sp,sp,-36
    1900:	dfc00815 	stw	ra,32(sp)
    1904:	df000715 	stw	fp,28(sp)
    1908:	df000704 	addi	fp,sp,28
    190c:	e13ffd15 	stw	r4,-12(fp)
    1910:	e17ffe15 	stw	r5,-8(fp)
    1914:	e1bfff15 	stw	r6,-4(fp)
	/* printing a white square on mouse position*/
	int color = 0xFFFFFFFF; /* 1 = white */
    1918:	00bfffc4 	movi	r2,-1
    191c:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_mouse * 4, y_mouse * 4, (x_mouse + mouse_width) * 4,
    1920:	e0bffe17 	ldw	r2,-8(fp)
    1924:	1085883a 	add	r2,r2,r2
    1928:	1085883a 	add	r2,r2,r2
    192c:	100b883a 	mov	r5,r2
    1930:	e0bfff17 	ldw	r2,-4(fp)
    1934:	1085883a 	add	r2,r2,r2
    1938:	1085883a 	add	r2,r2,r2
    193c:	100d883a 	mov	r6,r2
    1940:	d0a7ec17 	ldw	r2,-24656(gp)
    1944:	1007883a 	mov	r3,r2
    1948:	e0bffe17 	ldw	r2,-8(fp)
    194c:	1885883a 	add	r2,r3,r2
    1950:	1085883a 	add	r2,r2,r2
    1954:	1085883a 	add	r2,r2,r2
    1958:	100f883a 	mov	r7,r2
    195c:	d0a7ec17 	ldw	r2,-24656(gp)
    1960:	1007883a 	mov	r3,r2
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	1885883a 	add	r2,r3,r2
    196c:	1085883a 	add	r2,r2,r2
    1970:	1085883a 	add	r2,r2,r2
    1974:	d8800015 	stw	r2,0(sp)
    1978:	e0bffc17 	ldw	r2,-16(fp)
    197c:	d8800115 	stw	r2,4(sp)
    1980:	d8000215 	stw	zero,8(sp)
    1984:	e13ffd17 	ldw	r4,-12(fp)
    1988:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
		(y_mouse + mouse_width) * 4, color, 0);
}
    198c:	e037883a 	mov	sp,fp
    1990:	dfc00117 	ldw	ra,4(sp)
    1994:	df000017 	ldw	fp,0(sp)
    1998:	dec00204 	addi	sp,sp,8
    199c:	f800283a 	ret

000019a0 <erase_previous_mouse_position>:
void erase_previous_mouse_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
    19a0:	defff104 	addi	sp,sp,-60
    19a4:	dfc00e15 	stw	ra,56(sp)
    19a8:	df000d15 	stw	fp,52(sp)
    19ac:	dc800c15 	stw	r18,48(sp)
    19b0:	dc400b15 	stw	r17,44(sp)
    19b4:	dc000a15 	stw	r16,40(sp)
    19b8:	df000a04 	addi	fp,sp,40
    19bc:	e13ffe15 	stw	r4,-8(fp)
    19c0:	e17fff15 	stw	r5,-4(fp)
	int x1, x2, y1, y2, color;

	if(8 <= x_mouse && x_mouse <= 26 && 26 <= y_mouse && y_mouse <= 34)
    19c4:	d0a7fa17 	ldw	r2,-24600(gp)
    19c8:	10800210 	cmplti	r2,r2,8
    19cc:	1000331e 	bne	r2,zero,1a9c <erase_previous_mouse_position+0xfc>
    19d0:	d0a7fa17 	ldw	r2,-24600(gp)
    19d4:	108006c8 	cmpgei	r2,r2,27
    19d8:	1000301e 	bne	r2,zero,1a9c <erase_previous_mouse_position+0xfc>
    19dc:	d0a7ee17 	ldw	r2,-24648(gp)
    19e0:	10800690 	cmplti	r2,r2,26
    19e4:	10002d1e 	bne	r2,zero,1a9c <erase_previous_mouse_position+0xfc>
    19e8:	d0a7ee17 	ldw	r2,-24648(gp)
    19ec:	108008c8 	cmpgei	r2,r2,35
    19f0:	10002a1e 	bne	r2,zero,1a9c <erase_previous_mouse_position+0xfc>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    19f4:	00800204 	movi	r2,8
    19f8:	e0bffd15 	stw	r2,-12(fp)
    19fc:	00800684 	movi	r2,26
    1a00:	e0bffc15 	stw	r2,-16(fp)
    1a04:	00800684 	movi	r2,26
    1a08:	e0bffb15 	stw	r2,-20(fp)
    1a0c:	00800884 	movi	r2,34
    1a10:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    1a14:	00861fc4 	movi	r2,6271
    1a18:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1a1c:	e0bffd17 	ldw	r2,-12(fp)
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	100b883a 	mov	r5,r2
    1a2c:	e0bffb17 	ldw	r2,-20(fp)
    1a30:	1085883a 	add	r2,r2,r2
    1a34:	1085883a 	add	r2,r2,r2
    1a38:	100d883a 	mov	r6,r2
    1a3c:	e0bffc17 	ldw	r2,-16(fp)
    1a40:	1085883a 	add	r2,r2,r2
    1a44:	1085883a 	add	r2,r2,r2
    1a48:	100f883a 	mov	r7,r2
    1a4c:	e0bffa17 	ldw	r2,-24(fp)
    1a50:	1085883a 	add	r2,r2,r2
    1a54:	1085883a 	add	r2,r2,r2
    1a58:	d8800015 	stw	r2,0(sp)
    1a5c:	e0bff917 	ldw	r2,-28(fp)
    1a60:	d8800115 	stw	r2,4(sp)
    1a64:	d8000215 	stw	zero,8(sp)
    1a68:	e13ffe17 	ldw	r4,-8(fp)
    1a6c:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
    1a70:	e0bffd17 	ldw	r2,-12(fp)
    1a74:	10800184 	addi	r2,r2,6
    1a78:	100d883a 	mov	r6,r2
    1a7c:	e0bffb17 	ldw	r2,-20(fp)
    1a80:	10800104 	addi	r2,r2,4
    1a84:	100f883a 	mov	r7,r2
    1a88:	e13fff17 	ldw	r4,-4(fp)
    1a8c:	01400074 	movhi	r5,1
    1a90:	294d6904 	addi	r5,r5,13732
    1a94:	00106280 	call	10628 <alt_up_char_buffer_string>
}
void erase_previous_mouse_position(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
	int x1, x2, y1, y2, color;

	if(8 <= x_mouse && x_mouse <= 26 && 26 <= y_mouse && y_mouse <= 34)
    1a98:	00008a06 	br	1cc4 <erase_previous_mouse_position+0x324>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
	}
	else if(30 <= x_mouse && x_mouse <= 48 && 26 <= y_mouse && y_mouse <= 34)
    1a9c:	d0a7fa17 	ldw	r2,-24600(gp)
    1aa0:	10800790 	cmplti	r2,r2,30
    1aa4:	1000331e 	bne	r2,zero,1b74 <erase_previous_mouse_position+0x1d4>
    1aa8:	d0a7fa17 	ldw	r2,-24600(gp)
    1aac:	10800c48 	cmpgei	r2,r2,49
    1ab0:	1000301e 	bne	r2,zero,1b74 <erase_previous_mouse_position+0x1d4>
    1ab4:	d0a7ee17 	ldw	r2,-24648(gp)
    1ab8:	10800690 	cmplti	r2,r2,26
    1abc:	10002d1e 	bne	r2,zero,1b74 <erase_previous_mouse_position+0x1d4>
    1ac0:	d0a7ee17 	ldw	r2,-24648(gp)
    1ac4:	108008c8 	cmpgei	r2,r2,35
    1ac8:	10002a1e 	bne	r2,zero,1b74 <erase_previous_mouse_position+0x1d4>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    1acc:	00800204 	movi	r2,8
    1ad0:	e0bffd15 	stw	r2,-12(fp)
    1ad4:	00800684 	movi	r2,26
    1ad8:	e0bffc15 	stw	r2,-16(fp)
    1adc:	00800684 	movi	r2,26
    1ae0:	e0bffb15 	stw	r2,-20(fp)
    1ae4:	00800884 	movi	r2,34
    1ae8:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    1aec:	00861fc4 	movi	r2,6271
    1af0:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1af4:	e0bffd17 	ldw	r2,-12(fp)
    1af8:	1085883a 	add	r2,r2,r2
    1afc:	1085883a 	add	r2,r2,r2
    1b00:	100b883a 	mov	r5,r2
    1b04:	e0bffb17 	ldw	r2,-20(fp)
    1b08:	1085883a 	add	r2,r2,r2
    1b0c:	1085883a 	add	r2,r2,r2
    1b10:	100d883a 	mov	r6,r2
    1b14:	e0bffc17 	ldw	r2,-16(fp)
    1b18:	1085883a 	add	r2,r2,r2
    1b1c:	1085883a 	add	r2,r2,r2
    1b20:	100f883a 	mov	r7,r2
    1b24:	e0bffa17 	ldw	r2,-24(fp)
    1b28:	1085883a 	add	r2,r2,r2
    1b2c:	1085883a 	add	r2,r2,r2
    1b30:	d8800015 	stw	r2,0(sp)
    1b34:	e0bff917 	ldw	r2,-28(fp)
    1b38:	d8800115 	stw	r2,4(sp)
    1b3c:	d8000215 	stw	zero,8(sp)
    1b40:	e13ffe17 	ldw	r4,-8(fp)
    1b44:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
    1b48:	e0bffd17 	ldw	r2,-12(fp)
    1b4c:	10800184 	addi	r2,r2,6
    1b50:	100d883a 	mov	r6,r2
    1b54:	e0bffb17 	ldw	r2,-20(fp)
    1b58:	10800104 	addi	r2,r2,4
    1b5c:	100f883a 	mov	r7,r2
    1b60:	e13fff17 	ldw	r4,-4(fp)
    1b64:	01400074 	movhi	r5,1
    1b68:	294d6b04 	addi	r5,r5,13740
    1b6c:	00106280 	call	10628 <alt_up_char_buffer_string>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
	}
	else if(30 <= x_mouse && x_mouse <= 48 && 26 <= y_mouse && y_mouse <= 34)
    1b70:	00005406 	br	1cc4 <erase_previous_mouse_position+0x324>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
	}
	else if(52 <= x_mouse && x_mouse <= 70 && 26 <= y_mouse && y_mouse <= 34)
    1b74:	d0a7fa17 	ldw	r2,-24600(gp)
    1b78:	10800d10 	cmplti	r2,r2,52
    1b7c:	1000331e 	bne	r2,zero,1c4c <erase_previous_mouse_position+0x2ac>
    1b80:	d0a7fa17 	ldw	r2,-24600(gp)
    1b84:	108011c8 	cmpgei	r2,r2,71
    1b88:	1000301e 	bne	r2,zero,1c4c <erase_previous_mouse_position+0x2ac>
    1b8c:	d0a7ee17 	ldw	r2,-24648(gp)
    1b90:	10800690 	cmplti	r2,r2,26
    1b94:	10002d1e 	bne	r2,zero,1c4c <erase_previous_mouse_position+0x2ac>
    1b98:	d0a7ee17 	ldw	r2,-24648(gp)
    1b9c:	108008c8 	cmpgei	r2,r2,35
    1ba0:	10002a1e 	bne	r2,zero,1c4c <erase_previous_mouse_position+0x2ac>
	{
		// draw a box in the left of the screen, using character buffer coordinates
		x1 = 8; x2 = 26; y1 = 26; y2 = 34;
    1ba4:	00800204 	movi	r2,8
    1ba8:	e0bffd15 	stw	r2,-12(fp)
    1bac:	00800684 	movi	r2,26
    1bb0:	e0bffc15 	stw	r2,-16(fp)
    1bb4:	00800684 	movi	r2,26
    1bb8:	e0bffb15 	stw	r2,-20(fp)
    1bbc:	00800884 	movi	r2,34
    1bc0:	e0bffa15 	stw	r2,-24(fp)
		// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
		color = 0x187F;		// a medium blue color
    1bc4:	00861fc4 	movi	r2,6271
    1bc8:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1bcc:	e0bffd17 	ldw	r2,-12(fp)
    1bd0:	1085883a 	add	r2,r2,r2
    1bd4:	1085883a 	add	r2,r2,r2
    1bd8:	100b883a 	mov	r5,r2
    1bdc:	e0bffb17 	ldw	r2,-20(fp)
    1be0:	1085883a 	add	r2,r2,r2
    1be4:	1085883a 	add	r2,r2,r2
    1be8:	100d883a 	mov	r6,r2
    1bec:	e0bffc17 	ldw	r2,-16(fp)
    1bf0:	1085883a 	add	r2,r2,r2
    1bf4:	1085883a 	add	r2,r2,r2
    1bf8:	100f883a 	mov	r7,r2
    1bfc:	e0bffa17 	ldw	r2,-24(fp)
    1c00:	1085883a 	add	r2,r2,r2
    1c04:	1085883a 	add	r2,r2,r2
    1c08:	d8800015 	stw	r2,0(sp)
    1c0c:	e0bff917 	ldw	r2,-28(fp)
    1c10:	d8800115 	stw	r2,4(sp)
    1c14:	d8000215 	stw	zero,8(sp)
    1c18:	e13ffe17 	ldw	r4,-8(fp)
    1c1c:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	108001c4 	addi	r2,r2,7
    1c28:	100d883a 	mov	r6,r2
    1c2c:	e0bffb17 	ldw	r2,-20(fp)
    1c30:	10800104 	addi	r2,r2,4
    1c34:	100f883a 	mov	r7,r2
    1c38:	e13fff17 	ldw	r4,-4(fp)
    1c3c:	01400074 	movhi	r5,1
    1c40:	294d6d04 	addi	r5,r5,13748
    1c44:	00106280 	call	10628 <alt_up_char_buffer_string>
		color = 0x187F;		// a medium blue color
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 6, y1 + 4);
	}
	else if(52 <= x_mouse && x_mouse <= 70 && 26 <= y_mouse && y_mouse <= 34)
    1c48:	00001e06 	br	1cc4 <erase_previous_mouse_position+0x324>
			y2 * 4, color, 0);
		alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
	}
	else
	{
		color = 0x1863;		// fill the screen with a dark grey color
    1c4c:	008618c4 	movi	r2,6243
    1c50:	e0bff915 	stw	r2,-28(fp)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_mouse, y_mouse, x_mouse + 0.3,
    1c54:	d427fa17 	ldw	r16,-24600(gp)
    1c58:	d467ee17 	ldw	r17,-24648(gp)
    1c5c:	d127fa17 	ldw	r4,-24600(gp)
    1c60:	0002a700 	call	2a70 <__floatsisf>
    1c64:	1007883a 	mov	r3,r2
    1c68:	008fa6b4 	movhi	r2,16026
    1c6c:	10a66684 	addi	r2,r2,-26214
    1c70:	1885ff72 	custom	253,r2,r3,r2
    1c74:	1009883a 	mov	r4,r2
    1c78:	0002b080 	call	2b08 <__fixsfsi>
    1c7c:	1025883a 	mov	r18,r2
    1c80:	d127ee17 	ldw	r4,-24648(gp)
    1c84:	0002a700 	call	2a70 <__floatsisf>
    1c88:	1007883a 	mov	r3,r2
    1c8c:	008fa6b4 	movhi	r2,16026
    1c90:	10a66684 	addi	r2,r2,-26214
    1c94:	1885ff72 	custom	253,r2,r3,r2
    1c98:	1009883a 	mov	r4,r2
    1c9c:	0002b080 	call	2b08 <__fixsfsi>
    1ca0:	d8800015 	stw	r2,0(sp)
    1ca4:	e0bff917 	ldw	r2,-28(fp)
    1ca8:	d8800115 	stw	r2,4(sp)
    1cac:	d8000215 	stw	zero,8(sp)
    1cb0:	e13ffe17 	ldw	r4,-8(fp)
    1cb4:	800b883a 	mov	r5,r16
    1cb8:	880d883a 	mov	r6,r17
    1cbc:	900f883a 	mov	r7,r18
    1cc0:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
				y_mouse + 0.3, color, 0);
	}

}
    1cc4:	e037883a 	mov	sp,fp
    1cc8:	dfc00417 	ldw	ra,16(sp)
    1ccc:	df000317 	ldw	fp,12(sp)
    1cd0:	dc800217 	ldw	r18,8(sp)
    1cd4:	dc400117 	ldw	r17,4(sp)
    1cd8:	dc000017 	ldw	r16,0(sp)
    1cdc:	dec00504 	addi	sp,sp,20
    1ce0:	f800283a 	ret

00001ce4 <setMouseBounds>:
void setMouseBounds(unsigned int x_max, unsigned int y_max)
{
    1ce4:	defffd04 	addi	sp,sp,-12
    1ce8:	df000215 	stw	fp,8(sp)
    1cec:	df000204 	addi	fp,sp,8
    1cf0:	e13ffe15 	stw	r4,-8(fp)
    1cf4:	e17fff15 	stw	r5,-4(fp)
	max_x_mouse = x_max;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	d0a7f415 	stw	r2,-24624(gp)
	max_y_mouse = y_max;
    1d00:	e0bfff17 	ldw	r2,-4(fp)
    1d04:	d0a7f215 	stw	r2,-24632(gp)
}
    1d08:	e037883a 	mov	sp,fp
    1d0c:	df000017 	ldw	fp,0(sp)
    1d10:	dec00104 	addi	sp,sp,4
    1d14:	f800283a 	ret

00001d18 <getMouseState>:
void getMouseState()
{
    1d18:	defff704 	addi	sp,sp,-36
    1d1c:	df000815 	stw	fp,32(sp)
    1d20:	df000804 	addi	fp,sp,32
	left_button_click = byte1 % 2; /* left button is in byte1[0] */
    1d24:	00800074 	movhi	r2,1
    1d28:	109e38c4 	addi	r2,r2,30947
    1d2c:	10800003 	ldbu	r2,0(r2)
    1d30:	10803fcc 	andi	r2,r2,255
    1d34:	1080004c 	andi	r2,r2,1
    1d38:	d0a7f715 	stw	r2,-24612(gp)
	right_button_click = (byte1  >> 1) % 2; /* right button is in byte1[0] */
    1d3c:	00800074 	movhi	r2,1
    1d40:	109e38c4 	addi	r2,r2,30947
    1d44:	10800003 	ldbu	r2,0(r2)
    1d48:	10803fcc 	andi	r2,r2,255
    1d4c:	1004d07a 	srli	r2,r2,1
    1d50:	10803fcc 	andi	r2,r2,255
    1d54:	1080004c 	andi	r2,r2,1
    1d58:	d0a7f615 	stw	r2,-24616(gp)
	middle_button_click = (byte1 >> 2) % 2; /* middle button is in byte1[0] */
    1d5c:	00800074 	movhi	r2,1
    1d60:	109e38c4 	addi	r2,r2,30947
    1d64:	10800003 	ldbu	r2,0(r2)
    1d68:	10803fcc 	andi	r2,r2,255
    1d6c:	1004d0ba 	srli	r2,r2,2
    1d70:	10803fcc 	andi	r2,r2,255
    1d74:	1080004c 	andi	r2,r2,1
    1d78:	d0a7fb15 	stw	r2,-24596(gp)

	/* x_sign is in byte1[4], 0 = + and 1 = - */
	int x_sign = ((byte1 >> 4) % 2) ? 1 : 0;
    1d7c:	00800074 	movhi	r2,1
    1d80:	109e38c4 	addi	r2,r2,30947
    1d84:	10800003 	ldbu	r2,0(r2)
    1d88:	10803fcc 	andi	r2,r2,255
    1d8c:	1004d13a 	srli	r2,r2,4
    1d90:	10803fcc 	andi	r2,r2,255
    1d94:	1080004c 	andi	r2,r2,1
    1d98:	e0bff915 	stw	r2,-28(fp)
	//x_mouse = x_mouse + byte2;
	x_mouse = !x_sign ? x_mouse + (( byte2)) : x_mouse - (( byte2)); /* x_difference is in byte2 */
    1d9c:	e0bff917 	ldw	r2,-28(fp)
    1da0:	1004c03a 	cmpne	r2,r2,zero
    1da4:	1000081e 	bne	r2,zero,1dc8 <getMouseState+0xb0>
    1da8:	00800074 	movhi	r2,1
    1dac:	109e3804 	addi	r2,r2,30944
    1db0:	10800003 	ldbu	r2,0(r2)
    1db4:	10c03fcc 	andi	r3,r2,255
    1db8:	d0a7fa17 	ldw	r2,-24600(gp)
    1dbc:	1887883a 	add	r3,r3,r2
    1dc0:	e0ffff15 	stw	r3,-4(fp)
    1dc4:	00000706 	br	1de4 <getMouseState+0xcc>
    1dc8:	d0e7fa17 	ldw	r3,-24600(gp)
    1dcc:	00800074 	movhi	r2,1
    1dd0:	109e3804 	addi	r2,r2,30944
    1dd4:	10800003 	ldbu	r2,0(r2)
    1dd8:	10803fcc 	andi	r2,r2,255
    1ddc:	1887c83a 	sub	r3,r3,r2
    1de0:	e0ffff15 	stw	r3,-4(fp)
    1de4:	e0bfff17 	ldw	r2,-4(fp)
    1de8:	d0a7fa15 	stw	r2,-24600(gp)
	x_mouse = (x_mouse >= max_x_mouse) ? max_x_mouse :
    1dec:	d0e7fa17 	ldw	r3,-24600(gp)
    1df0:	d0a7f417 	ldw	r2,-24624(gp)
    1df4:	18800a0e 	bge	r3,r2,1e20 <getMouseState+0x108>
    1df8:	d0a7fa17 	ldw	r2,-24600(gp)
    1dfc:	10800050 	cmplti	r2,r2,1
    1e00:	1000031e 	bne	r2,zero,1e10 <getMouseState+0xf8>
    1e04:	d0a7fa17 	ldw	r2,-24600(gp)
    1e08:	e0bffd15 	stw	r2,-12(fp)
    1e0c:	00000106 	br	1e14 <getMouseState+0xfc>
    1e10:	e03ffd15 	stw	zero,-12(fp)
    1e14:	e0bffd17 	ldw	r2,-12(fp)
    1e18:	e0bffe15 	stw	r2,-8(fp)
    1e1c:	00000206 	br	1e28 <getMouseState+0x110>
    1e20:	d0a7f417 	ldw	r2,-24624(gp)
    1e24:	e0bffe15 	stw	r2,-8(fp)
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	d0a7fa15 	stw	r2,-24600(gp)
			  (x_mouse <= 0) ? 0 :
			   x_mouse;

	/* y_sign is in byte1[5], 0 = + and 1 = - */
	int y_sign = ((byte1 >> 5) % 2) ? 1 : 0;
    1e30:	00800074 	movhi	r2,1
    1e34:	109e38c4 	addi	r2,r2,30947
    1e38:	10800003 	ldbu	r2,0(r2)
    1e3c:	10803fcc 	andi	r2,r2,255
    1e40:	1004d17a 	srli	r2,r2,5
    1e44:	10803fcc 	andi	r2,r2,255
    1e48:	1080004c 	andi	r2,r2,1
    1e4c:	e0bff815 	stw	r2,-32(fp)
	//y_mouse = y_mouse + byte3;
	y_mouse = !y_sign ? y_mouse + (( byte3)) : y_mouse - ((( byte3 ))); /* y_difference is in byte3 */
    1e50:	e0bff817 	ldw	r2,-32(fp)
    1e54:	1004c03a 	cmpne	r2,r2,zero
    1e58:	1000081e 	bne	r2,zero,1e7c <getMouseState+0x164>
    1e5c:	00800074 	movhi	r2,1
    1e60:	109e3844 	addi	r2,r2,30945
    1e64:	10800003 	ldbu	r2,0(r2)
    1e68:	10c03fcc 	andi	r3,r2,255
    1e6c:	d0a7ee17 	ldw	r2,-24648(gp)
    1e70:	1887883a 	add	r3,r3,r2
    1e74:	e0fffc15 	stw	r3,-16(fp)
    1e78:	00000706 	br	1e98 <getMouseState+0x180>
    1e7c:	d0e7ee17 	ldw	r3,-24648(gp)
    1e80:	00800074 	movhi	r2,1
    1e84:	109e3844 	addi	r2,r2,30945
    1e88:	10800003 	ldbu	r2,0(r2)
    1e8c:	10803fcc 	andi	r2,r2,255
    1e90:	1887c83a 	sub	r3,r3,r2
    1e94:	e0fffc15 	stw	r3,-16(fp)
    1e98:	e0bffc17 	ldw	r2,-16(fp)
    1e9c:	d0a7ee15 	stw	r2,-24648(gp)
	y_mouse = (y_mouse >= max_y_mouse) ? max_y_mouse :
    1ea0:	d0e7ee17 	ldw	r3,-24648(gp)
    1ea4:	d0a7f217 	ldw	r2,-24632(gp)
    1ea8:	18800a0e 	bge	r3,r2,1ed4 <getMouseState+0x1bc>
    1eac:	d0a7ee17 	ldw	r2,-24648(gp)
    1eb0:	10800050 	cmplti	r2,r2,1
    1eb4:	1000031e 	bne	r2,zero,1ec4 <getMouseState+0x1ac>
    1eb8:	d0a7ee17 	ldw	r2,-24648(gp)
    1ebc:	e0bffa15 	stw	r2,-24(fp)
    1ec0:	00000106 	br	1ec8 <getMouseState+0x1b0>
    1ec4:	e03ffa15 	stw	zero,-24(fp)
    1ec8:	e0bffa17 	ldw	r2,-24(fp)
    1ecc:	e0bffb15 	stw	r2,-20(fp)
    1ed0:	00000206 	br	1edc <getMouseState+0x1c4>
    1ed4:	d0a7f217 	ldw	r2,-24632(gp)
    1ed8:	e0bffb15 	stw	r2,-20(fp)
    1edc:	e0bffb17 	ldw	r2,-20(fp)
    1ee0:	d0a7ee15 	stw	r2,-24648(gp)
			  (y_mouse <= 0) ? 0 :
			   y_mouse;
}
    1ee4:	e037883a 	mov	sp,fp
    1ee8:	df000017 	ldw	fp,0(sp)
    1eec:	dec00104 	addi	sp,sp,4
    1ef0:	f800283a 	ret

00001ef4 <print_screen>:
void print_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, alt_up_char_buffer_dev *char_buffer_dev)
{
    1ef4:	defff404 	addi	sp,sp,-48
    1ef8:	dfc00b15 	stw	ra,44(sp)
    1efc:	df000a15 	stw	fp,40(sp)
    1f00:	df000a04 	addi	fp,sp,40
    1f04:	e13ffe15 	stw	r4,-8(fp)
    1f08:	e17fff15 	stw	r5,-4(fp)
	int x1, x2, y1, y2;
	int color = 0x1863;		// fill the screen with a dark grey color
    1f0c:	008618c4 	movi	r2,6243
    1f10:	e0bff915 	stw	r2,-28(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, max_x_mouse,
    1f14:	d1e7f417 	ldw	r7,-24624(gp)
    1f18:	d0a7f217 	ldw	r2,-24632(gp)
    1f1c:	d8800015 	stw	r2,0(sp)
    1f20:	e0bff917 	ldw	r2,-28(fp)
    1f24:	d8800115 	stw	r2,4(sp)
    1f28:	d8000215 	stw	zero,8(sp)
    1f2c:	e13ffe17 	ldw	r4,-8(fp)
    1f30:	000b883a 	mov	r5,zero
    1f34:	000d883a 	mov	r6,zero
    1f38:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
			max_y_mouse, color, 0);

	// draw Record, Play and Echo boxes in the left, middle and right of the screen

	// draw a box in the left of the screen, using character buffer coordinates
	x1 = 8; x2 = 26; y1 = 16; y2 = 24;
    1f3c:	00800204 	movi	r2,8
    1f40:	e0bffd15 	stw	r2,-12(fp)
    1f44:	00800684 	movi	r2,26
    1f48:	e0bffc15 	stw	r2,-16(fp)
    1f4c:	00800404 	movi	r2,16
    1f50:	e0bffb15 	stw	r2,-20(fp)
    1f54:	00800604 	movi	r2,24
    1f58:	e0bffa15 	stw	r2,-24(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x187F;		// a medium blue color
    1f5c:	00861fc4 	movi	r2,6271
    1f60:	e0bff915 	stw	r2,-28(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1f64:	e0bffd17 	ldw	r2,-12(fp)
    1f68:	1085883a 	add	r2,r2,r2
    1f6c:	1085883a 	add	r2,r2,r2
    1f70:	100b883a 	mov	r5,r2
    1f74:	e0bffb17 	ldw	r2,-20(fp)
    1f78:	1085883a 	add	r2,r2,r2
    1f7c:	1085883a 	add	r2,r2,r2
    1f80:	100d883a 	mov	r6,r2
    1f84:	e0bffc17 	ldw	r2,-16(fp)
    1f88:	1085883a 	add	r2,r2,r2
    1f8c:	1085883a 	add	r2,r2,r2
    1f90:	100f883a 	mov	r7,r2
    1f94:	e0bffa17 	ldw	r2,-24(fp)
    1f98:	1085883a 	add	r2,r2,r2
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	d8800015 	stw	r2,0(sp)
    1fa4:	e0bff917 	ldw	r2,-28(fp)
    1fa8:	d8800115 	stw	r2,4(sp)
    1fac:	d8000215 	stw	zero,8(sp)
    1fb0:	e13ffe17 	ldw	r4,-8(fp)
    1fb4:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Record", x1 + 6, y1 + 4);
    1fb8:	e0bffd17 	ldw	r2,-12(fp)
    1fbc:	10800184 	addi	r2,r2,6
    1fc0:	100d883a 	mov	r6,r2
    1fc4:	e0bffb17 	ldw	r2,-20(fp)
    1fc8:	10800104 	addi	r2,r2,4
    1fcc:	100f883a 	mov	r7,r2
    1fd0:	e13fff17 	ldw	r4,-4(fp)
    1fd4:	01400074 	movhi	r5,1
    1fd8:	294d6904 	addi	r5,r5,13732
    1fdc:	00106280 	call	10628 <alt_up_char_buffer_string>
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	x1 = 30; x2 = 48;
    1fe0:	00800784 	movi	r2,30
    1fe4:	e0bffd15 	stw	r2,-12(fp)
    1fe8:	00800c04 	movi	r2,48
    1fec:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    1ff0:	e0bffd17 	ldw	r2,-12(fp)
    1ff4:	1085883a 	add	r2,r2,r2
    1ff8:	1085883a 	add	r2,r2,r2
    1ffc:	100b883a 	mov	r5,r2
    2000:	e0bffb17 	ldw	r2,-20(fp)
    2004:	1085883a 	add	r2,r2,r2
    2008:	1085883a 	add	r2,r2,r2
    200c:	100d883a 	mov	r6,r2
    2010:	e0bffc17 	ldw	r2,-16(fp)
    2014:	1085883a 	add	r2,r2,r2
    2018:	1085883a 	add	r2,r2,r2
    201c:	100f883a 	mov	r7,r2
    2020:	e0bffa17 	ldw	r2,-24(fp)
    2024:	1085883a 	add	r2,r2,r2
    2028:	1085883a 	add	r2,r2,r2
    202c:	d8800015 	stw	r2,0(sp)
    2030:	e0bff917 	ldw	r2,-28(fp)
    2034:	d8800115 	stw	r2,4(sp)
    2038:	d8000215 	stw	zero,8(sp)
    203c:	e13ffe17 	ldw	r4,-8(fp)
    2040:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Play", x1 + 7, y1 + 4);
    2044:	e0bffd17 	ldw	r2,-12(fp)
    2048:	108001c4 	addi	r2,r2,7
    204c:	100d883a 	mov	r6,r2
    2050:	e0bffb17 	ldw	r2,-20(fp)
    2054:	10800104 	addi	r2,r2,4
    2058:	100f883a 	mov	r7,r2
    205c:	e13fff17 	ldw	r4,-4(fp)
    2060:	01400074 	movhi	r5,1
    2064:	294d6b04 	addi	r5,r5,13740
    2068:	00106280 	call	10628 <alt_up_char_buffer_string>
	// draw a medium-blue box in the right of the screen, using character buffer coordinates
	x1 = 52; x2 = 70;
    206c:	00800d04 	movi	r2,52
    2070:	e0bffd15 	stw	r2,-12(fp)
    2074:	00801184 	movi	r2,70
    2078:	e0bffc15 	stw	r2,-16(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x1 * 4, y1 * 4, x2 * 4,
    207c:	e0bffd17 	ldw	r2,-12(fp)
    2080:	1085883a 	add	r2,r2,r2
    2084:	1085883a 	add	r2,r2,r2
    2088:	100b883a 	mov	r5,r2
    208c:	e0bffb17 	ldw	r2,-20(fp)
    2090:	1085883a 	add	r2,r2,r2
    2094:	1085883a 	add	r2,r2,r2
    2098:	100d883a 	mov	r6,r2
    209c:	e0bffc17 	ldw	r2,-16(fp)
    20a0:	1085883a 	add	r2,r2,r2
    20a4:	1085883a 	add	r2,r2,r2
    20a8:	100f883a 	mov	r7,r2
    20ac:	e0bffa17 	ldw	r2,-24(fp)
    20b0:	1085883a 	add	r2,r2,r2
    20b4:	1085883a 	add	r2,r2,r2
    20b8:	d8800015 	stw	r2,0(sp)
    20bc:	e0bff917 	ldw	r2,-28(fp)
    20c0:	d8800115 	stw	r2,4(sp)
    20c4:	d8000215 	stw	zero,8(sp)
    20c8:	e13ffe17 	ldw	r4,-8(fp)
    20cc:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
		y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
    20d0:	e0bffd17 	ldw	r2,-12(fp)
    20d4:	108001c4 	addi	r2,r2,7
    20d8:	100d883a 	mov	r6,r2
    20dc:	e0bffb17 	ldw	r2,-20(fp)
    20e0:	10800104 	addi	r2,r2,4
    20e4:	100f883a 	mov	r7,r2
    20e8:	e13fff17 	ldw	r4,-4(fp)
    20ec:	01400074 	movhi	r5,1
    20f0:	294d6d04 	addi	r5,r5,13748
    20f4:	00106280 	call	10628 <alt_up_char_buffer_string>
}
    20f8:	e037883a 	mov	sp,fp
    20fc:	dfc00117 	ldw	ra,4(sp)
    2100:	df000017 	ldw	fp,0(sp)
    2104:	dec00204 	addi	sp,sp,8
    2108:	f800283a 	ret

0000210c <denoise_the_noisy_sound>:
void denoise_the_noisy_sound()
{
    210c:	defff804 	addi	sp,sp,-32
    2110:	dfc00715 	stw	ra,28(sp)
    2114:	df000615 	stw	fp,24(sp)
    2118:	dc000515 	stw	r16,20(sp)
    211c:	df000504 	addi	fp,sp,20
	int n;
	for(n = 0; n < BUF_SIZE; n++)
    2120:	e03fff15 	stw	zero,-4(fp)
    2124:	00004506 	br	223c <denoise_the_noisy_sound+0x130>
	{
		//printf("%d\n", n);
		float result = 0;
    2128:	e03ffe15 	stw	zero,-8(fp)
		int k;
		for(k = 0; k <= n && k < number_of_coefficients; k++)
    212c:	e03ffd15 	stw	zero,-12(fp)
    2130:	00001f06 	br	21b0 <denoise_the_noisy_sound+0xa4>
		{
			float record = (float)(record_r_buf[n - k] >> 8);
    2134:	e0ffff17 	ldw	r3,-4(fp)
    2138:	e0bffd17 	ldw	r2,-12(fp)
    213c:	1885c83a 	sub	r2,r3,r2
    2140:	00c00ff4 	movhi	r3,63
    2144:	18e0a904 	addi	r3,r3,-32092
    2148:	1085883a 	add	r2,r2,r2
    214c:	1085883a 	add	r2,r2,r2
    2150:	10c5883a 	add	r2,r2,r3
    2154:	10800017 	ldw	r2,0(r2)
    2158:	1008d23a 	srli	r4,r2,8
    215c:	0002bf00 	call	2bf0 <__floatunsisf>
    2160:	e0bffc15 	stw	r2,-16(fp)
			float temp = denoise_filter_coefficients[k]  * (record / (2 ^ 23));
    2164:	e0bffd17 	ldw	r2,-12(fp)
    2168:	00c00074 	movhi	r3,1
    216c:	18ce9f04 	addi	r3,r3,14972
    2170:	1085883a 	add	r2,r2,r2
    2174:	1085883a 	add	r2,r2,r2
    2178:	10c5883a 	add	r2,r2,r3
    217c:	11000017 	ldw	r4,0(r2)
    2180:	e0fffc17 	ldw	r3,-16(fp)
    2184:	00906a34 	movhi	r2,16808
    2188:	1885fff2 	custom	255,r2,r3,r2
    218c:	2085ff32 	custom	252,r2,r4,r2
    2190:	e0bffb15 	stw	r2,-20(fp)
			result = result + temp;
    2194:	e0fffe17 	ldw	r3,-8(fp)
    2198:	e0bffb17 	ldw	r2,-20(fp)
    219c:	1885ff72 	custom	253,r2,r3,r2
    21a0:	e0bffe15 	stw	r2,-8(fp)
	for(n = 0; n < BUF_SIZE; n++)
	{
		//printf("%d\n", n);
		float result = 0;
		int k;
		for(k = 0; k <= n && k < number_of_coefficients; k++)
    21a4:	e0bffd17 	ldw	r2,-12(fp)
    21a8:	10800044 	addi	r2,r2,1
    21ac:	e0bffd15 	stw	r2,-12(fp)
    21b0:	e0fffd17 	ldw	r3,-12(fp)
    21b4:	e0bfff17 	ldw	r2,-4(fp)
    21b8:	10c00316 	blt	r2,r3,21c8 <denoise_the_noisy_sound+0xbc>
    21bc:	d0e00617 	ldw	r3,-32744(gp)
    21c0:	e0bffd17 	ldw	r2,-12(fp)
    21c4:	10ffdb16 	blt	r2,r3,2134 <denoise_the_noisy_sound+0x28>
		{
			float record = (float)(record_r_buf[n - k] >> 8);
			float temp = denoise_filter_coefficients[k]  * (record / (2 ^ 23));
			result = result + temp;
		}
		play_l_buf[n] = (int)(result * (2 ^ 30));
    21c8:	e43fff17 	ldw	r16,-4(fp)
    21cc:	e0fffe17 	ldw	r3,-8(fp)
    21d0:	00907834 	movhi	r2,16864
    21d4:	1885ff32 	custom	252,r2,r3,r2
    21d8:	1009883a 	mov	r4,r2
    21dc:	0002b080 	call	2b08 <__fixsfsi>
    21e0:	1009883a 	mov	r4,r2
    21e4:	00c00834 	movhi	r3,32
    21e8:	18ff8904 	addi	r3,r3,-476
    21ec:	8405883a 	add	r2,r16,r16
    21f0:	1085883a 	add	r2,r2,r2
    21f4:	10c5883a 	add	r2,r2,r3
    21f8:	11000015 	stw	r4,0(r2)
		play_r_buf[n] = (int)(result * (2 ^ 30));
    21fc:	e43fff17 	ldw	r16,-4(fp)
    2200:	e0fffe17 	ldw	r3,-8(fp)
    2204:	00907834 	movhi	r2,16864
    2208:	1885ff32 	custom	252,r2,r3,r2
    220c:	1009883a 	mov	r4,r2
    2210:	0002b080 	call	2b08 <__fixsfsi>
    2214:	1009883a 	mov	r4,r2
    2218:	00c01774 	movhi	r3,93
    221c:	18c1c904 	addi	r3,r3,1828
    2220:	8405883a 	add	r2,r16,r16
    2224:	1085883a 	add	r2,r2,r2
    2228:	10c5883a 	add	r2,r2,r3
    222c:	11000015 	stw	r4,0(r2)
	alt_up_char_buffer_string (char_buffer_dev, "Echo", x1 + 7, y1 + 4);
}
void denoise_the_noisy_sound()
{
	int n;
	for(n = 0; n < BUF_SIZE; n++)
    2230:	e0bfff17 	ldw	r2,-4(fp)
    2234:	10800044 	addi	r2,r2,1
    2238:	e0bfff15 	stw	r2,-4(fp)
    223c:	e0ffff17 	ldw	r3,-4(fp)
    2240:	00800234 	movhi	r2,8
    2244:	10a847c4 	addi	r2,r2,-24289
    2248:	10ffb70e 	bge	r2,r3,2128 <denoise_the_noisy_sound+0x1c>
		}
		play_l_buf[n] = (int)(result * (2 ^ 30));
		play_r_buf[n] = (int)(result * (2 ^ 30));
		//printf("%d\n", play_l_buf[n]);
	}
}
    224c:	e037883a 	mov	sp,fp
    2250:	dfc00217 	ldw	ra,8(sp)
    2254:	df000117 	ldw	fp,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00304 	addi	sp,sp,12
    2260:	f800283a 	ret

00002264 <echo_maker>:
void echo_maker(unsigned int l_buf[], unsigned int r_buf[], unsigned int* echol_buf, unsigned int* echor_buf) {
    2264:	defffa04 	addi	sp,sp,-24
    2268:	df000515 	stw	fp,20(sp)
    226c:	df000504 	addi	fp,sp,20
    2270:	e13ffc15 	stw	r4,-16(fp)
    2274:	e17ffd15 	stw	r5,-12(fp)
    2278:	e1bffe15 	stw	r6,-8(fp)
    227c:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; i < BUF_SIZE; ++i) {
    2280:	e03ffb15 	stw	zero,-20(fp)
    2284:	00008b06 	br	24b4 <echo_maker+0x250>
		if (i >= ECHO_INDEX1) {
    2288:	e0bffb17 	ldw	r2,-20(fp)
    228c:	1080fa10 	cmplti	r2,r2,1000
    2290:	1000691e 	bne	r2,zero,2438 <echo_maker+0x1d4>
			if (i >= ECHO_INDEX2) {
    2294:	e0bffb17 	ldw	r2,-20(fp)
    2298:	1084e210 	cmplti	r2,r2,5000
    229c:	1000331e 	bne	r2,zero,236c <echo_maker+0x108>
				echol_buf[i] = l_buf[i] >> 1 + l_buf[i - ECHO_INDEX2] >> 2;
    22a0:	e0bffb17 	ldw	r2,-20(fp)
    22a4:	1085883a 	add	r2,r2,r2
    22a8:	1085883a 	add	r2,r2,r2
    22ac:	1007883a 	mov	r3,r2
    22b0:	e0bffe17 	ldw	r2,-8(fp)
    22b4:	1889883a 	add	r4,r3,r2
    22b8:	e0bffb17 	ldw	r2,-20(fp)
    22bc:	1085883a 	add	r2,r2,r2
    22c0:	1085883a 	add	r2,r2,r2
    22c4:	1007883a 	mov	r3,r2
    22c8:	e0bffc17 	ldw	r2,-16(fp)
    22cc:	1885883a 	add	r2,r3,r2
    22d0:	11400017 	ldw	r5,0(r2)
    22d4:	e0bffb17 	ldw	r2,-20(fp)
    22d8:	1085883a 	add	r2,r2,r2
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1007883a 	mov	r3,r2
    22e4:	e0bffc17 	ldw	r2,-16(fp)
    22e8:	1885883a 	add	r2,r3,r2
    22ec:	10ac7804 	addi	r2,r2,-20000
    22f0:	10800017 	ldw	r2,0(r2)
    22f4:	10800044 	addi	r2,r2,1
    22f8:	2884d83a 	srl	r2,r5,r2
    22fc:	1004d0ba 	srli	r2,r2,2
    2300:	20800015 	stw	r2,0(r4)
				echor_buf[i] = r_buf[i] >> 1 + r_buf[i - ECHO_INDEX2] >> 2;
    2304:	e0bffb17 	ldw	r2,-20(fp)
    2308:	1085883a 	add	r2,r2,r2
    230c:	1085883a 	add	r2,r2,r2
    2310:	1007883a 	mov	r3,r2
    2314:	e0bfff17 	ldw	r2,-4(fp)
    2318:	1889883a 	add	r4,r3,r2
    231c:	e0bffb17 	ldw	r2,-20(fp)
    2320:	1085883a 	add	r2,r2,r2
    2324:	1085883a 	add	r2,r2,r2
    2328:	1007883a 	mov	r3,r2
    232c:	e0bffd17 	ldw	r2,-12(fp)
    2330:	1885883a 	add	r2,r3,r2
    2334:	11400017 	ldw	r5,0(r2)
    2338:	e0bffb17 	ldw	r2,-20(fp)
    233c:	1085883a 	add	r2,r2,r2
    2340:	1085883a 	add	r2,r2,r2
    2344:	1007883a 	mov	r3,r2
    2348:	e0bffd17 	ldw	r2,-12(fp)
    234c:	1885883a 	add	r2,r3,r2
    2350:	10ac7804 	addi	r2,r2,-20000
    2354:	10800017 	ldw	r2,0(r2)
    2358:	10800044 	addi	r2,r2,1
    235c:	2884d83a 	srl	r2,r5,r2
    2360:	1004d0ba 	srli	r2,r2,2
    2364:	20800015 	stw	r2,0(r4)
    2368:	00004f06 	br	24a8 <echo_maker+0x244>
			}
			else {
				echol_buf[i] = l_buf[i] >> 1 + l_buf[i - ECHO_INDEX1] >> 2;
    236c:	e0bffb17 	ldw	r2,-20(fp)
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1007883a 	mov	r3,r2
    237c:	e0bffe17 	ldw	r2,-8(fp)
    2380:	1889883a 	add	r4,r3,r2
    2384:	e0bffb17 	ldw	r2,-20(fp)
    2388:	1085883a 	add	r2,r2,r2
    238c:	1085883a 	add	r2,r2,r2
    2390:	1007883a 	mov	r3,r2
    2394:	e0bffc17 	ldw	r2,-16(fp)
    2398:	1885883a 	add	r2,r3,r2
    239c:	11400017 	ldw	r5,0(r2)
    23a0:	e0bffb17 	ldw	r2,-20(fp)
    23a4:	1085883a 	add	r2,r2,r2
    23a8:	1085883a 	add	r2,r2,r2
    23ac:	1007883a 	mov	r3,r2
    23b0:	e0bffc17 	ldw	r2,-16(fp)
    23b4:	1885883a 	add	r2,r3,r2
    23b8:	10bc1804 	addi	r2,r2,-4000
    23bc:	10800017 	ldw	r2,0(r2)
    23c0:	10800044 	addi	r2,r2,1
    23c4:	2884d83a 	srl	r2,r5,r2
    23c8:	1004d0ba 	srli	r2,r2,2
    23cc:	20800015 	stw	r2,0(r4)
				echor_buf[i] = r_buf[i] >> 1 + r_buf[i - ECHO_INDEX1] >> 2;
    23d0:	e0bffb17 	ldw	r2,-20(fp)
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1085883a 	add	r2,r2,r2
    23dc:	1007883a 	mov	r3,r2
    23e0:	e0bfff17 	ldw	r2,-4(fp)
    23e4:	1889883a 	add	r4,r3,r2
    23e8:	e0bffb17 	ldw	r2,-20(fp)
    23ec:	1085883a 	add	r2,r2,r2
    23f0:	1085883a 	add	r2,r2,r2
    23f4:	1007883a 	mov	r3,r2
    23f8:	e0bffd17 	ldw	r2,-12(fp)
    23fc:	1885883a 	add	r2,r3,r2
    2400:	11400017 	ldw	r5,0(r2)
    2404:	e0bffb17 	ldw	r2,-20(fp)
    2408:	1085883a 	add	r2,r2,r2
    240c:	1085883a 	add	r2,r2,r2
    2410:	1007883a 	mov	r3,r2
    2414:	e0bffd17 	ldw	r2,-12(fp)
    2418:	1885883a 	add	r2,r3,r2
    241c:	10bc1804 	addi	r2,r2,-4000
    2420:	10800017 	ldw	r2,0(r2)
    2424:	10800044 	addi	r2,r2,1
    2428:	2884d83a 	srl	r2,r5,r2
    242c:	1004d0ba 	srli	r2,r2,2
    2430:	20800015 	stw	r2,0(r4)
    2434:	00001c06 	br	24a8 <echo_maker+0x244>
			}
		}
		else {
			echol_buf[i] = l_buf[i];
    2438:	e0bffb17 	ldw	r2,-20(fp)
    243c:	1085883a 	add	r2,r2,r2
    2440:	1085883a 	add	r2,r2,r2
    2444:	1007883a 	mov	r3,r2
    2448:	e0bffe17 	ldw	r2,-8(fp)
    244c:	1889883a 	add	r4,r3,r2
    2450:	e0bffb17 	ldw	r2,-20(fp)
    2454:	1085883a 	add	r2,r2,r2
    2458:	1085883a 	add	r2,r2,r2
    245c:	1007883a 	mov	r3,r2
    2460:	e0bffc17 	ldw	r2,-16(fp)
    2464:	1885883a 	add	r2,r3,r2
    2468:	10800017 	ldw	r2,0(r2)
    246c:	20800015 	stw	r2,0(r4)
			echor_buf[i] = r_buf[i];
    2470:	e0bffb17 	ldw	r2,-20(fp)
    2474:	1085883a 	add	r2,r2,r2
    2478:	1085883a 	add	r2,r2,r2
    247c:	1007883a 	mov	r3,r2
    2480:	e0bfff17 	ldw	r2,-4(fp)
    2484:	1889883a 	add	r4,r3,r2
    2488:	e0bffb17 	ldw	r2,-20(fp)
    248c:	1085883a 	add	r2,r2,r2
    2490:	1085883a 	add	r2,r2,r2
    2494:	1007883a 	mov	r3,r2
    2498:	e0bffd17 	ldw	r2,-12(fp)
    249c:	1885883a 	add	r2,r3,r2
    24a0:	10800017 	ldw	r2,0(r2)
    24a4:	20800015 	stw	r2,0(r4)
		//printf("%d\n", play_l_buf[n]);
	}
}
void echo_maker(unsigned int l_buf[], unsigned int r_buf[], unsigned int* echol_buf, unsigned int* echor_buf) {
	int i;
	for (i = 0; i < BUF_SIZE; ++i) {
    24a8:	e0bffb17 	ldw	r2,-20(fp)
    24ac:	10800044 	addi	r2,r2,1
    24b0:	e0bffb15 	stw	r2,-20(fp)
    24b4:	e0fffb17 	ldw	r3,-20(fp)
    24b8:	00800234 	movhi	r2,8
    24bc:	10a847c4 	addi	r2,r2,-24289
    24c0:	10ff710e 	bge	r2,r3,2288 <echo_maker+0x24>
		else {
			echol_buf[i] = l_buf[i];
			echor_buf[i] = r_buf[i];
		}
	}
}
    24c4:	e037883a 	mov	sp,fp
    24c8:	df000017 	ldw	fp,0(sp)
    24cc:	dec00104 	addi	sp,sp,4
    24d0:	f800283a 	ret

000024d4 <plot_audio>:
void plot_audio(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev, unsigned int N)
{
    24d4:	deffe604 	addi	sp,sp,-104
    24d8:	dfc01915 	stw	ra,100(sp)
    24dc:	df001815 	stw	fp,96(sp)
    24e0:	df001804 	addi	fp,sp,96
    24e4:	e13ffb15 	stw	r4,-20(fp)
    24e8:	e17ffc15 	stw	r5,-16(fp)
    24ec:	e6ffff15 	stw	sp,-4(fp)
    24f0:	d805883a 	mov	r2,sp
    24f4:	e0bffd15 	stw	r2,-12(fp)
	int i;
	int y_of_each_plot = 48;
    24f8:	00800c04 	movi	r2,48
    24fc:	e0bff815 	stw	r2,-32(fp)
	int width_of_screen = 62;
    2500:	00800f84 	movi	r2,62
    2504:	e0bff715 	stw	r2,-36(fp)
	unsigned long long length_of_each_period = (BUF_SIZE/N);
    2508:	00c00234 	movhi	r3,8
    250c:	18e84804 	addi	r3,r3,-24288
    2510:	e0bffc17 	ldw	r2,-16(fp)
    2514:	1885203a 	divu	r2,r3,r2
    2518:	e0bff515 	stw	r2,-44(fp)
    251c:	e03ff615 	stw	zero,-40(fp)
	int width_of_each_plot = (width_of_screen / N);
    2520:	e0fff717 	ldw	r3,-36(fp)
    2524:	e0bffc17 	ldw	r2,-16(fp)
    2528:	1885203a 	divu	r2,r3,r2
    252c:	e0bff415 	stw	r2,-48(fp)
	int x_of_current_drawing_plot = 14; // 8 is x position of first plot
    2530:	00800384 	movi	r2,14
    2534:	e0bff315 	stw	r2,-52(fp)
	int max_heigh_of_plots = 20;
    2538:	00800504 	movi	r2,20
    253c:	e0bff215 	stw	r2,-56(fp)

	int average[N];
    2540:	e0bffc17 	ldw	r2,-16(fp)
    2544:	1085883a 	add	r2,r2,r2
    2548:	1085883a 	add	r2,r2,r2
    254c:	108000c4 	addi	r2,r2,3
    2550:	108000c4 	addi	r2,r2,3
    2554:	1004d0ba 	srli	r2,r2,2
    2558:	1085883a 	add	r2,r2,r2
    255c:	1085883a 	add	r2,r2,r2
    2560:	d8b7c83a 	sub	sp,sp,r2
    2564:	d8800304 	addi	r2,sp,12
    2568:	e0bffe15 	stw	r2,-8(fp)
    256c:	e0fffe17 	ldw	r3,-8(fp)
    2570:	188000c4 	addi	r2,r3,3
    2574:	1004d0ba 	srli	r2,r2,2
    2578:	1085883a 	add	r2,r2,r2
    257c:	1085883a 	add	r2,r2,r2
    2580:	e0bffe15 	stw	r2,-8(fp)
    2584:	e0bffe17 	ldw	r2,-8(fp)
    2588:	e0bffa15 	stw	r2,-24(fp)
	int max_average = record_r_buf[0];
    258c:	00800ff4 	movhi	r2,63
    2590:	10a0a904 	addi	r2,r2,-32092
    2594:	10800017 	ldw	r2,0(r2)
    2598:	e0bff115 	stw	r2,-60(fp)
	int min_average =  67000000;
    259c:	0080ffb4 	movhi	r2,1022
    25a0:	1095b004 	addi	r2,r2,22208
    25a4:	e0bff015 	stw	r2,-64(fp)

	int color = 0xF800;
    25a8:	00be0014 	movui	r2,63488
    25ac:	e0bfef15 	stw	r2,-68(fp)

	int n = 0;
    25b0:	e03fee15 	stw	zero,-72(fp)
	unsigned long long sum;

	amplitude_operation((BUF_SIZE/N), N, record_r_buf, record_l_buf, average);
    25b4:	00c00234 	movhi	r3,8
    25b8:	18e84804 	addi	r3,r3,-24288
    25bc:	e0bffc17 	ldw	r2,-16(fp)
    25c0:	1885203a 	divu	r2,r3,r2
    25c4:	1009883a 	mov	r4,r2
    25c8:	e17ffc17 	ldw	r5,-16(fp)
    25cc:	01800ff4 	movhi	r6,63
    25d0:	31a0a904 	addi	r6,r6,-32092
    25d4:	01c00074 	movhi	r7,1
    25d8:	39de6904 	addi	r7,r7,31140
    25dc:	e0bffa17 	ldw	r2,-24(fp)
    25e0:	d8800015 	stw	r2,0(sp)
    25e4:	00029480 	call	2948 <amplitude_operation>

	for(i = 0; i < BUF_SIZE; i = i + length_of_each_period)
    25e8:	e03ff915 	stw	zero,-28(fp)
    25ec:	00002506 	br	2684 <plot_audio+0x1b0>
			//printf("%llu \n", sum);
		}
		sum = sum / length_of_each_period;
		average[n] = sum;*/
		//printf("%llu, %u\n", sum, average[n]);
		if(average[n] > max_average)
    25f0:	e0bfee17 	ldw	r2,-72(fp)
    25f4:	e0fffa17 	ldw	r3,-24(fp)
    25f8:	1085883a 	add	r2,r2,r2
    25fc:	1085883a 	add	r2,r2,r2
    2600:	10c5883a 	add	r2,r2,r3
    2604:	10c00017 	ldw	r3,0(r2)
    2608:	e0bff117 	ldw	r2,-60(fp)
    260c:	10c0070e 	bge	r2,r3,262c <plot_audio+0x158>
		{
			max_average = average[n];
    2610:	e0bfee17 	ldw	r2,-72(fp)
    2614:	e0fffa17 	ldw	r3,-24(fp)
    2618:	1085883a 	add	r2,r2,r2
    261c:	1085883a 	add	r2,r2,r2
    2620:	10c5883a 	add	r2,r2,r3
    2624:	10800017 	ldw	r2,0(r2)
    2628:	e0bff115 	stw	r2,-60(fp)
		}
		if(average[n] < min_average)
    262c:	e0bfee17 	ldw	r2,-72(fp)
    2630:	e0fffa17 	ldw	r3,-24(fp)
    2634:	1085883a 	add	r2,r2,r2
    2638:	1085883a 	add	r2,r2,r2
    263c:	10c5883a 	add	r2,r2,r3
    2640:	10c00017 	ldw	r3,0(r2)
    2644:	e0bff017 	ldw	r2,-64(fp)
    2648:	1880070e 	bge	r3,r2,2668 <plot_audio+0x194>
		{
			min_average = average[n];
    264c:	e0bfee17 	ldw	r2,-72(fp)
    2650:	e0fffa17 	ldw	r3,-24(fp)
    2654:	1085883a 	add	r2,r2,r2
    2658:	1085883a 	add	r2,r2,r2
    265c:	10c5883a 	add	r2,r2,r3
    2660:	10800017 	ldw	r2,0(r2)
    2664:	e0bff015 	stw	r2,-64(fp)
		}
		n++;
    2668:	e0bfee17 	ldw	r2,-72(fp)
    266c:	10800044 	addi	r2,r2,1
    2670:	e0bfee15 	stw	r2,-72(fp)
	int n = 0;
	unsigned long long sum;

	amplitude_operation((BUF_SIZE/N), N, record_r_buf, record_l_buf, average);

	for(i = 0; i < BUF_SIZE; i = i + length_of_each_period)
    2674:	e0fff517 	ldw	r3,-44(fp)
    2678:	e0bff917 	ldw	r2,-28(fp)
    267c:	1885883a 	add	r2,r3,r2
    2680:	e0bff915 	stw	r2,-28(fp)
    2684:	e0fff917 	ldw	r3,-28(fp)
    2688:	00800234 	movhi	r2,8
    268c:	10a847c4 	addi	r2,r2,-24289
    2690:	10ffd70e 	bge	r2,r3,25f0 <plot_audio+0x11c>
		{
			min_average = average[n];
		}
		n++;
	}
	n = 0;
    2694:	e03fee15 	stw	zero,-72(fp)
	int k;
	for(k = 0; k < N; k++)
    2698:	e03feb15 	stw	zero,-84(fp)
    269c:	00003c06 	br	2790 <plot_audio+0x2bc>
	{
		average[n] = ((average[n] - min_average) * max_heigh_of_plots) / (max_average - min_average);
    26a0:	e17fee17 	ldw	r5,-72(fp)
    26a4:	e0bfee17 	ldw	r2,-72(fp)
    26a8:	e0fffa17 	ldw	r3,-24(fp)
    26ac:	1085883a 	add	r2,r2,r2
    26b0:	1085883a 	add	r2,r2,r2
    26b4:	10c5883a 	add	r2,r2,r3
    26b8:	10c00017 	ldw	r3,0(r2)
    26bc:	e0bff017 	ldw	r2,-64(fp)
    26c0:	1887c83a 	sub	r3,r3,r2
    26c4:	e0bff217 	ldw	r2,-56(fp)
    26c8:	1889383a 	mul	r4,r3,r2
    26cc:	e0fff117 	ldw	r3,-60(fp)
    26d0:	e0bff017 	ldw	r2,-64(fp)
    26d4:	1885c83a 	sub	r2,r3,r2
    26d8:	2089283a 	div	r4,r4,r2
    26dc:	e0fffa17 	ldw	r3,-24(fp)
    26e0:	2945883a 	add	r2,r5,r5
    26e4:	1085883a 	add	r2,r2,r2
    26e8:	10c5883a 	add	r2,r2,r3
    26ec:	11000015 	stw	r4,0(r2)
		//printf("%u, ", (average[n] - min_average));
		//printf("%u\n", min_average);

		//average[n] = (average[n] > 0) ? average[n] : 0;

		alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_of_current_drawing_plot * 4, (y_of_each_plot - average[n]) * 4, (x_of_current_drawing_plot + width_of_each_plot - 2)* 4,
    26f0:	e0bff317 	ldw	r2,-52(fp)
    26f4:	1085883a 	add	r2,r2,r2
    26f8:	1085883a 	add	r2,r2,r2
    26fc:	100b883a 	mov	r5,r2
    2700:	e0bfee17 	ldw	r2,-72(fp)
    2704:	e0fffa17 	ldw	r3,-24(fp)
    2708:	1085883a 	add	r2,r2,r2
    270c:	1085883a 	add	r2,r2,r2
    2710:	10c5883a 	add	r2,r2,r3
    2714:	10c00017 	ldw	r3,0(r2)
    2718:	e0bff817 	ldw	r2,-32(fp)
    271c:	10c5c83a 	sub	r2,r2,r3
    2720:	1085883a 	add	r2,r2,r2
    2724:	1085883a 	add	r2,r2,r2
    2728:	100d883a 	mov	r6,r2
    272c:	e0fff317 	ldw	r3,-52(fp)
    2730:	e0bff417 	ldw	r2,-48(fp)
    2734:	1885883a 	add	r2,r3,r2
    2738:	1085883a 	add	r2,r2,r2
    273c:	1085883a 	add	r2,r2,r2
    2740:	11fffe04 	addi	r7,r2,-8
    2744:	e0bff817 	ldw	r2,-32(fp)
    2748:	1085883a 	add	r2,r2,r2
    274c:	1085883a 	add	r2,r2,r2
    2750:	d8800015 	stw	r2,0(sp)
    2754:	e0bfef17 	ldw	r2,-68(fp)
    2758:	d8800115 	stw	r2,4(sp)
    275c:	d8000215 	stw	zero,8(sp)
    2760:	e13ffb17 	ldw	r4,-20(fp)
    2764:	0010bc00 	call	10bc0 <alt_up_pixel_buffer_dma_draw_box>
			y_of_each_plot * 4, color, 0);

		x_of_current_drawing_plot += width_of_each_plot;
    2768:	e0fff317 	ldw	r3,-52(fp)
    276c:	e0bff417 	ldw	r2,-48(fp)
    2770:	1885883a 	add	r2,r3,r2
    2774:	e0bff315 	stw	r2,-52(fp)
		n++;
    2778:	e0bfee17 	ldw	r2,-72(fp)
    277c:	10800044 	addi	r2,r2,1
    2780:	e0bfee15 	stw	r2,-72(fp)
		}
		n++;
	}
	n = 0;
	int k;
	for(k = 0; k < N; k++)
    2784:	e0bfeb17 	ldw	r2,-84(fp)
    2788:	10800044 	addi	r2,r2,1
    278c:	e0bfeb15 	stw	r2,-84(fp)
    2790:	e0ffeb17 	ldw	r3,-84(fp)
    2794:	e0bffc17 	ldw	r2,-16(fp)
    2798:	18bfc136 	bltu	r3,r2,26a0 <plot_audio+0x1cc>
    279c:	e6fffd17 	ldw	sp,-12(fp)
			y_of_each_plot * 4, color, 0);

		x_of_current_drawing_plot += width_of_each_plot;
		n++;
	}
}
    27a0:	e6ffff17 	ldw	sp,-4(fp)
    27a4:	e037883a 	mov	sp,fp
    27a8:	dfc00117 	ldw	ra,4(sp)
    27ac:	df000017 	ldw	fp,0(sp)
    27b0:	dec00204 	addi	sp,sp,8
    27b4:	f800283a 	ret

000027b8 <amplitude_circute_stop>:
void amplitude_circute_stop()
{
    27b8:	deffff04 	addi	sp,sp,-4
    27bc:	df000015 	stw	fp,0(sp)
    27c0:	d839883a 	mov	fp,sp

}
    27c4:	e037883a 	mov	sp,fp
    27c8:	df000017 	ldw	fp,0(sp)
    27cc:	dec00104 	addi	sp,sp,4
    27d0:	f800283a 	ret

000027d4 <amplitude_circute_set_size>:
void amplitude_circute_set_size(unsigned int size)
{
    27d4:	defffe04 	addi	sp,sp,-8
    27d8:	df000115 	stw	fp,4(sp)
    27dc:	df000104 	addi	fp,sp,4
    27e0:	e13fff15 	stw	r4,-4(fp)
	*(Base_Addr) = ((*(Base_Addr)) & 0x80000FFF) | (size << 12);
    27e4:	d1200417 	ldw	r4,-32752(gp)
    27e8:	d0a00417 	ldw	r2,-32752(gp)
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	00a00034 	movhi	r2,32768
    27f4:	1083ffc4 	addi	r2,r2,4095
    27f8:	1886703a 	and	r3,r3,r2
    27fc:	e0bfff17 	ldw	r2,-4(fp)
    2800:	1004933a 	slli	r2,r2,12
    2804:	1884b03a 	or	r2,r3,r2
    2808:	20800015 	stw	r2,0(r4)
}
    280c:	e037883a 	mov	sp,fp
    2810:	df000017 	ldw	fp,0(sp)
    2814:	dec00104 	addi	sp,sp,4
    2818:	f800283a 	ret

0000281c <amplitude_circute_set_num>:
void amplitude_circute_set_num(unsigned int num)
{
    281c:	defffe04 	addi	sp,sp,-8
    2820:	df000115 	stw	fp,4(sp)
    2824:	df000104 	addi	fp,sp,4
    2828:	e13fff15 	stw	r4,-4(fp)
	*(Base_Addr) = ((*(Base_Addr)) & 0xFFFFF001) | (num << 1);
    282c:	d1200417 	ldw	r4,-32752(gp)
    2830:	d0a00417 	ldw	r2,-32752(gp)
    2834:	10c00017 	ldw	r3,0(r2)
    2838:	00bc0044 	movi	r2,-4095
    283c:	1886703a 	and	r3,r3,r2
    2840:	e0bfff17 	ldw	r2,-4(fp)
    2844:	1085883a 	add	r2,r2,r2
    2848:	1884b03a 	or	r2,r3,r2
    284c:	20800015 	stw	r2,0(r4)
}
    2850:	e037883a 	mov	sp,fp
    2854:	df000017 	ldw	fp,0(sp)
    2858:	dec00104 	addi	sp,sp,4
    285c:	f800283a 	ret

00002860 <amplitude_circute_set_rbuff_addr>:
void amplitude_circute_set_rbuff_addr(int *rbuff_addr)
{
    2860:	defffe04 	addi	sp,sp,-8
    2864:	df000115 	stw	fp,4(sp)
    2868:	df000104 	addi	fp,sp,4
    286c:	e13fff15 	stw	r4,-4(fp)
	*(Base_Addr + 1) = rbuff_addr;
    2870:	d0a00417 	ldw	r2,-32752(gp)
    2874:	10c00104 	addi	r3,r2,4
    2878:	e0bfff17 	ldw	r2,-4(fp)
    287c:	18800015 	stw	r2,0(r3)
}
    2880:	e037883a 	mov	sp,fp
    2884:	df000017 	ldw	fp,0(sp)
    2888:	dec00104 	addi	sp,sp,4
    288c:	f800283a 	ret

00002890 <amplitude_circute_set_lbuff_addr>:
void amplitude_circute_set_lbuff_addr(int *lbuff_addr)
{
    2890:	defffe04 	addi	sp,sp,-8
    2894:	df000115 	stw	fp,4(sp)
    2898:	df000104 	addi	fp,sp,4
    289c:	e13fff15 	stw	r4,-4(fp)
	*(Base_Addr + 2) = lbuff_addr;
    28a0:	d0a00417 	ldw	r2,-32752(gp)
    28a4:	10c00204 	addi	r3,r2,8
    28a8:	e0bfff17 	ldw	r2,-4(fp)
    28ac:	18800015 	stw	r2,0(r3)
}
    28b0:	e037883a 	mov	sp,fp
    28b4:	df000017 	ldw	fp,0(sp)
    28b8:	dec00104 	addi	sp,sp,4
    28bc:	f800283a 	ret

000028c0 <amplitude_circute_set_dest_addr>:
void amplitude_circute_set_dest_addr(int *dest_addr)
{
    28c0:	defffe04 	addi	sp,sp,-8
    28c4:	df000115 	stw	fp,4(sp)
    28c8:	df000104 	addi	fp,sp,4
    28cc:	e13fff15 	stw	r4,-4(fp)
	*(Base_Addr + 3) = dest_addr;
    28d0:	d0a00417 	ldw	r2,-32752(gp)
    28d4:	10c00304 	addi	r3,r2,12
    28d8:	e0bfff17 	ldw	r2,-4(fp)
    28dc:	18800015 	stw	r2,0(r3)
}
    28e0:	e037883a 	mov	sp,fp
    28e4:	df000017 	ldw	fp,0(sp)
    28e8:	dec00104 	addi	sp,sp,4
    28ec:	f800283a 	ret

000028f0 <amplitude_circute_start>:
void amplitude_circute_start()
{
    28f0:	deffff04 	addi	sp,sp,-4
    28f4:	df000015 	stw	fp,0(sp)
    28f8:	d839883a 	mov	fp,sp
	*(Base_Addr) = (*(Base_Addr)) | 0x00000001;
    28fc:	d0e00417 	ldw	r3,-32752(gp)
    2900:	d0a00417 	ldw	r2,-32752(gp)
    2904:	10800017 	ldw	r2,0(r2)
    2908:	10800054 	ori	r2,r2,1
    290c:	18800015 	stw	r2,0(r3)
}
    2910:	e037883a 	mov	sp,fp
    2914:	df000017 	ldw	fp,0(sp)
    2918:	dec00104 	addi	sp,sp,4
    291c:	f800283a 	ret

00002920 <amplitude_circute_get_status>:
int amplitude_circute_get_status()
{
    2920:	deffff04 	addi	sp,sp,-4
    2924:	df000015 	stw	fp,0(sp)
    2928:	d839883a 	mov	fp,sp
		return (*(Base_Addr)) >> 31;
    292c:	d0a00417 	ldw	r2,-32752(gp)
    2930:	10800017 	ldw	r2,0(r2)
    2934:	1004d7fa 	srli	r2,r2,31
}
    2938:	e037883a 	mov	sp,fp
    293c:	df000017 	ldw	fp,0(sp)
    2940:	dec00104 	addi	sp,sp,4
    2944:	f800283a 	ret

00002948 <amplitude_operation>:
void amplitude_operation(int size, int num, int rbuff_addr, int lbuff_addr, int dest_addr)
{
    2948:	defffa04 	addi	sp,sp,-24
    294c:	dfc00515 	stw	ra,20(sp)
    2950:	df000415 	stw	fp,16(sp)
    2954:	df000404 	addi	fp,sp,16
    2958:	e13ffc15 	stw	r4,-16(fp)
    295c:	e17ffd15 	stw	r5,-12(fp)
    2960:	e1bffe15 	stw	r6,-8(fp)
    2964:	e1ffff15 	stw	r7,-4(fp)
	amplitude_circute_stop();
    2968:	00027b80 	call	27b8 <amplitude_circute_stop>
	amplitude_circute_set_size(size);
    296c:	e13ffc17 	ldw	r4,-16(fp)
    2970:	00027d40 	call	27d4 <amplitude_circute_set_size>
	// also for your debugging make int amplitude_circute_get_size(); (optional)
	amplitude_circute_set_num(num);
    2974:	e13ffd17 	ldw	r4,-12(fp)
    2978:	000281c0 	call	281c <amplitude_circute_set_num>
	// also for your debugging make int amplitude_circute_get_num(); (optional)
	amplitude_circute_set_rbuff_addr(rbuff_addr);
    297c:	e13ffe17 	ldw	r4,-8(fp)
    2980:	00028600 	call	2860 <amplitude_circute_set_rbuff_addr>
	// also for your debugging make int amplitude_circute_get_lbuff_addr(); (optional)
	amplitude_circute_set_lbuff_addr(lbuff_addr);
    2984:	e13fff17 	ldw	r4,-4(fp)
    2988:	00028900 	call	2890 <amplitude_circute_set_lbuff_addr>
	// also for your debugging make int amplitude_circute_get_rbuff_addr(); (optional)
	amplitude_circute_set_dest_addr(dest_addr);
    298c:	e1000217 	ldw	r4,8(fp)
    2990:	00028c00 	call	28c0 <amplitude_circute_set_dest_addr>
	// also for your debugging make int amplitude_circute_get_dest_addr(); (optional)
	amplitude_circute_start();
    2994:	00028f00 	call	28f0 <amplitude_circute_start>
	while(amplitude_circute_get_status() == 0);
    2998:	00029200 	call	2920 <amplitude_circute_get_status>
    299c:	1005003a 	cmpeq	r2,r2,zero
    29a0:	103ffd1e 	bne	r2,zero,2998 <amplitude_operation+0x50>

	return;
}
    29a4:	e037883a 	mov	sp,fp
    29a8:	dfc00117 	ldw	ra,4(sp)
    29ac:	df000017 	ldw	fp,0(sp)
    29b0:	dec00204 	addi	sp,sp,8
    29b4:	f800283a 	ret

000029b8 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    29b8:	defffa04 	addi	sp,sp,-24
    29bc:	dfc00515 	stw	ra,20(sp)
    29c0:	df000415 	stw	fp,16(sp)
    29c4:	df000404 	addi	fp,sp,16
    29c8:	e13ffe15 	stw	r4,-8(fp)
    29cc:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    29d0:	e0bffe17 	ldw	r2,-8(fp)
    29d4:	10800517 	ldw	r2,20(r2)
    29d8:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    29dc:	e0bffe17 	ldw	r2,-8(fp)
    29e0:	10800017 	ldw	r2,0(r2)
    29e4:	10800a17 	ldw	r2,40(r2)
    29e8:	10800304 	addi	r2,r2,12
    29ec:	10800037 	ldwio	r2,0(r2)
    29f0:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    29f4:	e0bffe17 	ldw	r2,-8(fp)
    29f8:	10800017 	ldw	r2,0(r2)
    29fc:	10800a17 	ldw	r2,40(r2)
    2a00:	10800304 	addi	r2,r2,12
    2a04:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    2a08:	e0bffc17 	ldw	r2,-16(fp)
    2a0c:	10800098 	cmpnei	r2,r2,2
    2a10:	1000081e 	bne	r2,zero,2a34 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    2a14:	00800074 	movhi	r2,1
    2a18:	109e3c04 	addi	r2,r2,30960
    2a1c:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2a20:	e13ffd17 	ldw	r4,-12(fp)
    2a24:	000e7540 	call	e754 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    2a28:	e13ffd17 	ldw	r4,-12(fp)
    2a2c:	000e5a40 	call	e5a4 <alt_up_audio_enable_read_interrupt>
    2a30:	00000a06 	br	2a5c <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    2a34:	e0bffc17 	ldw	r2,-16(fp)
    2a38:	10800118 	cmpnei	r2,r2,4
    2a3c:	1000071e 	bne	r2,zero,2a5c <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    2a40:	00800074 	movhi	r2,1
    2a44:	109e3b04 	addi	r2,r2,30956
    2a48:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2a4c:	e13ffd17 	ldw	r4,-12(fp)
    2a50:	000e7540 	call	e754 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    2a54:	e13ffd17 	ldw	r4,-12(fp)
    2a58:	000e6400 	call	e640 <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    2a5c:	e037883a 	mov	sp,fp
    2a60:	dfc00117 	ldw	ra,4(sp)
    2a64:	df000017 	ldw	fp,0(sp)
    2a68:	dec00204 	addi	sp,sp,8
    2a6c:	f800283a 	ret

00002a70 <__floatsisf>:
    2a70:	2006d7fa 	srli	r3,r4,31
    2a74:	defffa04 	addi	sp,sp,-24
    2a78:	008000c4 	movi	r2,3
    2a7c:	dfc00515 	stw	ra,20(sp)
    2a80:	dc000415 	stw	r16,16(sp)
    2a84:	d8800015 	stw	r2,0(sp)
    2a88:	d8c00115 	stw	r3,4(sp)
    2a8c:	2000081e 	bne	r4,zero,2ab0 <__floatsisf+0x40>
    2a90:	00800084 	movi	r2,2
    2a94:	d8800015 	stw	r2,0(sp)
    2a98:	d809883a 	mov	r4,sp
    2a9c:	0002d680 	call	2d68 <__pack_f>
    2aa0:	dfc00517 	ldw	ra,20(sp)
    2aa4:	dc000417 	ldw	r16,16(sp)
    2aa8:	dec00604 	addi	sp,sp,24
    2aac:	f800283a 	ret
    2ab0:	00800784 	movi	r2,30
    2ab4:	1807003a 	cmpeq	r3,r3,zero
    2ab8:	d8800215 	stw	r2,8(sp)
    2abc:	18000e1e 	bne	r3,zero,2af8 <__floatsisf+0x88>
    2ac0:	00a00034 	movhi	r2,32768
    2ac4:	20800e26 	beq	r4,r2,2b00 <__floatsisf+0x90>
    2ac8:	0121c83a 	sub	r16,zero,r4
    2acc:	8009883a 	mov	r4,r16
    2ad0:	dc000315 	stw	r16,12(sp)
    2ad4:	0002ce80 	call	2ce8 <__clzsi2>
    2ad8:	117fffc4 	addi	r5,r2,-1
    2adc:	017fee0e 	bge	zero,r5,2a98 <__floatsisf+0x28>
    2ae0:	d8800217 	ldw	r2,8(sp)
    2ae4:	8146983a 	sll	r3,r16,r5
    2ae8:	1145c83a 	sub	r2,r2,r5
    2aec:	d8c00315 	stw	r3,12(sp)
    2af0:	d8800215 	stw	r2,8(sp)
    2af4:	003fe806 	br	2a98 <__floatsisf+0x28>
    2af8:	2021883a 	mov	r16,r4
    2afc:	003ff306 	br	2acc <__floatsisf+0x5c>
    2b00:	00b3c034 	movhi	r2,52992
    2b04:	003fe606 	br	2aa0 <__floatsisf+0x30>

00002b08 <__fixsfsi>:
    2b08:	defffa04 	addi	sp,sp,-24
    2b0c:	d9000015 	stw	r4,0(sp)
    2b10:	d9400104 	addi	r5,sp,4
    2b14:	d809883a 	mov	r4,sp
    2b18:	dfc00515 	stw	ra,20(sp)
    2b1c:	0002ec80 	call	2ec8 <__unpack_f>
    2b20:	d8c00117 	ldw	r3,4(sp)
    2b24:	00800084 	movi	r2,2
    2b28:	1880041e 	bne	r3,r2,2b3c <__fixsfsi+0x34>
    2b2c:	0005883a 	mov	r2,zero
    2b30:	dfc00517 	ldw	ra,20(sp)
    2b34:	dec00604 	addi	sp,sp,24
    2b38:	f800283a 	ret
    2b3c:	00800044 	movi	r2,1
    2b40:	10fffa2e 	bgeu	r2,r3,2b2c <__fixsfsi+0x24>
    2b44:	00800104 	movi	r2,4
    2b48:	18800426 	beq	r3,r2,2b5c <__fixsfsi+0x54>
    2b4c:	d8800317 	ldw	r2,12(sp)
    2b50:	103ff616 	blt	r2,zero,2b2c <__fixsfsi+0x24>
    2b54:	00c00784 	movi	r3,30
    2b58:	1880070e 	bge	r3,r2,2b78 <__fixsfsi+0x70>
    2b5c:	d8800217 	ldw	r2,8(sp)
    2b60:	10000c1e 	bne	r2,zero,2b94 <__fixsfsi+0x8c>
    2b64:	00a00034 	movhi	r2,32768
    2b68:	10bfffc4 	addi	r2,r2,-1
    2b6c:	dfc00517 	ldw	ra,20(sp)
    2b70:	dec00604 	addi	sp,sp,24
    2b74:	f800283a 	ret
    2b78:	1885c83a 	sub	r2,r3,r2
    2b7c:	d9000217 	ldw	r4,8(sp)
    2b80:	d8c00417 	ldw	r3,16(sp)
    2b84:	1884d83a 	srl	r2,r3,r2
    2b88:	203fe926 	beq	r4,zero,2b30 <__fixsfsi+0x28>
    2b8c:	0085c83a 	sub	r2,zero,r2
    2b90:	003fe706 	br	2b30 <__fixsfsi+0x28>
    2b94:	00a00034 	movhi	r2,32768
    2b98:	003fe506 	br	2b30 <__fixsfsi+0x28>

00002b9c <__extendsfdf2>:
    2b9c:	defff904 	addi	sp,sp,-28
    2ba0:	d9000115 	stw	r4,4(sp)
    2ba4:	d9400204 	addi	r5,sp,8
    2ba8:	d9000104 	addi	r4,sp,4
    2bac:	dfc00615 	stw	ra,24(sp)
    2bb0:	0002ec80 	call	2ec8 <__unpack_f>
    2bb4:	d9c00517 	ldw	r7,20(sp)
    2bb8:	0011883a 	mov	r8,zero
    2bbc:	400697ba 	slli	r3,r8,30
    2bc0:	3812d0ba 	srli	r9,r7,2
    2bc4:	380497ba 	slli	r2,r7,30
    2bc8:	d9000217 	ldw	r4,8(sp)
    2bcc:	d9400317 	ldw	r5,12(sp)
    2bd0:	d9800417 	ldw	r6,16(sp)
    2bd4:	48c6b03a 	or	r3,r9,r3
    2bd8:	100f883a 	mov	r7,r2
    2bdc:	d8c00015 	stw	r3,0(sp)
    2be0:	0002cb00 	call	2cb0 <__make_dp>
    2be4:	dfc00617 	ldw	ra,24(sp)
    2be8:	dec00704 	addi	sp,sp,28
    2bec:	f800283a 	ret

00002bf0 <__floatunsisf>:
    2bf0:	defff904 	addi	sp,sp,-28
    2bf4:	dc400515 	stw	r17,20(sp)
    2bf8:	dc000415 	stw	r16,16(sp)
    2bfc:	dfc00615 	stw	ra,24(sp)
    2c00:	04400784 	movi	r17,30
    2c04:	2021883a 	mov	r16,r4
    2c08:	d8000115 	stw	zero,4(sp)
    2c0c:	2000091e 	bne	r4,zero,2c34 <__floatunsisf+0x44>
    2c10:	00800084 	movi	r2,2
    2c14:	d8800015 	stw	r2,0(sp)
    2c18:	d809883a 	mov	r4,sp
    2c1c:	0002d680 	call	2d68 <__pack_f>
    2c20:	dfc00617 	ldw	ra,24(sp)
    2c24:	dc400517 	ldw	r17,20(sp)
    2c28:	dc000417 	ldw	r16,16(sp)
    2c2c:	dec00704 	addi	sp,sp,28
    2c30:	f800283a 	ret
    2c34:	008000c4 	movi	r2,3
    2c38:	d9000315 	stw	r4,12(sp)
    2c3c:	d8800015 	stw	r2,0(sp)
    2c40:	dc400215 	stw	r17,8(sp)
    2c44:	0002ce80 	call	2ce8 <__clzsi2>
    2c48:	117fffc4 	addi	r5,r2,-1
    2c4c:	0147c83a 	sub	r3,zero,r5
    2c50:	00800044 	movi	r2,1
    2c54:	10c4983a 	sll	r2,r2,r3
    2c58:	80c6d83a 	srl	r3,r16,r3
    2c5c:	8949c83a 	sub	r4,r17,r5
    2c60:	10bfffc4 	addi	r2,r2,-1
    2c64:	8084703a 	and	r2,r16,r2
    2c68:	1004c03a 	cmpne	r2,r2,zero
    2c6c:	1886b03a 	or	r3,r3,r2
    2c70:	28000c16 	blt	r5,zero,2ca4 <__floatunsisf+0xb4>
    2c74:	8144983a 	sll	r2,r16,r5
    2c78:	8947c83a 	sub	r3,r17,r5
    2c7c:	283fe626 	beq	r5,zero,2c18 <__floatunsisf+0x28>
    2c80:	d809883a 	mov	r4,sp
    2c84:	d8800315 	stw	r2,12(sp)
    2c88:	d8c00215 	stw	r3,8(sp)
    2c8c:	0002d680 	call	2d68 <__pack_f>
    2c90:	dfc00617 	ldw	ra,24(sp)
    2c94:	dc400517 	ldw	r17,20(sp)
    2c98:	dc000417 	ldw	r16,16(sp)
    2c9c:	dec00704 	addi	sp,sp,28
    2ca0:	f800283a 	ret
    2ca4:	d8c00315 	stw	r3,12(sp)
    2ca8:	d9000215 	stw	r4,8(sp)
    2cac:	003fda06 	br	2c18 <__floatunsisf+0x28>

00002cb0 <__make_dp>:
    2cb0:	defff904 	addi	sp,sp,-28
    2cb4:	d8c00717 	ldw	r3,28(sp)
    2cb8:	d9000015 	stw	r4,0(sp)
    2cbc:	d809883a 	mov	r4,sp
    2cc0:	dfc00515 	stw	ra,20(sp)
    2cc4:	d9c00615 	stw	r7,24(sp)
    2cc8:	d9400115 	stw	r5,4(sp)
    2ccc:	d9800215 	stw	r6,8(sp)
    2cd0:	d8c00415 	stw	r3,16(sp)
    2cd4:	d9c00315 	stw	r7,12(sp)
    2cd8:	0002f900 	call	2f90 <__pack_d>
    2cdc:	dfc00517 	ldw	ra,20(sp)
    2ce0:	dec00704 	addi	sp,sp,28
    2ce4:	f800283a 	ret

00002ce8 <__clzsi2>:
    2ce8:	00bfffd4 	movui	r2,65535
    2cec:	11000e36 	bltu	r2,r4,2d28 <__clzsi2+0x40>
    2cf0:	00803fc4 	movi	r2,255
    2cf4:	01400204 	movi	r5,8
    2cf8:	0007883a 	mov	r3,zero
    2cfc:	11001036 	bltu	r2,r4,2d40 <__clzsi2+0x58>
    2d00:	000b883a 	mov	r5,zero
    2d04:	20c6d83a 	srl	r3,r4,r3
    2d08:	00800074 	movhi	r2,1
    2d0c:	108d6f04 	addi	r2,r2,13756
    2d10:	1887883a 	add	r3,r3,r2
    2d14:	18800003 	ldbu	r2,0(r3)
    2d18:	00c00804 	movi	r3,32
    2d1c:	2885883a 	add	r2,r5,r2
    2d20:	1885c83a 	sub	r2,r3,r2
    2d24:	f800283a 	ret
    2d28:	01400404 	movi	r5,16
    2d2c:	00804034 	movhi	r2,256
    2d30:	10bfffc4 	addi	r2,r2,-1
    2d34:	2807883a 	mov	r3,r5
    2d38:	113ff22e 	bgeu	r2,r4,2d04 <__clzsi2+0x1c>
    2d3c:	01400604 	movi	r5,24
    2d40:	2807883a 	mov	r3,r5
    2d44:	20c6d83a 	srl	r3,r4,r3
    2d48:	00800074 	movhi	r2,1
    2d4c:	108d6f04 	addi	r2,r2,13756
    2d50:	1887883a 	add	r3,r3,r2
    2d54:	18800003 	ldbu	r2,0(r3)
    2d58:	00c00804 	movi	r3,32
    2d5c:	2885883a 	add	r2,r5,r2
    2d60:	1885c83a 	sub	r2,r3,r2
    2d64:	f800283a 	ret

00002d68 <__pack_f>:
    2d68:	20c00017 	ldw	r3,0(r4)
    2d6c:	01c00044 	movi	r7,1
    2d70:	21800317 	ldw	r6,12(r4)
    2d74:	21400117 	ldw	r5,4(r4)
    2d78:	38c02d2e 	bgeu	r7,r3,2e30 <__pack_f+0xc8>
    2d7c:	00800104 	movi	r2,4
    2d80:	18802826 	beq	r3,r2,2e24 <__pack_f+0xbc>
    2d84:	00800084 	movi	r2,2
    2d88:	18800126 	beq	r3,r2,2d90 <__pack_f+0x28>
    2d8c:	3000101e 	bne	r6,zero,2dd0 <__pack_f+0x68>
    2d90:	000d883a 	mov	r6,zero
    2d94:	0007883a 	mov	r3,zero
    2d98:	19003fcc 	andi	r4,r3,255
    2d9c:	200895fa 	slli	r4,r4,23
    2da0:	00c02034 	movhi	r3,128
    2da4:	18ffffc4 	addi	r3,r3,-1
    2da8:	30c6703a 	and	r3,r6,r3
    2dac:	10a0002c 	andhi	r2,r2,32768
    2db0:	10c4b03a 	or	r2,r2,r3
    2db4:	280a97fa 	slli	r5,r5,31
    2db8:	1104b03a 	or	r2,r2,r4
    2dbc:	00e00034 	movhi	r3,32768
    2dc0:	18ffffc4 	addi	r3,r3,-1
    2dc4:	10c4703a 	and	r2,r2,r3
    2dc8:	1144b03a 	or	r2,r2,r5
    2dcc:	f800283a 	ret
    2dd0:	21000217 	ldw	r4,8(r4)
    2dd4:	00bfe084 	movi	r2,-126
    2dd8:	20801b16 	blt	r4,r2,2e48 <__pack_f+0xe0>
    2ddc:	00801fc4 	movi	r2,127
    2de0:	11001016 	blt	r2,r4,2e24 <__pack_f+0xbc>
    2de4:	308e703a 	and	r7,r6,r2
    2de8:	2087883a 	add	r3,r4,r2
    2dec:	00801004 	movi	r2,64
    2df0:	38800526 	beq	r7,r2,2e08 <__pack_f+0xa0>
    2df4:	31800fc4 	addi	r6,r6,63
    2df8:	30000716 	blt	r6,zero,2e18 <__pack_f+0xb0>
    2dfc:	300490ba 	slli	r2,r6,2
    2e00:	100cd27a 	srli	r6,r2,9
    2e04:	003fe406 	br	2d98 <__pack_f+0x30>
    2e08:	3080200c 	andi	r2,r6,128
    2e0c:	103ffa26 	beq	r2,zero,2df8 <__pack_f+0x90>
    2e10:	31cd883a 	add	r6,r6,r7
    2e14:	003ff806 	br	2df8 <__pack_f+0x90>
    2e18:	300cd07a 	srli	r6,r6,1
    2e1c:	18c00044 	addi	r3,r3,1
    2e20:	003ff606 	br	2dfc <__pack_f+0x94>
    2e24:	000d883a 	mov	r6,zero
    2e28:	00ffffc4 	movi	r3,-1
    2e2c:	003fda06 	br	2d98 <__pack_f+0x30>
    2e30:	31800434 	orhi	r6,r6,16
    2e34:	00802034 	movhi	r2,128
    2e38:	10bfffc4 	addi	r2,r2,-1
    2e3c:	308c703a 	and	r6,r6,r2
    2e40:	00ffffc4 	movi	r3,-1
    2e44:	003fd406 	br	2d98 <__pack_f+0x30>
    2e48:	1109c83a 	sub	r4,r2,r4
    2e4c:	00800644 	movi	r2,25
    2e50:	11001216 	blt	r2,r4,2e9c <__pack_f+0x134>
    2e54:	3904983a 	sll	r2,r7,r4
    2e58:	3106d83a 	srl	r3,r6,r4
    2e5c:	10bfffc4 	addi	r2,r2,-1
    2e60:	3084703a 	and	r2,r6,r2
    2e64:	1004c03a 	cmpne	r2,r2,zero
    2e68:	1886b03a 	or	r3,r3,r2
    2e6c:	19001fcc 	andi	r4,r3,127
    2e70:	00801004 	movi	r2,64
    2e74:	20800c26 	beq	r4,r2,2ea8 <__pack_f+0x140>
    2e78:	18c00fc4 	addi	r3,r3,63
    2e7c:	00900034 	movhi	r2,16384
    2e80:	10bfffc4 	addi	r2,r2,-1
    2e84:	180cd1fa 	srli	r6,r3,7
    2e88:	10c7803a 	cmpltu	r3,r2,r3
    2e8c:	00802034 	movhi	r2,128
    2e90:	10bfffc4 	addi	r2,r2,-1
    2e94:	308c703a 	and	r6,r6,r2
    2e98:	003fbf06 	br	2d98 <__pack_f+0x30>
    2e9c:	0007883a 	mov	r3,zero
    2ea0:	000d883a 	mov	r6,zero
    2ea4:	003ff906 	br	2e8c <__pack_f+0x124>
    2ea8:	1880200c 	andi	r2,r3,128
    2eac:	10000126 	beq	r2,zero,2eb4 <__pack_f+0x14c>
    2eb0:	1907883a 	add	r3,r3,r4
    2eb4:	180cd1fa 	srli	r6,r3,7
    2eb8:	00900034 	movhi	r2,16384
    2ebc:	10bfffc4 	addi	r2,r2,-1
    2ec0:	10c7803a 	cmpltu	r3,r2,r3
    2ec4:	003ff106 	br	2e8c <__pack_f+0x124>

00002ec8 <__unpack_f>:
    2ec8:	21800017 	ldw	r6,0(r4)
    2ecc:	00c02034 	movhi	r3,128
    2ed0:	18ffffc4 	addi	r3,r3,-1
    2ed4:	3004d5fa 	srli	r2,r6,23
    2ed8:	3008d7fa 	srli	r4,r6,31
    2edc:	30ce703a 	and	r7,r6,r3
    2ee0:	10c03fcc 	andi	r3,r2,255
    2ee4:	29000115 	stw	r4,4(r5)
    2ee8:	1800131e 	bne	r3,zero,2f38 <__unpack_f+0x70>
    2eec:	38000f26 	beq	r7,zero,2f2c <__unpack_f+0x64>
    2ef0:	380691fa 	slli	r3,r7,7
    2ef4:	01bfe084 	movi	r6,-126
    2ef8:	008000c4 	movi	r2,3
    2efc:	01100034 	movhi	r4,16384
    2f00:	213fffc4 	addi	r4,r4,-1
    2f04:	28800015 	stw	r2,0(r5)
    2f08:	29800215 	stw	r6,8(r5)
    2f0c:	20c00536 	bltu	r4,r3,2f24 <__unpack_f+0x5c>
    2f10:	3005883a 	mov	r2,r6
    2f14:	18c7883a 	add	r3,r3,r3
    2f18:	10bfffc4 	addi	r2,r2,-1
    2f1c:	20fffd2e 	bgeu	r4,r3,2f14 <__unpack_f+0x4c>
    2f20:	28800215 	stw	r2,8(r5)
    2f24:	28c00315 	stw	r3,12(r5)
    2f28:	f800283a 	ret
    2f2c:	00800084 	movi	r2,2
    2f30:	28800015 	stw	r2,0(r5)
    2f34:	f800283a 	ret
    2f38:	00803fc4 	movi	r2,255
    2f3c:	18800826 	beq	r3,r2,2f60 <__unpack_f+0x98>
    2f40:	380491fa 	slli	r2,r7,7
    2f44:	18ffe044 	addi	r3,r3,-127
    2f48:	28c00215 	stw	r3,8(r5)
    2f4c:	10900034 	orhi	r2,r2,16384
    2f50:	28800315 	stw	r2,12(r5)
    2f54:	008000c4 	movi	r2,3
    2f58:	28800015 	stw	r2,0(r5)
    2f5c:	f800283a 	ret
    2f60:	3800031e 	bne	r7,zero,2f70 <__unpack_f+0xa8>
    2f64:	00800104 	movi	r2,4
    2f68:	28800015 	stw	r2,0(r5)
    2f6c:	f800283a 	ret
    2f70:	3080042c 	andhi	r2,r6,16
    2f74:	10000426 	beq	r2,zero,2f88 <__unpack_f+0xc0>
    2f78:	00800044 	movi	r2,1
    2f7c:	28800015 	stw	r2,0(r5)
    2f80:	29c00315 	stw	r7,12(r5)
    2f84:	f800283a 	ret
    2f88:	28000015 	stw	zero,0(r5)
    2f8c:	003ffc06 	br	2f80 <__unpack_f+0xb8>

00002f90 <__pack_d>:
    2f90:	20c00017 	ldw	r3,0(r4)
    2f94:	defffd04 	addi	sp,sp,-12
    2f98:	dc000015 	stw	r16,0(sp)
    2f9c:	dc800215 	stw	r18,8(sp)
    2fa0:	dc400115 	stw	r17,4(sp)
    2fa4:	00800044 	movi	r2,1
    2fa8:	22000317 	ldw	r8,12(r4)
    2fac:	001f883a 	mov	r15,zero
    2fb0:	22400417 	ldw	r9,16(r4)
    2fb4:	24000117 	ldw	r16,4(r4)
    2fb8:	10c0552e 	bgeu	r2,r3,3110 <__pack_d+0x180>
    2fbc:	00800104 	movi	r2,4
    2fc0:	18804f26 	beq	r3,r2,3100 <__pack_d+0x170>
    2fc4:	00800084 	movi	r2,2
    2fc8:	18800226 	beq	r3,r2,2fd4 <__pack_d+0x44>
    2fcc:	4244b03a 	or	r2,r8,r9
    2fd0:	10001a1e 	bne	r2,zero,303c <__pack_d+0xac>
    2fd4:	000d883a 	mov	r6,zero
    2fd8:	000f883a 	mov	r7,zero
    2fdc:	0011883a 	mov	r8,zero
    2fe0:	00800434 	movhi	r2,16
    2fe4:	10bfffc4 	addi	r2,r2,-1
    2fe8:	301d883a 	mov	r14,r6
    2fec:	3884703a 	and	r2,r7,r2
    2ff0:	400a953a 	slli	r5,r8,20
    2ff4:	79bffc2c 	andhi	r6,r15,65520
    2ff8:	308cb03a 	or	r6,r6,r2
    2ffc:	00e00434 	movhi	r3,32784
    3000:	18ffffc4 	addi	r3,r3,-1
    3004:	800497fa 	slli	r2,r16,31
    3008:	30c6703a 	and	r3,r6,r3
    300c:	1946b03a 	or	r3,r3,r5
    3010:	01600034 	movhi	r5,32768
    3014:	297fffc4 	addi	r5,r5,-1
    3018:	194a703a 	and	r5,r3,r5
    301c:	288ab03a 	or	r5,r5,r2
    3020:	2807883a 	mov	r3,r5
    3024:	7005883a 	mov	r2,r14
    3028:	dc800217 	ldw	r18,8(sp)
    302c:	dc400117 	ldw	r17,4(sp)
    3030:	dc000017 	ldw	r16,0(sp)
    3034:	dec00304 	addi	sp,sp,12
    3038:	f800283a 	ret
    303c:	21000217 	ldw	r4,8(r4)
    3040:	00bf0084 	movi	r2,-1022
    3044:	20803f16 	blt	r4,r2,3144 <__pack_d+0x1b4>
    3048:	0080ffc4 	movi	r2,1023
    304c:	11002c16 	blt	r2,r4,3100 <__pack_d+0x170>
    3050:	00803fc4 	movi	r2,255
    3054:	408c703a 	and	r6,r8,r2
    3058:	00802004 	movi	r2,128
    305c:	0007883a 	mov	r3,zero
    3060:	000f883a 	mov	r7,zero
    3064:	2280ffc4 	addi	r10,r4,1023
    3068:	30801e26 	beq	r6,r2,30e4 <__pack_d+0x154>
    306c:	00801fc4 	movi	r2,127
    3070:	4089883a 	add	r4,r8,r2
    3074:	220d803a 	cmpltu	r6,r4,r8
    3078:	324d883a 	add	r6,r6,r9
    307c:	2011883a 	mov	r8,r4
    3080:	3013883a 	mov	r9,r6
    3084:	00880034 	movhi	r2,8192
    3088:	10bfffc4 	addi	r2,r2,-1
    308c:	12400d36 	bltu	r2,r9,30c4 <__pack_d+0x134>
    3090:	4804963a 	slli	r2,r9,24
    3094:	400cd23a 	srli	r6,r8,8
    3098:	480ed23a 	srli	r7,r9,8
    309c:	013fffc4 	movi	r4,-1
    30a0:	118cb03a 	or	r6,r2,r6
    30a4:	01400434 	movhi	r5,16
    30a8:	297fffc4 	addi	r5,r5,-1
    30ac:	3104703a 	and	r2,r6,r4
    30b0:	3946703a 	and	r3,r7,r5
    30b4:	5201ffcc 	andi	r8,r10,2047
    30b8:	100d883a 	mov	r6,r2
    30bc:	180f883a 	mov	r7,r3
    30c0:	003fc706 	br	2fe0 <__pack_d+0x50>
    30c4:	480897fa 	slli	r4,r9,31
    30c8:	4004d07a 	srli	r2,r8,1
    30cc:	4806d07a 	srli	r3,r9,1
    30d0:	52800044 	addi	r10,r10,1
    30d4:	2084b03a 	or	r2,r4,r2
    30d8:	1011883a 	mov	r8,r2
    30dc:	1813883a 	mov	r9,r3
    30e0:	003feb06 	br	3090 <__pack_d+0x100>
    30e4:	383fe11e 	bne	r7,zero,306c <__pack_d+0xdc>
    30e8:	01004004 	movi	r4,256
    30ec:	4104703a 	and	r2,r8,r4
    30f0:	10c4b03a 	or	r2,r2,r3
    30f4:	103fe326 	beq	r2,zero,3084 <__pack_d+0xf4>
    30f8:	3005883a 	mov	r2,r6
    30fc:	003fdc06 	br	3070 <__pack_d+0xe0>
    3100:	000d883a 	mov	r6,zero
    3104:	000f883a 	mov	r7,zero
    3108:	0201ffc4 	movi	r8,2047
    310c:	003fb406 	br	2fe0 <__pack_d+0x50>
    3110:	0005883a 	mov	r2,zero
    3114:	00c00234 	movhi	r3,8
    3118:	408cb03a 	or	r6,r8,r2
    311c:	48ceb03a 	or	r7,r9,r3
    3120:	013fffc4 	movi	r4,-1
    3124:	01400434 	movhi	r5,16
    3128:	297fffc4 	addi	r5,r5,-1
    312c:	3104703a 	and	r2,r6,r4
    3130:	3946703a 	and	r3,r7,r5
    3134:	100d883a 	mov	r6,r2
    3138:	180f883a 	mov	r7,r3
    313c:	0201ffc4 	movi	r8,2047
    3140:	003fa706 	br	2fe0 <__pack_d+0x50>
    3144:	1109c83a 	sub	r4,r2,r4
    3148:	00800e04 	movi	r2,56
    314c:	11004316 	blt	r2,r4,325c <__pack_d+0x2cc>
    3150:	21fff804 	addi	r7,r4,-32
    3154:	38004516 	blt	r7,zero,326c <__pack_d+0x2dc>
    3158:	49d8d83a 	srl	r12,r9,r7
    315c:	001b883a 	mov	r13,zero
    3160:	0023883a 	mov	r17,zero
    3164:	01400044 	movi	r5,1
    3168:	0025883a 	mov	r18,zero
    316c:	38004716 	blt	r7,zero,328c <__pack_d+0x2fc>
    3170:	29d6983a 	sll	r11,r5,r7
    3174:	0015883a 	mov	r10,zero
    3178:	00bfffc4 	movi	r2,-1
    317c:	5089883a 	add	r4,r10,r2
    3180:	588b883a 	add	r5,r11,r2
    3184:	228d803a 	cmpltu	r6,r4,r10
    3188:	314b883a 	add	r5,r6,r5
    318c:	4104703a 	and	r2,r8,r4
    3190:	4946703a 	and	r3,r9,r5
    3194:	10c4b03a 	or	r2,r2,r3
    3198:	10000226 	beq	r2,zero,31a4 <__pack_d+0x214>
    319c:	04400044 	movi	r17,1
    31a0:	0025883a 	mov	r18,zero
    31a4:	00803fc4 	movi	r2,255
    31a8:	644eb03a 	or	r7,r12,r17
    31ac:	3892703a 	and	r9,r7,r2
    31b0:	00802004 	movi	r2,128
    31b4:	6c90b03a 	or	r8,r13,r18
    31b8:	0015883a 	mov	r10,zero
    31bc:	48801626 	beq	r9,r2,3218 <__pack_d+0x288>
    31c0:	01001fc4 	movi	r4,127
    31c4:	3905883a 	add	r2,r7,r4
    31c8:	11cd803a 	cmpltu	r6,r2,r7
    31cc:	320d883a 	add	r6,r6,r8
    31d0:	100f883a 	mov	r7,r2
    31d4:	00840034 	movhi	r2,4096
    31d8:	10bfffc4 	addi	r2,r2,-1
    31dc:	3011883a 	mov	r8,r6
    31e0:	0007883a 	mov	r3,zero
    31e4:	11801b36 	bltu	r2,r6,3254 <__pack_d+0x2c4>
    31e8:	4004963a 	slli	r2,r8,24
    31ec:	3808d23a 	srli	r4,r7,8
    31f0:	400ad23a 	srli	r5,r8,8
    31f4:	1813883a 	mov	r9,r3
    31f8:	1108b03a 	or	r4,r2,r4
    31fc:	00bfffc4 	movi	r2,-1
    3200:	00c00434 	movhi	r3,16
    3204:	18ffffc4 	addi	r3,r3,-1
    3208:	208c703a 	and	r6,r4,r2
    320c:	28ce703a 	and	r7,r5,r3
    3210:	4a01ffcc 	andi	r8,r9,2047
    3214:	003f7206 	br	2fe0 <__pack_d+0x50>
    3218:	503fe91e 	bne	r10,zero,31c0 <__pack_d+0x230>
    321c:	01004004 	movi	r4,256
    3220:	3904703a 	and	r2,r7,r4
    3224:	0007883a 	mov	r3,zero
    3228:	10c4b03a 	or	r2,r2,r3
    322c:	10000626 	beq	r2,zero,3248 <__pack_d+0x2b8>
    3230:	3a45883a 	add	r2,r7,r9
    3234:	11cd803a 	cmpltu	r6,r2,r7
    3238:	320d883a 	add	r6,r6,r8
    323c:	100f883a 	mov	r7,r2
    3240:	3011883a 	mov	r8,r6
    3244:	0007883a 	mov	r3,zero
    3248:	00840034 	movhi	r2,4096
    324c:	10bfffc4 	addi	r2,r2,-1
    3250:	123fe52e 	bgeu	r2,r8,31e8 <__pack_d+0x258>
    3254:	00c00044 	movi	r3,1
    3258:	003fe306 	br	31e8 <__pack_d+0x258>
    325c:	0009883a 	mov	r4,zero
    3260:	0013883a 	mov	r9,zero
    3264:	000b883a 	mov	r5,zero
    3268:	003fe406 	br	31fc <__pack_d+0x26c>
    326c:	4a47883a 	add	r3,r9,r9
    3270:	008007c4 	movi	r2,31
    3274:	1105c83a 	sub	r2,r2,r4
    3278:	1886983a 	sll	r3,r3,r2
    327c:	4118d83a 	srl	r12,r8,r4
    3280:	491ad83a 	srl	r13,r9,r4
    3284:	1b18b03a 	or	r12,r3,r12
    3288:	003fb506 	br	3160 <__pack_d+0x1d0>
    328c:	2806d07a 	srli	r3,r5,1
    3290:	008007c4 	movi	r2,31
    3294:	1105c83a 	sub	r2,r2,r4
    3298:	1896d83a 	srl	r11,r3,r2
    329c:	2914983a 	sll	r10,r5,r4
    32a0:	003fb506 	br	3178 <__pack_d+0x1e8>

000032a4 <memcpy>:
    32a4:	01c003c4 	movi	r7,15
    32a8:	2007883a 	mov	r3,r4
    32ac:	3980032e 	bgeu	r7,r6,32bc <memcpy+0x18>
    32b0:	2904b03a 	or	r2,r5,r4
    32b4:	108000cc 	andi	r2,r2,3
    32b8:	10000926 	beq	r2,zero,32e0 <memcpy+0x3c>
    32bc:	30000626 	beq	r6,zero,32d8 <memcpy+0x34>
    32c0:	30cd883a 	add	r6,r6,r3
    32c4:	28800003 	ldbu	r2,0(r5)
    32c8:	29400044 	addi	r5,r5,1
    32cc:	18800005 	stb	r2,0(r3)
    32d0:	18c00044 	addi	r3,r3,1
    32d4:	30fffb1e 	bne	r6,r3,32c4 <memcpy+0x20>
    32d8:	2005883a 	mov	r2,r4
    32dc:	f800283a 	ret
    32e0:	3811883a 	mov	r8,r7
    32e4:	200f883a 	mov	r7,r4
    32e8:	28c00017 	ldw	r3,0(r5)
    32ec:	31bffc04 	addi	r6,r6,-16
    32f0:	38c00015 	stw	r3,0(r7)
    32f4:	28800117 	ldw	r2,4(r5)
    32f8:	38800115 	stw	r2,4(r7)
    32fc:	28c00217 	ldw	r3,8(r5)
    3300:	38c00215 	stw	r3,8(r7)
    3304:	28800317 	ldw	r2,12(r5)
    3308:	29400404 	addi	r5,r5,16
    330c:	38800315 	stw	r2,12(r7)
    3310:	39c00404 	addi	r7,r7,16
    3314:	41bff436 	bltu	r8,r6,32e8 <memcpy+0x44>
    3318:	008000c4 	movi	r2,3
    331c:	1180072e 	bgeu	r2,r6,333c <memcpy+0x98>
    3320:	1007883a 	mov	r3,r2
    3324:	28800017 	ldw	r2,0(r5)
    3328:	31bfff04 	addi	r6,r6,-4
    332c:	29400104 	addi	r5,r5,4
    3330:	38800015 	stw	r2,0(r7)
    3334:	39c00104 	addi	r7,r7,4
    3338:	19bffa36 	bltu	r3,r6,3324 <memcpy+0x80>
    333c:	3807883a 	mov	r3,r7
    3340:	003fde06 	br	32bc <memcpy+0x18>

00003344 <memset>:
    3344:	008000c4 	movi	r2,3
    3348:	29403fcc 	andi	r5,r5,255
    334c:	2007883a 	mov	r3,r4
    3350:	1180022e 	bgeu	r2,r6,335c <memset+0x18>
    3354:	2084703a 	and	r2,r4,r2
    3358:	10000826 	beq	r2,zero,337c <memset+0x38>
    335c:	30000526 	beq	r6,zero,3374 <memset+0x30>
    3360:	2805883a 	mov	r2,r5
    3364:	30cd883a 	add	r6,r6,r3
    3368:	18800005 	stb	r2,0(r3)
    336c:	18c00044 	addi	r3,r3,1
    3370:	19bffd1e 	bne	r3,r6,3368 <memset+0x24>
    3374:	2005883a 	mov	r2,r4
    3378:	f800283a 	ret
    337c:	2804923a 	slli	r2,r5,8
    3380:	020003c4 	movi	r8,15
    3384:	200f883a 	mov	r7,r4
    3388:	2884b03a 	or	r2,r5,r2
    338c:	1006943a 	slli	r3,r2,16
    3390:	10c6b03a 	or	r3,r2,r3
    3394:	41800a2e 	bgeu	r8,r6,33c0 <memset+0x7c>
    3398:	4005883a 	mov	r2,r8
    339c:	31bffc04 	addi	r6,r6,-16
    33a0:	38c00015 	stw	r3,0(r7)
    33a4:	38c00115 	stw	r3,4(r7)
    33a8:	38c00215 	stw	r3,8(r7)
    33ac:	38c00315 	stw	r3,12(r7)
    33b0:	39c00404 	addi	r7,r7,16
    33b4:	11bff936 	bltu	r2,r6,339c <memset+0x58>
    33b8:	008000c4 	movi	r2,3
    33bc:	1180052e 	bgeu	r2,r6,33d4 <memset+0x90>
    33c0:	31bfff04 	addi	r6,r6,-4
    33c4:	008000c4 	movi	r2,3
    33c8:	38c00015 	stw	r3,0(r7)
    33cc:	39c00104 	addi	r7,r7,4
    33d0:	11bffb36 	bltu	r2,r6,33c0 <memset+0x7c>
    33d4:	3807883a 	mov	r3,r7
    33d8:	003fe006 	br	335c <memset+0x18>

000033dc <printf>:
    33dc:	defffb04 	addi	sp,sp,-20
    33e0:	dfc00115 	stw	ra,4(sp)
    33e4:	d9400215 	stw	r5,8(sp)
    33e8:	d9800315 	stw	r6,12(sp)
    33ec:	d9c00415 	stw	r7,16(sp)
    33f0:	00800074 	movhi	r2,1
    33f4:	10965a04 	addi	r2,r2,22888
    33f8:	10c00017 	ldw	r3,0(r2)
    33fc:	200b883a 	mov	r5,r4
    3400:	d8800204 	addi	r2,sp,8
    3404:	19000217 	ldw	r4,8(r3)
    3408:	100d883a 	mov	r6,r2
    340c:	d8800015 	stw	r2,0(sp)
    3410:	00053580 	call	5358 <__vfprintf_internal>
    3414:	dfc00117 	ldw	ra,4(sp)
    3418:	dec00504 	addi	sp,sp,20
    341c:	f800283a 	ret

00003420 <_printf_r>:
    3420:	defffc04 	addi	sp,sp,-16
    3424:	dfc00115 	stw	ra,4(sp)
    3428:	d9800215 	stw	r6,8(sp)
    342c:	d9c00315 	stw	r7,12(sp)
    3430:	280d883a 	mov	r6,r5
    3434:	21400217 	ldw	r5,8(r4)
    3438:	d8c00204 	addi	r3,sp,8
    343c:	180f883a 	mov	r7,r3
    3440:	d8c00015 	stw	r3,0(sp)
    3444:	00034ac0 	call	34ac <___vfprintf_internal_r>
    3448:	dfc00117 	ldw	ra,4(sp)
    344c:	dec00404 	addi	sp,sp,16
    3450:	f800283a 	ret

00003454 <__sprint_r>:
    3454:	30800217 	ldw	r2,8(r6)
    3458:	defffe04 	addi	sp,sp,-8
    345c:	dc000015 	stw	r16,0(sp)
    3460:	dfc00115 	stw	ra,4(sp)
    3464:	3021883a 	mov	r16,r6
    3468:	0007883a 	mov	r3,zero
    346c:	1000061e 	bne	r2,zero,3488 <__sprint_r+0x34>
    3470:	1805883a 	mov	r2,r3
    3474:	30000115 	stw	zero,4(r6)
    3478:	dfc00117 	ldw	ra,4(sp)
    347c:	dc000017 	ldw	r16,0(sp)
    3480:	dec00204 	addi	sp,sp,8
    3484:	f800283a 	ret
    3488:	00075b40 	call	75b4 <__sfvwrite_r>
    348c:	1007883a 	mov	r3,r2
    3490:	1805883a 	mov	r2,r3
    3494:	80000115 	stw	zero,4(r16)
    3498:	80000215 	stw	zero,8(r16)
    349c:	dfc00117 	ldw	ra,4(sp)
    34a0:	dc000017 	ldw	r16,0(sp)
    34a4:	dec00204 	addi	sp,sp,8
    34a8:	f800283a 	ret

000034ac <___vfprintf_internal_r>:
    34ac:	defea404 	addi	sp,sp,-1392
    34b0:	dd815815 	stw	r22,1376(sp)
    34b4:	dc015215 	stw	r16,1352(sp)
    34b8:	d9c15115 	stw	r7,1348(sp)
    34bc:	dfc15b15 	stw	ra,1388(sp)
    34c0:	df015a15 	stw	fp,1384(sp)
    34c4:	ddc15915 	stw	r23,1380(sp)
    34c8:	dd415715 	stw	r21,1372(sp)
    34cc:	dd015615 	stw	r20,1368(sp)
    34d0:	dcc15515 	stw	r19,1364(sp)
    34d4:	dc815415 	stw	r18,1360(sp)
    34d8:	dc415315 	stw	r17,1356(sp)
    34dc:	282d883a 	mov	r22,r5
    34e0:	3021883a 	mov	r16,r6
    34e4:	d9014f15 	stw	r4,1340(sp)
    34e8:	0007bd80 	call	7bd8 <_localeconv_r>
    34ec:	10800017 	ldw	r2,0(r2)
    34f0:	d9c15117 	ldw	r7,1348(sp)
    34f4:	d8814915 	stw	r2,1316(sp)
    34f8:	d8814f17 	ldw	r2,1340(sp)
    34fc:	10000226 	beq	r2,zero,3508 <___vfprintf_internal_r+0x5c>
    3500:	10800e17 	ldw	r2,56(r2)
    3504:	10020d26 	beq	r2,zero,3d3c <___vfprintf_internal_r+0x890>
    3508:	b080030b 	ldhu	r2,12(r22)
    350c:	1080020c 	andi	r2,r2,8
    3510:	10020e26 	beq	r2,zero,3d4c <___vfprintf_internal_r+0x8a0>
    3514:	b0800417 	ldw	r2,16(r22)
    3518:	10020c26 	beq	r2,zero,3d4c <___vfprintf_internal_r+0x8a0>
    351c:	b200030b 	ldhu	r8,12(r22)
    3520:	00800284 	movi	r2,10
    3524:	40c0068c 	andi	r3,r8,26
    3528:	18802f1e 	bne	r3,r2,35e8 <___vfprintf_internal_r+0x13c>
    352c:	b080038f 	ldh	r2,14(r22)
    3530:	10002d16 	blt	r2,zero,35e8 <___vfprintf_internal_r+0x13c>
    3534:	b240038b 	ldhu	r9,14(r22)
    3538:	b2800717 	ldw	r10,28(r22)
    353c:	b2c00917 	ldw	r11,36(r22)
    3540:	d9014f17 	ldw	r4,1340(sp)
    3544:	dc402904 	addi	r17,sp,164
    3548:	d8804004 	addi	r2,sp,256
    354c:	00c10004 	movi	r3,1024
    3550:	423fff4c 	andi	r8,r8,65533
    3554:	800d883a 	mov	r6,r16
    3558:	880b883a 	mov	r5,r17
    355c:	da002c0d 	sth	r8,176(sp)
    3560:	da402c8d 	sth	r9,178(sp)
    3564:	da803015 	stw	r10,192(sp)
    3568:	dac03215 	stw	r11,200(sp)
    356c:	d8802d15 	stw	r2,180(sp)
    3570:	d8c02e15 	stw	r3,184(sp)
    3574:	d8802915 	stw	r2,164(sp)
    3578:	d8c02b15 	stw	r3,172(sp)
    357c:	d8002f15 	stw	zero,188(sp)
    3580:	00034ac0 	call	34ac <___vfprintf_internal_r>
    3584:	d8814b15 	stw	r2,1324(sp)
    3588:	10000416 	blt	r2,zero,359c <___vfprintf_internal_r+0xf0>
    358c:	d9014f17 	ldw	r4,1340(sp)
    3590:	880b883a 	mov	r5,r17
    3594:	0006c840 	call	6c84 <_fflush_r>
    3598:	1002321e 	bne	r2,zero,3e64 <___vfprintf_internal_r+0x9b8>
    359c:	d8802c0b 	ldhu	r2,176(sp)
    35a0:	1080100c 	andi	r2,r2,64
    35a4:	10000326 	beq	r2,zero,35b4 <___vfprintf_internal_r+0x108>
    35a8:	b080030b 	ldhu	r2,12(r22)
    35ac:	10801014 	ori	r2,r2,64
    35b0:	b080030d 	sth	r2,12(r22)
    35b4:	d8814b17 	ldw	r2,1324(sp)
    35b8:	dfc15b17 	ldw	ra,1388(sp)
    35bc:	df015a17 	ldw	fp,1384(sp)
    35c0:	ddc15917 	ldw	r23,1380(sp)
    35c4:	dd815817 	ldw	r22,1376(sp)
    35c8:	dd415717 	ldw	r21,1372(sp)
    35cc:	dd015617 	ldw	r20,1368(sp)
    35d0:	dcc15517 	ldw	r19,1364(sp)
    35d4:	dc815417 	ldw	r18,1360(sp)
    35d8:	dc415317 	ldw	r17,1356(sp)
    35dc:	dc015217 	ldw	r16,1352(sp)
    35e0:	dec15c04 	addi	sp,sp,1392
    35e4:	f800283a 	ret
    35e8:	0005883a 	mov	r2,zero
    35ec:	0007883a 	mov	r3,zero
    35f0:	dd401904 	addi	r21,sp,100
    35f4:	d8814215 	stw	r2,1288(sp)
    35f8:	802f883a 	mov	r23,r16
    35fc:	d8c14315 	stw	r3,1292(sp)
    3600:	d8014b15 	stw	zero,1324(sp)
    3604:	d8014815 	stw	zero,1312(sp)
    3608:	d8014415 	stw	zero,1296(sp)
    360c:	d8014715 	stw	zero,1308(sp)
    3610:	dd400c15 	stw	r21,48(sp)
    3614:	d8000e15 	stw	zero,56(sp)
    3618:	d8000d15 	stw	zero,52(sp)
    361c:	b8800007 	ldb	r2,0(r23)
    3620:	10001926 	beq	r2,zero,3688 <___vfprintf_internal_r+0x1dc>
    3624:	00c00944 	movi	r3,37
    3628:	10c01726 	beq	r2,r3,3688 <___vfprintf_internal_r+0x1dc>
    362c:	b821883a 	mov	r16,r23
    3630:	00000106 	br	3638 <___vfprintf_internal_r+0x18c>
    3634:	10c00326 	beq	r2,r3,3644 <___vfprintf_internal_r+0x198>
    3638:	84000044 	addi	r16,r16,1
    363c:	80800007 	ldb	r2,0(r16)
    3640:	103ffc1e 	bne	r2,zero,3634 <___vfprintf_internal_r+0x188>
    3644:	85e7c83a 	sub	r19,r16,r23
    3648:	98000e26 	beq	r19,zero,3684 <___vfprintf_internal_r+0x1d8>
    364c:	dc800e17 	ldw	r18,56(sp)
    3650:	dc400d17 	ldw	r17,52(sp)
    3654:	008001c4 	movi	r2,7
    3658:	94e5883a 	add	r18,r18,r19
    365c:	8c400044 	addi	r17,r17,1
    3660:	adc00015 	stw	r23,0(r21)
    3664:	dc800e15 	stw	r18,56(sp)
    3668:	acc00115 	stw	r19,4(r21)
    366c:	dc400d15 	stw	r17,52(sp)
    3670:	14428b16 	blt	r2,r17,40a0 <___vfprintf_internal_r+0xbf4>
    3674:	ad400204 	addi	r21,r21,8
    3678:	d9014b17 	ldw	r4,1324(sp)
    367c:	24c9883a 	add	r4,r4,r19
    3680:	d9014b15 	stw	r4,1324(sp)
    3684:	802f883a 	mov	r23,r16
    3688:	b8800007 	ldb	r2,0(r23)
    368c:	10013c26 	beq	r2,zero,3b80 <___vfprintf_internal_r+0x6d4>
    3690:	bdc00044 	addi	r23,r23,1
    3694:	d8000405 	stb	zero,16(sp)
    3698:	b8c00007 	ldb	r3,0(r23)
    369c:	04ffffc4 	movi	r19,-1
    36a0:	d8014c15 	stw	zero,1328(sp)
    36a4:	d8014a15 	stw	zero,1320(sp)
    36a8:	d8c14d15 	stw	r3,1332(sp)
    36ac:	bdc00044 	addi	r23,r23,1
    36b0:	d9414d17 	ldw	r5,1332(sp)
    36b4:	00801604 	movi	r2,88
    36b8:	28fff804 	addi	r3,r5,-32
    36bc:	10c06036 	bltu	r2,r3,3840 <___vfprintf_internal_r+0x394>
    36c0:	18c5883a 	add	r2,r3,r3
    36c4:	1085883a 	add	r2,r2,r2
    36c8:	00c00034 	movhi	r3,0
    36cc:	18cdb704 	addi	r3,r3,14044
    36d0:	10c5883a 	add	r2,r2,r3
    36d4:	11000017 	ldw	r4,0(r2)
    36d8:	2000683a 	jmp	r4
    36dc:	00004650 	cmplti	zero,zero,281
    36e0:	00003840 	call	384 <audio_ISR+0x40>
    36e4:	00003840 	call	384 <audio_ISR+0x40>
    36e8:	0000463c 	xorhi	zero,zero,280
    36ec:	00003840 	call	384 <audio_ISR+0x40>
    36f0:	00003840 	call	384 <audio_ISR+0x40>
    36f4:	00003840 	call	384 <audio_ISR+0x40>
    36f8:	00003840 	call	384 <audio_ISR+0x40>
    36fc:	00003840 	call	384 <audio_ISR+0x40>
    3700:	00003840 	call	384 <audio_ISR+0x40>
    3704:	0000441c 	xori	zero,zero,272
    3708:	0000462c 	andhi	zero,zero,280
    370c:	00003840 	call	384 <audio_ISR+0x40>
    3710:	00004434 	movhi	zero,272
    3714:	000046c8 	cmpgei	zero,zero,283
    3718:	00003840 	call	384 <audio_ISR+0x40>
    371c:	000046b4 	movhi	zero,282
    3720:	0000467c 	xorhi	zero,zero,281
    3724:	0000467c 	xorhi	zero,zero,281
    3728:	0000467c 	xorhi	zero,zero,281
    372c:	0000467c 	xorhi	zero,zero,281
    3730:	0000467c 	xorhi	zero,zero,281
    3734:	0000467c 	xorhi	zero,zero,281
    3738:	0000467c 	xorhi	zero,zero,281
    373c:	0000467c 	xorhi	zero,zero,281
    3740:	0000467c 	xorhi	zero,zero,281
    3744:	00003840 	call	384 <audio_ISR+0x40>
    3748:	00003840 	call	384 <audio_ISR+0x40>
    374c:	00003840 	call	384 <audio_ISR+0x40>
    3750:	00003840 	call	384 <audio_ISR+0x40>
    3754:	00003840 	call	384 <audio_ISR+0x40>
    3758:	00003840 	call	384 <audio_ISR+0x40>
    375c:	00003840 	call	384 <audio_ISR+0x40>
    3760:	00003840 	call	384 <audio_ISR+0x40>
    3764:	00003840 	call	384 <audio_ISR+0x40>
    3768:	00003840 	call	384 <audio_ISR+0x40>
    376c:	00003e98 	cmpnei	zero,zero,250
    3770:	00004504 	movi	zero,276
    3774:	00003840 	call	384 <audio_ISR+0x40>
    3778:	00004504 	movi	zero,276
    377c:	00003840 	call	384 <audio_ISR+0x40>
    3780:	00003840 	call	384 <audio_ISR+0x40>
    3784:	00003840 	call	384 <audio_ISR+0x40>
    3788:	00003840 	call	384 <audio_ISR+0x40>
    378c:	00004668 	cmpgeui	zero,zero,281
    3790:	00003840 	call	384 <audio_ISR+0x40>
    3794:	00003840 	call	384 <audio_ISR+0x40>
    3798:	00003f4c 	andi	zero,zero,253
    379c:	00003840 	call	384 <audio_ISR+0x40>
    37a0:	00003840 	call	384 <audio_ISR+0x40>
    37a4:	00003840 	call	384 <audio_ISR+0x40>
    37a8:	00003840 	call	384 <audio_ISR+0x40>
    37ac:	00003840 	call	384 <audio_ISR+0x40>
    37b0:	00003f98 	cmpnei	zero,zero,254
    37b4:	00003840 	call	384 <audio_ISR+0x40>
    37b8:	00003840 	call	384 <audio_ISR+0x40>
    37bc:	000045b8 	rdprs	zero,zero,278
    37c0:	00003840 	call	384 <audio_ISR+0x40>
    37c4:	00003840 	call	384 <audio_ISR+0x40>
    37c8:	00003840 	call	384 <audio_ISR+0x40>
    37cc:	00003840 	call	384 <audio_ISR+0x40>
    37d0:	00003840 	call	384 <audio_ISR+0x40>
    37d4:	00003840 	call	384 <audio_ISR+0x40>
    37d8:	00003840 	call	384 <audio_ISR+0x40>
    37dc:	00003840 	call	384 <audio_ISR+0x40>
    37e0:	00003840 	call	384 <audio_ISR+0x40>
    37e4:	00003840 	call	384 <audio_ISR+0x40>
    37e8:	0000458c 	andi	zero,zero,278
    37ec:	00003ea4 	muli	zero,zero,250
    37f0:	00004504 	movi	zero,276
    37f4:	00004504 	movi	zero,276
    37f8:	00004504 	movi	zero,276
    37fc:	000044f0 	cmpltui	zero,zero,275
    3800:	00003ea4 	muli	zero,zero,250
    3804:	00003840 	call	384 <audio_ISR+0x40>
    3808:	00003840 	call	384 <audio_ISR+0x40>
    380c:	00004478 	rdprs	zero,zero,273
    3810:	00003840 	call	384 <audio_ISR+0x40>
    3814:	00004448 	cmpgei	zero,zero,273
    3818:	00003f58 	cmpnei	zero,zero,253
    381c:	000044a8 	cmpgeui	zero,zero,274
    3820:	00004494 	movui	zero,274
    3824:	00003840 	call	384 <audio_ISR+0x40>
    3828:	00004724 	muli	zero,zero,284
    382c:	00003840 	call	384 <audio_ISR+0x40>
    3830:	00003fa4 	muli	zero,zero,254
    3834:	00003840 	call	384 <audio_ISR+0x40>
    3838:	00003840 	call	384 <audio_ISR+0x40>
    383c:	0000461c 	xori	zero,zero,280
    3840:	d9014d17 	ldw	r4,1332(sp)
    3844:	2000ce26 	beq	r4,zero,3b80 <___vfprintf_internal_r+0x6d4>
    3848:	01400044 	movi	r5,1
    384c:	d9800f04 	addi	r6,sp,60
    3850:	d9c14015 	stw	r7,1280(sp)
    3854:	d9414515 	stw	r5,1300(sp)
    3858:	d9814115 	stw	r6,1284(sp)
    385c:	280f883a 	mov	r7,r5
    3860:	d9000f05 	stb	r4,60(sp)
    3864:	d8000405 	stb	zero,16(sp)
    3868:	d8014615 	stw	zero,1304(sp)
    386c:	d8c14c17 	ldw	r3,1328(sp)
    3870:	1880008c 	andi	r2,r3,2
    3874:	1005003a 	cmpeq	r2,r2,zero
    3878:	d8815015 	stw	r2,1344(sp)
    387c:	1000031e 	bne	r2,zero,388c <___vfprintf_internal_r+0x3e0>
    3880:	d9014517 	ldw	r4,1300(sp)
    3884:	21000084 	addi	r4,r4,2
    3888:	d9014515 	stw	r4,1300(sp)
    388c:	d9414c17 	ldw	r5,1328(sp)
    3890:	2940210c 	andi	r5,r5,132
    3894:	d9414e15 	stw	r5,1336(sp)
    3898:	28002d1e 	bne	r5,zero,3950 <___vfprintf_internal_r+0x4a4>
    389c:	d9814a17 	ldw	r6,1320(sp)
    38a0:	d8814517 	ldw	r2,1300(sp)
    38a4:	30a1c83a 	sub	r16,r6,r2
    38a8:	0400290e 	bge	zero,r16,3950 <___vfprintf_internal_r+0x4a4>
    38ac:	00800404 	movi	r2,16
    38b0:	1404580e 	bge	r2,r16,4a14 <___vfprintf_internal_r+0x1568>
    38b4:	dc800e17 	ldw	r18,56(sp)
    38b8:	dc400d17 	ldw	r17,52(sp)
    38bc:	1027883a 	mov	r19,r2
    38c0:	07000074 	movhi	fp,1
    38c4:	e70dca84 	addi	fp,fp,14122
    38c8:	050001c4 	movi	r20,7
    38cc:	00000306 	br	38dc <___vfprintf_internal_r+0x430>
    38d0:	843ffc04 	addi	r16,r16,-16
    38d4:	ad400204 	addi	r21,r21,8
    38d8:	9c00130e 	bge	r19,r16,3928 <___vfprintf_internal_r+0x47c>
    38dc:	94800404 	addi	r18,r18,16
    38e0:	8c400044 	addi	r17,r17,1
    38e4:	af000015 	stw	fp,0(r21)
    38e8:	acc00115 	stw	r19,4(r21)
    38ec:	dc800e15 	stw	r18,56(sp)
    38f0:	dc400d15 	stw	r17,52(sp)
    38f4:	a47ff60e 	bge	r20,r17,38d0 <___vfprintf_internal_r+0x424>
    38f8:	d9014f17 	ldw	r4,1340(sp)
    38fc:	b00b883a 	mov	r5,r22
    3900:	d9800c04 	addi	r6,sp,48
    3904:	d9c15115 	stw	r7,1348(sp)
    3908:	00034540 	call	3454 <__sprint_r>
    390c:	d9c15117 	ldw	r7,1348(sp)
    3910:	10009e1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3914:	843ffc04 	addi	r16,r16,-16
    3918:	dc800e17 	ldw	r18,56(sp)
    391c:	dc400d17 	ldw	r17,52(sp)
    3920:	dd401904 	addi	r21,sp,100
    3924:	9c3fed16 	blt	r19,r16,38dc <___vfprintf_internal_r+0x430>
    3928:	9425883a 	add	r18,r18,r16
    392c:	8c400044 	addi	r17,r17,1
    3930:	008001c4 	movi	r2,7
    3934:	af000015 	stw	fp,0(r21)
    3938:	ac000115 	stw	r16,4(r21)
    393c:	dc800e15 	stw	r18,56(sp)
    3940:	dc400d15 	stw	r17,52(sp)
    3944:	1441f516 	blt	r2,r17,411c <___vfprintf_internal_r+0xc70>
    3948:	ad400204 	addi	r21,r21,8
    394c:	00000206 	br	3958 <___vfprintf_internal_r+0x4ac>
    3950:	dc800e17 	ldw	r18,56(sp)
    3954:	dc400d17 	ldw	r17,52(sp)
    3958:	d8800407 	ldb	r2,16(sp)
    395c:	10000b26 	beq	r2,zero,398c <___vfprintf_internal_r+0x4e0>
    3960:	00800044 	movi	r2,1
    3964:	94800044 	addi	r18,r18,1
    3968:	8c400044 	addi	r17,r17,1
    396c:	a8800115 	stw	r2,4(r21)
    3970:	d8c00404 	addi	r3,sp,16
    3974:	008001c4 	movi	r2,7
    3978:	a8c00015 	stw	r3,0(r21)
    397c:	dc800e15 	stw	r18,56(sp)
    3980:	dc400d15 	stw	r17,52(sp)
    3984:	1441da16 	blt	r2,r17,40f0 <___vfprintf_internal_r+0xc44>
    3988:	ad400204 	addi	r21,r21,8
    398c:	d9015017 	ldw	r4,1344(sp)
    3990:	20000b1e 	bne	r4,zero,39c0 <___vfprintf_internal_r+0x514>
    3994:	d8800444 	addi	r2,sp,17
    3998:	94800084 	addi	r18,r18,2
    399c:	8c400044 	addi	r17,r17,1
    39a0:	a8800015 	stw	r2,0(r21)
    39a4:	00c00084 	movi	r3,2
    39a8:	008001c4 	movi	r2,7
    39ac:	a8c00115 	stw	r3,4(r21)
    39b0:	dc800e15 	stw	r18,56(sp)
    39b4:	dc400d15 	stw	r17,52(sp)
    39b8:	1441c216 	blt	r2,r17,40c4 <___vfprintf_internal_r+0xc18>
    39bc:	ad400204 	addi	r21,r21,8
    39c0:	d9414e17 	ldw	r5,1336(sp)
    39c4:	00802004 	movi	r2,128
    39c8:	2880b126 	beq	r5,r2,3c90 <___vfprintf_internal_r+0x7e4>
    39cc:	d8c14617 	ldw	r3,1304(sp)
    39d0:	19e1c83a 	sub	r16,r3,r7
    39d4:	0400260e 	bge	zero,r16,3a70 <___vfprintf_internal_r+0x5c4>
    39d8:	00800404 	movi	r2,16
    39dc:	1403c90e 	bge	r2,r16,4904 <___vfprintf_internal_r+0x1458>
    39e0:	1027883a 	mov	r19,r2
    39e4:	07000074 	movhi	fp,1
    39e8:	e70dc684 	addi	fp,fp,14106
    39ec:	050001c4 	movi	r20,7
    39f0:	00000306 	br	3a00 <___vfprintf_internal_r+0x554>
    39f4:	843ffc04 	addi	r16,r16,-16
    39f8:	ad400204 	addi	r21,r21,8
    39fc:	9c00130e 	bge	r19,r16,3a4c <___vfprintf_internal_r+0x5a0>
    3a00:	94800404 	addi	r18,r18,16
    3a04:	8c400044 	addi	r17,r17,1
    3a08:	af000015 	stw	fp,0(r21)
    3a0c:	acc00115 	stw	r19,4(r21)
    3a10:	dc800e15 	stw	r18,56(sp)
    3a14:	dc400d15 	stw	r17,52(sp)
    3a18:	a47ff60e 	bge	r20,r17,39f4 <___vfprintf_internal_r+0x548>
    3a1c:	d9014f17 	ldw	r4,1340(sp)
    3a20:	b00b883a 	mov	r5,r22
    3a24:	d9800c04 	addi	r6,sp,48
    3a28:	d9c15115 	stw	r7,1348(sp)
    3a2c:	00034540 	call	3454 <__sprint_r>
    3a30:	d9c15117 	ldw	r7,1348(sp)
    3a34:	1000551e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3a38:	843ffc04 	addi	r16,r16,-16
    3a3c:	dc800e17 	ldw	r18,56(sp)
    3a40:	dc400d17 	ldw	r17,52(sp)
    3a44:	dd401904 	addi	r21,sp,100
    3a48:	9c3fed16 	blt	r19,r16,3a00 <___vfprintf_internal_r+0x554>
    3a4c:	9425883a 	add	r18,r18,r16
    3a50:	8c400044 	addi	r17,r17,1
    3a54:	008001c4 	movi	r2,7
    3a58:	af000015 	stw	fp,0(r21)
    3a5c:	ac000115 	stw	r16,4(r21)
    3a60:	dc800e15 	stw	r18,56(sp)
    3a64:	dc400d15 	stw	r17,52(sp)
    3a68:	14418216 	blt	r2,r17,4074 <___vfprintf_internal_r+0xbc8>
    3a6c:	ad400204 	addi	r21,r21,8
    3a70:	d9014c17 	ldw	r4,1328(sp)
    3a74:	2080400c 	andi	r2,r4,256
    3a78:	10004a1e 	bne	r2,zero,3ba4 <___vfprintf_internal_r+0x6f8>
    3a7c:	d9414117 	ldw	r5,1284(sp)
    3a80:	91e5883a 	add	r18,r18,r7
    3a84:	8c400044 	addi	r17,r17,1
    3a88:	008001c4 	movi	r2,7
    3a8c:	a9400015 	stw	r5,0(r21)
    3a90:	a9c00115 	stw	r7,4(r21)
    3a94:	dc800e15 	stw	r18,56(sp)
    3a98:	dc400d15 	stw	r17,52(sp)
    3a9c:	14416716 	blt	r2,r17,403c <___vfprintf_internal_r+0xb90>
    3aa0:	a8c00204 	addi	r3,r21,8
    3aa4:	d9814c17 	ldw	r6,1328(sp)
    3aa8:	3080010c 	andi	r2,r6,4
    3aac:	10002826 	beq	r2,zero,3b50 <___vfprintf_internal_r+0x6a4>
    3ab0:	d8814a17 	ldw	r2,1320(sp)
    3ab4:	d9014517 	ldw	r4,1300(sp)
    3ab8:	1121c83a 	sub	r16,r2,r4
    3abc:	0400240e 	bge	zero,r16,3b50 <___vfprintf_internal_r+0x6a4>
    3ac0:	00800404 	movi	r2,16
    3ac4:	14044f0e 	bge	r2,r16,4c04 <___vfprintf_internal_r+0x1758>
    3ac8:	dc400d17 	ldw	r17,52(sp)
    3acc:	1027883a 	mov	r19,r2
    3ad0:	07000074 	movhi	fp,1
    3ad4:	e70dca84 	addi	fp,fp,14122
    3ad8:	050001c4 	movi	r20,7
    3adc:	00000306 	br	3aec <___vfprintf_internal_r+0x640>
    3ae0:	843ffc04 	addi	r16,r16,-16
    3ae4:	18c00204 	addi	r3,r3,8
    3ae8:	9c00110e 	bge	r19,r16,3b30 <___vfprintf_internal_r+0x684>
    3aec:	94800404 	addi	r18,r18,16
    3af0:	8c400044 	addi	r17,r17,1
    3af4:	1f000015 	stw	fp,0(r3)
    3af8:	1cc00115 	stw	r19,4(r3)
    3afc:	dc800e15 	stw	r18,56(sp)
    3b00:	dc400d15 	stw	r17,52(sp)
    3b04:	a47ff60e 	bge	r20,r17,3ae0 <___vfprintf_internal_r+0x634>
    3b08:	d9014f17 	ldw	r4,1340(sp)
    3b0c:	b00b883a 	mov	r5,r22
    3b10:	d9800c04 	addi	r6,sp,48
    3b14:	00034540 	call	3454 <__sprint_r>
    3b18:	10001c1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3b1c:	843ffc04 	addi	r16,r16,-16
    3b20:	dc800e17 	ldw	r18,56(sp)
    3b24:	dc400d17 	ldw	r17,52(sp)
    3b28:	d8c01904 	addi	r3,sp,100
    3b2c:	9c3fef16 	blt	r19,r16,3aec <___vfprintf_internal_r+0x640>
    3b30:	9425883a 	add	r18,r18,r16
    3b34:	8c400044 	addi	r17,r17,1
    3b38:	008001c4 	movi	r2,7
    3b3c:	1f000015 	stw	fp,0(r3)
    3b40:	1c000115 	stw	r16,4(r3)
    3b44:	dc800e15 	stw	r18,56(sp)
    3b48:	dc400d15 	stw	r17,52(sp)
    3b4c:	1440cb16 	blt	r2,r17,3e7c <___vfprintf_internal_r+0x9d0>
    3b50:	d8814a17 	ldw	r2,1320(sp)
    3b54:	d9414517 	ldw	r5,1300(sp)
    3b58:	1140010e 	bge	r2,r5,3b60 <___vfprintf_internal_r+0x6b4>
    3b5c:	2805883a 	mov	r2,r5
    3b60:	d9814b17 	ldw	r6,1324(sp)
    3b64:	308d883a 	add	r6,r6,r2
    3b68:	d9814b15 	stw	r6,1324(sp)
    3b6c:	90013b1e 	bne	r18,zero,405c <___vfprintf_internal_r+0xbb0>
    3b70:	d9c14017 	ldw	r7,1280(sp)
    3b74:	dd401904 	addi	r21,sp,100
    3b78:	d8000d15 	stw	zero,52(sp)
    3b7c:	003ea706 	br	361c <___vfprintf_internal_r+0x170>
    3b80:	d8800e17 	ldw	r2,56(sp)
    3b84:	10053f1e 	bne	r2,zero,5084 <___vfprintf_internal_r+0x1bd8>
    3b88:	d8000d15 	stw	zero,52(sp)
    3b8c:	b080030b 	ldhu	r2,12(r22)
    3b90:	1080100c 	andi	r2,r2,64
    3b94:	103e8726 	beq	r2,zero,35b4 <___vfprintf_internal_r+0x108>
    3b98:	00bfffc4 	movi	r2,-1
    3b9c:	d8814b15 	stw	r2,1324(sp)
    3ba0:	003e8406 	br	35b4 <___vfprintf_internal_r+0x108>
    3ba4:	d9814d17 	ldw	r6,1332(sp)
    3ba8:	00801944 	movi	r2,101
    3bac:	11806e16 	blt	r2,r6,3d68 <___vfprintf_internal_r+0x8bc>
    3bb0:	d9414717 	ldw	r5,1308(sp)
    3bb4:	00c00044 	movi	r3,1
    3bb8:	1943430e 	bge	r3,r5,48c8 <___vfprintf_internal_r+0x141c>
    3bbc:	d8814117 	ldw	r2,1284(sp)
    3bc0:	94800044 	addi	r18,r18,1
    3bc4:	8c400044 	addi	r17,r17,1
    3bc8:	a8800015 	stw	r2,0(r21)
    3bcc:	008001c4 	movi	r2,7
    3bd0:	a8c00115 	stw	r3,4(r21)
    3bd4:	dc800e15 	stw	r18,56(sp)
    3bd8:	dc400d15 	stw	r17,52(sp)
    3bdc:	1441ca16 	blt	r2,r17,4308 <___vfprintf_internal_r+0xe5c>
    3be0:	a8c00204 	addi	r3,r21,8
    3be4:	d9014917 	ldw	r4,1316(sp)
    3be8:	00800044 	movi	r2,1
    3bec:	94800044 	addi	r18,r18,1
    3bf0:	8c400044 	addi	r17,r17,1
    3bf4:	18800115 	stw	r2,4(r3)
    3bf8:	008001c4 	movi	r2,7
    3bfc:	19000015 	stw	r4,0(r3)
    3c00:	dc800e15 	stw	r18,56(sp)
    3c04:	dc400d15 	stw	r17,52(sp)
    3c08:	1441b616 	blt	r2,r17,42e4 <___vfprintf_internal_r+0xe38>
    3c0c:	1cc00204 	addi	r19,r3,8
    3c10:	d9014217 	ldw	r4,1288(sp)
    3c14:	d9414317 	ldw	r5,1292(sp)
    3c18:	000d883a 	mov	r6,zero
    3c1c:	000f883a 	mov	r7,zero
    3c20:	000bc380 	call	bc38 <__nedf2>
    3c24:	10017426 	beq	r2,zero,41f8 <___vfprintf_internal_r+0xd4c>
    3c28:	d9414717 	ldw	r5,1308(sp)
    3c2c:	d9814117 	ldw	r6,1284(sp)
    3c30:	8c400044 	addi	r17,r17,1
    3c34:	2c85883a 	add	r2,r5,r18
    3c38:	14bfffc4 	addi	r18,r2,-1
    3c3c:	28bfffc4 	addi	r2,r5,-1
    3c40:	30c00044 	addi	r3,r6,1
    3c44:	98800115 	stw	r2,4(r19)
    3c48:	008001c4 	movi	r2,7
    3c4c:	98c00015 	stw	r3,0(r19)
    3c50:	dc800e15 	stw	r18,56(sp)
    3c54:	dc400d15 	stw	r17,52(sp)
    3c58:	14418e16 	blt	r2,r17,4294 <___vfprintf_internal_r+0xde8>
    3c5c:	9cc00204 	addi	r19,r19,8
    3c60:	d9414817 	ldw	r5,1312(sp)
    3c64:	d8800804 	addi	r2,sp,32
    3c68:	8c400044 	addi	r17,r17,1
    3c6c:	9165883a 	add	r18,r18,r5
    3c70:	98800015 	stw	r2,0(r19)
    3c74:	008001c4 	movi	r2,7
    3c78:	99400115 	stw	r5,4(r19)
    3c7c:	dc800e15 	stw	r18,56(sp)
    3c80:	dc400d15 	stw	r17,52(sp)
    3c84:	1440ed16 	blt	r2,r17,403c <___vfprintf_internal_r+0xb90>
    3c88:	98c00204 	addi	r3,r19,8
    3c8c:	003f8506 	br	3aa4 <___vfprintf_internal_r+0x5f8>
    3c90:	d9814a17 	ldw	r6,1320(sp)
    3c94:	d8814517 	ldw	r2,1300(sp)
    3c98:	30a1c83a 	sub	r16,r6,r2
    3c9c:	043f4b0e 	bge	zero,r16,39cc <___vfprintf_internal_r+0x520>
    3ca0:	00800404 	movi	r2,16
    3ca4:	1404340e 	bge	r2,r16,4d78 <___vfprintf_internal_r+0x18cc>
    3ca8:	1027883a 	mov	r19,r2
    3cac:	07000074 	movhi	fp,1
    3cb0:	e70dc684 	addi	fp,fp,14106
    3cb4:	050001c4 	movi	r20,7
    3cb8:	00000306 	br	3cc8 <___vfprintf_internal_r+0x81c>
    3cbc:	843ffc04 	addi	r16,r16,-16
    3cc0:	ad400204 	addi	r21,r21,8
    3cc4:	9c00130e 	bge	r19,r16,3d14 <___vfprintf_internal_r+0x868>
    3cc8:	94800404 	addi	r18,r18,16
    3ccc:	8c400044 	addi	r17,r17,1
    3cd0:	af000015 	stw	fp,0(r21)
    3cd4:	acc00115 	stw	r19,4(r21)
    3cd8:	dc800e15 	stw	r18,56(sp)
    3cdc:	dc400d15 	stw	r17,52(sp)
    3ce0:	a47ff60e 	bge	r20,r17,3cbc <___vfprintf_internal_r+0x810>
    3ce4:	d9014f17 	ldw	r4,1340(sp)
    3ce8:	b00b883a 	mov	r5,r22
    3cec:	d9800c04 	addi	r6,sp,48
    3cf0:	d9c15115 	stw	r7,1348(sp)
    3cf4:	00034540 	call	3454 <__sprint_r>
    3cf8:	d9c15117 	ldw	r7,1348(sp)
    3cfc:	103fa31e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3d00:	843ffc04 	addi	r16,r16,-16
    3d04:	dc800e17 	ldw	r18,56(sp)
    3d08:	dc400d17 	ldw	r17,52(sp)
    3d0c:	dd401904 	addi	r21,sp,100
    3d10:	9c3fed16 	blt	r19,r16,3cc8 <___vfprintf_internal_r+0x81c>
    3d14:	9425883a 	add	r18,r18,r16
    3d18:	8c400044 	addi	r17,r17,1
    3d1c:	008001c4 	movi	r2,7
    3d20:	af000015 	stw	fp,0(r21)
    3d24:	ac000115 	stw	r16,4(r21)
    3d28:	dc800e15 	stw	r18,56(sp)
    3d2c:	dc400d15 	stw	r17,52(sp)
    3d30:	14416116 	blt	r2,r17,42b8 <___vfprintf_internal_r+0xe0c>
    3d34:	ad400204 	addi	r21,r21,8
    3d38:	003f2406 	br	39cc <___vfprintf_internal_r+0x520>
    3d3c:	d9014f17 	ldw	r4,1340(sp)
    3d40:	0006f1c0 	call	6f1c <__sinit>
    3d44:	d9c15117 	ldw	r7,1348(sp)
    3d48:	003def06 	br	3508 <___vfprintf_internal_r+0x5c>
    3d4c:	d9014f17 	ldw	r4,1340(sp)
    3d50:	b00b883a 	mov	r5,r22
    3d54:	d9c15115 	stw	r7,1348(sp)
    3d58:	000537c0 	call	537c <__swsetup_r>
    3d5c:	d9c15117 	ldw	r7,1348(sp)
    3d60:	103dee26 	beq	r2,zero,351c <___vfprintf_internal_r+0x70>
    3d64:	003f8c06 	br	3b98 <___vfprintf_internal_r+0x6ec>
    3d68:	d9014217 	ldw	r4,1288(sp)
    3d6c:	d9414317 	ldw	r5,1292(sp)
    3d70:	000d883a 	mov	r6,zero
    3d74:	000f883a 	mov	r7,zero
    3d78:	000bbb00 	call	bbb0 <__eqdf2>
    3d7c:	1000f21e 	bne	r2,zero,4148 <___vfprintf_internal_r+0xc9c>
    3d80:	00800074 	movhi	r2,1
    3d84:	108dc604 	addi	r2,r2,14104
    3d88:	94800044 	addi	r18,r18,1
    3d8c:	8c400044 	addi	r17,r17,1
    3d90:	a8800015 	stw	r2,0(r21)
    3d94:	00c00044 	movi	r3,1
    3d98:	008001c4 	movi	r2,7
    3d9c:	a8c00115 	stw	r3,4(r21)
    3da0:	dc800e15 	stw	r18,56(sp)
    3da4:	dc400d15 	stw	r17,52(sp)
    3da8:	1442fa16 	blt	r2,r17,4994 <___vfprintf_internal_r+0x14e8>
    3dac:	a8c00204 	addi	r3,r21,8
    3db0:	d8800517 	ldw	r2,20(sp)
    3db4:	d9014717 	ldw	r4,1308(sp)
    3db8:	11015c0e 	bge	r2,r4,432c <___vfprintf_internal_r+0xe80>
    3dbc:	dc400d17 	ldw	r17,52(sp)
    3dc0:	d9814917 	ldw	r6,1316(sp)
    3dc4:	00800044 	movi	r2,1
    3dc8:	94800044 	addi	r18,r18,1
    3dcc:	8c400044 	addi	r17,r17,1
    3dd0:	18800115 	stw	r2,4(r3)
    3dd4:	008001c4 	movi	r2,7
    3dd8:	19800015 	stw	r6,0(r3)
    3ddc:	dc800e15 	stw	r18,56(sp)
    3de0:	dc400d15 	stw	r17,52(sp)
    3de4:	14431016 	blt	r2,r17,4a28 <___vfprintf_internal_r+0x157c>
    3de8:	18c00204 	addi	r3,r3,8
    3dec:	d8814717 	ldw	r2,1308(sp)
    3df0:	143fffc4 	addi	r16,r2,-1
    3df4:	043f2b0e 	bge	zero,r16,3aa4 <___vfprintf_internal_r+0x5f8>
    3df8:	00800404 	movi	r2,16
    3dfc:	1402a20e 	bge	r2,r16,4888 <___vfprintf_internal_r+0x13dc>
    3e00:	dc400d17 	ldw	r17,52(sp)
    3e04:	1027883a 	mov	r19,r2
    3e08:	07000074 	movhi	fp,1
    3e0c:	e70dc684 	addi	fp,fp,14106
    3e10:	050001c4 	movi	r20,7
    3e14:	00000306 	br	3e24 <___vfprintf_internal_r+0x978>
    3e18:	18c00204 	addi	r3,r3,8
    3e1c:	843ffc04 	addi	r16,r16,-16
    3e20:	9c029c0e 	bge	r19,r16,4894 <___vfprintf_internal_r+0x13e8>
    3e24:	94800404 	addi	r18,r18,16
    3e28:	8c400044 	addi	r17,r17,1
    3e2c:	1f000015 	stw	fp,0(r3)
    3e30:	1cc00115 	stw	r19,4(r3)
    3e34:	dc800e15 	stw	r18,56(sp)
    3e38:	dc400d15 	stw	r17,52(sp)
    3e3c:	a47ff60e 	bge	r20,r17,3e18 <___vfprintf_internal_r+0x96c>
    3e40:	d9014f17 	ldw	r4,1340(sp)
    3e44:	b00b883a 	mov	r5,r22
    3e48:	d9800c04 	addi	r6,sp,48
    3e4c:	00034540 	call	3454 <__sprint_r>
    3e50:	103f4e1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3e54:	dc800e17 	ldw	r18,56(sp)
    3e58:	dc400d17 	ldw	r17,52(sp)
    3e5c:	d8c01904 	addi	r3,sp,100
    3e60:	003fee06 	br	3e1c <___vfprintf_internal_r+0x970>
    3e64:	d8802c0b 	ldhu	r2,176(sp)
    3e68:	00ffffc4 	movi	r3,-1
    3e6c:	d8c14b15 	stw	r3,1324(sp)
    3e70:	1080100c 	andi	r2,r2,64
    3e74:	103dcc1e 	bne	r2,zero,35a8 <___vfprintf_internal_r+0xfc>
    3e78:	003dce06 	br	35b4 <___vfprintf_internal_r+0x108>
    3e7c:	d9014f17 	ldw	r4,1340(sp)
    3e80:	b00b883a 	mov	r5,r22
    3e84:	d9800c04 	addi	r6,sp,48
    3e88:	00034540 	call	3454 <__sprint_r>
    3e8c:	103f3f1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3e90:	dc800e17 	ldw	r18,56(sp)
    3e94:	003f2e06 	br	3b50 <___vfprintf_internal_r+0x6a4>
    3e98:	d9414c17 	ldw	r5,1328(sp)
    3e9c:	29400414 	ori	r5,r5,16
    3ea0:	d9414c15 	stw	r5,1328(sp)
    3ea4:	d9814c17 	ldw	r6,1328(sp)
    3ea8:	3080080c 	andi	r2,r6,32
    3eac:	10014f1e 	bne	r2,zero,43ec <___vfprintf_internal_r+0xf40>
    3eb0:	d8c14c17 	ldw	r3,1328(sp)
    3eb4:	1880040c 	andi	r2,r3,16
    3eb8:	1002ea1e 	bne	r2,zero,4a64 <___vfprintf_internal_r+0x15b8>
    3ebc:	d9014c17 	ldw	r4,1328(sp)
    3ec0:	2080100c 	andi	r2,r4,64
    3ec4:	1002e726 	beq	r2,zero,4a64 <___vfprintf_internal_r+0x15b8>
    3ec8:	3880000f 	ldh	r2,0(r7)
    3ecc:	39c00104 	addi	r7,r7,4
    3ed0:	d9c14015 	stw	r7,1280(sp)
    3ed4:	1023d7fa 	srai	r17,r2,31
    3ed8:	1021883a 	mov	r16,r2
    3edc:	88037216 	blt	r17,zero,4ca8 <___vfprintf_internal_r+0x17fc>
    3ee0:	01000044 	movi	r4,1
    3ee4:	98000416 	blt	r19,zero,3ef8 <___vfprintf_internal_r+0xa4c>
    3ee8:	d8c14c17 	ldw	r3,1328(sp)
    3eec:	00bfdfc4 	movi	r2,-129
    3ef0:	1886703a 	and	r3,r3,r2
    3ef4:	d8c14c15 	stw	r3,1328(sp)
    3ef8:	8444b03a 	or	r2,r16,r17
    3efc:	1002261e 	bne	r2,zero,4798 <___vfprintf_internal_r+0x12ec>
    3f00:	9802251e 	bne	r19,zero,4798 <___vfprintf_internal_r+0x12ec>
    3f04:	20803fcc 	andi	r2,r4,255
    3f08:	10029b26 	beq	r2,zero,4978 <___vfprintf_internal_r+0x14cc>
    3f0c:	d8c01904 	addi	r3,sp,100
    3f10:	dd000f04 	addi	r20,sp,60
    3f14:	d8c14115 	stw	r3,1284(sp)
    3f18:	d8c14117 	ldw	r3,1284(sp)
    3f1c:	dcc14515 	stw	r19,1300(sp)
    3f20:	a0c5c83a 	sub	r2,r20,r3
    3f24:	11c00a04 	addi	r7,r2,40
    3f28:	99c0010e 	bge	r19,r7,3f30 <___vfprintf_internal_r+0xa84>
    3f2c:	d9c14515 	stw	r7,1300(sp)
    3f30:	dcc14615 	stw	r19,1304(sp)
    3f34:	d8800407 	ldb	r2,16(sp)
    3f38:	103e4c26 	beq	r2,zero,386c <___vfprintf_internal_r+0x3c0>
    3f3c:	d8814517 	ldw	r2,1300(sp)
    3f40:	10800044 	addi	r2,r2,1
    3f44:	d8814515 	stw	r2,1300(sp)
    3f48:	003e4806 	br	386c <___vfprintf_internal_r+0x3c0>
    3f4c:	d9814c17 	ldw	r6,1328(sp)
    3f50:	31800414 	ori	r6,r6,16
    3f54:	d9814c15 	stw	r6,1328(sp)
    3f58:	d8c14c17 	ldw	r3,1328(sp)
    3f5c:	1880080c 	andi	r2,r3,32
    3f60:	1001271e 	bne	r2,zero,4400 <___vfprintf_internal_r+0xf54>
    3f64:	d9414c17 	ldw	r5,1328(sp)
    3f68:	2880040c 	andi	r2,r5,16
    3f6c:	1002b61e 	bne	r2,zero,4a48 <___vfprintf_internal_r+0x159c>
    3f70:	d9814c17 	ldw	r6,1328(sp)
    3f74:	3080100c 	andi	r2,r6,64
    3f78:	1002b326 	beq	r2,zero,4a48 <___vfprintf_internal_r+0x159c>
    3f7c:	3c00000b 	ldhu	r16,0(r7)
    3f80:	0009883a 	mov	r4,zero
    3f84:	39c00104 	addi	r7,r7,4
    3f88:	0023883a 	mov	r17,zero
    3f8c:	d9c14015 	stw	r7,1280(sp)
    3f90:	d8000405 	stb	zero,16(sp)
    3f94:	003fd306 	br	3ee4 <___vfprintf_internal_r+0xa38>
    3f98:	d9014c17 	ldw	r4,1328(sp)
    3f9c:	21000414 	ori	r4,r4,16
    3fa0:	d9014c15 	stw	r4,1328(sp)
    3fa4:	d9414c17 	ldw	r5,1328(sp)
    3fa8:	2880080c 	andi	r2,r5,32
    3fac:	1001081e 	bne	r2,zero,43d0 <___vfprintf_internal_r+0xf24>
    3fb0:	d8c14c17 	ldw	r3,1328(sp)
    3fb4:	1880040c 	andi	r2,r3,16
    3fb8:	1002b01e 	bne	r2,zero,4a7c <___vfprintf_internal_r+0x15d0>
    3fbc:	d9014c17 	ldw	r4,1328(sp)
    3fc0:	2080100c 	andi	r2,r4,64
    3fc4:	1002ad26 	beq	r2,zero,4a7c <___vfprintf_internal_r+0x15d0>
    3fc8:	3c00000b 	ldhu	r16,0(r7)
    3fcc:	01000044 	movi	r4,1
    3fd0:	39c00104 	addi	r7,r7,4
    3fd4:	0023883a 	mov	r17,zero
    3fd8:	d9c14015 	stw	r7,1280(sp)
    3fdc:	d8000405 	stb	zero,16(sp)
    3fe0:	003fc006 	br	3ee4 <___vfprintf_internal_r+0xa38>
    3fe4:	d9014f17 	ldw	r4,1340(sp)
    3fe8:	b00b883a 	mov	r5,r22
    3fec:	d9800c04 	addi	r6,sp,48
    3ff0:	00034540 	call	3454 <__sprint_r>
    3ff4:	103ee51e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    3ff8:	dc800e17 	ldw	r18,56(sp)
    3ffc:	d8c01904 	addi	r3,sp,100
    4000:	d9814c17 	ldw	r6,1328(sp)
    4004:	3080004c 	andi	r2,r6,1
    4008:	1005003a 	cmpeq	r2,r2,zero
    400c:	103ea51e 	bne	r2,zero,3aa4 <___vfprintf_internal_r+0x5f8>
    4010:	00800044 	movi	r2,1
    4014:	dc400d17 	ldw	r17,52(sp)
    4018:	18800115 	stw	r2,4(r3)
    401c:	d8814917 	ldw	r2,1316(sp)
    4020:	94800044 	addi	r18,r18,1
    4024:	8c400044 	addi	r17,r17,1
    4028:	18800015 	stw	r2,0(r3)
    402c:	008001c4 	movi	r2,7
    4030:	dc800e15 	stw	r18,56(sp)
    4034:	dc400d15 	stw	r17,52(sp)
    4038:	14421e0e 	bge	r2,r17,48b4 <___vfprintf_internal_r+0x1408>
    403c:	d9014f17 	ldw	r4,1340(sp)
    4040:	b00b883a 	mov	r5,r22
    4044:	d9800c04 	addi	r6,sp,48
    4048:	00034540 	call	3454 <__sprint_r>
    404c:	103ecf1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4050:	dc800e17 	ldw	r18,56(sp)
    4054:	d8c01904 	addi	r3,sp,100
    4058:	003e9206 	br	3aa4 <___vfprintf_internal_r+0x5f8>
    405c:	d9014f17 	ldw	r4,1340(sp)
    4060:	b00b883a 	mov	r5,r22
    4064:	d9800c04 	addi	r6,sp,48
    4068:	00034540 	call	3454 <__sprint_r>
    406c:	103ec026 	beq	r2,zero,3b70 <___vfprintf_internal_r+0x6c4>
    4070:	003ec606 	br	3b8c <___vfprintf_internal_r+0x6e0>
    4074:	d9014f17 	ldw	r4,1340(sp)
    4078:	b00b883a 	mov	r5,r22
    407c:	d9800c04 	addi	r6,sp,48
    4080:	d9c15115 	stw	r7,1348(sp)
    4084:	00034540 	call	3454 <__sprint_r>
    4088:	d9c15117 	ldw	r7,1348(sp)
    408c:	103ebf1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4090:	dc800e17 	ldw	r18,56(sp)
    4094:	dc400d17 	ldw	r17,52(sp)
    4098:	dd401904 	addi	r21,sp,100
    409c:	003e7406 	br	3a70 <___vfprintf_internal_r+0x5c4>
    40a0:	d9014f17 	ldw	r4,1340(sp)
    40a4:	b00b883a 	mov	r5,r22
    40a8:	d9800c04 	addi	r6,sp,48
    40ac:	d9c15115 	stw	r7,1348(sp)
    40b0:	00034540 	call	3454 <__sprint_r>
    40b4:	d9c15117 	ldw	r7,1348(sp)
    40b8:	103eb41e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    40bc:	dd401904 	addi	r21,sp,100
    40c0:	003d6d06 	br	3678 <___vfprintf_internal_r+0x1cc>
    40c4:	d9014f17 	ldw	r4,1340(sp)
    40c8:	b00b883a 	mov	r5,r22
    40cc:	d9800c04 	addi	r6,sp,48
    40d0:	d9c15115 	stw	r7,1348(sp)
    40d4:	00034540 	call	3454 <__sprint_r>
    40d8:	d9c15117 	ldw	r7,1348(sp)
    40dc:	103eab1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    40e0:	dc800e17 	ldw	r18,56(sp)
    40e4:	dc400d17 	ldw	r17,52(sp)
    40e8:	dd401904 	addi	r21,sp,100
    40ec:	003e3406 	br	39c0 <___vfprintf_internal_r+0x514>
    40f0:	d9014f17 	ldw	r4,1340(sp)
    40f4:	b00b883a 	mov	r5,r22
    40f8:	d9800c04 	addi	r6,sp,48
    40fc:	d9c15115 	stw	r7,1348(sp)
    4100:	00034540 	call	3454 <__sprint_r>
    4104:	d9c15117 	ldw	r7,1348(sp)
    4108:	103ea01e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    410c:	dc800e17 	ldw	r18,56(sp)
    4110:	dc400d17 	ldw	r17,52(sp)
    4114:	dd401904 	addi	r21,sp,100
    4118:	003e1c06 	br	398c <___vfprintf_internal_r+0x4e0>
    411c:	d9014f17 	ldw	r4,1340(sp)
    4120:	b00b883a 	mov	r5,r22
    4124:	d9800c04 	addi	r6,sp,48
    4128:	d9c15115 	stw	r7,1348(sp)
    412c:	00034540 	call	3454 <__sprint_r>
    4130:	d9c15117 	ldw	r7,1348(sp)
    4134:	103e951e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4138:	dc800e17 	ldw	r18,56(sp)
    413c:	dc400d17 	ldw	r17,52(sp)
    4140:	dd401904 	addi	r21,sp,100
    4144:	003e0406 	br	3958 <___vfprintf_internal_r+0x4ac>
    4148:	d9000517 	ldw	r4,20(sp)
    414c:	0102520e 	bge	zero,r4,4a98 <___vfprintf_internal_r+0x15ec>
    4150:	d9814717 	ldw	r6,1308(sp)
    4154:	21807a16 	blt	r4,r6,4340 <___vfprintf_internal_r+0xe94>
    4158:	d8814117 	ldw	r2,1284(sp)
    415c:	91a5883a 	add	r18,r18,r6
    4160:	8c400044 	addi	r17,r17,1
    4164:	a8800015 	stw	r2,0(r21)
    4168:	008001c4 	movi	r2,7
    416c:	a9800115 	stw	r6,4(r21)
    4170:	dc800e15 	stw	r18,56(sp)
    4174:	dc400d15 	stw	r17,52(sp)
    4178:	1442f616 	blt	r2,r17,4d54 <___vfprintf_internal_r+0x18a8>
    417c:	a8c00204 	addi	r3,r21,8
    4180:	d9414717 	ldw	r5,1308(sp)
    4184:	2161c83a 	sub	r16,r4,r5
    4188:	043f9d0e 	bge	zero,r16,4000 <___vfprintf_internal_r+0xb54>
    418c:	00800404 	movi	r2,16
    4190:	1402130e 	bge	r2,r16,49e0 <___vfprintf_internal_r+0x1534>
    4194:	dc400d17 	ldw	r17,52(sp)
    4198:	1027883a 	mov	r19,r2
    419c:	07000074 	movhi	fp,1
    41a0:	e70dc684 	addi	fp,fp,14106
    41a4:	050001c4 	movi	r20,7
    41a8:	00000306 	br	41b8 <___vfprintf_internal_r+0xd0c>
    41ac:	18c00204 	addi	r3,r3,8
    41b0:	843ffc04 	addi	r16,r16,-16
    41b4:	9c020d0e 	bge	r19,r16,49ec <___vfprintf_internal_r+0x1540>
    41b8:	94800404 	addi	r18,r18,16
    41bc:	8c400044 	addi	r17,r17,1
    41c0:	1f000015 	stw	fp,0(r3)
    41c4:	1cc00115 	stw	r19,4(r3)
    41c8:	dc800e15 	stw	r18,56(sp)
    41cc:	dc400d15 	stw	r17,52(sp)
    41d0:	a47ff60e 	bge	r20,r17,41ac <___vfprintf_internal_r+0xd00>
    41d4:	d9014f17 	ldw	r4,1340(sp)
    41d8:	b00b883a 	mov	r5,r22
    41dc:	d9800c04 	addi	r6,sp,48
    41e0:	00034540 	call	3454 <__sprint_r>
    41e4:	103e691e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    41e8:	dc800e17 	ldw	r18,56(sp)
    41ec:	dc400d17 	ldw	r17,52(sp)
    41f0:	d8c01904 	addi	r3,sp,100
    41f4:	003fee06 	br	41b0 <___vfprintf_internal_r+0xd04>
    41f8:	d8814717 	ldw	r2,1308(sp)
    41fc:	143fffc4 	addi	r16,r2,-1
    4200:	043e970e 	bge	zero,r16,3c60 <___vfprintf_internal_r+0x7b4>
    4204:	00800404 	movi	r2,16
    4208:	1400180e 	bge	r2,r16,426c <___vfprintf_internal_r+0xdc0>
    420c:	1029883a 	mov	r20,r2
    4210:	07000074 	movhi	fp,1
    4214:	e70dc684 	addi	fp,fp,14106
    4218:	054001c4 	movi	r21,7
    421c:	00000306 	br	422c <___vfprintf_internal_r+0xd80>
    4220:	9cc00204 	addi	r19,r19,8
    4224:	843ffc04 	addi	r16,r16,-16
    4228:	a400120e 	bge	r20,r16,4274 <___vfprintf_internal_r+0xdc8>
    422c:	94800404 	addi	r18,r18,16
    4230:	8c400044 	addi	r17,r17,1
    4234:	9f000015 	stw	fp,0(r19)
    4238:	9d000115 	stw	r20,4(r19)
    423c:	dc800e15 	stw	r18,56(sp)
    4240:	dc400d15 	stw	r17,52(sp)
    4244:	ac7ff60e 	bge	r21,r17,4220 <___vfprintf_internal_r+0xd74>
    4248:	d9014f17 	ldw	r4,1340(sp)
    424c:	b00b883a 	mov	r5,r22
    4250:	d9800c04 	addi	r6,sp,48
    4254:	00034540 	call	3454 <__sprint_r>
    4258:	103e4c1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    425c:	dc800e17 	ldw	r18,56(sp)
    4260:	dc400d17 	ldw	r17,52(sp)
    4264:	dcc01904 	addi	r19,sp,100
    4268:	003fee06 	br	4224 <___vfprintf_internal_r+0xd78>
    426c:	07000074 	movhi	fp,1
    4270:	e70dc684 	addi	fp,fp,14106
    4274:	9425883a 	add	r18,r18,r16
    4278:	8c400044 	addi	r17,r17,1
    427c:	008001c4 	movi	r2,7
    4280:	9f000015 	stw	fp,0(r19)
    4284:	9c000115 	stw	r16,4(r19)
    4288:	dc800e15 	stw	r18,56(sp)
    428c:	dc400d15 	stw	r17,52(sp)
    4290:	147e720e 	bge	r2,r17,3c5c <___vfprintf_internal_r+0x7b0>
    4294:	d9014f17 	ldw	r4,1340(sp)
    4298:	b00b883a 	mov	r5,r22
    429c:	d9800c04 	addi	r6,sp,48
    42a0:	00034540 	call	3454 <__sprint_r>
    42a4:	103e391e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    42a8:	dc800e17 	ldw	r18,56(sp)
    42ac:	dc400d17 	ldw	r17,52(sp)
    42b0:	dcc01904 	addi	r19,sp,100
    42b4:	003e6a06 	br	3c60 <___vfprintf_internal_r+0x7b4>
    42b8:	d9014f17 	ldw	r4,1340(sp)
    42bc:	b00b883a 	mov	r5,r22
    42c0:	d9800c04 	addi	r6,sp,48
    42c4:	d9c15115 	stw	r7,1348(sp)
    42c8:	00034540 	call	3454 <__sprint_r>
    42cc:	d9c15117 	ldw	r7,1348(sp)
    42d0:	103e2e1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    42d4:	dc800e17 	ldw	r18,56(sp)
    42d8:	dc400d17 	ldw	r17,52(sp)
    42dc:	dd401904 	addi	r21,sp,100
    42e0:	003dba06 	br	39cc <___vfprintf_internal_r+0x520>
    42e4:	d9014f17 	ldw	r4,1340(sp)
    42e8:	b00b883a 	mov	r5,r22
    42ec:	d9800c04 	addi	r6,sp,48
    42f0:	00034540 	call	3454 <__sprint_r>
    42f4:	103e251e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    42f8:	dc800e17 	ldw	r18,56(sp)
    42fc:	dc400d17 	ldw	r17,52(sp)
    4300:	dcc01904 	addi	r19,sp,100
    4304:	003e4206 	br	3c10 <___vfprintf_internal_r+0x764>
    4308:	d9014f17 	ldw	r4,1340(sp)
    430c:	b00b883a 	mov	r5,r22
    4310:	d9800c04 	addi	r6,sp,48
    4314:	00034540 	call	3454 <__sprint_r>
    4318:	103e1c1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    431c:	dc800e17 	ldw	r18,56(sp)
    4320:	dc400d17 	ldw	r17,52(sp)
    4324:	d8c01904 	addi	r3,sp,100
    4328:	003e2e06 	br	3be4 <___vfprintf_internal_r+0x738>
    432c:	d9414c17 	ldw	r5,1328(sp)
    4330:	2880004c 	andi	r2,r5,1
    4334:	1005003a 	cmpeq	r2,r2,zero
    4338:	103dda1e 	bne	r2,zero,3aa4 <___vfprintf_internal_r+0x5f8>
    433c:	003e9f06 	br	3dbc <___vfprintf_internal_r+0x910>
    4340:	d8c14117 	ldw	r3,1284(sp)
    4344:	9125883a 	add	r18,r18,r4
    4348:	8c400044 	addi	r17,r17,1
    434c:	008001c4 	movi	r2,7
    4350:	a8c00015 	stw	r3,0(r21)
    4354:	a9000115 	stw	r4,4(r21)
    4358:	dc800e15 	stw	r18,56(sp)
    435c:	dc400d15 	stw	r17,52(sp)
    4360:	14426616 	blt	r2,r17,4cfc <___vfprintf_internal_r+0x1850>
    4364:	a8c00204 	addi	r3,r21,8
    4368:	d9414917 	ldw	r5,1316(sp)
    436c:	00800044 	movi	r2,1
    4370:	94800044 	addi	r18,r18,1
    4374:	8c400044 	addi	r17,r17,1
    4378:	18800115 	stw	r2,4(r3)
    437c:	008001c4 	movi	r2,7
    4380:	19400015 	stw	r5,0(r3)
    4384:	dc800e15 	stw	r18,56(sp)
    4388:	dc400d15 	stw	r17,52(sp)
    438c:	2021883a 	mov	r16,r4
    4390:	14425016 	blt	r2,r17,4cd4 <___vfprintf_internal_r+0x1828>
    4394:	19400204 	addi	r5,r3,8
    4398:	d9814717 	ldw	r6,1308(sp)
    439c:	8c400044 	addi	r17,r17,1
    43a0:	dc400d15 	stw	r17,52(sp)
    43a4:	3107c83a 	sub	r3,r6,r4
    43a8:	d9014117 	ldw	r4,1284(sp)
    43ac:	90e5883a 	add	r18,r18,r3
    43b0:	28c00115 	stw	r3,4(r5)
    43b4:	8105883a 	add	r2,r16,r4
    43b8:	28800015 	stw	r2,0(r5)
    43bc:	008001c4 	movi	r2,7
    43c0:	dc800e15 	stw	r18,56(sp)
    43c4:	147f1d16 	blt	r2,r17,403c <___vfprintf_internal_r+0xb90>
    43c8:	28c00204 	addi	r3,r5,8
    43cc:	003db506 	br	3aa4 <___vfprintf_internal_r+0x5f8>
    43d0:	3c000017 	ldw	r16,0(r7)
    43d4:	3c400117 	ldw	r17,4(r7)
    43d8:	39800204 	addi	r6,r7,8
    43dc:	01000044 	movi	r4,1
    43e0:	d9814015 	stw	r6,1280(sp)
    43e4:	d8000405 	stb	zero,16(sp)
    43e8:	003ebe06 	br	3ee4 <___vfprintf_internal_r+0xa38>
    43ec:	3c000017 	ldw	r16,0(r7)
    43f0:	3c400117 	ldw	r17,4(r7)
    43f4:	38800204 	addi	r2,r7,8
    43f8:	d8814015 	stw	r2,1280(sp)
    43fc:	003eb706 	br	3edc <___vfprintf_internal_r+0xa30>
    4400:	3c000017 	ldw	r16,0(r7)
    4404:	3c400117 	ldw	r17,4(r7)
    4408:	39000204 	addi	r4,r7,8
    440c:	d9014015 	stw	r4,1280(sp)
    4410:	0009883a 	mov	r4,zero
    4414:	d8000405 	stb	zero,16(sp)
    4418:	003eb206 	br	3ee4 <___vfprintf_internal_r+0xa38>
    441c:	38c00017 	ldw	r3,0(r7)
    4420:	39c00104 	addi	r7,r7,4
    4424:	d8c14a15 	stw	r3,1320(sp)
    4428:	1800d10e 	bge	r3,zero,4770 <___vfprintf_internal_r+0x12c4>
    442c:	00c7c83a 	sub	r3,zero,r3
    4430:	d8c14a15 	stw	r3,1320(sp)
    4434:	d9014c17 	ldw	r4,1328(sp)
    4438:	b8c00007 	ldb	r3,0(r23)
    443c:	21000114 	ori	r4,r4,4
    4440:	d9014c15 	stw	r4,1328(sp)
    4444:	003c9806 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4448:	d9814c17 	ldw	r6,1328(sp)
    444c:	3080080c 	andi	r2,r6,32
    4450:	1001f026 	beq	r2,zero,4c14 <___vfprintf_internal_r+0x1768>
    4454:	d9014b17 	ldw	r4,1324(sp)
    4458:	38800017 	ldw	r2,0(r7)
    445c:	39c00104 	addi	r7,r7,4
    4460:	d9c14015 	stw	r7,1280(sp)
    4464:	2007d7fa 	srai	r3,r4,31
    4468:	d9c14017 	ldw	r7,1280(sp)
    446c:	11000015 	stw	r4,0(r2)
    4470:	10c00115 	stw	r3,4(r2)
    4474:	003c6906 	br	361c <___vfprintf_internal_r+0x170>
    4478:	b8c00007 	ldb	r3,0(r23)
    447c:	00801b04 	movi	r2,108
    4480:	18824f26 	beq	r3,r2,4dc0 <___vfprintf_internal_r+0x1914>
    4484:	d9414c17 	ldw	r5,1328(sp)
    4488:	29400414 	ori	r5,r5,16
    448c:	d9414c15 	stw	r5,1328(sp)
    4490:	003c8506 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4494:	d9814c17 	ldw	r6,1328(sp)
    4498:	b8c00007 	ldb	r3,0(r23)
    449c:	31800814 	ori	r6,r6,32
    44a0:	d9814c15 	stw	r6,1328(sp)
    44a4:	003c8006 	br	36a8 <___vfprintf_internal_r+0x1fc>
    44a8:	d8814c17 	ldw	r2,1328(sp)
    44ac:	3c000017 	ldw	r16,0(r7)
    44b0:	00c01e04 	movi	r3,120
    44b4:	10800094 	ori	r2,r2,2
    44b8:	d8814c15 	stw	r2,1328(sp)
    44bc:	39c00104 	addi	r7,r7,4
    44c0:	01400074 	movhi	r5,1
    44c4:	294daf04 	addi	r5,r5,14012
    44c8:	00800c04 	movi	r2,48
    44cc:	0023883a 	mov	r17,zero
    44d0:	01000084 	movi	r4,2
    44d4:	d9c14015 	stw	r7,1280(sp)
    44d8:	d8c14d15 	stw	r3,1332(sp)
    44dc:	d9414415 	stw	r5,1296(sp)
    44e0:	d8800445 	stb	r2,17(sp)
    44e4:	d8c00485 	stb	r3,18(sp)
    44e8:	d8000405 	stb	zero,16(sp)
    44ec:	003e7d06 	br	3ee4 <___vfprintf_internal_r+0xa38>
    44f0:	d8814c17 	ldw	r2,1328(sp)
    44f4:	b8c00007 	ldb	r3,0(r23)
    44f8:	10801014 	ori	r2,r2,64
    44fc:	d8814c15 	stw	r2,1328(sp)
    4500:	003c6906 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4504:	d9414c17 	ldw	r5,1328(sp)
    4508:	2880020c 	andi	r2,r5,8
    450c:	1001df26 	beq	r2,zero,4c8c <___vfprintf_internal_r+0x17e0>
    4510:	39800017 	ldw	r6,0(r7)
    4514:	38800204 	addi	r2,r7,8
    4518:	d8814015 	stw	r2,1280(sp)
    451c:	d9814215 	stw	r6,1288(sp)
    4520:	39c00117 	ldw	r7,4(r7)
    4524:	d9c14315 	stw	r7,1292(sp)
    4528:	d9014217 	ldw	r4,1288(sp)
    452c:	d9414317 	ldw	r5,1292(sp)
    4530:	0009d140 	call	9d14 <__isinfd>
    4534:	10021726 	beq	r2,zero,4d94 <___vfprintf_internal_r+0x18e8>
    4538:	d9014217 	ldw	r4,1288(sp)
    453c:	d9414317 	ldw	r5,1292(sp)
    4540:	000d883a 	mov	r6,zero
    4544:	000f883a 	mov	r7,zero
    4548:	000bdd00 	call	bdd0 <__ltdf2>
    454c:	1002ca16 	blt	r2,zero,5078 <___vfprintf_internal_r+0x1bcc>
    4550:	d9414d17 	ldw	r5,1332(sp)
    4554:	008011c4 	movi	r2,71
    4558:	11420a16 	blt	r2,r5,4d84 <___vfprintf_internal_r+0x18d8>
    455c:	01800074 	movhi	r6,1
    4560:	318db404 	addi	r6,r6,14032
    4564:	d9814115 	stw	r6,1284(sp)
    4568:	d9014c17 	ldw	r4,1328(sp)
    456c:	00c000c4 	movi	r3,3
    4570:	00bfdfc4 	movi	r2,-129
    4574:	2088703a 	and	r4,r4,r2
    4578:	180f883a 	mov	r7,r3
    457c:	d8c14515 	stw	r3,1300(sp)
    4580:	d9014c15 	stw	r4,1328(sp)
    4584:	d8014615 	stw	zero,1304(sp)
    4588:	003e6a06 	br	3f34 <___vfprintf_internal_r+0xa88>
    458c:	38800017 	ldw	r2,0(r7)
    4590:	00c00044 	movi	r3,1
    4594:	39c00104 	addi	r7,r7,4
    4598:	d9c14015 	stw	r7,1280(sp)
    459c:	d9000f04 	addi	r4,sp,60
    45a0:	180f883a 	mov	r7,r3
    45a4:	d8c14515 	stw	r3,1300(sp)
    45a8:	d9014115 	stw	r4,1284(sp)
    45ac:	d8800f05 	stb	r2,60(sp)
    45b0:	d8000405 	stb	zero,16(sp)
    45b4:	003cac06 	br	3868 <___vfprintf_internal_r+0x3bc>
    45b8:	01400074 	movhi	r5,1
    45bc:	294dba04 	addi	r5,r5,14056
    45c0:	d9414415 	stw	r5,1296(sp)
    45c4:	d9814c17 	ldw	r6,1328(sp)
    45c8:	3080080c 	andi	r2,r6,32
    45cc:	1000f926 	beq	r2,zero,49b4 <___vfprintf_internal_r+0x1508>
    45d0:	3c000017 	ldw	r16,0(r7)
    45d4:	3c400117 	ldw	r17,4(r7)
    45d8:	38800204 	addi	r2,r7,8
    45dc:	d8814015 	stw	r2,1280(sp)
    45e0:	d9414c17 	ldw	r5,1328(sp)
    45e4:	2880004c 	andi	r2,r5,1
    45e8:	1005003a 	cmpeq	r2,r2,zero
    45ec:	1000b31e 	bne	r2,zero,48bc <___vfprintf_internal_r+0x1410>
    45f0:	8444b03a 	or	r2,r16,r17
    45f4:	1000b126 	beq	r2,zero,48bc <___vfprintf_internal_r+0x1410>
    45f8:	d9814d17 	ldw	r6,1332(sp)
    45fc:	29400094 	ori	r5,r5,2
    4600:	00800c04 	movi	r2,48
    4604:	01000084 	movi	r4,2
    4608:	d9414c15 	stw	r5,1328(sp)
    460c:	d8800445 	stb	r2,17(sp)
    4610:	d9800485 	stb	r6,18(sp)
    4614:	d8000405 	stb	zero,16(sp)
    4618:	003e3206 	br	3ee4 <___vfprintf_internal_r+0xa38>
    461c:	01800074 	movhi	r6,1
    4620:	318daf04 	addi	r6,r6,14012
    4624:	d9814415 	stw	r6,1296(sp)
    4628:	003fe606 	br	45c4 <___vfprintf_internal_r+0x1118>
    462c:	00800ac4 	movi	r2,43
    4630:	d8800405 	stb	r2,16(sp)
    4634:	b8c00007 	ldb	r3,0(r23)
    4638:	003c1b06 	br	36a8 <___vfprintf_internal_r+0x1fc>
    463c:	d8814c17 	ldw	r2,1328(sp)
    4640:	b8c00007 	ldb	r3,0(r23)
    4644:	10800054 	ori	r2,r2,1
    4648:	d8814c15 	stw	r2,1328(sp)
    464c:	003c1606 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4650:	d8800407 	ldb	r2,16(sp)
    4654:	1000461e 	bne	r2,zero,4770 <___vfprintf_internal_r+0x12c4>
    4658:	00800804 	movi	r2,32
    465c:	d8800405 	stb	r2,16(sp)
    4660:	b8c00007 	ldb	r3,0(r23)
    4664:	003c1006 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4668:	d9814c17 	ldw	r6,1328(sp)
    466c:	b8c00007 	ldb	r3,0(r23)
    4670:	31800214 	ori	r6,r6,8
    4674:	d9814c15 	stw	r6,1328(sp)
    4678:	003c0b06 	br	36a8 <___vfprintf_internal_r+0x1fc>
    467c:	0007883a 	mov	r3,zero
    4680:	01000244 	movi	r4,9
    4684:	188002a4 	muli	r2,r3,10
    4688:	b8c00007 	ldb	r3,0(r23)
    468c:	d9814d17 	ldw	r6,1332(sp)
    4690:	bdc00044 	addi	r23,r23,1
    4694:	d8c14d15 	stw	r3,1332(sp)
    4698:	d9414d17 	ldw	r5,1332(sp)
    469c:	3085883a 	add	r2,r6,r2
    46a0:	10fff404 	addi	r3,r2,-48
    46a4:	28bff404 	addi	r2,r5,-48
    46a8:	20bff62e 	bgeu	r4,r2,4684 <___vfprintf_internal_r+0x11d8>
    46ac:	d8c14a15 	stw	r3,1320(sp)
    46b0:	003bff06 	br	36b0 <___vfprintf_internal_r+0x204>
    46b4:	d9414c17 	ldw	r5,1328(sp)
    46b8:	b8c00007 	ldb	r3,0(r23)
    46bc:	29402014 	ori	r5,r5,128
    46c0:	d9414c15 	stw	r5,1328(sp)
    46c4:	003bf806 	br	36a8 <___vfprintf_internal_r+0x1fc>
    46c8:	b8c00007 	ldb	r3,0(r23)
    46cc:	00800a84 	movi	r2,42
    46d0:	bdc00044 	addi	r23,r23,1
    46d4:	18831526 	beq	r3,r2,532c <___vfprintf_internal_r+0x1e80>
    46d8:	d8c14d15 	stw	r3,1332(sp)
    46dc:	18bff404 	addi	r2,r3,-48
    46e0:	00c00244 	movi	r3,9
    46e4:	18827836 	bltu	r3,r2,50c8 <___vfprintf_internal_r+0x1c1c>
    46e8:	000d883a 	mov	r6,zero
    46ec:	308002a4 	muli	r2,r6,10
    46f0:	b9800007 	ldb	r6,0(r23)
    46f4:	d9414d17 	ldw	r5,1332(sp)
    46f8:	bdc00044 	addi	r23,r23,1
    46fc:	d9814d15 	stw	r6,1332(sp)
    4700:	d9014d17 	ldw	r4,1332(sp)
    4704:	1145883a 	add	r2,r2,r5
    4708:	11bff404 	addi	r6,r2,-48
    470c:	20bff404 	addi	r2,r4,-48
    4710:	18bff62e 	bgeu	r3,r2,46ec <___vfprintf_internal_r+0x1240>
    4714:	3027883a 	mov	r19,r6
    4718:	303be50e 	bge	r6,zero,36b0 <___vfprintf_internal_r+0x204>
    471c:	04ffffc4 	movi	r19,-1
    4720:	003be306 	br	36b0 <___vfprintf_internal_r+0x204>
    4724:	d8000405 	stb	zero,16(sp)
    4728:	39800017 	ldw	r6,0(r7)
    472c:	39c00104 	addi	r7,r7,4
    4730:	d9c14015 	stw	r7,1280(sp)
    4734:	d9814115 	stw	r6,1284(sp)
    4738:	3001c926 	beq	r6,zero,4e60 <___vfprintf_internal_r+0x19b4>
    473c:	98000e16 	blt	r19,zero,4778 <___vfprintf_internal_r+0x12cc>
    4740:	d9014117 	ldw	r4,1284(sp)
    4744:	000b883a 	mov	r5,zero
    4748:	980d883a 	mov	r6,r19
    474c:	00085680 	call	8568 <memchr>
    4750:	10025926 	beq	r2,zero,50b8 <___vfprintf_internal_r+0x1c0c>
    4754:	d8c14117 	ldw	r3,1284(sp)
    4758:	10cfc83a 	sub	r7,r2,r3
    475c:	99c19e16 	blt	r19,r7,4dd8 <___vfprintf_internal_r+0x192c>
    4760:	d9c14515 	stw	r7,1300(sp)
    4764:	38000916 	blt	r7,zero,478c <___vfprintf_internal_r+0x12e0>
    4768:	d8014615 	stw	zero,1304(sp)
    476c:	003df106 	br	3f34 <___vfprintf_internal_r+0xa88>
    4770:	b8c00007 	ldb	r3,0(r23)
    4774:	003bcc06 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4778:	d9014117 	ldw	r4,1284(sp)
    477c:	0009ffc0 	call	9ffc <strlen>
    4780:	d8814515 	stw	r2,1300(sp)
    4784:	100f883a 	mov	r7,r2
    4788:	103ff70e 	bge	r2,zero,4768 <___vfprintf_internal_r+0x12bc>
    478c:	d8014515 	stw	zero,1300(sp)
    4790:	d8014615 	stw	zero,1304(sp)
    4794:	003de706 	br	3f34 <___vfprintf_internal_r+0xa88>
    4798:	20c03fcc 	andi	r3,r4,255
    479c:	00800044 	movi	r2,1
    47a0:	18802d26 	beq	r3,r2,4858 <___vfprintf_internal_r+0x13ac>
    47a4:	18800e36 	bltu	r3,r2,47e0 <___vfprintf_internal_r+0x1334>
    47a8:	00800084 	movi	r2,2
    47ac:	1880fa26 	beq	r3,r2,4b98 <___vfprintf_internal_r+0x16ec>
    47b0:	01000074 	movhi	r4,1
    47b4:	210dbf04 	addi	r4,r4,14076
    47b8:	0009ffc0 	call	9ffc <strlen>
    47bc:	100f883a 	mov	r7,r2
    47c0:	dcc14515 	stw	r19,1300(sp)
    47c4:	9880010e 	bge	r19,r2,47cc <___vfprintf_internal_r+0x1320>
    47c8:	d8814515 	stw	r2,1300(sp)
    47cc:	00800074 	movhi	r2,1
    47d0:	108dbf04 	addi	r2,r2,14076
    47d4:	dcc14615 	stw	r19,1304(sp)
    47d8:	d8814115 	stw	r2,1284(sp)
    47dc:	003dd506 	br	3f34 <___vfprintf_internal_r+0xa88>
    47e0:	d9401904 	addi	r5,sp,100
    47e4:	dd000f04 	addi	r20,sp,60
    47e8:	d9414115 	stw	r5,1284(sp)
    47ec:	880a977a 	slli	r5,r17,29
    47f0:	d9814117 	ldw	r6,1284(sp)
    47f4:	8004d0fa 	srli	r2,r16,3
    47f8:	8806d0fa 	srli	r3,r17,3
    47fc:	810001cc 	andi	r4,r16,7
    4800:	2884b03a 	or	r2,r5,r2
    4804:	31bfffc4 	addi	r6,r6,-1
    4808:	21000c04 	addi	r4,r4,48
    480c:	d9814115 	stw	r6,1284(sp)
    4810:	10cab03a 	or	r5,r2,r3
    4814:	31000005 	stb	r4,0(r6)
    4818:	1021883a 	mov	r16,r2
    481c:	1823883a 	mov	r17,r3
    4820:	283ff21e 	bne	r5,zero,47ec <___vfprintf_internal_r+0x1340>
    4824:	d8c14c17 	ldw	r3,1328(sp)
    4828:	1880004c 	andi	r2,r3,1
    482c:	1005003a 	cmpeq	r2,r2,zero
    4830:	103db91e 	bne	r2,zero,3f18 <___vfprintf_internal_r+0xa6c>
    4834:	20803fcc 	andi	r2,r4,255
    4838:	1080201c 	xori	r2,r2,128
    483c:	10bfe004 	addi	r2,r2,-128
    4840:	00c00c04 	movi	r3,48
    4844:	10fdb426 	beq	r2,r3,3f18 <___vfprintf_internal_r+0xa6c>
    4848:	31bfffc4 	addi	r6,r6,-1
    484c:	d9814115 	stw	r6,1284(sp)
    4850:	30c00005 	stb	r3,0(r6)
    4854:	003db006 	br	3f18 <___vfprintf_internal_r+0xa6c>
    4858:	88800068 	cmpgeui	r2,r17,1
    485c:	10002c1e 	bne	r2,zero,4910 <___vfprintf_internal_r+0x1464>
    4860:	8800021e 	bne	r17,zero,486c <___vfprintf_internal_r+0x13c0>
    4864:	00800244 	movi	r2,9
    4868:	14002936 	bltu	r2,r16,4910 <___vfprintf_internal_r+0x1464>
    486c:	d90018c4 	addi	r4,sp,99
    4870:	dd000f04 	addi	r20,sp,60
    4874:	d9014115 	stw	r4,1284(sp)
    4878:	d9014117 	ldw	r4,1284(sp)
    487c:	80800c04 	addi	r2,r16,48
    4880:	20800005 	stb	r2,0(r4)
    4884:	003da406 	br	3f18 <___vfprintf_internal_r+0xa6c>
    4888:	dc400d17 	ldw	r17,52(sp)
    488c:	07000074 	movhi	fp,1
    4890:	e70dc684 	addi	fp,fp,14106
    4894:	9425883a 	add	r18,r18,r16
    4898:	8c400044 	addi	r17,r17,1
    489c:	008001c4 	movi	r2,7
    48a0:	1f000015 	stw	fp,0(r3)
    48a4:	1c000115 	stw	r16,4(r3)
    48a8:	dc800e15 	stw	r18,56(sp)
    48ac:	dc400d15 	stw	r17,52(sp)
    48b0:	147de216 	blt	r2,r17,403c <___vfprintf_internal_r+0xb90>
    48b4:	18c00204 	addi	r3,r3,8
    48b8:	003c7a06 	br	3aa4 <___vfprintf_internal_r+0x5f8>
    48bc:	01000084 	movi	r4,2
    48c0:	d8000405 	stb	zero,16(sp)
    48c4:	003d8706 	br	3ee4 <___vfprintf_internal_r+0xa38>
    48c8:	d9814c17 	ldw	r6,1328(sp)
    48cc:	30c4703a 	and	r2,r6,r3
    48d0:	1005003a 	cmpeq	r2,r2,zero
    48d4:	103cb926 	beq	r2,zero,3bbc <___vfprintf_internal_r+0x710>
    48d8:	d9014117 	ldw	r4,1284(sp)
    48dc:	94800044 	addi	r18,r18,1
    48e0:	8c400044 	addi	r17,r17,1
    48e4:	008001c4 	movi	r2,7
    48e8:	a9000015 	stw	r4,0(r21)
    48ec:	a8c00115 	stw	r3,4(r21)
    48f0:	dc800e15 	stw	r18,56(sp)
    48f4:	dc400d15 	stw	r17,52(sp)
    48f8:	147e6616 	blt	r2,r17,4294 <___vfprintf_internal_r+0xde8>
    48fc:	acc00204 	addi	r19,r21,8
    4900:	003cd706 	br	3c60 <___vfprintf_internal_r+0x7b4>
    4904:	07000074 	movhi	fp,1
    4908:	e70dc684 	addi	fp,fp,14106
    490c:	003c4f06 	br	3a4c <___vfprintf_internal_r+0x5a0>
    4910:	dd000f04 	addi	r20,sp,60
    4914:	dc801904 	addi	r18,sp,100
    4918:	8009883a 	mov	r4,r16
    491c:	880b883a 	mov	r5,r17
    4920:	01800284 	movi	r6,10
    4924:	000f883a 	mov	r7,zero
    4928:	000aae00 	call	aae0 <__umoddi3>
    492c:	12000c04 	addi	r8,r2,48
    4930:	94bfffc4 	addi	r18,r18,-1
    4934:	8009883a 	mov	r4,r16
    4938:	880b883a 	mov	r5,r17
    493c:	01800284 	movi	r6,10
    4940:	000f883a 	mov	r7,zero
    4944:	92000005 	stb	r8,0(r18)
    4948:	000a5040 	call	a504 <__udivdi3>
    494c:	1009883a 	mov	r4,r2
    4950:	1021883a 	mov	r16,r2
    4954:	18800068 	cmpgeui	r2,r3,1
    4958:	1823883a 	mov	r17,r3
    495c:	103fee1e 	bne	r2,zero,4918 <___vfprintf_internal_r+0x146c>
    4960:	1800021e 	bne	r3,zero,496c <___vfprintf_internal_r+0x14c0>
    4964:	00800244 	movi	r2,9
    4968:	113feb36 	bltu	r2,r4,4918 <___vfprintf_internal_r+0x146c>
    496c:	94bfffc4 	addi	r18,r18,-1
    4970:	dc814115 	stw	r18,1284(sp)
    4974:	003fc006 	br	4878 <___vfprintf_internal_r+0x13cc>
    4978:	d9014c17 	ldw	r4,1328(sp)
    497c:	2080004c 	andi	r2,r4,1
    4980:	10009a1e 	bne	r2,zero,4bec <___vfprintf_internal_r+0x1740>
    4984:	d9401904 	addi	r5,sp,100
    4988:	dd000f04 	addi	r20,sp,60
    498c:	d9414115 	stw	r5,1284(sp)
    4990:	003d6106 	br	3f18 <___vfprintf_internal_r+0xa6c>
    4994:	d9014f17 	ldw	r4,1340(sp)
    4998:	b00b883a 	mov	r5,r22
    499c:	d9800c04 	addi	r6,sp,48
    49a0:	00034540 	call	3454 <__sprint_r>
    49a4:	103c791e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    49a8:	dc800e17 	ldw	r18,56(sp)
    49ac:	d8c01904 	addi	r3,sp,100
    49b0:	003cff06 	br	3db0 <___vfprintf_internal_r+0x904>
    49b4:	d8c14c17 	ldw	r3,1328(sp)
    49b8:	1880040c 	andi	r2,r3,16
    49bc:	1000711e 	bne	r2,zero,4b84 <___vfprintf_internal_r+0x16d8>
    49c0:	d9014c17 	ldw	r4,1328(sp)
    49c4:	2080100c 	andi	r2,r4,64
    49c8:	10006e26 	beq	r2,zero,4b84 <___vfprintf_internal_r+0x16d8>
    49cc:	3c00000b 	ldhu	r16,0(r7)
    49d0:	0023883a 	mov	r17,zero
    49d4:	39c00104 	addi	r7,r7,4
    49d8:	d9c14015 	stw	r7,1280(sp)
    49dc:	003f0006 	br	45e0 <___vfprintf_internal_r+0x1134>
    49e0:	dc400d17 	ldw	r17,52(sp)
    49e4:	07000074 	movhi	fp,1
    49e8:	e70dc684 	addi	fp,fp,14106
    49ec:	9425883a 	add	r18,r18,r16
    49f0:	8c400044 	addi	r17,r17,1
    49f4:	008001c4 	movi	r2,7
    49f8:	1f000015 	stw	fp,0(r3)
    49fc:	1c000115 	stw	r16,4(r3)
    4a00:	dc800e15 	stw	r18,56(sp)
    4a04:	dc400d15 	stw	r17,52(sp)
    4a08:	147d7616 	blt	r2,r17,3fe4 <___vfprintf_internal_r+0xb38>
    4a0c:	18c00204 	addi	r3,r3,8
    4a10:	003d7b06 	br	4000 <___vfprintf_internal_r+0xb54>
    4a14:	dc800e17 	ldw	r18,56(sp)
    4a18:	dc400d17 	ldw	r17,52(sp)
    4a1c:	07000074 	movhi	fp,1
    4a20:	e70dca84 	addi	fp,fp,14122
    4a24:	003bc006 	br	3928 <___vfprintf_internal_r+0x47c>
    4a28:	d9014f17 	ldw	r4,1340(sp)
    4a2c:	b00b883a 	mov	r5,r22
    4a30:	d9800c04 	addi	r6,sp,48
    4a34:	00034540 	call	3454 <__sprint_r>
    4a38:	103c541e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4a3c:	dc800e17 	ldw	r18,56(sp)
    4a40:	d8c01904 	addi	r3,sp,100
    4a44:	003ce906 	br	3dec <___vfprintf_internal_r+0x940>
    4a48:	3c000017 	ldw	r16,0(r7)
    4a4c:	0009883a 	mov	r4,zero
    4a50:	39c00104 	addi	r7,r7,4
    4a54:	0023883a 	mov	r17,zero
    4a58:	d9c14015 	stw	r7,1280(sp)
    4a5c:	d8000405 	stb	zero,16(sp)
    4a60:	003d2006 	br	3ee4 <___vfprintf_internal_r+0xa38>
    4a64:	38800017 	ldw	r2,0(r7)
    4a68:	39c00104 	addi	r7,r7,4
    4a6c:	d9c14015 	stw	r7,1280(sp)
    4a70:	1023d7fa 	srai	r17,r2,31
    4a74:	1021883a 	mov	r16,r2
    4a78:	003d1806 	br	3edc <___vfprintf_internal_r+0xa30>
    4a7c:	3c000017 	ldw	r16,0(r7)
    4a80:	01000044 	movi	r4,1
    4a84:	39c00104 	addi	r7,r7,4
    4a88:	0023883a 	mov	r17,zero
    4a8c:	d9c14015 	stw	r7,1280(sp)
    4a90:	d8000405 	stb	zero,16(sp)
    4a94:	003d1306 	br	3ee4 <___vfprintf_internal_r+0xa38>
    4a98:	00800074 	movhi	r2,1
    4a9c:	108dc604 	addi	r2,r2,14104
    4aa0:	94800044 	addi	r18,r18,1
    4aa4:	8c400044 	addi	r17,r17,1
    4aa8:	a8800015 	stw	r2,0(r21)
    4aac:	00c00044 	movi	r3,1
    4ab0:	008001c4 	movi	r2,7
    4ab4:	a8c00115 	stw	r3,4(r21)
    4ab8:	dc800e15 	stw	r18,56(sp)
    4abc:	dc400d15 	stw	r17,52(sp)
    4ac0:	1440ca16 	blt	r2,r17,4dec <___vfprintf_internal_r+0x1940>
    4ac4:	a8c00204 	addi	r3,r21,8
    4ac8:	2000061e 	bne	r4,zero,4ae4 <___vfprintf_internal_r+0x1638>
    4acc:	d9414717 	ldw	r5,1308(sp)
    4ad0:	2800041e 	bne	r5,zero,4ae4 <___vfprintf_internal_r+0x1638>
    4ad4:	d9814c17 	ldw	r6,1328(sp)
    4ad8:	3080004c 	andi	r2,r6,1
    4adc:	1005003a 	cmpeq	r2,r2,zero
    4ae0:	103bf01e 	bne	r2,zero,3aa4 <___vfprintf_internal_r+0x5f8>
    4ae4:	00800044 	movi	r2,1
    4ae8:	dc400d17 	ldw	r17,52(sp)
    4aec:	18800115 	stw	r2,4(r3)
    4af0:	d8814917 	ldw	r2,1316(sp)
    4af4:	94800044 	addi	r18,r18,1
    4af8:	8c400044 	addi	r17,r17,1
    4afc:	18800015 	stw	r2,0(r3)
    4b00:	008001c4 	movi	r2,7
    4b04:	dc800e15 	stw	r18,56(sp)
    4b08:	dc400d15 	stw	r17,52(sp)
    4b0c:	1440ca16 	blt	r2,r17,4e38 <___vfprintf_internal_r+0x198c>
    4b10:	18c00204 	addi	r3,r3,8
    4b14:	0121c83a 	sub	r16,zero,r4
    4b18:	0400500e 	bge	zero,r16,4c5c <___vfprintf_internal_r+0x17b0>
    4b1c:	00800404 	movi	r2,16
    4b20:	1400800e 	bge	r2,r16,4d24 <___vfprintf_internal_r+0x1878>
    4b24:	1027883a 	mov	r19,r2
    4b28:	07000074 	movhi	fp,1
    4b2c:	e70dc684 	addi	fp,fp,14106
    4b30:	050001c4 	movi	r20,7
    4b34:	00000306 	br	4b44 <___vfprintf_internal_r+0x1698>
    4b38:	18c00204 	addi	r3,r3,8
    4b3c:	843ffc04 	addi	r16,r16,-16
    4b40:	9c007a0e 	bge	r19,r16,4d2c <___vfprintf_internal_r+0x1880>
    4b44:	94800404 	addi	r18,r18,16
    4b48:	8c400044 	addi	r17,r17,1
    4b4c:	1f000015 	stw	fp,0(r3)
    4b50:	1cc00115 	stw	r19,4(r3)
    4b54:	dc800e15 	stw	r18,56(sp)
    4b58:	dc400d15 	stw	r17,52(sp)
    4b5c:	a47ff60e 	bge	r20,r17,4b38 <___vfprintf_internal_r+0x168c>
    4b60:	d9014f17 	ldw	r4,1340(sp)
    4b64:	b00b883a 	mov	r5,r22
    4b68:	d9800c04 	addi	r6,sp,48
    4b6c:	00034540 	call	3454 <__sprint_r>
    4b70:	103c061e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4b74:	dc800e17 	ldw	r18,56(sp)
    4b78:	dc400d17 	ldw	r17,52(sp)
    4b7c:	d8c01904 	addi	r3,sp,100
    4b80:	003fee06 	br	4b3c <___vfprintf_internal_r+0x1690>
    4b84:	3c000017 	ldw	r16,0(r7)
    4b88:	0023883a 	mov	r17,zero
    4b8c:	39c00104 	addi	r7,r7,4
    4b90:	d9c14015 	stw	r7,1280(sp)
    4b94:	003e9206 	br	45e0 <___vfprintf_internal_r+0x1134>
    4b98:	d9401904 	addi	r5,sp,100
    4b9c:	dd000f04 	addi	r20,sp,60
    4ba0:	d9414115 	stw	r5,1284(sp)
    4ba4:	d9814417 	ldw	r6,1296(sp)
    4ba8:	880a973a 	slli	r5,r17,28
    4bac:	8004d13a 	srli	r2,r16,4
    4bb0:	810003cc 	andi	r4,r16,15
    4bb4:	3109883a 	add	r4,r6,r4
    4bb8:	2884b03a 	or	r2,r5,r2
    4bbc:	21400003 	ldbu	r5,0(r4)
    4bc0:	d9014117 	ldw	r4,1284(sp)
    4bc4:	8806d13a 	srli	r3,r17,4
    4bc8:	1021883a 	mov	r16,r2
    4bcc:	213fffc4 	addi	r4,r4,-1
    4bd0:	d9014115 	stw	r4,1284(sp)
    4bd4:	d9814117 	ldw	r6,1284(sp)
    4bd8:	10c8b03a 	or	r4,r2,r3
    4bdc:	1823883a 	mov	r17,r3
    4be0:	31400005 	stb	r5,0(r6)
    4be4:	203fef1e 	bne	r4,zero,4ba4 <___vfprintf_internal_r+0x16f8>
    4be8:	003ccb06 	br	3f18 <___vfprintf_internal_r+0xa6c>
    4bec:	00800c04 	movi	r2,48
    4bf0:	d98018c4 	addi	r6,sp,99
    4bf4:	dd000f04 	addi	r20,sp,60
    4bf8:	d88018c5 	stb	r2,99(sp)
    4bfc:	d9814115 	stw	r6,1284(sp)
    4c00:	003cc506 	br	3f18 <___vfprintf_internal_r+0xa6c>
    4c04:	dc400d17 	ldw	r17,52(sp)
    4c08:	07000074 	movhi	fp,1
    4c0c:	e70dca84 	addi	fp,fp,14122
    4c10:	003bc706 	br	3b30 <___vfprintf_internal_r+0x684>
    4c14:	d9414c17 	ldw	r5,1328(sp)
    4c18:	2880040c 	andi	r2,r5,16
    4c1c:	10007c26 	beq	r2,zero,4e10 <___vfprintf_internal_r+0x1964>
    4c20:	38800017 	ldw	r2,0(r7)
    4c24:	39c00104 	addi	r7,r7,4
    4c28:	d9c14015 	stw	r7,1280(sp)
    4c2c:	d9814b17 	ldw	r6,1324(sp)
    4c30:	d9c14017 	ldw	r7,1280(sp)
    4c34:	11800015 	stw	r6,0(r2)
    4c38:	003a7806 	br	361c <___vfprintf_internal_r+0x170>
    4c3c:	d9014f17 	ldw	r4,1340(sp)
    4c40:	b00b883a 	mov	r5,r22
    4c44:	d9800c04 	addi	r6,sp,48
    4c48:	00034540 	call	3454 <__sprint_r>
    4c4c:	103bcf1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4c50:	dc800e17 	ldw	r18,56(sp)
    4c54:	dc400d17 	ldw	r17,52(sp)
    4c58:	d8c01904 	addi	r3,sp,100
    4c5c:	d9014717 	ldw	r4,1308(sp)
    4c60:	d9414117 	ldw	r5,1284(sp)
    4c64:	8c400044 	addi	r17,r17,1
    4c68:	9125883a 	add	r18,r18,r4
    4c6c:	008001c4 	movi	r2,7
    4c70:	19400015 	stw	r5,0(r3)
    4c74:	19000115 	stw	r4,4(r3)
    4c78:	dc800e15 	stw	r18,56(sp)
    4c7c:	dc400d15 	stw	r17,52(sp)
    4c80:	147cee16 	blt	r2,r17,403c <___vfprintf_internal_r+0xb90>
    4c84:	18c00204 	addi	r3,r3,8
    4c88:	003b8606 	br	3aa4 <___vfprintf_internal_r+0x5f8>
    4c8c:	38c00017 	ldw	r3,0(r7)
    4c90:	39000204 	addi	r4,r7,8
    4c94:	d9014015 	stw	r4,1280(sp)
    4c98:	d8c14215 	stw	r3,1288(sp)
    4c9c:	39c00117 	ldw	r7,4(r7)
    4ca0:	d9c14315 	stw	r7,1292(sp)
    4ca4:	003e2006 	br	4528 <___vfprintf_internal_r+0x107c>
    4ca8:	0005883a 	mov	r2,zero
    4cac:	1409c83a 	sub	r4,r2,r16
    4cb0:	1105803a 	cmpltu	r2,r2,r4
    4cb4:	044bc83a 	sub	r5,zero,r17
    4cb8:	2885c83a 	sub	r2,r5,r2
    4cbc:	2021883a 	mov	r16,r4
    4cc0:	1023883a 	mov	r17,r2
    4cc4:	01000044 	movi	r4,1
    4cc8:	00800b44 	movi	r2,45
    4ccc:	d8800405 	stb	r2,16(sp)
    4cd0:	003c8406 	br	3ee4 <___vfprintf_internal_r+0xa38>
    4cd4:	d9014f17 	ldw	r4,1340(sp)
    4cd8:	b00b883a 	mov	r5,r22
    4cdc:	d9800c04 	addi	r6,sp,48
    4ce0:	00034540 	call	3454 <__sprint_r>
    4ce4:	103ba91e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4ce8:	dc800e17 	ldw	r18,56(sp)
    4cec:	dc400d17 	ldw	r17,52(sp)
    4cf0:	d9000517 	ldw	r4,20(sp)
    4cf4:	d9401904 	addi	r5,sp,100
    4cf8:	003da706 	br	4398 <___vfprintf_internal_r+0xeec>
    4cfc:	d9014f17 	ldw	r4,1340(sp)
    4d00:	b00b883a 	mov	r5,r22
    4d04:	d9800c04 	addi	r6,sp,48
    4d08:	00034540 	call	3454 <__sprint_r>
    4d0c:	103b9f1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4d10:	dc800e17 	ldw	r18,56(sp)
    4d14:	dc400d17 	ldw	r17,52(sp)
    4d18:	d9000517 	ldw	r4,20(sp)
    4d1c:	d8c01904 	addi	r3,sp,100
    4d20:	003d9106 	br	4368 <___vfprintf_internal_r+0xebc>
    4d24:	07000074 	movhi	fp,1
    4d28:	e70dc684 	addi	fp,fp,14106
    4d2c:	9425883a 	add	r18,r18,r16
    4d30:	8c400044 	addi	r17,r17,1
    4d34:	008001c4 	movi	r2,7
    4d38:	1f000015 	stw	fp,0(r3)
    4d3c:	1c000115 	stw	r16,4(r3)
    4d40:	dc800e15 	stw	r18,56(sp)
    4d44:	dc400d15 	stw	r17,52(sp)
    4d48:	147fbc16 	blt	r2,r17,4c3c <___vfprintf_internal_r+0x1790>
    4d4c:	18c00204 	addi	r3,r3,8
    4d50:	003fc206 	br	4c5c <___vfprintf_internal_r+0x17b0>
    4d54:	d9014f17 	ldw	r4,1340(sp)
    4d58:	b00b883a 	mov	r5,r22
    4d5c:	d9800c04 	addi	r6,sp,48
    4d60:	00034540 	call	3454 <__sprint_r>
    4d64:	103b891e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4d68:	dc800e17 	ldw	r18,56(sp)
    4d6c:	d9000517 	ldw	r4,20(sp)
    4d70:	d8c01904 	addi	r3,sp,100
    4d74:	003d0206 	br	4180 <___vfprintf_internal_r+0xcd4>
    4d78:	07000074 	movhi	fp,1
    4d7c:	e70dc684 	addi	fp,fp,14106
    4d80:	003be406 	br	3d14 <___vfprintf_internal_r+0x868>
    4d84:	00800074 	movhi	r2,1
    4d88:	108db504 	addi	r2,r2,14036
    4d8c:	d8814115 	stw	r2,1284(sp)
    4d90:	003df506 	br	4568 <___vfprintf_internal_r+0x10bc>
    4d94:	d9014217 	ldw	r4,1288(sp)
    4d98:	d9414317 	ldw	r5,1292(sp)
    4d9c:	0009d540 	call	9d54 <__isnand>
    4da0:	10003926 	beq	r2,zero,4e88 <___vfprintf_internal_r+0x19dc>
    4da4:	d9414d17 	ldw	r5,1332(sp)
    4da8:	008011c4 	movi	r2,71
    4dac:	1140ce16 	blt	r2,r5,50e8 <___vfprintf_internal_r+0x1c3c>
    4db0:	01800074 	movhi	r6,1
    4db4:	318db604 	addi	r6,r6,14040
    4db8:	d9814115 	stw	r6,1284(sp)
    4dbc:	003dea06 	br	4568 <___vfprintf_internal_r+0x10bc>
    4dc0:	d9014c17 	ldw	r4,1328(sp)
    4dc4:	bdc00044 	addi	r23,r23,1
    4dc8:	b8c00007 	ldb	r3,0(r23)
    4dcc:	21000814 	ori	r4,r4,32
    4dd0:	d9014c15 	stw	r4,1328(sp)
    4dd4:	003a3406 	br	36a8 <___vfprintf_internal_r+0x1fc>
    4dd8:	dcc14515 	stw	r19,1300(sp)
    4ddc:	98011016 	blt	r19,zero,5220 <___vfprintf_internal_r+0x1d74>
    4de0:	980f883a 	mov	r7,r19
    4de4:	d8014615 	stw	zero,1304(sp)
    4de8:	003c5206 	br	3f34 <___vfprintf_internal_r+0xa88>
    4dec:	d9014f17 	ldw	r4,1340(sp)
    4df0:	b00b883a 	mov	r5,r22
    4df4:	d9800c04 	addi	r6,sp,48
    4df8:	00034540 	call	3454 <__sprint_r>
    4dfc:	103b631e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4e00:	dc800e17 	ldw	r18,56(sp)
    4e04:	d9000517 	ldw	r4,20(sp)
    4e08:	d8c01904 	addi	r3,sp,100
    4e0c:	003f2e06 	br	4ac8 <___vfprintf_internal_r+0x161c>
    4e10:	d8c14c17 	ldw	r3,1328(sp)
    4e14:	1880100c 	andi	r2,r3,64
    4e18:	1000a026 	beq	r2,zero,509c <___vfprintf_internal_r+0x1bf0>
    4e1c:	38800017 	ldw	r2,0(r7)
    4e20:	39c00104 	addi	r7,r7,4
    4e24:	d9c14015 	stw	r7,1280(sp)
    4e28:	d9014b17 	ldw	r4,1324(sp)
    4e2c:	d9c14017 	ldw	r7,1280(sp)
    4e30:	1100000d 	sth	r4,0(r2)
    4e34:	0039f906 	br	361c <___vfprintf_internal_r+0x170>
    4e38:	d9014f17 	ldw	r4,1340(sp)
    4e3c:	b00b883a 	mov	r5,r22
    4e40:	d9800c04 	addi	r6,sp,48
    4e44:	00034540 	call	3454 <__sprint_r>
    4e48:	103b501e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    4e4c:	dc800e17 	ldw	r18,56(sp)
    4e50:	dc400d17 	ldw	r17,52(sp)
    4e54:	d9000517 	ldw	r4,20(sp)
    4e58:	d8c01904 	addi	r3,sp,100
    4e5c:	003f2d06 	br	4b14 <___vfprintf_internal_r+0x1668>
    4e60:	00800184 	movi	r2,6
    4e64:	14c09a36 	bltu	r2,r19,50d0 <___vfprintf_internal_r+0x1c24>
    4e68:	dcc14515 	stw	r19,1300(sp)
    4e6c:	9800010e 	bge	r19,zero,4e74 <___vfprintf_internal_r+0x19c8>
    4e70:	d8014515 	stw	zero,1300(sp)
    4e74:	00800074 	movhi	r2,1
    4e78:	108db804 	addi	r2,r2,14048
    4e7c:	980f883a 	mov	r7,r19
    4e80:	d8814115 	stw	r2,1284(sp)
    4e84:	003a7806 	br	3868 <___vfprintf_internal_r+0x3bc>
    4e88:	00bfffc4 	movi	r2,-1
    4e8c:	9880e226 	beq	r19,r2,5218 <___vfprintf_internal_r+0x1d6c>
    4e90:	d9414d17 	ldw	r5,1332(sp)
    4e94:	008019c4 	movi	r2,103
    4e98:	2880dc26 	beq	r5,r2,520c <___vfprintf_internal_r+0x1d60>
    4e9c:	008011c4 	movi	r2,71
    4ea0:	2880da26 	beq	r5,r2,520c <___vfprintf_internal_r+0x1d60>
    4ea4:	d9414c17 	ldw	r5,1328(sp)
    4ea8:	d9014317 	ldw	r4,1292(sp)
    4eac:	d9814217 	ldw	r6,1288(sp)
    4eb0:	29404014 	ori	r5,r5,256
    4eb4:	d9414c15 	stw	r5,1328(sp)
    4eb8:	2000cc16 	blt	r4,zero,51ec <___vfprintf_internal_r+0x1d40>
    4ebc:	3021883a 	mov	r16,r6
    4ec0:	2023883a 	mov	r17,r4
    4ec4:	0039883a 	mov	fp,zero
    4ec8:	d9414d17 	ldw	r5,1332(sp)
    4ecc:	00801984 	movi	r2,102
    4ed0:	2880b726 	beq	r5,r2,51b0 <___vfprintf_internal_r+0x1d04>
    4ed4:	00801184 	movi	r2,70
    4ed8:	2880b526 	beq	r5,r2,51b0 <___vfprintf_internal_r+0x1d04>
    4edc:	00801944 	movi	r2,101
    4ee0:	2880c826 	beq	r5,r2,5204 <___vfprintf_internal_r+0x1d58>
    4ee4:	00801144 	movi	r2,69
    4ee8:	2880c626 	beq	r5,r2,5204 <___vfprintf_internal_r+0x1d58>
    4eec:	9829883a 	mov	r20,r19
    4ef0:	d9014f17 	ldw	r4,1340(sp)
    4ef4:	d8800504 	addi	r2,sp,20
    4ef8:	880d883a 	mov	r6,r17
    4efc:	d8800115 	stw	r2,4(sp)
    4f00:	d8c00604 	addi	r3,sp,24
    4f04:	d8800704 	addi	r2,sp,28
    4f08:	800b883a 	mov	r5,r16
    4f0c:	01c00084 	movi	r7,2
    4f10:	d8c00215 	stw	r3,8(sp)
    4f14:	d8800315 	stw	r2,12(sp)
    4f18:	dd000015 	stw	r20,0(sp)
    4f1c:	00056d00 	call	56d0 <_dtoa_r>
    4f20:	d9814d17 	ldw	r6,1332(sp)
    4f24:	d8814115 	stw	r2,1284(sp)
    4f28:	008019c4 	movi	r2,103
    4f2c:	30809526 	beq	r6,r2,5184 <___vfprintf_internal_r+0x1cd8>
    4f30:	d8c14d17 	ldw	r3,1332(sp)
    4f34:	008011c4 	movi	r2,71
    4f38:	18809226 	beq	r3,r2,5184 <___vfprintf_internal_r+0x1cd8>
    4f3c:	d9414117 	ldw	r5,1284(sp)
    4f40:	d9814d17 	ldw	r6,1332(sp)
    4f44:	00801984 	movi	r2,102
    4f48:	2d25883a 	add	r18,r5,r20
    4f4c:	30808626 	beq	r6,r2,5168 <___vfprintf_internal_r+0x1cbc>
    4f50:	00801184 	movi	r2,70
    4f54:	30808426 	beq	r6,r2,5168 <___vfprintf_internal_r+0x1cbc>
    4f58:	000d883a 	mov	r6,zero
    4f5c:	000f883a 	mov	r7,zero
    4f60:	880b883a 	mov	r5,r17
    4f64:	8009883a 	mov	r4,r16
    4f68:	000bbb00 	call	bbb0 <__eqdf2>
    4f6c:	1000751e 	bne	r2,zero,5144 <___vfprintf_internal_r+0x1c98>
    4f70:	9005883a 	mov	r2,r18
    4f74:	dc800715 	stw	r18,28(sp)
    4f78:	d9014117 	ldw	r4,1284(sp)
    4f7c:	d9414d17 	ldw	r5,1332(sp)
    4f80:	00c019c4 	movi	r3,103
    4f84:	1125c83a 	sub	r18,r2,r4
    4f88:	28c06826 	beq	r5,r3,512c <___vfprintf_internal_r+0x1c80>
    4f8c:	008011c4 	movi	r2,71
    4f90:	28806626 	beq	r5,r2,512c <___vfprintf_internal_r+0x1c80>
    4f94:	d9000517 	ldw	r4,20(sp)
    4f98:	d8c14d17 	ldw	r3,1332(sp)
    4f9c:	00801944 	movi	r2,101
    4fa0:	10c05516 	blt	r2,r3,50f8 <___vfprintf_internal_r+0x1c4c>
    4fa4:	213fffc4 	addi	r4,r4,-1
    4fa8:	d9000515 	stw	r4,20(sp)
    4fac:	d8c00805 	stb	r3,32(sp)
    4fb0:	2021883a 	mov	r16,r4
    4fb4:	2000c116 	blt	r4,zero,52bc <___vfprintf_internal_r+0x1e10>
    4fb8:	00800ac4 	movi	r2,43
    4fbc:	d8800845 	stb	r2,33(sp)
    4fc0:	00800244 	movi	r2,9
    4fc4:	1400af0e 	bge	r2,r16,5284 <___vfprintf_internal_r+0x1dd8>
    4fc8:	1027883a 	mov	r19,r2
    4fcc:	dc400b84 	addi	r17,sp,46
    4fd0:	8009883a 	mov	r4,r16
    4fd4:	01400284 	movi	r5,10
    4fd8:	000c2980 	call	c298 <__modsi3>
    4fdc:	10800c04 	addi	r2,r2,48
    4fe0:	8c7fffc4 	addi	r17,r17,-1
    4fe4:	8009883a 	mov	r4,r16
    4fe8:	01400284 	movi	r5,10
    4fec:	88800005 	stb	r2,0(r17)
    4ff0:	000c2380 	call	c238 <__divsi3>
    4ff4:	1021883a 	mov	r16,r2
    4ff8:	98bff516 	blt	r19,r2,4fd0 <___vfprintf_internal_r+0x1b24>
    4ffc:	10c00c04 	addi	r3,r2,48
    5000:	d88009c4 	addi	r2,sp,39
    5004:	108001c4 	addi	r2,r2,7
    5008:	897fffc4 	addi	r5,r17,-1
    500c:	88ffffc5 	stb	r3,-1(r17)
    5010:	2880a72e 	bgeu	r5,r2,52b0 <___vfprintf_internal_r+0x1e04>
    5014:	1009883a 	mov	r4,r2
    5018:	d9800804 	addi	r6,sp,32
    501c:	d8c00884 	addi	r3,sp,34
    5020:	28800003 	ldbu	r2,0(r5)
    5024:	29400044 	addi	r5,r5,1
    5028:	18800005 	stb	r2,0(r3)
    502c:	18c00044 	addi	r3,r3,1
    5030:	293ffb36 	bltu	r5,r4,5020 <___vfprintf_internal_r+0x1b74>
    5034:	1987c83a 	sub	r3,r3,r6
    5038:	00800044 	movi	r2,1
    503c:	d8c14815 	stw	r3,1312(sp)
    5040:	90cf883a 	add	r7,r18,r3
    5044:	1480960e 	bge	r2,r18,52a0 <___vfprintf_internal_r+0x1df4>
    5048:	39c00044 	addi	r7,r7,1
    504c:	d9c14515 	stw	r7,1300(sp)
    5050:	38003416 	blt	r7,zero,5124 <___vfprintf_internal_r+0x1c78>
    5054:	e0803fcc 	andi	r2,fp,255
    5058:	1080201c 	xori	r2,r2,128
    505c:	10bfe004 	addi	r2,r2,-128
    5060:	10004e26 	beq	r2,zero,519c <___vfprintf_internal_r+0x1cf0>
    5064:	00800b44 	movi	r2,45
    5068:	dc814715 	stw	r18,1308(sp)
    506c:	d8014615 	stw	zero,1304(sp)
    5070:	d8800405 	stb	r2,16(sp)
    5074:	003bb106 	br	3f3c <___vfprintf_internal_r+0xa90>
    5078:	00800b44 	movi	r2,45
    507c:	d8800405 	stb	r2,16(sp)
    5080:	003d3306 	br	4550 <___vfprintf_internal_r+0x10a4>
    5084:	d9014f17 	ldw	r4,1340(sp)
    5088:	b00b883a 	mov	r5,r22
    508c:	d9800c04 	addi	r6,sp,48
    5090:	00034540 	call	3454 <__sprint_r>
    5094:	103abd1e 	bne	r2,zero,3b8c <___vfprintf_internal_r+0x6e0>
    5098:	003abb06 	br	3b88 <___vfprintf_internal_r+0x6dc>
    509c:	38800017 	ldw	r2,0(r7)
    50a0:	39c00104 	addi	r7,r7,4
    50a4:	d9c14015 	stw	r7,1280(sp)
    50a8:	d9414b17 	ldw	r5,1324(sp)
    50ac:	d9c14017 	ldw	r7,1280(sp)
    50b0:	11400015 	stw	r5,0(r2)
    50b4:	00395906 	br	361c <___vfprintf_internal_r+0x170>
    50b8:	980f883a 	mov	r7,r19
    50bc:	dcc14515 	stw	r19,1300(sp)
    50c0:	d8014615 	stw	zero,1304(sp)
    50c4:	003b9b06 	br	3f34 <___vfprintf_internal_r+0xa88>
    50c8:	0027883a 	mov	r19,zero
    50cc:	00397806 	br	36b0 <___vfprintf_internal_r+0x204>
    50d0:	00c00074 	movhi	r3,1
    50d4:	18cdb804 	addi	r3,r3,14048
    50d8:	100f883a 	mov	r7,r2
    50dc:	d8814515 	stw	r2,1300(sp)
    50e0:	d8c14115 	stw	r3,1284(sp)
    50e4:	0039e006 	br	3868 <___vfprintf_internal_r+0x3bc>
    50e8:	00800074 	movhi	r2,1
    50ec:	108db704 	addi	r2,r2,14044
    50f0:	d8814115 	stw	r2,1284(sp)
    50f4:	003d1c06 	br	4568 <___vfprintf_internal_r+0x10bc>
    50f8:	d9414d17 	ldw	r5,1332(sp)
    50fc:	00801984 	movi	r2,102
    5100:	28804926 	beq	r5,r2,5228 <___vfprintf_internal_r+0x1d7c>
    5104:	200f883a 	mov	r7,r4
    5108:	24805716 	blt	r4,r18,5268 <___vfprintf_internal_r+0x1dbc>
    510c:	d9414c17 	ldw	r5,1328(sp)
    5110:	2880004c 	andi	r2,r5,1
    5114:	10000126 	beq	r2,zero,511c <___vfprintf_internal_r+0x1c70>
    5118:	21c00044 	addi	r7,r4,1
    511c:	d9c14515 	stw	r7,1300(sp)
    5120:	383fcc0e 	bge	r7,zero,5054 <___vfprintf_internal_r+0x1ba8>
    5124:	d8014515 	stw	zero,1300(sp)
    5128:	003fca06 	br	5054 <___vfprintf_internal_r+0x1ba8>
    512c:	d9000517 	ldw	r4,20(sp)
    5130:	00bfff04 	movi	r2,-4
    5134:	1100480e 	bge	r2,r4,5258 <___vfprintf_internal_r+0x1dac>
    5138:	99004716 	blt	r19,r4,5258 <___vfprintf_internal_r+0x1dac>
    513c:	d8c14d15 	stw	r3,1332(sp)
    5140:	003ff006 	br	5104 <___vfprintf_internal_r+0x1c58>
    5144:	d8800717 	ldw	r2,28(sp)
    5148:	14bf8b2e 	bgeu	r2,r18,4f78 <___vfprintf_internal_r+0x1acc>
    514c:	9007883a 	mov	r3,r18
    5150:	01000c04 	movi	r4,48
    5154:	11000005 	stb	r4,0(r2)
    5158:	10800044 	addi	r2,r2,1
    515c:	d8800715 	stw	r2,28(sp)
    5160:	18bffc1e 	bne	r3,r2,5154 <___vfprintf_internal_r+0x1ca8>
    5164:	003f8406 	br	4f78 <___vfprintf_internal_r+0x1acc>
    5168:	d8814117 	ldw	r2,1284(sp)
    516c:	10c00007 	ldb	r3,0(r2)
    5170:	00800c04 	movi	r2,48
    5174:	18805b26 	beq	r3,r2,52e4 <___vfprintf_internal_r+0x1e38>
    5178:	d9000517 	ldw	r4,20(sp)
    517c:	9125883a 	add	r18,r18,r4
    5180:	003f7506 	br	4f58 <___vfprintf_internal_r+0x1aac>
    5184:	d9014c17 	ldw	r4,1328(sp)
    5188:	2080004c 	andi	r2,r4,1
    518c:	1005003a 	cmpeq	r2,r2,zero
    5190:	103f6a26 	beq	r2,zero,4f3c <___vfprintf_internal_r+0x1a90>
    5194:	d8800717 	ldw	r2,28(sp)
    5198:	003f7706 	br	4f78 <___vfprintf_internal_r+0x1acc>
    519c:	d9c14515 	stw	r7,1300(sp)
    51a0:	38004d16 	blt	r7,zero,52d8 <___vfprintf_internal_r+0x1e2c>
    51a4:	dc814715 	stw	r18,1308(sp)
    51a8:	d8014615 	stw	zero,1304(sp)
    51ac:	003b6106 	br	3f34 <___vfprintf_internal_r+0xa88>
    51b0:	d9014f17 	ldw	r4,1340(sp)
    51b4:	d8800504 	addi	r2,sp,20
    51b8:	d8800115 	stw	r2,4(sp)
    51bc:	d8c00604 	addi	r3,sp,24
    51c0:	d8800704 	addi	r2,sp,28
    51c4:	800b883a 	mov	r5,r16
    51c8:	880d883a 	mov	r6,r17
    51cc:	01c000c4 	movi	r7,3
    51d0:	d8c00215 	stw	r3,8(sp)
    51d4:	d8800315 	stw	r2,12(sp)
    51d8:	dcc00015 	stw	r19,0(sp)
    51dc:	9829883a 	mov	r20,r19
    51e0:	00056d00 	call	56d0 <_dtoa_r>
    51e4:	d8814115 	stw	r2,1284(sp)
    51e8:	003f5106 	br	4f30 <___vfprintf_internal_r+0x1a84>
    51ec:	d8c14217 	ldw	r3,1288(sp)
    51f0:	d9014317 	ldw	r4,1292(sp)
    51f4:	07000b44 	movi	fp,45
    51f8:	1821883a 	mov	r16,r3
    51fc:	2460003c 	xorhi	r17,r4,32768
    5200:	003f3106 	br	4ec8 <___vfprintf_internal_r+0x1a1c>
    5204:	9d000044 	addi	r20,r19,1
    5208:	003f3906 	br	4ef0 <___vfprintf_internal_r+0x1a44>
    520c:	983f251e 	bne	r19,zero,4ea4 <___vfprintf_internal_r+0x19f8>
    5210:	04c00044 	movi	r19,1
    5214:	003f2306 	br	4ea4 <___vfprintf_internal_r+0x19f8>
    5218:	04c00184 	movi	r19,6
    521c:	003f2106 	br	4ea4 <___vfprintf_internal_r+0x19f8>
    5220:	d8014515 	stw	zero,1300(sp)
    5224:	003eee06 	br	4de0 <___vfprintf_internal_r+0x1934>
    5228:	200f883a 	mov	r7,r4
    522c:	0100370e 	bge	zero,r4,530c <___vfprintf_internal_r+0x1e60>
    5230:	9800031e 	bne	r19,zero,5240 <___vfprintf_internal_r+0x1d94>
    5234:	d9814c17 	ldw	r6,1328(sp)
    5238:	3080004c 	andi	r2,r6,1
    523c:	103fb726 	beq	r2,zero,511c <___vfprintf_internal_r+0x1c70>
    5240:	20800044 	addi	r2,r4,1
    5244:	98a7883a 	add	r19,r19,r2
    5248:	dcc14515 	stw	r19,1300(sp)
    524c:	980f883a 	mov	r7,r19
    5250:	983f800e 	bge	r19,zero,5054 <___vfprintf_internal_r+0x1ba8>
    5254:	003fb306 	br	5124 <___vfprintf_internal_r+0x1c78>
    5258:	d9814d17 	ldw	r6,1332(sp)
    525c:	31bfff84 	addi	r6,r6,-2
    5260:	d9814d15 	stw	r6,1332(sp)
    5264:	003f4c06 	br	4f98 <___vfprintf_internal_r+0x1aec>
    5268:	0100180e 	bge	zero,r4,52cc <___vfprintf_internal_r+0x1e20>
    526c:	00800044 	movi	r2,1
    5270:	1485883a 	add	r2,r2,r18
    5274:	d8814515 	stw	r2,1300(sp)
    5278:	100f883a 	mov	r7,r2
    527c:	103f750e 	bge	r2,zero,5054 <___vfprintf_internal_r+0x1ba8>
    5280:	003fa806 	br	5124 <___vfprintf_internal_r+0x1c78>
    5284:	80c00c04 	addi	r3,r16,48
    5288:	00800c04 	movi	r2,48
    528c:	d8c008c5 	stb	r3,35(sp)
    5290:	d9800804 	addi	r6,sp,32
    5294:	d8c00904 	addi	r3,sp,36
    5298:	d8800885 	stb	r2,34(sp)
    529c:	003f6506 	br	5034 <___vfprintf_internal_r+0x1b88>
    52a0:	d9014c17 	ldw	r4,1328(sp)
    52a4:	2084703a 	and	r2,r4,r2
    52a8:	103f9c26 	beq	r2,zero,511c <___vfprintf_internal_r+0x1c70>
    52ac:	003f6606 	br	5048 <___vfprintf_internal_r+0x1b9c>
    52b0:	d9800804 	addi	r6,sp,32
    52b4:	d8c00884 	addi	r3,sp,34
    52b8:	003f5e06 	br	5034 <___vfprintf_internal_r+0x1b88>
    52bc:	00800b44 	movi	r2,45
    52c0:	0121c83a 	sub	r16,zero,r4
    52c4:	d8800845 	stb	r2,33(sp)
    52c8:	003f3d06 	br	4fc0 <___vfprintf_internal_r+0x1b14>
    52cc:	00800084 	movi	r2,2
    52d0:	1105c83a 	sub	r2,r2,r4
    52d4:	003fe606 	br	5270 <___vfprintf_internal_r+0x1dc4>
    52d8:	d8014515 	stw	zero,1300(sp)
    52dc:	dc814715 	stw	r18,1308(sp)
    52e0:	003fb106 	br	51a8 <___vfprintf_internal_r+0x1cfc>
    52e4:	000d883a 	mov	r6,zero
    52e8:	000f883a 	mov	r7,zero
    52ec:	8009883a 	mov	r4,r16
    52f0:	880b883a 	mov	r5,r17
    52f4:	000bc380 	call	bc38 <__nedf2>
    52f8:	103f9f26 	beq	r2,zero,5178 <___vfprintf_internal_r+0x1ccc>
    52fc:	00800044 	movi	r2,1
    5300:	1509c83a 	sub	r4,r2,r20
    5304:	d9000515 	stw	r4,20(sp)
    5308:	003f9b06 	br	5178 <___vfprintf_internal_r+0x1ccc>
    530c:	98000d1e 	bne	r19,zero,5344 <___vfprintf_internal_r+0x1e98>
    5310:	d8c14c17 	ldw	r3,1328(sp)
    5314:	1880004c 	andi	r2,r3,1
    5318:	10000a1e 	bne	r2,zero,5344 <___vfprintf_internal_r+0x1e98>
    531c:	01000044 	movi	r4,1
    5320:	200f883a 	mov	r7,r4
    5324:	d9014515 	stw	r4,1300(sp)
    5328:	003f4a06 	br	5054 <___vfprintf_internal_r+0x1ba8>
    532c:	3cc00017 	ldw	r19,0(r7)
    5330:	39c00104 	addi	r7,r7,4
    5334:	983d0e0e 	bge	r19,zero,4770 <___vfprintf_internal_r+0x12c4>
    5338:	b8c00007 	ldb	r3,0(r23)
    533c:	04ffffc4 	movi	r19,-1
    5340:	0038d906 	br	36a8 <___vfprintf_internal_r+0x1fc>
    5344:	9cc00084 	addi	r19,r19,2
    5348:	dcc14515 	stw	r19,1300(sp)
    534c:	980f883a 	mov	r7,r19
    5350:	983f400e 	bge	r19,zero,5054 <___vfprintf_internal_r+0x1ba8>
    5354:	003f7306 	br	5124 <___vfprintf_internal_r+0x1c78>

00005358 <__vfprintf_internal>:
    5358:	00800074 	movhi	r2,1
    535c:	10965a04 	addi	r2,r2,22888
    5360:	2013883a 	mov	r9,r4
    5364:	11000017 	ldw	r4,0(r2)
    5368:	2805883a 	mov	r2,r5
    536c:	300f883a 	mov	r7,r6
    5370:	480b883a 	mov	r5,r9
    5374:	100d883a 	mov	r6,r2
    5378:	00034ac1 	jmpi	34ac <___vfprintf_internal_r>

0000537c <__swsetup_r>:
    537c:	00800074 	movhi	r2,1
    5380:	10965a04 	addi	r2,r2,22888
    5384:	10c00017 	ldw	r3,0(r2)
    5388:	defffd04 	addi	sp,sp,-12
    538c:	dc400115 	stw	r17,4(sp)
    5390:	dc000015 	stw	r16,0(sp)
    5394:	dfc00215 	stw	ra,8(sp)
    5398:	2023883a 	mov	r17,r4
    539c:	2821883a 	mov	r16,r5
    53a0:	18000226 	beq	r3,zero,53ac <__swsetup_r+0x30>
    53a4:	18800e17 	ldw	r2,56(r3)
    53a8:	10001f26 	beq	r2,zero,5428 <__swsetup_r+0xac>
    53ac:	8100030b 	ldhu	r4,12(r16)
    53b0:	2080020c 	andi	r2,r4,8
    53b4:	10002826 	beq	r2,zero,5458 <__swsetup_r+0xdc>
    53b8:	81400417 	ldw	r5,16(r16)
    53bc:	28001d26 	beq	r5,zero,5434 <__swsetup_r+0xb8>
    53c0:	2080004c 	andi	r2,r4,1
    53c4:	1005003a 	cmpeq	r2,r2,zero
    53c8:	10000b26 	beq	r2,zero,53f8 <__swsetup_r+0x7c>
    53cc:	2080008c 	andi	r2,r4,2
    53d0:	10001226 	beq	r2,zero,541c <__swsetup_r+0xa0>
    53d4:	0005883a 	mov	r2,zero
    53d8:	80800215 	stw	r2,8(r16)
    53dc:	28000b26 	beq	r5,zero,540c <__swsetup_r+0x90>
    53e0:	0005883a 	mov	r2,zero
    53e4:	dfc00217 	ldw	ra,8(sp)
    53e8:	dc400117 	ldw	r17,4(sp)
    53ec:	dc000017 	ldw	r16,0(sp)
    53f0:	dec00304 	addi	sp,sp,12
    53f4:	f800283a 	ret
    53f8:	80800517 	ldw	r2,20(r16)
    53fc:	80000215 	stw	zero,8(r16)
    5400:	0085c83a 	sub	r2,zero,r2
    5404:	80800615 	stw	r2,24(r16)
    5408:	283ff51e 	bne	r5,zero,53e0 <__swsetup_r+0x64>
    540c:	2080200c 	andi	r2,r4,128
    5410:	103ff326 	beq	r2,zero,53e0 <__swsetup_r+0x64>
    5414:	00bfffc4 	movi	r2,-1
    5418:	003ff206 	br	53e4 <__swsetup_r+0x68>
    541c:	80800517 	ldw	r2,20(r16)
    5420:	80800215 	stw	r2,8(r16)
    5424:	003fed06 	br	53dc <__swsetup_r+0x60>
    5428:	1809883a 	mov	r4,r3
    542c:	0006f1c0 	call	6f1c <__sinit>
    5430:	003fde06 	br	53ac <__swsetup_r+0x30>
    5434:	20c0a00c 	andi	r3,r4,640
    5438:	00808004 	movi	r2,512
    543c:	18bfe026 	beq	r3,r2,53c0 <__swsetup_r+0x44>
    5440:	8809883a 	mov	r4,r17
    5444:	800b883a 	mov	r5,r16
    5448:	0007c940 	call	7c94 <__smakebuf_r>
    544c:	8100030b 	ldhu	r4,12(r16)
    5450:	81400417 	ldw	r5,16(r16)
    5454:	003fda06 	br	53c0 <__swsetup_r+0x44>
    5458:	2080040c 	andi	r2,r4,16
    545c:	103fed26 	beq	r2,zero,5414 <__swsetup_r+0x98>
    5460:	2080010c 	andi	r2,r4,4
    5464:	10001226 	beq	r2,zero,54b0 <__swsetup_r+0x134>
    5468:	81400c17 	ldw	r5,48(r16)
    546c:	28000526 	beq	r5,zero,5484 <__swsetup_r+0x108>
    5470:	80801004 	addi	r2,r16,64
    5474:	28800226 	beq	r5,r2,5480 <__swsetup_r+0x104>
    5478:	8809883a 	mov	r4,r17
    547c:	00072a00 	call	72a0 <_free_r>
    5480:	80000c15 	stw	zero,48(r16)
    5484:	8080030b 	ldhu	r2,12(r16)
    5488:	81400417 	ldw	r5,16(r16)
    548c:	80000115 	stw	zero,4(r16)
    5490:	10bff6cc 	andi	r2,r2,65499
    5494:	8080030d 	sth	r2,12(r16)
    5498:	81400015 	stw	r5,0(r16)
    549c:	8080030b 	ldhu	r2,12(r16)
    54a0:	10800214 	ori	r2,r2,8
    54a4:	113fffcc 	andi	r4,r2,65535
    54a8:	8080030d 	sth	r2,12(r16)
    54ac:	003fc306 	br	53bc <__swsetup_r+0x40>
    54b0:	81400417 	ldw	r5,16(r16)
    54b4:	003ff906 	br	549c <__swsetup_r+0x120>

000054b8 <quorem>:
    54b8:	28c00417 	ldw	r3,16(r5)
    54bc:	20800417 	ldw	r2,16(r4)
    54c0:	defff604 	addi	sp,sp,-40
    54c4:	ddc00715 	stw	r23,28(sp)
    54c8:	dd400515 	stw	r21,20(sp)
    54cc:	dfc00915 	stw	ra,36(sp)
    54d0:	df000815 	stw	fp,32(sp)
    54d4:	dd800615 	stw	r22,24(sp)
    54d8:	dd000415 	stw	r20,16(sp)
    54dc:	dcc00315 	stw	r19,12(sp)
    54e0:	dc800215 	stw	r18,8(sp)
    54e4:	dc400115 	stw	r17,4(sp)
    54e8:	dc000015 	stw	r16,0(sp)
    54ec:	202f883a 	mov	r23,r4
    54f0:	282b883a 	mov	r21,r5
    54f4:	10c07416 	blt	r2,r3,56c8 <quorem+0x210>
    54f8:	1c7fffc4 	addi	r17,r3,-1
    54fc:	8c45883a 	add	r2,r17,r17
    5500:	1085883a 	add	r2,r2,r2
    5504:	2c000504 	addi	r16,r5,20
    5508:	24c00504 	addi	r19,r4,20
    550c:	14ed883a 	add	r22,r2,r19
    5510:	80a5883a 	add	r18,r16,r2
    5514:	b7000017 	ldw	fp,0(r22)
    5518:	91400017 	ldw	r5,0(r18)
    551c:	e009883a 	mov	r4,fp
    5520:	29400044 	addi	r5,r5,1
    5524:	000c2f80 	call	c2f8 <__udivsi3>
    5528:	1029883a 	mov	r20,r2
    552c:	10003c1e 	bne	r2,zero,5620 <quorem+0x168>
    5530:	a80b883a 	mov	r5,r21
    5534:	b809883a 	mov	r4,r23
    5538:	00088880 	call	8888 <__mcmp>
    553c:	10002b16 	blt	r2,zero,55ec <quorem+0x134>
    5540:	a5000044 	addi	r20,r20,1
    5544:	980f883a 	mov	r7,r19
    5548:	0011883a 	mov	r8,zero
    554c:	0009883a 	mov	r4,zero
    5550:	81400017 	ldw	r5,0(r16)
    5554:	38c00017 	ldw	r3,0(r7)
    5558:	84000104 	addi	r16,r16,4
    555c:	28bfffcc 	andi	r2,r5,65535
    5560:	2085883a 	add	r2,r4,r2
    5564:	11bfffcc 	andi	r6,r2,65535
    5568:	193fffcc 	andi	r4,r3,65535
    556c:	1004d43a 	srli	r2,r2,16
    5570:	280ad43a 	srli	r5,r5,16
    5574:	2189c83a 	sub	r4,r4,r6
    5578:	2209883a 	add	r4,r4,r8
    557c:	1806d43a 	srli	r3,r3,16
    5580:	288b883a 	add	r5,r5,r2
    5584:	200dd43a 	srai	r6,r4,16
    5588:	28bfffcc 	andi	r2,r5,65535
    558c:	1887c83a 	sub	r3,r3,r2
    5590:	1987883a 	add	r3,r3,r6
    5594:	3900000d 	sth	r4,0(r7)
    5598:	38c0008d 	sth	r3,2(r7)
    559c:	2808d43a 	srli	r4,r5,16
    55a0:	39c00104 	addi	r7,r7,4
    55a4:	1811d43a 	srai	r8,r3,16
    55a8:	943fe92e 	bgeu	r18,r16,5550 <quorem+0x98>
    55ac:	8c45883a 	add	r2,r17,r17
    55b0:	1085883a 	add	r2,r2,r2
    55b4:	9885883a 	add	r2,r19,r2
    55b8:	10c00017 	ldw	r3,0(r2)
    55bc:	18000b1e 	bne	r3,zero,55ec <quorem+0x134>
    55c0:	113fff04 	addi	r4,r2,-4
    55c4:	9900082e 	bgeu	r19,r4,55e8 <quorem+0x130>
    55c8:	10bfff17 	ldw	r2,-4(r2)
    55cc:	10000326 	beq	r2,zero,55dc <quorem+0x124>
    55d0:	00000506 	br	55e8 <quorem+0x130>
    55d4:	20800017 	ldw	r2,0(r4)
    55d8:	1000031e 	bne	r2,zero,55e8 <quorem+0x130>
    55dc:	213fff04 	addi	r4,r4,-4
    55e0:	8c7fffc4 	addi	r17,r17,-1
    55e4:	993ffb36 	bltu	r19,r4,55d4 <quorem+0x11c>
    55e8:	bc400415 	stw	r17,16(r23)
    55ec:	a005883a 	mov	r2,r20
    55f0:	dfc00917 	ldw	ra,36(sp)
    55f4:	df000817 	ldw	fp,32(sp)
    55f8:	ddc00717 	ldw	r23,28(sp)
    55fc:	dd800617 	ldw	r22,24(sp)
    5600:	dd400517 	ldw	r21,20(sp)
    5604:	dd000417 	ldw	r20,16(sp)
    5608:	dcc00317 	ldw	r19,12(sp)
    560c:	dc800217 	ldw	r18,8(sp)
    5610:	dc400117 	ldw	r17,4(sp)
    5614:	dc000017 	ldw	r16,0(sp)
    5618:	dec00a04 	addi	sp,sp,40
    561c:	f800283a 	ret
    5620:	980f883a 	mov	r7,r19
    5624:	8011883a 	mov	r8,r16
    5628:	0013883a 	mov	r9,zero
    562c:	000d883a 	mov	r6,zero
    5630:	40c00017 	ldw	r3,0(r8)
    5634:	39000017 	ldw	r4,0(r7)
    5638:	42000104 	addi	r8,r8,4
    563c:	18bfffcc 	andi	r2,r3,65535
    5640:	a085383a 	mul	r2,r20,r2
    5644:	1806d43a 	srli	r3,r3,16
    5648:	217fffcc 	andi	r5,r4,65535
    564c:	3085883a 	add	r2,r6,r2
    5650:	11bfffcc 	andi	r6,r2,65535
    5654:	a0c7383a 	mul	r3,r20,r3
    5658:	1004d43a 	srli	r2,r2,16
    565c:	298bc83a 	sub	r5,r5,r6
    5660:	2a4b883a 	add	r5,r5,r9
    5664:	2008d43a 	srli	r4,r4,16
    5668:	1887883a 	add	r3,r3,r2
    566c:	280dd43a 	srai	r6,r5,16
    5670:	18bfffcc 	andi	r2,r3,65535
    5674:	2089c83a 	sub	r4,r4,r2
    5678:	2189883a 	add	r4,r4,r6
    567c:	3900008d 	sth	r4,2(r7)
    5680:	3940000d 	sth	r5,0(r7)
    5684:	180cd43a 	srli	r6,r3,16
    5688:	39c00104 	addi	r7,r7,4
    568c:	2013d43a 	srai	r9,r4,16
    5690:	923fe72e 	bgeu	r18,r8,5630 <quorem+0x178>
    5694:	e03fa61e 	bne	fp,zero,5530 <quorem+0x78>
    5698:	b0ffff04 	addi	r3,r22,-4
    569c:	98c0082e 	bgeu	r19,r3,56c0 <quorem+0x208>
    56a0:	b0bfff17 	ldw	r2,-4(r22)
    56a4:	10000326 	beq	r2,zero,56b4 <quorem+0x1fc>
    56a8:	00000506 	br	56c0 <quorem+0x208>
    56ac:	18800017 	ldw	r2,0(r3)
    56b0:	1000031e 	bne	r2,zero,56c0 <quorem+0x208>
    56b4:	18ffff04 	addi	r3,r3,-4
    56b8:	8c7fffc4 	addi	r17,r17,-1
    56bc:	98fffb36 	bltu	r19,r3,56ac <quorem+0x1f4>
    56c0:	bc400415 	stw	r17,16(r23)
    56c4:	003f9a06 	br	5530 <quorem+0x78>
    56c8:	0005883a 	mov	r2,zero
    56cc:	003fc806 	br	55f0 <quorem+0x138>

000056d0 <_dtoa_r>:
    56d0:	22001017 	ldw	r8,64(r4)
    56d4:	deffda04 	addi	sp,sp,-152
    56d8:	dd402115 	stw	r21,132(sp)
    56dc:	dd002015 	stw	r20,128(sp)
    56e0:	dc801e15 	stw	r18,120(sp)
    56e4:	dc401d15 	stw	r17,116(sp)
    56e8:	dfc02515 	stw	ra,148(sp)
    56ec:	df002415 	stw	fp,144(sp)
    56f0:	ddc02315 	stw	r23,140(sp)
    56f4:	dd802215 	stw	r22,136(sp)
    56f8:	dcc01f15 	stw	r19,124(sp)
    56fc:	dc001c15 	stw	r16,112(sp)
    5700:	d9001615 	stw	r4,88(sp)
    5704:	3023883a 	mov	r17,r6
    5708:	2829883a 	mov	r20,r5
    570c:	d9c01715 	stw	r7,92(sp)
    5710:	dc802817 	ldw	r18,160(sp)
    5714:	302b883a 	mov	r21,r6
    5718:	40000a26 	beq	r8,zero,5744 <_dtoa_r+0x74>
    571c:	20801117 	ldw	r2,68(r4)
    5720:	400b883a 	mov	r5,r8
    5724:	40800115 	stw	r2,4(r8)
    5728:	20c01117 	ldw	r3,68(r4)
    572c:	00800044 	movi	r2,1
    5730:	10c4983a 	sll	r2,r2,r3
    5734:	40800215 	stw	r2,8(r8)
    5738:	000872c0 	call	872c <_Bfree>
    573c:	d8c01617 	ldw	r3,88(sp)
    5740:	18001015 	stw	zero,64(r3)
    5744:	8800a316 	blt	r17,zero,59d4 <_dtoa_r+0x304>
    5748:	90000015 	stw	zero,0(r18)
    574c:	a8dffc2c 	andhi	r3,r21,32752
    5750:	009ffc34 	movhi	r2,32752
    5754:	18809126 	beq	r3,r2,599c <_dtoa_r+0x2cc>
    5758:	000d883a 	mov	r6,zero
    575c:	000f883a 	mov	r7,zero
    5760:	a009883a 	mov	r4,r20
    5764:	a80b883a 	mov	r5,r21
    5768:	dd001215 	stw	r20,72(sp)
    576c:	dd401315 	stw	r21,76(sp)
    5770:	000bc380 	call	bc38 <__nedf2>
    5774:	1000171e 	bne	r2,zero,57d4 <_dtoa_r+0x104>
    5778:	d9802717 	ldw	r6,156(sp)
    577c:	00800044 	movi	r2,1
    5780:	30800015 	stw	r2,0(r6)
    5784:	d8802917 	ldw	r2,164(sp)
    5788:	10029b26 	beq	r2,zero,61f8 <_dtoa_r+0xb28>
    578c:	d9002917 	ldw	r4,164(sp)
    5790:	00800074 	movhi	r2,1
    5794:	108dc644 	addi	r2,r2,14105
    5798:	10ffffc4 	addi	r3,r2,-1
    579c:	20800015 	stw	r2,0(r4)
    57a0:	1805883a 	mov	r2,r3
    57a4:	dfc02517 	ldw	ra,148(sp)
    57a8:	df002417 	ldw	fp,144(sp)
    57ac:	ddc02317 	ldw	r23,140(sp)
    57b0:	dd802217 	ldw	r22,136(sp)
    57b4:	dd402117 	ldw	r21,132(sp)
    57b8:	dd002017 	ldw	r20,128(sp)
    57bc:	dcc01f17 	ldw	r19,124(sp)
    57c0:	dc801e17 	ldw	r18,120(sp)
    57c4:	dc401d17 	ldw	r17,116(sp)
    57c8:	dc001c17 	ldw	r16,112(sp)
    57cc:	dec02604 	addi	sp,sp,152
    57d0:	f800283a 	ret
    57d4:	d9001617 	ldw	r4,88(sp)
    57d8:	d9401217 	ldw	r5,72(sp)
    57dc:	d8800104 	addi	r2,sp,4
    57e0:	a80d883a 	mov	r6,r21
    57e4:	d9c00204 	addi	r7,sp,8
    57e8:	d8800015 	stw	r2,0(sp)
    57ec:	0008d680 	call	8d68 <__d2b>
    57f0:	d8800715 	stw	r2,28(sp)
    57f4:	a804d53a 	srli	r2,r21,20
    57f8:	1101ffcc 	andi	r4,r2,2047
    57fc:	20008626 	beq	r4,zero,5a18 <_dtoa_r+0x348>
    5800:	d8c01217 	ldw	r3,72(sp)
    5804:	00800434 	movhi	r2,16
    5808:	10bfffc4 	addi	r2,r2,-1
    580c:	ddc00117 	ldw	r23,4(sp)
    5810:	a884703a 	and	r2,r21,r2
    5814:	1811883a 	mov	r8,r3
    5818:	124ffc34 	orhi	r9,r2,16368
    581c:	25bf0044 	addi	r22,r4,-1023
    5820:	d8000815 	stw	zero,32(sp)
    5824:	0005883a 	mov	r2,zero
    5828:	00cffe34 	movhi	r3,16376
    582c:	480b883a 	mov	r5,r9
    5830:	4009883a 	mov	r4,r8
    5834:	180f883a 	mov	r7,r3
    5838:	100d883a 	mov	r6,r2
    583c:	000b4a00 	call	b4a0 <__subdf3>
    5840:	0218dbf4 	movhi	r8,25455
    5844:	4210d844 	addi	r8,r8,17249
    5848:	024ff4f4 	movhi	r9,16339
    584c:	4a61e9c4 	addi	r9,r9,-30809
    5850:	480f883a 	mov	r7,r9
    5854:	400d883a 	mov	r6,r8
    5858:	180b883a 	mov	r5,r3
    585c:	1009883a 	mov	r4,r2
    5860:	000b5940 	call	b594 <__muldf3>
    5864:	0222d874 	movhi	r8,35681
    5868:	42322cc4 	addi	r8,r8,-14157
    586c:	024ff1f4 	movhi	r9,16327
    5870:	4a628a04 	addi	r9,r9,-30168
    5874:	480f883a 	mov	r7,r9
    5878:	400d883a 	mov	r6,r8
    587c:	180b883a 	mov	r5,r3
    5880:	1009883a 	mov	r4,r2
    5884:	000b5200 	call	b520 <__adddf3>
    5888:	b009883a 	mov	r4,r22
    588c:	1021883a 	mov	r16,r2
    5890:	1823883a 	mov	r17,r3
    5894:	000be580 	call	be58 <__floatsidf>
    5898:	021427f4 	movhi	r8,20639
    589c:	421e7ec4 	addi	r8,r8,31227
    58a0:	024ff4f4 	movhi	r9,16339
    58a4:	4a5104c4 	addi	r9,r9,17427
    58a8:	480f883a 	mov	r7,r9
    58ac:	400d883a 	mov	r6,r8
    58b0:	180b883a 	mov	r5,r3
    58b4:	1009883a 	mov	r4,r2
    58b8:	000b5940 	call	b594 <__muldf3>
    58bc:	180f883a 	mov	r7,r3
    58c0:	880b883a 	mov	r5,r17
    58c4:	100d883a 	mov	r6,r2
    58c8:	8009883a 	mov	r4,r16
    58cc:	000b5200 	call	b520 <__adddf3>
    58d0:	1009883a 	mov	r4,r2
    58d4:	180b883a 	mov	r5,r3
    58d8:	1021883a 	mov	r16,r2
    58dc:	1823883a 	mov	r17,r3
    58e0:	000bf500 	call	bf50 <__fixdfsi>
    58e4:	000d883a 	mov	r6,zero
    58e8:	000f883a 	mov	r7,zero
    58ec:	8009883a 	mov	r4,r16
    58f0:	880b883a 	mov	r5,r17
    58f4:	d8800d15 	stw	r2,52(sp)
    58f8:	000bdd00 	call	bdd0 <__ltdf2>
    58fc:	10031716 	blt	r2,zero,655c <_dtoa_r+0xe8c>
    5900:	d8c00d17 	ldw	r3,52(sp)
    5904:	00800584 	movi	r2,22
    5908:	10c1482e 	bgeu	r2,r3,5e2c <_dtoa_r+0x75c>
    590c:	01000044 	movi	r4,1
    5910:	d9000c15 	stw	r4,48(sp)
    5914:	bd85c83a 	sub	r2,r23,r22
    5918:	11bfffc4 	addi	r6,r2,-1
    591c:	30030b16 	blt	r6,zero,654c <_dtoa_r+0xe7c>
    5920:	d9800a15 	stw	r6,40(sp)
    5924:	d8001115 	stw	zero,68(sp)
    5928:	d8c00d17 	ldw	r3,52(sp)
    592c:	1802ff16 	blt	r3,zero,652c <_dtoa_r+0xe5c>
    5930:	d9000a17 	ldw	r4,40(sp)
    5934:	d8c00915 	stw	r3,36(sp)
    5938:	d8001015 	stw	zero,64(sp)
    593c:	20c9883a 	add	r4,r4,r3
    5940:	d9000a15 	stw	r4,40(sp)
    5944:	d9001717 	ldw	r4,92(sp)
    5948:	00800244 	movi	r2,9
    594c:	11004636 	bltu	r2,r4,5a68 <_dtoa_r+0x398>
    5950:	00800144 	movi	r2,5
    5954:	11020416 	blt	r2,r4,6168 <_dtoa_r+0xa98>
    5958:	04400044 	movi	r17,1
    595c:	d8c01717 	ldw	r3,92(sp)
    5960:	00800144 	movi	r2,5
    5964:	10c1ed36 	bltu	r2,r3,611c <_dtoa_r+0xa4c>
    5968:	18c5883a 	add	r2,r3,r3
    596c:	1085883a 	add	r2,r2,r2
    5970:	00c00034 	movhi	r3,0
    5974:	18d66104 	addi	r3,r3,22916
    5978:	10c5883a 	add	r2,r2,r3
    597c:	11000017 	ldw	r4,0(r2)
    5980:	2000683a 	jmp	r4
    5984:	00005a70 	cmpltui	zero,zero,361
    5988:	00005a70 	cmpltui	zero,zero,361
    598c:	00006470 	cmpltui	zero,zero,401
    5990:	00006448 	cmpgei	zero,zero,401
    5994:	0000648c 	andi	zero,zero,402
    5998:	00006498 	cmpnei	zero,zero,402
    599c:	d9002717 	ldw	r4,156(sp)
    59a0:	0089c3c4 	movi	r2,9999
    59a4:	20800015 	stw	r2,0(r4)
    59a8:	a0001026 	beq	r20,zero,59ec <_dtoa_r+0x31c>
    59ac:	00c00074 	movhi	r3,1
    59b0:	18cdd204 	addi	r3,r3,14152
    59b4:	d9802917 	ldw	r6,164(sp)
    59b8:	303f7926 	beq	r6,zero,57a0 <_dtoa_r+0xd0>
    59bc:	188000c7 	ldb	r2,3(r3)
    59c0:	190000c4 	addi	r4,r3,3
    59c4:	1000101e 	bne	r2,zero,5a08 <_dtoa_r+0x338>
    59c8:	d8802917 	ldw	r2,164(sp)
    59cc:	11000015 	stw	r4,0(r2)
    59d0:	003f7306 	br	57a0 <_dtoa_r+0xd0>
    59d4:	00a00034 	movhi	r2,32768
    59d8:	10bfffc4 	addi	r2,r2,-1
    59dc:	00c00044 	movi	r3,1
    59e0:	88aa703a 	and	r21,r17,r2
    59e4:	90c00015 	stw	r3,0(r18)
    59e8:	003f5806 	br	574c <_dtoa_r+0x7c>
    59ec:	00800434 	movhi	r2,16
    59f0:	10bfffc4 	addi	r2,r2,-1
    59f4:	a884703a 	and	r2,r21,r2
    59f8:	103fec1e 	bne	r2,zero,59ac <_dtoa_r+0x2dc>
    59fc:	00c00074 	movhi	r3,1
    5a00:	18cdcf04 	addi	r3,r3,14140
    5a04:	003feb06 	br	59b4 <_dtoa_r+0x2e4>
    5a08:	d8802917 	ldw	r2,164(sp)
    5a0c:	19000204 	addi	r4,r3,8
    5a10:	11000015 	stw	r4,0(r2)
    5a14:	003f6206 	br	57a0 <_dtoa_r+0xd0>
    5a18:	ddc00117 	ldw	r23,4(sp)
    5a1c:	d8800217 	ldw	r2,8(sp)
    5a20:	01000804 	movi	r4,32
    5a24:	b8c10c84 	addi	r3,r23,1074
    5a28:	18a3883a 	add	r17,r3,r2
    5a2c:	2441b80e 	bge	r4,r17,6110 <_dtoa_r+0xa40>
    5a30:	00c01004 	movi	r3,64
    5a34:	1c47c83a 	sub	r3,r3,r17
    5a38:	88bff804 	addi	r2,r17,-32
    5a3c:	a8c6983a 	sll	r3,r21,r3
    5a40:	a084d83a 	srl	r2,r20,r2
    5a44:	1888b03a 	or	r4,r3,r2
    5a48:	000c0280 	call	c028 <__floatunsidf>
    5a4c:	1011883a 	mov	r8,r2
    5a50:	00bf8434 	movhi	r2,65040
    5a54:	01000044 	movi	r4,1
    5a58:	10d3883a 	add	r9,r2,r3
    5a5c:	8dbef344 	addi	r22,r17,-1075
    5a60:	d9000815 	stw	r4,32(sp)
    5a64:	003f6f06 	br	5824 <_dtoa_r+0x154>
    5a68:	d8001715 	stw	zero,92(sp)
    5a6c:	04400044 	movi	r17,1
    5a70:	00bfffc4 	movi	r2,-1
    5a74:	00c00044 	movi	r3,1
    5a78:	d8800e15 	stw	r2,56(sp)
    5a7c:	d8002615 	stw	zero,152(sp)
    5a80:	d8800f15 	stw	r2,60(sp)
    5a84:	d8c00b15 	stw	r3,44(sp)
    5a88:	1021883a 	mov	r16,r2
    5a8c:	d8801617 	ldw	r2,88(sp)
    5a90:	10001115 	stw	zero,68(r2)
    5a94:	d8801617 	ldw	r2,88(sp)
    5a98:	11401117 	ldw	r5,68(r2)
    5a9c:	1009883a 	mov	r4,r2
    5aa0:	0008cac0 	call	8cac <_Balloc>
    5aa4:	d8c01617 	ldw	r3,88(sp)
    5aa8:	d8800515 	stw	r2,20(sp)
    5aac:	18801015 	stw	r2,64(r3)
    5ab0:	00800384 	movi	r2,14
    5ab4:	14006836 	bltu	r2,r16,5c58 <_dtoa_r+0x588>
    5ab8:	8805003a 	cmpeq	r2,r17,zero
    5abc:	1000661e 	bne	r2,zero,5c58 <_dtoa_r+0x588>
    5ac0:	d9000d17 	ldw	r4,52(sp)
    5ac4:	0102300e 	bge	zero,r4,6388 <_dtoa_r+0xcb8>
    5ac8:	208003cc 	andi	r2,r4,15
    5acc:	100490fa 	slli	r2,r2,3
    5ad0:	2025d13a 	srai	r18,r4,4
    5ad4:	00c00074 	movhi	r3,1
    5ad8:	18cde404 	addi	r3,r3,14224
    5adc:	10c5883a 	add	r2,r2,r3
    5ae0:	90c0040c 	andi	r3,r18,16
    5ae4:	14000017 	ldw	r16,0(r2)
    5ae8:	14400117 	ldw	r17,4(r2)
    5aec:	18036a1e 	bne	r3,zero,6898 <_dtoa_r+0x11c8>
    5af0:	05800084 	movi	r22,2
    5af4:	90001026 	beq	r18,zero,5b38 <_dtoa_r+0x468>
    5af8:	04c00074 	movhi	r19,1
    5afc:	9cce1604 	addi	r19,r19,14424
    5b00:	9080004c 	andi	r2,r18,1
    5b04:	1005003a 	cmpeq	r2,r2,zero
    5b08:	1000081e 	bne	r2,zero,5b2c <_dtoa_r+0x45c>
    5b0c:	99800017 	ldw	r6,0(r19)
    5b10:	99c00117 	ldw	r7,4(r19)
    5b14:	880b883a 	mov	r5,r17
    5b18:	8009883a 	mov	r4,r16
    5b1c:	000b5940 	call	b594 <__muldf3>
    5b20:	1021883a 	mov	r16,r2
    5b24:	b5800044 	addi	r22,r22,1
    5b28:	1823883a 	mov	r17,r3
    5b2c:	9025d07a 	srai	r18,r18,1
    5b30:	9cc00204 	addi	r19,r19,8
    5b34:	903ff21e 	bne	r18,zero,5b00 <_dtoa_r+0x430>
    5b38:	a80b883a 	mov	r5,r21
    5b3c:	a009883a 	mov	r4,r20
    5b40:	880f883a 	mov	r7,r17
    5b44:	800d883a 	mov	r6,r16
    5b48:	000b9580 	call	b958 <__divdf3>
    5b4c:	1029883a 	mov	r20,r2
    5b50:	182b883a 	mov	r21,r3
    5b54:	d8c00c17 	ldw	r3,48(sp)
    5b58:	1805003a 	cmpeq	r2,r3,zero
    5b5c:	1000081e 	bne	r2,zero,5b80 <_dtoa_r+0x4b0>
    5b60:	0005883a 	mov	r2,zero
    5b64:	00cffc34 	movhi	r3,16368
    5b68:	180f883a 	mov	r7,r3
    5b6c:	a009883a 	mov	r4,r20
    5b70:	a80b883a 	mov	r5,r21
    5b74:	100d883a 	mov	r6,r2
    5b78:	000bdd00 	call	bdd0 <__ltdf2>
    5b7c:	1003fe16 	blt	r2,zero,6b78 <_dtoa_r+0x14a8>
    5b80:	b009883a 	mov	r4,r22
    5b84:	000be580 	call	be58 <__floatsidf>
    5b88:	180b883a 	mov	r5,r3
    5b8c:	1009883a 	mov	r4,r2
    5b90:	a00d883a 	mov	r6,r20
    5b94:	a80f883a 	mov	r7,r21
    5b98:	000b5940 	call	b594 <__muldf3>
    5b9c:	0011883a 	mov	r8,zero
    5ba0:	02500734 	movhi	r9,16412
    5ba4:	1009883a 	mov	r4,r2
    5ba8:	180b883a 	mov	r5,r3
    5bac:	480f883a 	mov	r7,r9
    5bb0:	400d883a 	mov	r6,r8
    5bb4:	000b5200 	call	b520 <__adddf3>
    5bb8:	d9000f17 	ldw	r4,60(sp)
    5bbc:	102d883a 	mov	r22,r2
    5bc0:	00bf3034 	movhi	r2,64704
    5bc4:	18b9883a 	add	fp,r3,r2
    5bc8:	e02f883a 	mov	r23,fp
    5bcc:	20028f1e 	bne	r4,zero,660c <_dtoa_r+0xf3c>
    5bd0:	0005883a 	mov	r2,zero
    5bd4:	00d00534 	movhi	r3,16404
    5bd8:	a009883a 	mov	r4,r20
    5bdc:	a80b883a 	mov	r5,r21
    5be0:	180f883a 	mov	r7,r3
    5be4:	100d883a 	mov	r6,r2
    5be8:	000b4a00 	call	b4a0 <__subdf3>
    5bec:	1009883a 	mov	r4,r2
    5bf0:	e00f883a 	mov	r7,fp
    5bf4:	180b883a 	mov	r5,r3
    5bf8:	b00d883a 	mov	r6,r22
    5bfc:	1025883a 	mov	r18,r2
    5c00:	1827883a 	mov	r19,r3
    5c04:	000bcc00 	call	bcc0 <__gtdf2>
    5c08:	00834f16 	blt	zero,r2,6948 <_dtoa_r+0x1278>
    5c0c:	e0e0003c 	xorhi	r3,fp,32768
    5c10:	9009883a 	mov	r4,r18
    5c14:	980b883a 	mov	r5,r19
    5c18:	180f883a 	mov	r7,r3
    5c1c:	b00d883a 	mov	r6,r22
    5c20:	000bdd00 	call	bdd0 <__ltdf2>
    5c24:	1000080e 	bge	r2,zero,5c48 <_dtoa_r+0x578>
    5c28:	0027883a 	mov	r19,zero
    5c2c:	0025883a 	mov	r18,zero
    5c30:	d8802617 	ldw	r2,152(sp)
    5c34:	df000517 	ldw	fp,20(sp)
    5c38:	d8000615 	stw	zero,24(sp)
    5c3c:	0084303a 	nor	r2,zero,r2
    5c40:	d8800d15 	stw	r2,52(sp)
    5c44:	00019b06 	br	62b4 <_dtoa_r+0xbe4>
    5c48:	d9801217 	ldw	r6,72(sp)
    5c4c:	d8801317 	ldw	r2,76(sp)
    5c50:	3029883a 	mov	r20,r6
    5c54:	102b883a 	mov	r21,r2
    5c58:	d8c00217 	ldw	r3,8(sp)
    5c5c:	18008516 	blt	r3,zero,5e74 <_dtoa_r+0x7a4>
    5c60:	d9000d17 	ldw	r4,52(sp)
    5c64:	00800384 	movi	r2,14
    5c68:	11008216 	blt	r2,r4,5e74 <_dtoa_r+0x7a4>
    5c6c:	200490fa 	slli	r2,r4,3
    5c70:	d9802617 	ldw	r6,152(sp)
    5c74:	00c00074 	movhi	r3,1
    5c78:	18cde404 	addi	r3,r3,14224
    5c7c:	10c5883a 	add	r2,r2,r3
    5c80:	14800017 	ldw	r18,0(r2)
    5c84:	14c00117 	ldw	r19,4(r2)
    5c88:	30031e16 	blt	r6,zero,6904 <_dtoa_r+0x1234>
    5c8c:	d9000517 	ldw	r4,20(sp)
    5c90:	d8c00f17 	ldw	r3,60(sp)
    5c94:	a823883a 	mov	r17,r21
    5c98:	a021883a 	mov	r16,r20
    5c9c:	192b883a 	add	r21,r3,r4
    5ca0:	2039883a 	mov	fp,r4
    5ca4:	00000f06 	br	5ce4 <_dtoa_r+0x614>
    5ca8:	0005883a 	mov	r2,zero
    5cac:	00d00934 	movhi	r3,16420
    5cb0:	5009883a 	mov	r4,r10
    5cb4:	580b883a 	mov	r5,r11
    5cb8:	180f883a 	mov	r7,r3
    5cbc:	100d883a 	mov	r6,r2
    5cc0:	000b5940 	call	b594 <__muldf3>
    5cc4:	180b883a 	mov	r5,r3
    5cc8:	000d883a 	mov	r6,zero
    5ccc:	000f883a 	mov	r7,zero
    5cd0:	1009883a 	mov	r4,r2
    5cd4:	1021883a 	mov	r16,r2
    5cd8:	1823883a 	mov	r17,r3
    5cdc:	000bc380 	call	bc38 <__nedf2>
    5ce0:	10004526 	beq	r2,zero,5df8 <_dtoa_r+0x728>
    5ce4:	900d883a 	mov	r6,r18
    5ce8:	980f883a 	mov	r7,r19
    5cec:	8009883a 	mov	r4,r16
    5cf0:	880b883a 	mov	r5,r17
    5cf4:	000b9580 	call	b958 <__divdf3>
    5cf8:	180b883a 	mov	r5,r3
    5cfc:	1009883a 	mov	r4,r2
    5d00:	000bf500 	call	bf50 <__fixdfsi>
    5d04:	1009883a 	mov	r4,r2
    5d08:	1029883a 	mov	r20,r2
    5d0c:	000be580 	call	be58 <__floatsidf>
    5d10:	180f883a 	mov	r7,r3
    5d14:	9009883a 	mov	r4,r18
    5d18:	980b883a 	mov	r5,r19
    5d1c:	100d883a 	mov	r6,r2
    5d20:	000b5940 	call	b594 <__muldf3>
    5d24:	180f883a 	mov	r7,r3
    5d28:	880b883a 	mov	r5,r17
    5d2c:	8009883a 	mov	r4,r16
    5d30:	100d883a 	mov	r6,r2
    5d34:	000b4a00 	call	b4a0 <__subdf3>
    5d38:	1015883a 	mov	r10,r2
    5d3c:	a0800c04 	addi	r2,r20,48
    5d40:	e0800005 	stb	r2,0(fp)
    5d44:	e7000044 	addi	fp,fp,1
    5d48:	1817883a 	mov	r11,r3
    5d4c:	e57fd61e 	bne	fp,r21,5ca8 <_dtoa_r+0x5d8>
    5d50:	500d883a 	mov	r6,r10
    5d54:	180f883a 	mov	r7,r3
    5d58:	5009883a 	mov	r4,r10
    5d5c:	180b883a 	mov	r5,r3
    5d60:	000b5200 	call	b520 <__adddf3>
    5d64:	100d883a 	mov	r6,r2
    5d68:	9009883a 	mov	r4,r18
    5d6c:	980b883a 	mov	r5,r19
    5d70:	180f883a 	mov	r7,r3
    5d74:	1021883a 	mov	r16,r2
    5d78:	1823883a 	mov	r17,r3
    5d7c:	000bdd00 	call	bdd0 <__ltdf2>
    5d80:	10000816 	blt	r2,zero,5da4 <_dtoa_r+0x6d4>
    5d84:	980b883a 	mov	r5,r19
    5d88:	800d883a 	mov	r6,r16
    5d8c:	880f883a 	mov	r7,r17
    5d90:	9009883a 	mov	r4,r18
    5d94:	000bbb00 	call	bbb0 <__eqdf2>
    5d98:	1000171e 	bne	r2,zero,5df8 <_dtoa_r+0x728>
    5d9c:	a080004c 	andi	r2,r20,1
    5da0:	10001526 	beq	r2,zero,5df8 <_dtoa_r+0x728>
    5da4:	d8800d17 	ldw	r2,52(sp)
    5da8:	d8800415 	stw	r2,16(sp)
    5dac:	e009883a 	mov	r4,fp
    5db0:	213fffc4 	addi	r4,r4,-1
    5db4:	20c00007 	ldb	r3,0(r4)
    5db8:	00800e44 	movi	r2,57
    5dbc:	1880081e 	bne	r3,r2,5de0 <_dtoa_r+0x710>
    5dc0:	d8800517 	ldw	r2,20(sp)
    5dc4:	113ffa1e 	bne	r2,r4,5db0 <_dtoa_r+0x6e0>
    5dc8:	d8c00417 	ldw	r3,16(sp)
    5dcc:	d9800517 	ldw	r6,20(sp)
    5dd0:	00800c04 	movi	r2,48
    5dd4:	18c00044 	addi	r3,r3,1
    5dd8:	d8c00415 	stw	r3,16(sp)
    5ddc:	30800005 	stb	r2,0(r6)
    5de0:	20800003 	ldbu	r2,0(r4)
    5de4:	d8c00417 	ldw	r3,16(sp)
    5de8:	27000044 	addi	fp,r4,1
    5dec:	10800044 	addi	r2,r2,1
    5df0:	d8c00d15 	stw	r3,52(sp)
    5df4:	20800005 	stb	r2,0(r4)
    5df8:	d9001617 	ldw	r4,88(sp)
    5dfc:	d9400717 	ldw	r5,28(sp)
    5e00:	000872c0 	call	872c <_Bfree>
    5e04:	e0000005 	stb	zero,0(fp)
    5e08:	d9800d17 	ldw	r6,52(sp)
    5e0c:	d8c02717 	ldw	r3,156(sp)
    5e10:	d9002917 	ldw	r4,164(sp)
    5e14:	30800044 	addi	r2,r6,1
    5e18:	18800015 	stw	r2,0(r3)
    5e1c:	20029c26 	beq	r4,zero,6890 <_dtoa_r+0x11c0>
    5e20:	d8c00517 	ldw	r3,20(sp)
    5e24:	27000015 	stw	fp,0(r4)
    5e28:	003e5d06 	br	57a0 <_dtoa_r+0xd0>
    5e2c:	d9800d17 	ldw	r6,52(sp)
    5e30:	00c00074 	movhi	r3,1
    5e34:	18cde404 	addi	r3,r3,14224
    5e38:	d9001217 	ldw	r4,72(sp)
    5e3c:	300490fa 	slli	r2,r6,3
    5e40:	d9401317 	ldw	r5,76(sp)
    5e44:	10c5883a 	add	r2,r2,r3
    5e48:	12000017 	ldw	r8,0(r2)
    5e4c:	12400117 	ldw	r9,4(r2)
    5e50:	400d883a 	mov	r6,r8
    5e54:	480f883a 	mov	r7,r9
    5e58:	000bdd00 	call	bdd0 <__ltdf2>
    5e5c:	1000030e 	bge	r2,zero,5e6c <_dtoa_r+0x79c>
    5e60:	d8800d17 	ldw	r2,52(sp)
    5e64:	10bfffc4 	addi	r2,r2,-1
    5e68:	d8800d15 	stw	r2,52(sp)
    5e6c:	d8000c15 	stw	zero,48(sp)
    5e70:	003ea806 	br	5914 <_dtoa_r+0x244>
    5e74:	d9000b17 	ldw	r4,44(sp)
    5e78:	202cc03a 	cmpne	r22,r4,zero
    5e7c:	b000c71e 	bne	r22,zero,619c <_dtoa_r+0xacc>
    5e80:	dc001117 	ldw	r16,68(sp)
    5e84:	dc801017 	ldw	r18,64(sp)
    5e88:	0027883a 	mov	r19,zero
    5e8c:	04000b0e 	bge	zero,r16,5ebc <_dtoa_r+0x7ec>
    5e90:	d8c00a17 	ldw	r3,40(sp)
    5e94:	00c0090e 	bge	zero,r3,5ebc <_dtoa_r+0x7ec>
    5e98:	8005883a 	mov	r2,r16
    5e9c:	1c011316 	blt	r3,r16,62ec <_dtoa_r+0xc1c>
    5ea0:	d9000a17 	ldw	r4,40(sp)
    5ea4:	d9801117 	ldw	r6,68(sp)
    5ea8:	80a1c83a 	sub	r16,r16,r2
    5eac:	2089c83a 	sub	r4,r4,r2
    5eb0:	308dc83a 	sub	r6,r6,r2
    5eb4:	d9000a15 	stw	r4,40(sp)
    5eb8:	d9801115 	stw	r6,68(sp)
    5ebc:	d8801017 	ldw	r2,64(sp)
    5ec0:	0080150e 	bge	zero,r2,5f18 <_dtoa_r+0x848>
    5ec4:	d8c00b17 	ldw	r3,44(sp)
    5ec8:	1805003a 	cmpeq	r2,r3,zero
    5ecc:	1001c91e 	bne	r2,zero,65f4 <_dtoa_r+0xf24>
    5ed0:	04800e0e 	bge	zero,r18,5f0c <_dtoa_r+0x83c>
    5ed4:	d9001617 	ldw	r4,88(sp)
    5ed8:	980b883a 	mov	r5,r19
    5edc:	900d883a 	mov	r6,r18
    5ee0:	00094e00 	call	94e0 <__pow5mult>
    5ee4:	d9001617 	ldw	r4,88(sp)
    5ee8:	d9800717 	ldw	r6,28(sp)
    5eec:	100b883a 	mov	r5,r2
    5ef0:	1027883a 	mov	r19,r2
    5ef4:	00091bc0 	call	91bc <__multiply>
    5ef8:	d9001617 	ldw	r4,88(sp)
    5efc:	d9400717 	ldw	r5,28(sp)
    5f00:	1023883a 	mov	r17,r2
    5f04:	000872c0 	call	872c <_Bfree>
    5f08:	dc400715 	stw	r17,28(sp)
    5f0c:	d9001017 	ldw	r4,64(sp)
    5f10:	248dc83a 	sub	r6,r4,r18
    5f14:	30010e1e 	bne	r6,zero,6350 <_dtoa_r+0xc80>
    5f18:	d9001617 	ldw	r4,88(sp)
    5f1c:	04400044 	movi	r17,1
    5f20:	880b883a 	mov	r5,r17
    5f24:	00093a40 	call	93a4 <__i2b>
    5f28:	d9800917 	ldw	r6,36(sp)
    5f2c:	1025883a 	mov	r18,r2
    5f30:	0180040e 	bge	zero,r6,5f44 <_dtoa_r+0x874>
    5f34:	d9001617 	ldw	r4,88(sp)
    5f38:	100b883a 	mov	r5,r2
    5f3c:	00094e00 	call	94e0 <__pow5mult>
    5f40:	1025883a 	mov	r18,r2
    5f44:	d8801717 	ldw	r2,92(sp)
    5f48:	8880f30e 	bge	r17,r2,6318 <_dtoa_r+0xc48>
    5f4c:	0023883a 	mov	r17,zero
    5f50:	d9800917 	ldw	r6,36(sp)
    5f54:	30019e1e 	bne	r6,zero,65d0 <_dtoa_r+0xf00>
    5f58:	00c00044 	movi	r3,1
    5f5c:	d9000a17 	ldw	r4,40(sp)
    5f60:	20c5883a 	add	r2,r4,r3
    5f64:	10c007cc 	andi	r3,r2,31
    5f68:	1800841e 	bne	r3,zero,617c <_dtoa_r+0xaac>
    5f6c:	00800704 	movi	r2,28
    5f70:	d9000a17 	ldw	r4,40(sp)
    5f74:	d9801117 	ldw	r6,68(sp)
    5f78:	80a1883a 	add	r16,r16,r2
    5f7c:	2089883a 	add	r4,r4,r2
    5f80:	308d883a 	add	r6,r6,r2
    5f84:	d9000a15 	stw	r4,40(sp)
    5f88:	d9801115 	stw	r6,68(sp)
    5f8c:	d8801117 	ldw	r2,68(sp)
    5f90:	0080050e 	bge	zero,r2,5fa8 <_dtoa_r+0x8d8>
    5f94:	d9400717 	ldw	r5,28(sp)
    5f98:	d9001617 	ldw	r4,88(sp)
    5f9c:	100d883a 	mov	r6,r2
    5fa0:	00090700 	call	9070 <__lshift>
    5fa4:	d8800715 	stw	r2,28(sp)
    5fa8:	d8c00a17 	ldw	r3,40(sp)
    5fac:	00c0050e 	bge	zero,r3,5fc4 <_dtoa_r+0x8f4>
    5fb0:	d9001617 	ldw	r4,88(sp)
    5fb4:	900b883a 	mov	r5,r18
    5fb8:	180d883a 	mov	r6,r3
    5fbc:	00090700 	call	9070 <__lshift>
    5fc0:	1025883a 	mov	r18,r2
    5fc4:	d9000c17 	ldw	r4,48(sp)
    5fc8:	2005003a 	cmpeq	r2,r4,zero
    5fcc:	10016f26 	beq	r2,zero,658c <_dtoa_r+0xebc>
    5fd0:	d9000f17 	ldw	r4,60(sp)
    5fd4:	0102170e 	bge	zero,r4,6834 <_dtoa_r+0x1164>
    5fd8:	d9800b17 	ldw	r6,44(sp)
    5fdc:	3005003a 	cmpeq	r2,r6,zero
    5fe0:	1000881e 	bne	r2,zero,6204 <_dtoa_r+0xb34>
    5fe4:	0400050e 	bge	zero,r16,5ffc <_dtoa_r+0x92c>
    5fe8:	d9001617 	ldw	r4,88(sp)
    5fec:	980b883a 	mov	r5,r19
    5ff0:	800d883a 	mov	r6,r16
    5ff4:	00090700 	call	9070 <__lshift>
    5ff8:	1027883a 	mov	r19,r2
    5ffc:	8804c03a 	cmpne	r2,r17,zero
    6000:	1002541e 	bne	r2,zero,6954 <_dtoa_r+0x1284>
    6004:	980b883a 	mov	r5,r19
    6008:	dd800517 	ldw	r22,20(sp)
    600c:	dcc00615 	stw	r19,24(sp)
    6010:	a700004c 	andi	fp,r20,1
    6014:	2827883a 	mov	r19,r5
    6018:	d9000717 	ldw	r4,28(sp)
    601c:	900b883a 	mov	r5,r18
    6020:	00054b80 	call	54b8 <quorem>
    6024:	d9000717 	ldw	r4,28(sp)
    6028:	d9400617 	ldw	r5,24(sp)
    602c:	1023883a 	mov	r17,r2
    6030:	8dc00c04 	addi	r23,r17,48
    6034:	00088880 	call	8888 <__mcmp>
    6038:	d9001617 	ldw	r4,88(sp)
    603c:	900b883a 	mov	r5,r18
    6040:	980d883a 	mov	r6,r19
    6044:	1029883a 	mov	r20,r2
    6048:	0008ee40 	call	8ee4 <__mdiff>
    604c:	102b883a 	mov	r21,r2
    6050:	10800317 	ldw	r2,12(r2)
    6054:	1001281e 	bne	r2,zero,64f8 <_dtoa_r+0xe28>
    6058:	d9000717 	ldw	r4,28(sp)
    605c:	a80b883a 	mov	r5,r21
    6060:	00088880 	call	8888 <__mcmp>
    6064:	d9001617 	ldw	r4,88(sp)
    6068:	1021883a 	mov	r16,r2
    606c:	a80b883a 	mov	r5,r21
    6070:	000872c0 	call	872c <_Bfree>
    6074:	8000041e 	bne	r16,zero,6088 <_dtoa_r+0x9b8>
    6078:	d8801717 	ldw	r2,92(sp)
    607c:	1000021e 	bne	r2,zero,6088 <_dtoa_r+0x9b8>
    6080:	e004c03a 	cmpne	r2,fp,zero
    6084:	10011726 	beq	r2,zero,64e4 <_dtoa_r+0xe14>
    6088:	a0010616 	blt	r20,zero,64a4 <_dtoa_r+0xdd4>
    608c:	a000041e 	bne	r20,zero,60a0 <_dtoa_r+0x9d0>
    6090:	d8c01717 	ldw	r3,92(sp)
    6094:	1800021e 	bne	r3,zero,60a0 <_dtoa_r+0x9d0>
    6098:	e004c03a 	cmpne	r2,fp,zero
    609c:	10010126 	beq	r2,zero,64a4 <_dtoa_r+0xdd4>
    60a0:	04023d16 	blt	zero,r16,6998 <_dtoa_r+0x12c8>
    60a4:	b5c00005 	stb	r23,0(r22)
    60a8:	d9800517 	ldw	r6,20(sp)
    60ac:	d9000f17 	ldw	r4,60(sp)
    60b0:	b5800044 	addi	r22,r22,1
    60b4:	3105883a 	add	r2,r6,r4
    60b8:	b0806526 	beq	r22,r2,6250 <_dtoa_r+0xb80>
    60bc:	d9400717 	ldw	r5,28(sp)
    60c0:	d9001617 	ldw	r4,88(sp)
    60c4:	01800284 	movi	r6,10
    60c8:	000f883a 	mov	r7,zero
    60cc:	00093e00 	call	93e0 <__multadd>
    60d0:	d8800715 	stw	r2,28(sp)
    60d4:	d8800617 	ldw	r2,24(sp)
    60d8:	14c10c26 	beq	r2,r19,650c <_dtoa_r+0xe3c>
    60dc:	d9400617 	ldw	r5,24(sp)
    60e0:	d9001617 	ldw	r4,88(sp)
    60e4:	01800284 	movi	r6,10
    60e8:	000f883a 	mov	r7,zero
    60ec:	00093e00 	call	93e0 <__multadd>
    60f0:	d9001617 	ldw	r4,88(sp)
    60f4:	980b883a 	mov	r5,r19
    60f8:	01800284 	movi	r6,10
    60fc:	000f883a 	mov	r7,zero
    6100:	d8800615 	stw	r2,24(sp)
    6104:	00093e00 	call	93e0 <__multadd>
    6108:	1027883a 	mov	r19,r2
    610c:	003fc206 	br	6018 <_dtoa_r+0x948>
    6110:	2445c83a 	sub	r2,r4,r17
    6114:	a088983a 	sll	r4,r20,r2
    6118:	003e4b06 	br	5a48 <_dtoa_r+0x378>
    611c:	01bfffc4 	movi	r6,-1
    6120:	00800044 	movi	r2,1
    6124:	d9800e15 	stw	r6,56(sp)
    6128:	d9800f15 	stw	r6,60(sp)
    612c:	d8800b15 	stw	r2,44(sp)
    6130:	d8c01617 	ldw	r3,88(sp)
    6134:	008005c4 	movi	r2,23
    6138:	18001115 	stw	zero,68(r3)
    613c:	1580082e 	bgeu	r2,r22,6160 <_dtoa_r+0xa90>
    6140:	00c00104 	movi	r3,4
    6144:	0009883a 	mov	r4,zero
    6148:	18c7883a 	add	r3,r3,r3
    614c:	18800504 	addi	r2,r3,20
    6150:	21000044 	addi	r4,r4,1
    6154:	b0bffc2e 	bgeu	r22,r2,6148 <_dtoa_r+0xa78>
    6158:	d9801617 	ldw	r6,88(sp)
    615c:	31001115 	stw	r4,68(r6)
    6160:	dc000f17 	ldw	r16,60(sp)
    6164:	003e4b06 	br	5a94 <_dtoa_r+0x3c4>
    6168:	d9801717 	ldw	r6,92(sp)
    616c:	0023883a 	mov	r17,zero
    6170:	31bfff04 	addi	r6,r6,-4
    6174:	d9801715 	stw	r6,92(sp)
    6178:	003df806 	br	595c <_dtoa_r+0x28c>
    617c:	00800804 	movi	r2,32
    6180:	10c9c83a 	sub	r4,r2,r3
    6184:	00c00104 	movi	r3,4
    6188:	19005a16 	blt	r3,r4,62f4 <_dtoa_r+0xc24>
    618c:	008000c4 	movi	r2,3
    6190:	113f7e16 	blt	r2,r4,5f8c <_dtoa_r+0x8bc>
    6194:	20800704 	addi	r2,r4,28
    6198:	003f7506 	br	5f70 <_dtoa_r+0x8a0>
    619c:	d9801717 	ldw	r6,92(sp)
    61a0:	00800044 	movi	r2,1
    61a4:	1180a10e 	bge	r2,r6,642c <_dtoa_r+0xd5c>
    61a8:	d9800f17 	ldw	r6,60(sp)
    61ac:	d8c01017 	ldw	r3,64(sp)
    61b0:	30bfffc4 	addi	r2,r6,-1
    61b4:	1881c616 	blt	r3,r2,68d0 <_dtoa_r+0x1200>
    61b8:	18a5c83a 	sub	r18,r3,r2
    61bc:	d8800f17 	ldw	r2,60(sp)
    61c0:	10026216 	blt	r2,zero,6b4c <_dtoa_r+0x147c>
    61c4:	dc001117 	ldw	r16,68(sp)
    61c8:	1007883a 	mov	r3,r2
    61cc:	d9800a17 	ldw	r6,40(sp)
    61d0:	d8801117 	ldw	r2,68(sp)
    61d4:	d9001617 	ldw	r4,88(sp)
    61d8:	30cd883a 	add	r6,r6,r3
    61dc:	10c5883a 	add	r2,r2,r3
    61e0:	01400044 	movi	r5,1
    61e4:	d9800a15 	stw	r6,40(sp)
    61e8:	d8801115 	stw	r2,68(sp)
    61ec:	00093a40 	call	93a4 <__i2b>
    61f0:	1027883a 	mov	r19,r2
    61f4:	003f2506 	br	5e8c <_dtoa_r+0x7bc>
    61f8:	00c00074 	movhi	r3,1
    61fc:	18cdc604 	addi	r3,r3,14104
    6200:	003d6706 	br	57a0 <_dtoa_r+0xd0>
    6204:	dd800517 	ldw	r22,20(sp)
    6208:	04000044 	movi	r16,1
    620c:	00000706 	br	622c <_dtoa_r+0xb5c>
    6210:	d9400717 	ldw	r5,28(sp)
    6214:	d9001617 	ldw	r4,88(sp)
    6218:	01800284 	movi	r6,10
    621c:	000f883a 	mov	r7,zero
    6220:	00093e00 	call	93e0 <__multadd>
    6224:	d8800715 	stw	r2,28(sp)
    6228:	84000044 	addi	r16,r16,1
    622c:	d9000717 	ldw	r4,28(sp)
    6230:	900b883a 	mov	r5,r18
    6234:	00054b80 	call	54b8 <quorem>
    6238:	15c00c04 	addi	r23,r2,48
    623c:	b5c00005 	stb	r23,0(r22)
    6240:	d8c00f17 	ldw	r3,60(sp)
    6244:	b5800044 	addi	r22,r22,1
    6248:	80fff116 	blt	r16,r3,6210 <_dtoa_r+0xb40>
    624c:	d8000615 	stw	zero,24(sp)
    6250:	d9400717 	ldw	r5,28(sp)
    6254:	d9001617 	ldw	r4,88(sp)
    6258:	01800044 	movi	r6,1
    625c:	00090700 	call	9070 <__lshift>
    6260:	1009883a 	mov	r4,r2
    6264:	900b883a 	mov	r5,r18
    6268:	d8800715 	stw	r2,28(sp)
    626c:	00088880 	call	8888 <__mcmp>
    6270:	00803c0e 	bge	zero,r2,6364 <_dtoa_r+0xc94>
    6274:	b009883a 	mov	r4,r22
    6278:	213fffc4 	addi	r4,r4,-1
    627c:	21400003 	ldbu	r5,0(r4)
    6280:	00800e44 	movi	r2,57
    6284:	28c03fcc 	andi	r3,r5,255
    6288:	18c0201c 	xori	r3,r3,128
    628c:	18ffe004 	addi	r3,r3,-128
    6290:	1881981e 	bne	r3,r2,68f4 <_dtoa_r+0x1224>
    6294:	d9800517 	ldw	r6,20(sp)
    6298:	21bff71e 	bne	r4,r6,6278 <_dtoa_r+0xba8>
    629c:	d8800d17 	ldw	r2,52(sp)
    62a0:	37000044 	addi	fp,r6,1
    62a4:	10800044 	addi	r2,r2,1
    62a8:	d8800d15 	stw	r2,52(sp)
    62ac:	00800c44 	movi	r2,49
    62b0:	30800005 	stb	r2,0(r6)
    62b4:	d9001617 	ldw	r4,88(sp)
    62b8:	900b883a 	mov	r5,r18
    62bc:	000872c0 	call	872c <_Bfree>
    62c0:	983ecd26 	beq	r19,zero,5df8 <_dtoa_r+0x728>
    62c4:	d8c00617 	ldw	r3,24(sp)
    62c8:	18000426 	beq	r3,zero,62dc <_dtoa_r+0xc0c>
    62cc:	1cc00326 	beq	r3,r19,62dc <_dtoa_r+0xc0c>
    62d0:	d9001617 	ldw	r4,88(sp)
    62d4:	180b883a 	mov	r5,r3
    62d8:	000872c0 	call	872c <_Bfree>
    62dc:	d9001617 	ldw	r4,88(sp)
    62e0:	980b883a 	mov	r5,r19
    62e4:	000872c0 	call	872c <_Bfree>
    62e8:	003ec306 	br	5df8 <_dtoa_r+0x728>
    62ec:	1805883a 	mov	r2,r3
    62f0:	003eeb06 	br	5ea0 <_dtoa_r+0x7d0>
    62f4:	d9800a17 	ldw	r6,40(sp)
    62f8:	d8c01117 	ldw	r3,68(sp)
    62fc:	20bfff04 	addi	r2,r4,-4
    6300:	308d883a 	add	r6,r6,r2
    6304:	1887883a 	add	r3,r3,r2
    6308:	80a1883a 	add	r16,r16,r2
    630c:	d9800a15 	stw	r6,40(sp)
    6310:	d8c01115 	stw	r3,68(sp)
    6314:	003f1d06 	br	5f8c <_dtoa_r+0x8bc>
    6318:	a03f0c1e 	bne	r20,zero,5f4c <_dtoa_r+0x87c>
    631c:	00800434 	movhi	r2,16
    6320:	10bfffc4 	addi	r2,r2,-1
    6324:	a884703a 	and	r2,r21,r2
    6328:	103f081e 	bne	r2,zero,5f4c <_dtoa_r+0x87c>
    632c:	a89ffc2c 	andhi	r2,r21,32752
    6330:	103f0626 	beq	r2,zero,5f4c <_dtoa_r+0x87c>
    6334:	d8c01117 	ldw	r3,68(sp)
    6338:	d9000a17 	ldw	r4,40(sp)
    633c:	18c00044 	addi	r3,r3,1
    6340:	21000044 	addi	r4,r4,1
    6344:	d8c01115 	stw	r3,68(sp)
    6348:	d9000a15 	stw	r4,40(sp)
    634c:	003f0006 	br	5f50 <_dtoa_r+0x880>
    6350:	d9400717 	ldw	r5,28(sp)
    6354:	d9001617 	ldw	r4,88(sp)
    6358:	00094e00 	call	94e0 <__pow5mult>
    635c:	d8800715 	stw	r2,28(sp)
    6360:	003eed06 	br	5f18 <_dtoa_r+0x848>
    6364:	1000021e 	bne	r2,zero,6370 <_dtoa_r+0xca0>
    6368:	b880004c 	andi	r2,r23,1
    636c:	103fc11e 	bne	r2,zero,6274 <_dtoa_r+0xba4>
    6370:	b5bfffc4 	addi	r22,r22,-1
    6374:	b0c00007 	ldb	r3,0(r22)
    6378:	00800c04 	movi	r2,48
    637c:	18bffc26 	beq	r3,r2,6370 <_dtoa_r+0xca0>
    6380:	b7000044 	addi	fp,r22,1
    6384:	003fcb06 	br	62b4 <_dtoa_r+0xbe4>
    6388:	d9800d17 	ldw	r6,52(sp)
    638c:	018fc83a 	sub	r7,zero,r6
    6390:	3801f726 	beq	r7,zero,6b70 <_dtoa_r+0x14a0>
    6394:	398003cc 	andi	r6,r7,15
    6398:	300c90fa 	slli	r6,r6,3
    639c:	01400074 	movhi	r5,1
    63a0:	294de404 	addi	r5,r5,14224
    63a4:	d9001217 	ldw	r4,72(sp)
    63a8:	314d883a 	add	r6,r6,r5
    63ac:	30c00117 	ldw	r3,4(r6)
    63b0:	30800017 	ldw	r2,0(r6)
    63b4:	d9401317 	ldw	r5,76(sp)
    63b8:	3821d13a 	srai	r16,r7,4
    63bc:	100d883a 	mov	r6,r2
    63c0:	180f883a 	mov	r7,r3
    63c4:	000b5940 	call	b594 <__muldf3>
    63c8:	1011883a 	mov	r8,r2
    63cc:	1813883a 	mov	r9,r3
    63d0:	1029883a 	mov	r20,r2
    63d4:	182b883a 	mov	r21,r3
    63d8:	8001e526 	beq	r16,zero,6b70 <_dtoa_r+0x14a0>
    63dc:	05800084 	movi	r22,2
    63e0:	04400074 	movhi	r17,1
    63e4:	8c4e1604 	addi	r17,r17,14424
    63e8:	8080004c 	andi	r2,r16,1
    63ec:	1005003a 	cmpeq	r2,r2,zero
    63f0:	1000081e 	bne	r2,zero,6414 <_dtoa_r+0xd44>
    63f4:	89800017 	ldw	r6,0(r17)
    63f8:	89c00117 	ldw	r7,4(r17)
    63fc:	480b883a 	mov	r5,r9
    6400:	4009883a 	mov	r4,r8
    6404:	000b5940 	call	b594 <__muldf3>
    6408:	1011883a 	mov	r8,r2
    640c:	b5800044 	addi	r22,r22,1
    6410:	1813883a 	mov	r9,r3
    6414:	8021d07a 	srai	r16,r16,1
    6418:	8c400204 	addi	r17,r17,8
    641c:	803ff21e 	bne	r16,zero,63e8 <_dtoa_r+0xd18>
    6420:	4029883a 	mov	r20,r8
    6424:	482b883a 	mov	r21,r9
    6428:	003dca06 	br	5b54 <_dtoa_r+0x484>
    642c:	d9000817 	ldw	r4,32(sp)
    6430:	2005003a 	cmpeq	r2,r4,zero
    6434:	1001f61e 	bne	r2,zero,6c10 <_dtoa_r+0x1540>
    6438:	dc001117 	ldw	r16,68(sp)
    643c:	dc801017 	ldw	r18,64(sp)
    6440:	18c10cc4 	addi	r3,r3,1075
    6444:	003f6106 	br	61cc <_dtoa_r+0xafc>
    6448:	d8000b15 	stw	zero,44(sp)
    644c:	d9802617 	ldw	r6,152(sp)
    6450:	d8c00d17 	ldw	r3,52(sp)
    6454:	30800044 	addi	r2,r6,1
    6458:	18ad883a 	add	r22,r3,r2
    645c:	b13fffc4 	addi	r4,r22,-1
    6460:	d9000e15 	stw	r4,56(sp)
    6464:	0581f60e 	bge	zero,r22,6c40 <_dtoa_r+0x1570>
    6468:	dd800f15 	stw	r22,60(sp)
    646c:	003f3006 	br	6130 <_dtoa_r+0xa60>
    6470:	d8000b15 	stw	zero,44(sp)
    6474:	d9002617 	ldw	r4,152(sp)
    6478:	0101eb0e 	bge	zero,r4,6c28 <_dtoa_r+0x1558>
    647c:	202d883a 	mov	r22,r4
    6480:	d9000e15 	stw	r4,56(sp)
    6484:	d9000f15 	stw	r4,60(sp)
    6488:	003f2906 	br	6130 <_dtoa_r+0xa60>
    648c:	01800044 	movi	r6,1
    6490:	d9800b15 	stw	r6,44(sp)
    6494:	003ff706 	br	6474 <_dtoa_r+0xda4>
    6498:	01000044 	movi	r4,1
    649c:	d9000b15 	stw	r4,44(sp)
    64a0:	003fea06 	br	644c <_dtoa_r+0xd7c>
    64a4:	04000c0e 	bge	zero,r16,64d8 <_dtoa_r+0xe08>
    64a8:	d9400717 	ldw	r5,28(sp)
    64ac:	d9001617 	ldw	r4,88(sp)
    64b0:	01800044 	movi	r6,1
    64b4:	00090700 	call	9070 <__lshift>
    64b8:	1009883a 	mov	r4,r2
    64bc:	900b883a 	mov	r5,r18
    64c0:	d8800715 	stw	r2,28(sp)
    64c4:	00088880 	call	8888 <__mcmp>
    64c8:	0081e00e 	bge	zero,r2,6c4c <_dtoa_r+0x157c>
    64cc:	bdc00044 	addi	r23,r23,1
    64d0:	00800e84 	movi	r2,58
    64d4:	b881a226 	beq	r23,r2,6b60 <_dtoa_r+0x1490>
    64d8:	b7000044 	addi	fp,r22,1
    64dc:	b5c00005 	stb	r23,0(r22)
    64e0:	003f7406 	br	62b4 <_dtoa_r+0xbe4>
    64e4:	00800e44 	movi	r2,57
    64e8:	b8819d26 	beq	r23,r2,6b60 <_dtoa_r+0x1490>
    64ec:	053ffa0e 	bge	zero,r20,64d8 <_dtoa_r+0xe08>
    64f0:	8dc00c44 	addi	r23,r17,49
    64f4:	003ff806 	br	64d8 <_dtoa_r+0xe08>
    64f8:	d9001617 	ldw	r4,88(sp)
    64fc:	a80b883a 	mov	r5,r21
    6500:	04000044 	movi	r16,1
    6504:	000872c0 	call	872c <_Bfree>
    6508:	003edf06 	br	6088 <_dtoa_r+0x9b8>
    650c:	d9001617 	ldw	r4,88(sp)
    6510:	980b883a 	mov	r5,r19
    6514:	01800284 	movi	r6,10
    6518:	000f883a 	mov	r7,zero
    651c:	00093e00 	call	93e0 <__multadd>
    6520:	1027883a 	mov	r19,r2
    6524:	d8800615 	stw	r2,24(sp)
    6528:	003ebb06 	br	6018 <_dtoa_r+0x948>
    652c:	d9801117 	ldw	r6,68(sp)
    6530:	d8800d17 	ldw	r2,52(sp)
    6534:	d8000915 	stw	zero,36(sp)
    6538:	308dc83a 	sub	r6,r6,r2
    653c:	0087c83a 	sub	r3,zero,r2
    6540:	d9801115 	stw	r6,68(sp)
    6544:	d8c01015 	stw	r3,64(sp)
    6548:	003cfe06 	br	5944 <_dtoa_r+0x274>
    654c:	018dc83a 	sub	r6,zero,r6
    6550:	d9801115 	stw	r6,68(sp)
    6554:	d8000a15 	stw	zero,40(sp)
    6558:	003cf306 	br	5928 <_dtoa_r+0x258>
    655c:	d9000d17 	ldw	r4,52(sp)
    6560:	000be580 	call	be58 <__floatsidf>
    6564:	880b883a 	mov	r5,r17
    6568:	8009883a 	mov	r4,r16
    656c:	180f883a 	mov	r7,r3
    6570:	100d883a 	mov	r6,r2
    6574:	000bc380 	call	bc38 <__nedf2>
    6578:	103ce126 	beq	r2,zero,5900 <_dtoa_r+0x230>
    657c:	d9800d17 	ldw	r6,52(sp)
    6580:	31bfffc4 	addi	r6,r6,-1
    6584:	d9800d15 	stw	r6,52(sp)
    6588:	003cdd06 	br	5900 <_dtoa_r+0x230>
    658c:	d9000717 	ldw	r4,28(sp)
    6590:	900b883a 	mov	r5,r18
    6594:	00088880 	call	8888 <__mcmp>
    6598:	103e8d0e 	bge	r2,zero,5fd0 <_dtoa_r+0x900>
    659c:	d9400717 	ldw	r5,28(sp)
    65a0:	d9001617 	ldw	r4,88(sp)
    65a4:	01800284 	movi	r6,10
    65a8:	000f883a 	mov	r7,zero
    65ac:	00093e00 	call	93e0 <__multadd>
    65b0:	d9800d17 	ldw	r6,52(sp)
    65b4:	d8800715 	stw	r2,28(sp)
    65b8:	31bfffc4 	addi	r6,r6,-1
    65bc:	d9800d15 	stw	r6,52(sp)
    65c0:	b001a71e 	bne	r22,zero,6c60 <_dtoa_r+0x1590>
    65c4:	d8800e17 	ldw	r2,56(sp)
    65c8:	d8800f15 	stw	r2,60(sp)
    65cc:	003e8006 	br	5fd0 <_dtoa_r+0x900>
    65d0:	90800417 	ldw	r2,16(r18)
    65d4:	1085883a 	add	r2,r2,r2
    65d8:	1085883a 	add	r2,r2,r2
    65dc:	1485883a 	add	r2,r2,r18
    65e0:	11000417 	ldw	r4,16(r2)
    65e4:	00087540 	call	8754 <__hi0bits>
    65e8:	00c00804 	movi	r3,32
    65ec:	1887c83a 	sub	r3,r3,r2
    65f0:	003e5a06 	br	5f5c <_dtoa_r+0x88c>
    65f4:	d9400717 	ldw	r5,28(sp)
    65f8:	d9801017 	ldw	r6,64(sp)
    65fc:	d9001617 	ldw	r4,88(sp)
    6600:	00094e00 	call	94e0 <__pow5mult>
    6604:	d8800715 	stw	r2,28(sp)
    6608:	003e4306 	br	5f18 <_dtoa_r+0x848>
    660c:	d9800f17 	ldw	r6,60(sp)
    6610:	d8800d17 	ldw	r2,52(sp)
    6614:	d9800315 	stw	r6,12(sp)
    6618:	d8800415 	stw	r2,16(sp)
    661c:	d8c00b17 	ldw	r3,44(sp)
    6620:	1805003a 	cmpeq	r2,r3,zero
    6624:	1000e21e 	bne	r2,zero,69b0 <_dtoa_r+0x12e0>
    6628:	d9000317 	ldw	r4,12(sp)
    662c:	0005883a 	mov	r2,zero
    6630:	00cff834 	movhi	r3,16352
    6634:	200c90fa 	slli	r6,r4,3
    6638:	01000074 	movhi	r4,1
    663c:	210de404 	addi	r4,r4,14224
    6640:	180b883a 	mov	r5,r3
    6644:	310d883a 	add	r6,r6,r4
    6648:	327fff17 	ldw	r9,-4(r6)
    664c:	323ffe17 	ldw	r8,-8(r6)
    6650:	1009883a 	mov	r4,r2
    6654:	480f883a 	mov	r7,r9
    6658:	400d883a 	mov	r6,r8
    665c:	000b9580 	call	b958 <__divdf3>
    6660:	180b883a 	mov	r5,r3
    6664:	b00d883a 	mov	r6,r22
    6668:	b80f883a 	mov	r7,r23
    666c:	1009883a 	mov	r4,r2
    6670:	000b4a00 	call	b4a0 <__subdf3>
    6674:	a80b883a 	mov	r5,r21
    6678:	a009883a 	mov	r4,r20
    667c:	d8c01915 	stw	r3,100(sp)
    6680:	d8801815 	stw	r2,96(sp)
    6684:	000bf500 	call	bf50 <__fixdfsi>
    6688:	1009883a 	mov	r4,r2
    668c:	1027883a 	mov	r19,r2
    6690:	000be580 	call	be58 <__floatsidf>
    6694:	a80b883a 	mov	r5,r21
    6698:	a009883a 	mov	r4,r20
    669c:	180f883a 	mov	r7,r3
    66a0:	100d883a 	mov	r6,r2
    66a4:	000b4a00 	call	b4a0 <__subdf3>
    66a8:	d9801817 	ldw	r6,96(sp)
    66ac:	1823883a 	mov	r17,r3
    66b0:	d8801415 	stw	r2,80(sp)
    66b4:	302d883a 	mov	r22,r6
    66b8:	d9800517 	ldw	r6,20(sp)
    66bc:	9cc00c04 	addi	r19,r19,48
    66c0:	dc401515 	stw	r17,84(sp)
    66c4:	d8c01917 	ldw	r3,100(sp)
    66c8:	34c00005 	stb	r19,0(r6)
    66cc:	d8800517 	ldw	r2,20(sp)
    66d0:	d9401917 	ldw	r5,100(sp)
    66d4:	d9801417 	ldw	r6,80(sp)
    66d8:	b009883a 	mov	r4,r22
    66dc:	880f883a 	mov	r7,r17
    66e0:	182f883a 	mov	r23,r3
    66e4:	17000044 	addi	fp,r2,1
    66e8:	000bcc00 	call	bcc0 <__gtdf2>
    66ec:	00804e16 	blt	zero,r2,6828 <_dtoa_r+0x1158>
    66f0:	d9801417 	ldw	r6,80(sp)
    66f4:	0005883a 	mov	r2,zero
    66f8:	00cffc34 	movhi	r3,16368
    66fc:	180b883a 	mov	r5,r3
    6700:	880f883a 	mov	r7,r17
    6704:	1009883a 	mov	r4,r2
    6708:	000b4a00 	call	b4a0 <__subdf3>
    670c:	d9401917 	ldw	r5,100(sp)
    6710:	180f883a 	mov	r7,r3
    6714:	b009883a 	mov	r4,r22
    6718:	100d883a 	mov	r6,r2
    671c:	000bcc00 	call	bcc0 <__gtdf2>
    6720:	00bda216 	blt	zero,r2,5dac <_dtoa_r+0x6dc>
    6724:	d8c00317 	ldw	r3,12(sp)
    6728:	00800044 	movi	r2,1
    672c:	10c01216 	blt	r2,r3,6778 <_dtoa_r+0x10a8>
    6730:	003d4506 	br	5c48 <_dtoa_r+0x578>
    6734:	d9801417 	ldw	r6,80(sp)
    6738:	0005883a 	mov	r2,zero
    673c:	00cffc34 	movhi	r3,16368
    6740:	180b883a 	mov	r5,r3
    6744:	880f883a 	mov	r7,r17
    6748:	1009883a 	mov	r4,r2
    674c:	000b4a00 	call	b4a0 <__subdf3>
    6750:	d9c01b17 	ldw	r7,108(sp)
    6754:	180b883a 	mov	r5,r3
    6758:	1009883a 	mov	r4,r2
    675c:	b00d883a 	mov	r6,r22
    6760:	000bdd00 	call	bdd0 <__ltdf2>
    6764:	103d9116 	blt	r2,zero,5dac <_dtoa_r+0x6dc>
    6768:	d9800517 	ldw	r6,20(sp)
    676c:	d9000317 	ldw	r4,12(sp)
    6770:	3105883a 	add	r2,r6,r4
    6774:	e0bd3426 	beq	fp,r2,5c48 <_dtoa_r+0x578>
    6778:	04500934 	movhi	r17,16420
    677c:	0021883a 	mov	r16,zero
    6780:	b80b883a 	mov	r5,r23
    6784:	b009883a 	mov	r4,r22
    6788:	800d883a 	mov	r6,r16
    678c:	880f883a 	mov	r7,r17
    6790:	000b5940 	call	b594 <__muldf3>
    6794:	d9401517 	ldw	r5,84(sp)
    6798:	d9001417 	ldw	r4,80(sp)
    679c:	880f883a 	mov	r7,r17
    67a0:	000d883a 	mov	r6,zero
    67a4:	d8801a15 	stw	r2,104(sp)
    67a8:	d8c01b15 	stw	r3,108(sp)
    67ac:	000b5940 	call	b594 <__muldf3>
    67b0:	180b883a 	mov	r5,r3
    67b4:	1009883a 	mov	r4,r2
    67b8:	1823883a 	mov	r17,r3
    67bc:	1021883a 	mov	r16,r2
    67c0:	000bf500 	call	bf50 <__fixdfsi>
    67c4:	1009883a 	mov	r4,r2
    67c8:	102b883a 	mov	r21,r2
    67cc:	000be580 	call	be58 <__floatsidf>
    67d0:	880b883a 	mov	r5,r17
    67d4:	8009883a 	mov	r4,r16
    67d8:	180f883a 	mov	r7,r3
    67dc:	100d883a 	mov	r6,r2
    67e0:	000b4a00 	call	b4a0 <__subdf3>
    67e4:	1021883a 	mov	r16,r2
    67e8:	d9001b17 	ldw	r4,108(sp)
    67ec:	1823883a 	mov	r17,r3
    67f0:	dc001415 	stw	r16,80(sp)
    67f4:	ad400c04 	addi	r21,r21,48
    67f8:	dc401515 	stw	r17,84(sp)
    67fc:	d8801a17 	ldw	r2,104(sp)
    6800:	e5400005 	stb	r21,0(fp)
    6804:	202f883a 	mov	r23,r4
    6808:	d9c01b17 	ldw	r7,108(sp)
    680c:	d9001417 	ldw	r4,80(sp)
    6810:	880b883a 	mov	r5,r17
    6814:	100d883a 	mov	r6,r2
    6818:	102d883a 	mov	r22,r2
    681c:	e7000044 	addi	fp,fp,1
    6820:	000bdd00 	call	bdd0 <__ltdf2>
    6824:	103fc30e 	bge	r2,zero,6734 <_dtoa_r+0x1064>
    6828:	d9000417 	ldw	r4,16(sp)
    682c:	d9000d15 	stw	r4,52(sp)
    6830:	003d7106 	br	5df8 <_dtoa_r+0x728>
    6834:	d9801717 	ldw	r6,92(sp)
    6838:	00800084 	movi	r2,2
    683c:	11bde60e 	bge	r2,r6,5fd8 <_dtoa_r+0x908>
    6840:	203cfb1e 	bne	r4,zero,5c30 <_dtoa_r+0x560>
    6844:	d9001617 	ldw	r4,88(sp)
    6848:	900b883a 	mov	r5,r18
    684c:	01800144 	movi	r6,5
    6850:	000f883a 	mov	r7,zero
    6854:	00093e00 	call	93e0 <__multadd>
    6858:	d9000717 	ldw	r4,28(sp)
    685c:	100b883a 	mov	r5,r2
    6860:	1025883a 	mov	r18,r2
    6864:	00088880 	call	8888 <__mcmp>
    6868:	00bcf10e 	bge	zero,r2,5c30 <_dtoa_r+0x560>
    686c:	d8c00d17 	ldw	r3,52(sp)
    6870:	d9000517 	ldw	r4,20(sp)
    6874:	d8000615 	stw	zero,24(sp)
    6878:	18c00044 	addi	r3,r3,1
    687c:	d8c00d15 	stw	r3,52(sp)
    6880:	00800c44 	movi	r2,49
    6884:	27000044 	addi	fp,r4,1
    6888:	20800005 	stb	r2,0(r4)
    688c:	003e8906 	br	62b4 <_dtoa_r+0xbe4>
    6890:	d8c00517 	ldw	r3,20(sp)
    6894:	003bc206 	br	57a0 <_dtoa_r+0xd0>
    6898:	01800074 	movhi	r6,1
    689c:	318e1604 	addi	r6,r6,14424
    68a0:	30c00917 	ldw	r3,36(r6)
    68a4:	30800817 	ldw	r2,32(r6)
    68a8:	d9001217 	ldw	r4,72(sp)
    68ac:	d9401317 	ldw	r5,76(sp)
    68b0:	180f883a 	mov	r7,r3
    68b4:	100d883a 	mov	r6,r2
    68b8:	000b9580 	call	b958 <__divdf3>
    68bc:	948003cc 	andi	r18,r18,15
    68c0:	058000c4 	movi	r22,3
    68c4:	1029883a 	mov	r20,r2
    68c8:	182b883a 	mov	r21,r3
    68cc:	003c8906 	br	5af4 <_dtoa_r+0x424>
    68d0:	d9001017 	ldw	r4,64(sp)
    68d4:	d9800917 	ldw	r6,36(sp)
    68d8:	0025883a 	mov	r18,zero
    68dc:	1105c83a 	sub	r2,r2,r4
    68e0:	2089883a 	add	r4,r4,r2
    68e4:	308d883a 	add	r6,r6,r2
    68e8:	d9001015 	stw	r4,64(sp)
    68ec:	d9800915 	stw	r6,36(sp)
    68f0:	003e3206 	br	61bc <_dtoa_r+0xaec>
    68f4:	28800044 	addi	r2,r5,1
    68f8:	27000044 	addi	fp,r4,1
    68fc:	20800005 	stb	r2,0(r4)
    6900:	003e6c06 	br	62b4 <_dtoa_r+0xbe4>
    6904:	d8800f17 	ldw	r2,60(sp)
    6908:	00bce016 	blt	zero,r2,5c8c <_dtoa_r+0x5bc>
    690c:	d9800f17 	ldw	r6,60(sp)
    6910:	303cc51e 	bne	r6,zero,5c28 <_dtoa_r+0x558>
    6914:	0005883a 	mov	r2,zero
    6918:	00d00534 	movhi	r3,16404
    691c:	980b883a 	mov	r5,r19
    6920:	180f883a 	mov	r7,r3
    6924:	9009883a 	mov	r4,r18
    6928:	100d883a 	mov	r6,r2
    692c:	000b5940 	call	b594 <__muldf3>
    6930:	180b883a 	mov	r5,r3
    6934:	a80f883a 	mov	r7,r21
    6938:	1009883a 	mov	r4,r2
    693c:	a00d883a 	mov	r6,r20
    6940:	000bd480 	call	bd48 <__gedf2>
    6944:	103cb80e 	bge	r2,zero,5c28 <_dtoa_r+0x558>
    6948:	0027883a 	mov	r19,zero
    694c:	0025883a 	mov	r18,zero
    6950:	003fc606 	br	686c <_dtoa_r+0x119c>
    6954:	99400117 	ldw	r5,4(r19)
    6958:	d9001617 	ldw	r4,88(sp)
    695c:	0008cac0 	call	8cac <_Balloc>
    6960:	99800417 	ldw	r6,16(r19)
    6964:	11000304 	addi	r4,r2,12
    6968:	99400304 	addi	r5,r19,12
    696c:	318d883a 	add	r6,r6,r6
    6970:	318d883a 	add	r6,r6,r6
    6974:	31800204 	addi	r6,r6,8
    6978:	1023883a 	mov	r17,r2
    697c:	00032a40 	call	32a4 <memcpy>
    6980:	d9001617 	ldw	r4,88(sp)
    6984:	880b883a 	mov	r5,r17
    6988:	01800044 	movi	r6,1
    698c:	00090700 	call	9070 <__lshift>
    6990:	100b883a 	mov	r5,r2
    6994:	003d9c06 	br	6008 <_dtoa_r+0x938>
    6998:	00800e44 	movi	r2,57
    699c:	b8807026 	beq	r23,r2,6b60 <_dtoa_r+0x1490>
    69a0:	b8800044 	addi	r2,r23,1
    69a4:	b7000044 	addi	fp,r22,1
    69a8:	b0800005 	stb	r2,0(r22)
    69ac:	003e4106 	br	62b4 <_dtoa_r+0xbe4>
    69b0:	d8800317 	ldw	r2,12(sp)
    69b4:	01800074 	movhi	r6,1
    69b8:	318de404 	addi	r6,r6,14224
    69bc:	b009883a 	mov	r4,r22
    69c0:	100e90fa 	slli	r7,r2,3
    69c4:	b80b883a 	mov	r5,r23
    69c8:	398f883a 	add	r7,r7,r6
    69cc:	38bffe17 	ldw	r2,-8(r7)
    69d0:	d9800517 	ldw	r6,20(sp)
    69d4:	38ffff17 	ldw	r3,-4(r7)
    69d8:	37000044 	addi	fp,r6,1
    69dc:	180f883a 	mov	r7,r3
    69e0:	100d883a 	mov	r6,r2
    69e4:	000b5940 	call	b594 <__muldf3>
    69e8:	a80b883a 	mov	r5,r21
    69ec:	a009883a 	mov	r4,r20
    69f0:	182f883a 	mov	r23,r3
    69f4:	102d883a 	mov	r22,r2
    69f8:	000bf500 	call	bf50 <__fixdfsi>
    69fc:	1009883a 	mov	r4,r2
    6a00:	1027883a 	mov	r19,r2
    6a04:	000be580 	call	be58 <__floatsidf>
    6a08:	a80b883a 	mov	r5,r21
    6a0c:	a009883a 	mov	r4,r20
    6a10:	180f883a 	mov	r7,r3
    6a14:	100d883a 	mov	r6,r2
    6a18:	000b4a00 	call	b4a0 <__subdf3>
    6a1c:	180b883a 	mov	r5,r3
    6a20:	d8c00517 	ldw	r3,20(sp)
    6a24:	9cc00c04 	addi	r19,r19,48
    6a28:	1009883a 	mov	r4,r2
    6a2c:	1cc00005 	stb	r19,0(r3)
    6a30:	2021883a 	mov	r16,r4
    6a34:	d9000317 	ldw	r4,12(sp)
    6a38:	00800044 	movi	r2,1
    6a3c:	2823883a 	mov	r17,r5
    6a40:	20802226 	beq	r4,r2,6acc <_dtoa_r+0x13fc>
    6a44:	1029883a 	mov	r20,r2
    6a48:	0005883a 	mov	r2,zero
    6a4c:	00d00934 	movhi	r3,16420
    6a50:	180f883a 	mov	r7,r3
    6a54:	100d883a 	mov	r6,r2
    6a58:	880b883a 	mov	r5,r17
    6a5c:	8009883a 	mov	r4,r16
    6a60:	000b5940 	call	b594 <__muldf3>
    6a64:	180b883a 	mov	r5,r3
    6a68:	1009883a 	mov	r4,r2
    6a6c:	1823883a 	mov	r17,r3
    6a70:	1021883a 	mov	r16,r2
    6a74:	000bf500 	call	bf50 <__fixdfsi>
    6a78:	1009883a 	mov	r4,r2
    6a7c:	102b883a 	mov	r21,r2
    6a80:	000be580 	call	be58 <__floatsidf>
    6a84:	880b883a 	mov	r5,r17
    6a88:	8009883a 	mov	r4,r16
    6a8c:	180f883a 	mov	r7,r3
    6a90:	100d883a 	mov	r6,r2
    6a94:	000b4a00 	call	b4a0 <__subdf3>
    6a98:	180b883a 	mov	r5,r3
    6a9c:	d8c00517 	ldw	r3,20(sp)
    6aa0:	1009883a 	mov	r4,r2
    6aa4:	ad400c04 	addi	r21,r21,48
    6aa8:	1d05883a 	add	r2,r3,r20
    6aac:	15400005 	stb	r21,0(r2)
    6ab0:	2021883a 	mov	r16,r4
    6ab4:	d9000317 	ldw	r4,12(sp)
    6ab8:	a5000044 	addi	r20,r20,1
    6abc:	2823883a 	mov	r17,r5
    6ac0:	a13fe11e 	bne	r20,r4,6a48 <_dtoa_r+0x1378>
    6ac4:	e505883a 	add	r2,fp,r20
    6ac8:	173fffc4 	addi	fp,r2,-1
    6acc:	0025883a 	mov	r18,zero
    6ad0:	04cff834 	movhi	r19,16352
    6ad4:	b009883a 	mov	r4,r22
    6ad8:	b80b883a 	mov	r5,r23
    6adc:	900d883a 	mov	r6,r18
    6ae0:	980f883a 	mov	r7,r19
    6ae4:	000b5200 	call	b520 <__adddf3>
    6ae8:	180b883a 	mov	r5,r3
    6aec:	1009883a 	mov	r4,r2
    6af0:	800d883a 	mov	r6,r16
    6af4:	880f883a 	mov	r7,r17
    6af8:	000bdd00 	call	bdd0 <__ltdf2>
    6afc:	103cab16 	blt	r2,zero,5dac <_dtoa_r+0x6dc>
    6b00:	0009883a 	mov	r4,zero
    6b04:	980b883a 	mov	r5,r19
    6b08:	b80f883a 	mov	r7,r23
    6b0c:	b00d883a 	mov	r6,r22
    6b10:	000b4a00 	call	b4a0 <__subdf3>
    6b14:	180b883a 	mov	r5,r3
    6b18:	880f883a 	mov	r7,r17
    6b1c:	1009883a 	mov	r4,r2
    6b20:	800d883a 	mov	r6,r16
    6b24:	000bcc00 	call	bcc0 <__gtdf2>
    6b28:	00bc470e 	bge	zero,r2,5c48 <_dtoa_r+0x578>
    6b2c:	00c00c04 	movi	r3,48
    6b30:	e73fffc4 	addi	fp,fp,-1
    6b34:	e0800007 	ldb	r2,0(fp)
    6b38:	10fffd26 	beq	r2,r3,6b30 <_dtoa_r+0x1460>
    6b3c:	d9800417 	ldw	r6,16(sp)
    6b40:	e7000044 	addi	fp,fp,1
    6b44:	d9800d15 	stw	r6,52(sp)
    6b48:	003cab06 	br	5df8 <_dtoa_r+0x728>
    6b4c:	d8c00f17 	ldw	r3,60(sp)
    6b50:	d9001117 	ldw	r4,68(sp)
    6b54:	20e1c83a 	sub	r16,r4,r3
    6b58:	0007883a 	mov	r3,zero
    6b5c:	003d9b06 	br	61cc <_dtoa_r+0xafc>
    6b60:	00800e44 	movi	r2,57
    6b64:	b0800005 	stb	r2,0(r22)
    6b68:	b5800044 	addi	r22,r22,1
    6b6c:	003dc106 	br	6274 <_dtoa_r+0xba4>
    6b70:	05800084 	movi	r22,2
    6b74:	003bf706 	br	5b54 <_dtoa_r+0x484>
    6b78:	d9000f17 	ldw	r4,60(sp)
    6b7c:	013c000e 	bge	zero,r4,5b80 <_dtoa_r+0x4b0>
    6b80:	d9800e17 	ldw	r6,56(sp)
    6b84:	01bc300e 	bge	zero,r6,5c48 <_dtoa_r+0x578>
    6b88:	0005883a 	mov	r2,zero
    6b8c:	00d00934 	movhi	r3,16420
    6b90:	a80b883a 	mov	r5,r21
    6b94:	180f883a 	mov	r7,r3
    6b98:	a009883a 	mov	r4,r20
    6b9c:	100d883a 	mov	r6,r2
    6ba0:	000b5940 	call	b594 <__muldf3>
    6ba4:	b1000044 	addi	r4,r22,1
    6ba8:	1021883a 	mov	r16,r2
    6bac:	1823883a 	mov	r17,r3
    6bb0:	000be580 	call	be58 <__floatsidf>
    6bb4:	880b883a 	mov	r5,r17
    6bb8:	8009883a 	mov	r4,r16
    6bbc:	180f883a 	mov	r7,r3
    6bc0:	100d883a 	mov	r6,r2
    6bc4:	000b5940 	call	b594 <__muldf3>
    6bc8:	0011883a 	mov	r8,zero
    6bcc:	02500734 	movhi	r9,16412
    6bd0:	180b883a 	mov	r5,r3
    6bd4:	480f883a 	mov	r7,r9
    6bd8:	1009883a 	mov	r4,r2
    6bdc:	400d883a 	mov	r6,r8
    6be0:	000b5200 	call	b520 <__adddf3>
    6be4:	102d883a 	mov	r22,r2
    6be8:	00bf3034 	movhi	r2,64704
    6bec:	10ef883a 	add	r23,r2,r3
    6bf0:	d8800d17 	ldw	r2,52(sp)
    6bf4:	d8c00e17 	ldw	r3,56(sp)
    6bf8:	8029883a 	mov	r20,r16
    6bfc:	10bfffc4 	addi	r2,r2,-1
    6c00:	882b883a 	mov	r21,r17
    6c04:	d8800415 	stw	r2,16(sp)
    6c08:	d8c00315 	stw	r3,12(sp)
    6c0c:	003e8306 	br	661c <_dtoa_r+0xf4c>
    6c10:	d8800117 	ldw	r2,4(sp)
    6c14:	dc001117 	ldw	r16,68(sp)
    6c18:	dc801017 	ldw	r18,64(sp)
    6c1c:	00c00d84 	movi	r3,54
    6c20:	1887c83a 	sub	r3,r3,r2
    6c24:	003d6906 	br	61cc <_dtoa_r+0xafc>
    6c28:	01800044 	movi	r6,1
    6c2c:	3021883a 	mov	r16,r6
    6c30:	d9800f15 	stw	r6,60(sp)
    6c34:	d9802615 	stw	r6,152(sp)
    6c38:	d9800e15 	stw	r6,56(sp)
    6c3c:	003b9306 	br	5a8c <_dtoa_r+0x3bc>
    6c40:	b021883a 	mov	r16,r22
    6c44:	dd800f15 	stw	r22,60(sp)
    6c48:	003b9006 	br	5a8c <_dtoa_r+0x3bc>
    6c4c:	103e221e 	bne	r2,zero,64d8 <_dtoa_r+0xe08>
    6c50:	b880004c 	andi	r2,r23,1
    6c54:	1005003a 	cmpeq	r2,r2,zero
    6c58:	103e1f1e 	bne	r2,zero,64d8 <_dtoa_r+0xe08>
    6c5c:	003e1b06 	br	64cc <_dtoa_r+0xdfc>
    6c60:	d9001617 	ldw	r4,88(sp)
    6c64:	980b883a 	mov	r5,r19
    6c68:	01800284 	movi	r6,10
    6c6c:	000f883a 	mov	r7,zero
    6c70:	00093e00 	call	93e0 <__multadd>
    6c74:	d8c00e17 	ldw	r3,56(sp)
    6c78:	1027883a 	mov	r19,r2
    6c7c:	d8c00f15 	stw	r3,60(sp)
    6c80:	003cd306 	br	5fd0 <_dtoa_r+0x900>

00006c84 <_fflush_r>:
    6c84:	defffb04 	addi	sp,sp,-20
    6c88:	dcc00315 	stw	r19,12(sp)
    6c8c:	dc800215 	stw	r18,8(sp)
    6c90:	dfc00415 	stw	ra,16(sp)
    6c94:	dc400115 	stw	r17,4(sp)
    6c98:	dc000015 	stw	r16,0(sp)
    6c9c:	2027883a 	mov	r19,r4
    6ca0:	2825883a 	mov	r18,r5
    6ca4:	20000226 	beq	r4,zero,6cb0 <_fflush_r+0x2c>
    6ca8:	20800e17 	ldw	r2,56(r4)
    6cac:	10005626 	beq	r2,zero,6e08 <_fflush_r+0x184>
    6cb0:	9100030b 	ldhu	r4,12(r18)
    6cb4:	20ffffcc 	andi	r3,r4,65535
    6cb8:	18e0001c 	xori	r3,r3,32768
    6cbc:	18e00004 	addi	r3,r3,-32768
    6cc0:	1880020c 	andi	r2,r3,8
    6cc4:	1000261e 	bne	r2,zero,6d60 <_fflush_r+0xdc>
    6cc8:	90c00117 	ldw	r3,4(r18)
    6ccc:	20820014 	ori	r2,r4,2048
    6cd0:	9080030d 	sth	r2,12(r18)
    6cd4:	1009883a 	mov	r4,r2
    6cd8:	00c0400e 	bge	zero,r3,6ddc <_fflush_r+0x158>
    6cdc:	92000a17 	ldw	r8,40(r18)
    6ce0:	40004026 	beq	r8,zero,6de4 <_fflush_r+0x160>
    6ce4:	2084000c 	andi	r2,r4,4096
    6ce8:	10005326 	beq	r2,zero,6e38 <_fflush_r+0x1b4>
    6cec:	94001417 	ldw	r16,80(r18)
    6cf0:	9080030b 	ldhu	r2,12(r18)
    6cf4:	1080010c 	andi	r2,r2,4
    6cf8:	1000481e 	bne	r2,zero,6e1c <_fflush_r+0x198>
    6cfc:	91400717 	ldw	r5,28(r18)
    6d00:	9809883a 	mov	r4,r19
    6d04:	800d883a 	mov	r6,r16
    6d08:	000f883a 	mov	r7,zero
    6d0c:	403ee83a 	callr	r8
    6d10:	8080261e 	bne	r16,r2,6dac <_fflush_r+0x128>
    6d14:	9080030b 	ldhu	r2,12(r18)
    6d18:	91000417 	ldw	r4,16(r18)
    6d1c:	90000115 	stw	zero,4(r18)
    6d20:	10bdffcc 	andi	r2,r2,63487
    6d24:	10ffffcc 	andi	r3,r2,65535
    6d28:	18c4000c 	andi	r3,r3,4096
    6d2c:	9080030d 	sth	r2,12(r18)
    6d30:	91000015 	stw	r4,0(r18)
    6d34:	18002b26 	beq	r3,zero,6de4 <_fflush_r+0x160>
    6d38:	0007883a 	mov	r3,zero
    6d3c:	1805883a 	mov	r2,r3
    6d40:	94001415 	stw	r16,80(r18)
    6d44:	dfc00417 	ldw	ra,16(sp)
    6d48:	dcc00317 	ldw	r19,12(sp)
    6d4c:	dc800217 	ldw	r18,8(sp)
    6d50:	dc400117 	ldw	r17,4(sp)
    6d54:	dc000017 	ldw	r16,0(sp)
    6d58:	dec00504 	addi	sp,sp,20
    6d5c:	f800283a 	ret
    6d60:	94400417 	ldw	r17,16(r18)
    6d64:	88001f26 	beq	r17,zero,6de4 <_fflush_r+0x160>
    6d68:	90800017 	ldw	r2,0(r18)
    6d6c:	18c000cc 	andi	r3,r3,3
    6d70:	94400015 	stw	r17,0(r18)
    6d74:	1461c83a 	sub	r16,r2,r17
    6d78:	18002526 	beq	r3,zero,6e10 <_fflush_r+0x18c>
    6d7c:	0005883a 	mov	r2,zero
    6d80:	90800215 	stw	r2,8(r18)
    6d84:	0400170e 	bge	zero,r16,6de4 <_fflush_r+0x160>
    6d88:	90c00917 	ldw	r3,36(r18)
    6d8c:	91400717 	ldw	r5,28(r18)
    6d90:	880d883a 	mov	r6,r17
    6d94:	800f883a 	mov	r7,r16
    6d98:	9809883a 	mov	r4,r19
    6d9c:	183ee83a 	callr	r3
    6da0:	88a3883a 	add	r17,r17,r2
    6da4:	80a1c83a 	sub	r16,r16,r2
    6da8:	00bff616 	blt	zero,r2,6d84 <_fflush_r+0x100>
    6dac:	9080030b 	ldhu	r2,12(r18)
    6db0:	00ffffc4 	movi	r3,-1
    6db4:	10801014 	ori	r2,r2,64
    6db8:	9080030d 	sth	r2,12(r18)
    6dbc:	1805883a 	mov	r2,r3
    6dc0:	dfc00417 	ldw	ra,16(sp)
    6dc4:	dcc00317 	ldw	r19,12(sp)
    6dc8:	dc800217 	ldw	r18,8(sp)
    6dcc:	dc400117 	ldw	r17,4(sp)
    6dd0:	dc000017 	ldw	r16,0(sp)
    6dd4:	dec00504 	addi	sp,sp,20
    6dd8:	f800283a 	ret
    6ddc:	90800f17 	ldw	r2,60(r18)
    6de0:	00bfbe16 	blt	zero,r2,6cdc <_fflush_r+0x58>
    6de4:	0007883a 	mov	r3,zero
    6de8:	1805883a 	mov	r2,r3
    6dec:	dfc00417 	ldw	ra,16(sp)
    6df0:	dcc00317 	ldw	r19,12(sp)
    6df4:	dc800217 	ldw	r18,8(sp)
    6df8:	dc400117 	ldw	r17,4(sp)
    6dfc:	dc000017 	ldw	r16,0(sp)
    6e00:	dec00504 	addi	sp,sp,20
    6e04:	f800283a 	ret
    6e08:	0006f1c0 	call	6f1c <__sinit>
    6e0c:	003fa806 	br	6cb0 <_fflush_r+0x2c>
    6e10:	90800517 	ldw	r2,20(r18)
    6e14:	90800215 	stw	r2,8(r18)
    6e18:	003fda06 	br	6d84 <_fflush_r+0x100>
    6e1c:	90800117 	ldw	r2,4(r18)
    6e20:	90c00c17 	ldw	r3,48(r18)
    6e24:	80a1c83a 	sub	r16,r16,r2
    6e28:	183fb426 	beq	r3,zero,6cfc <_fflush_r+0x78>
    6e2c:	90800f17 	ldw	r2,60(r18)
    6e30:	80a1c83a 	sub	r16,r16,r2
    6e34:	003fb106 	br	6cfc <_fflush_r+0x78>
    6e38:	91400717 	ldw	r5,28(r18)
    6e3c:	9809883a 	mov	r4,r19
    6e40:	000d883a 	mov	r6,zero
    6e44:	01c00044 	movi	r7,1
    6e48:	403ee83a 	callr	r8
    6e4c:	1021883a 	mov	r16,r2
    6e50:	00bfffc4 	movi	r2,-1
    6e54:	80800226 	beq	r16,r2,6e60 <_fflush_r+0x1dc>
    6e58:	92000a17 	ldw	r8,40(r18)
    6e5c:	003fa406 	br	6cf0 <_fflush_r+0x6c>
    6e60:	98c00017 	ldw	r3,0(r19)
    6e64:	00800744 	movi	r2,29
    6e68:	18bfde26 	beq	r3,r2,6de4 <_fflush_r+0x160>
    6e6c:	9080030b 	ldhu	r2,12(r18)
    6e70:	8007883a 	mov	r3,r16
    6e74:	10801014 	ori	r2,r2,64
    6e78:	9080030d 	sth	r2,12(r18)
    6e7c:	003fcf06 	br	6dbc <_fflush_r+0x138>

00006e80 <fflush>:
    6e80:	01400034 	movhi	r5,0
    6e84:	295b2104 	addi	r5,r5,27780
    6e88:	2007883a 	mov	r3,r4
    6e8c:	20000526 	beq	r4,zero,6ea4 <fflush+0x24>
    6e90:	00800074 	movhi	r2,1
    6e94:	10965a04 	addi	r2,r2,22888
    6e98:	11000017 	ldw	r4,0(r2)
    6e9c:	180b883a 	mov	r5,r3
    6ea0:	0006c841 	jmpi	6c84 <_fflush_r>
    6ea4:	00800074 	movhi	r2,1
    6ea8:	10965b04 	addi	r2,r2,22892
    6eac:	11000017 	ldw	r4,0(r2)
    6eb0:	0007a501 	jmpi	7a50 <_fwalk_reent>

00006eb4 <std>:
    6eb4:	00800074 	movhi	r2,1
    6eb8:	10a77d04 	addi	r2,r2,-25100
    6ebc:	20800b15 	stw	r2,44(r4)
    6ec0:	00800074 	movhi	r2,1
    6ec4:	10a7b804 	addi	r2,r2,-24864
    6ec8:	20800815 	stw	r2,32(r4)
    6ecc:	00c00074 	movhi	r3,1
    6ed0:	18e79904 	addi	r3,r3,-24988
    6ed4:	00800074 	movhi	r2,1
    6ed8:	10a77f04 	addi	r2,r2,-25092
    6edc:	2140030d 	sth	r5,12(r4)
    6ee0:	2180038d 	sth	r6,14(r4)
    6ee4:	20c00915 	stw	r3,36(r4)
    6ee8:	20800a15 	stw	r2,40(r4)
    6eec:	20000015 	stw	zero,0(r4)
    6ef0:	20000115 	stw	zero,4(r4)
    6ef4:	20000215 	stw	zero,8(r4)
    6ef8:	20000415 	stw	zero,16(r4)
    6efc:	20000515 	stw	zero,20(r4)
    6f00:	20000615 	stw	zero,24(r4)
    6f04:	21000715 	stw	r4,28(r4)
    6f08:	f800283a 	ret

00006f0c <__sfp_lock_acquire>:
    6f0c:	f800283a 	ret

00006f10 <__sfp_lock_release>:
    6f10:	f800283a 	ret

00006f14 <__sinit_lock_acquire>:
    6f14:	f800283a 	ret

00006f18 <__sinit_lock_release>:
    6f18:	f800283a 	ret

00006f1c <__sinit>:
    6f1c:	20800e17 	ldw	r2,56(r4)
    6f20:	defffd04 	addi	sp,sp,-12
    6f24:	dc400115 	stw	r17,4(sp)
    6f28:	dc000015 	stw	r16,0(sp)
    6f2c:	dfc00215 	stw	ra,8(sp)
    6f30:	04400044 	movi	r17,1
    6f34:	01400104 	movi	r5,4
    6f38:	000d883a 	mov	r6,zero
    6f3c:	2021883a 	mov	r16,r4
    6f40:	2200bb04 	addi	r8,r4,748
    6f44:	200f883a 	mov	r7,r4
    6f48:	10000526 	beq	r2,zero,6f60 <__sinit+0x44>
    6f4c:	dfc00217 	ldw	ra,8(sp)
    6f50:	dc400117 	ldw	r17,4(sp)
    6f54:	dc000017 	ldw	r16,0(sp)
    6f58:	dec00304 	addi	sp,sp,12
    6f5c:	f800283a 	ret
    6f60:	21000117 	ldw	r4,4(r4)
    6f64:	00800034 	movhi	r2,0
    6f68:	109c0004 	addi	r2,r2,28672
    6f6c:	00c000c4 	movi	r3,3
    6f70:	80800f15 	stw	r2,60(r16)
    6f74:	80c0b915 	stw	r3,740(r16)
    6f78:	8200ba15 	stw	r8,744(r16)
    6f7c:	84400e15 	stw	r17,56(r16)
    6f80:	8000b815 	stw	zero,736(r16)
    6f84:	0006eb40 	call	6eb4 <std>
    6f88:	81000217 	ldw	r4,8(r16)
    6f8c:	880d883a 	mov	r6,r17
    6f90:	800f883a 	mov	r7,r16
    6f94:	01400284 	movi	r5,10
    6f98:	0006eb40 	call	6eb4 <std>
    6f9c:	81000317 	ldw	r4,12(r16)
    6fa0:	800f883a 	mov	r7,r16
    6fa4:	01400484 	movi	r5,18
    6fa8:	01800084 	movi	r6,2
    6fac:	dfc00217 	ldw	ra,8(sp)
    6fb0:	dc400117 	ldw	r17,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00304 	addi	sp,sp,12
    6fbc:	0006eb41 	jmpi	6eb4 <std>

00006fc0 <__fp_lock>:
    6fc0:	0005883a 	mov	r2,zero
    6fc4:	f800283a 	ret

00006fc8 <__fp_unlock>:
    6fc8:	0005883a 	mov	r2,zero
    6fcc:	f800283a 	ret

00006fd0 <__fp_unlock_all>:
    6fd0:	00800074 	movhi	r2,1
    6fd4:	10965a04 	addi	r2,r2,22888
    6fd8:	11000017 	ldw	r4,0(r2)
    6fdc:	01400034 	movhi	r5,0
    6fe0:	295bf204 	addi	r5,r5,28616
    6fe4:	0007b181 	jmpi	7b18 <_fwalk>

00006fe8 <__fp_lock_all>:
    6fe8:	00800074 	movhi	r2,1
    6fec:	10965a04 	addi	r2,r2,22888
    6ff0:	11000017 	ldw	r4,0(r2)
    6ff4:	01400034 	movhi	r5,0
    6ff8:	295bf004 	addi	r5,r5,28608
    6ffc:	0007b181 	jmpi	7b18 <_fwalk>

00007000 <_cleanup_r>:
    7000:	01400074 	movhi	r5,1
    7004:	2968c704 	addi	r5,r5,-23780
    7008:	0007b181 	jmpi	7b18 <_fwalk>

0000700c <_cleanup>:
    700c:	00800074 	movhi	r2,1
    7010:	10965b04 	addi	r2,r2,22892
    7014:	11000017 	ldw	r4,0(r2)
    7018:	00070001 	jmpi	7000 <_cleanup_r>

0000701c <__sfmoreglue>:
    701c:	defffc04 	addi	sp,sp,-16
    7020:	dc400115 	stw	r17,4(sp)
    7024:	2c401724 	muli	r17,r5,92
    7028:	dc800215 	stw	r18,8(sp)
    702c:	2825883a 	mov	r18,r5
    7030:	89400304 	addi	r5,r17,12
    7034:	dc000015 	stw	r16,0(sp)
    7038:	dfc00315 	stw	ra,12(sp)
    703c:	0007e280 	call	7e28 <_malloc_r>
    7040:	0021883a 	mov	r16,zero
    7044:	880d883a 	mov	r6,r17
    7048:	000b883a 	mov	r5,zero
    704c:	10000626 	beq	r2,zero,7068 <__sfmoreglue+0x4c>
    7050:	11000304 	addi	r4,r2,12
    7054:	14800115 	stw	r18,4(r2)
    7058:	10000015 	stw	zero,0(r2)
    705c:	11000215 	stw	r4,8(r2)
    7060:	1021883a 	mov	r16,r2
    7064:	00033440 	call	3344 <memset>
    7068:	8005883a 	mov	r2,r16
    706c:	dfc00317 	ldw	ra,12(sp)
    7070:	dc800217 	ldw	r18,8(sp)
    7074:	dc400117 	ldw	r17,4(sp)
    7078:	dc000017 	ldw	r16,0(sp)
    707c:	dec00404 	addi	sp,sp,16
    7080:	f800283a 	ret

00007084 <__sfp>:
    7084:	defffd04 	addi	sp,sp,-12
    7088:	00800074 	movhi	r2,1
    708c:	10965b04 	addi	r2,r2,22892
    7090:	dc000015 	stw	r16,0(sp)
    7094:	14000017 	ldw	r16,0(r2)
    7098:	dc400115 	stw	r17,4(sp)
    709c:	dfc00215 	stw	ra,8(sp)
    70a0:	80800e17 	ldw	r2,56(r16)
    70a4:	2023883a 	mov	r17,r4
    70a8:	10002626 	beq	r2,zero,7144 <__sfp+0xc0>
    70ac:	8400b804 	addi	r16,r16,736
    70b0:	80800117 	ldw	r2,4(r16)
    70b4:	81000217 	ldw	r4,8(r16)
    70b8:	10ffffc4 	addi	r3,r2,-1
    70bc:	18000916 	blt	r3,zero,70e4 <__sfp+0x60>
    70c0:	2080030f 	ldh	r2,12(r4)
    70c4:	10000b26 	beq	r2,zero,70f4 <__sfp+0x70>
    70c8:	017fffc4 	movi	r5,-1
    70cc:	00000206 	br	70d8 <__sfp+0x54>
    70d0:	2080030f 	ldh	r2,12(r4)
    70d4:	10000726 	beq	r2,zero,70f4 <__sfp+0x70>
    70d8:	18ffffc4 	addi	r3,r3,-1
    70dc:	21001704 	addi	r4,r4,92
    70e0:	197ffb1e 	bne	r3,r5,70d0 <__sfp+0x4c>
    70e4:	80800017 	ldw	r2,0(r16)
    70e8:	10001926 	beq	r2,zero,7150 <__sfp+0xcc>
    70ec:	1021883a 	mov	r16,r2
    70f0:	003fef06 	br	70b0 <__sfp+0x2c>
    70f4:	00bfffc4 	movi	r2,-1
    70f8:	00c00044 	movi	r3,1
    70fc:	2080038d 	sth	r2,14(r4)
    7100:	20c0030d 	sth	r3,12(r4)
    7104:	20000015 	stw	zero,0(r4)
    7108:	20000215 	stw	zero,8(r4)
    710c:	20000115 	stw	zero,4(r4)
    7110:	20000415 	stw	zero,16(r4)
    7114:	20000515 	stw	zero,20(r4)
    7118:	20000615 	stw	zero,24(r4)
    711c:	20000c15 	stw	zero,48(r4)
    7120:	20000d15 	stw	zero,52(r4)
    7124:	20001115 	stw	zero,68(r4)
    7128:	20001215 	stw	zero,72(r4)
    712c:	2005883a 	mov	r2,r4
    7130:	dfc00217 	ldw	ra,8(sp)
    7134:	dc400117 	ldw	r17,4(sp)
    7138:	dc000017 	ldw	r16,0(sp)
    713c:	dec00304 	addi	sp,sp,12
    7140:	f800283a 	ret
    7144:	8009883a 	mov	r4,r16
    7148:	0006f1c0 	call	6f1c <__sinit>
    714c:	003fd706 	br	70ac <__sfp+0x28>
    7150:	8809883a 	mov	r4,r17
    7154:	01400104 	movi	r5,4
    7158:	000701c0 	call	701c <__sfmoreglue>
    715c:	80800015 	stw	r2,0(r16)
    7160:	103fe21e 	bne	r2,zero,70ec <__sfp+0x68>
    7164:	00800304 	movi	r2,12
    7168:	0009883a 	mov	r4,zero
    716c:	88800015 	stw	r2,0(r17)
    7170:	003fee06 	br	712c <__sfp+0xa8>

00007174 <_malloc_trim_r>:
    7174:	defffb04 	addi	sp,sp,-20
    7178:	dcc00315 	stw	r19,12(sp)
    717c:	04c00074 	movhi	r19,1
    7180:	9ccfe204 	addi	r19,r19,16264
    7184:	dc800215 	stw	r18,8(sp)
    7188:	dc400115 	stw	r17,4(sp)
    718c:	dc000015 	stw	r16,0(sp)
    7190:	2823883a 	mov	r17,r5
    7194:	2025883a 	mov	r18,r4
    7198:	dfc00415 	stw	ra,16(sp)
    719c:	000cde40 	call	cde4 <__malloc_lock>
    71a0:	98800217 	ldw	r2,8(r19)
    71a4:	9009883a 	mov	r4,r18
    71a8:	000b883a 	mov	r5,zero
    71ac:	10c00117 	ldw	r3,4(r2)
    71b0:	00bfff04 	movi	r2,-4
    71b4:	18a0703a 	and	r16,r3,r2
    71b8:	8463c83a 	sub	r17,r16,r17
    71bc:	8c43fbc4 	addi	r17,r17,4079
    71c0:	8822d33a 	srli	r17,r17,12
    71c4:	0083ffc4 	movi	r2,4095
    71c8:	8c7fffc4 	addi	r17,r17,-1
    71cc:	8822933a 	slli	r17,r17,12
    71d0:	1440060e 	bge	r2,r17,71ec <_malloc_trim_r+0x78>
    71d4:	0009d840 	call	9d84 <_sbrk_r>
    71d8:	98c00217 	ldw	r3,8(r19)
    71dc:	9009883a 	mov	r4,r18
    71e0:	044bc83a 	sub	r5,zero,r17
    71e4:	80c7883a 	add	r3,r16,r3
    71e8:	10c00926 	beq	r2,r3,7210 <_malloc_trim_r+0x9c>
    71ec:	000ce040 	call	ce04 <__malloc_unlock>
    71f0:	0005883a 	mov	r2,zero
    71f4:	dfc00417 	ldw	ra,16(sp)
    71f8:	dcc00317 	ldw	r19,12(sp)
    71fc:	dc800217 	ldw	r18,8(sp)
    7200:	dc400117 	ldw	r17,4(sp)
    7204:	dc000017 	ldw	r16,0(sp)
    7208:	dec00504 	addi	sp,sp,20
    720c:	f800283a 	ret
    7210:	9009883a 	mov	r4,r18
    7214:	0009d840 	call	9d84 <_sbrk_r>
    7218:	844dc83a 	sub	r6,r16,r17
    721c:	00ffffc4 	movi	r3,-1
    7220:	9009883a 	mov	r4,r18
    7224:	000b883a 	mov	r5,zero
    7228:	01c00074 	movhi	r7,1
    722c:	39de5f04 	addi	r7,r7,31100
    7230:	31800054 	ori	r6,r6,1
    7234:	10c00926 	beq	r2,r3,725c <_malloc_trim_r+0xe8>
    7238:	38800017 	ldw	r2,0(r7)
    723c:	98c00217 	ldw	r3,8(r19)
    7240:	9009883a 	mov	r4,r18
    7244:	1445c83a 	sub	r2,r2,r17
    7248:	38800015 	stw	r2,0(r7)
    724c:	19800115 	stw	r6,4(r3)
    7250:	000ce040 	call	ce04 <__malloc_unlock>
    7254:	00800044 	movi	r2,1
    7258:	003fe606 	br	71f4 <_malloc_trim_r+0x80>
    725c:	0009d840 	call	9d84 <_sbrk_r>
    7260:	99800217 	ldw	r6,8(r19)
    7264:	100f883a 	mov	r7,r2
    7268:	9009883a 	mov	r4,r18
    726c:	1187c83a 	sub	r3,r2,r6
    7270:	008003c4 	movi	r2,15
    7274:	19400054 	ori	r5,r3,1
    7278:	10ffdc0e 	bge	r2,r3,71ec <_malloc_trim_r+0x78>
    727c:	00800074 	movhi	r2,1
    7280:	10965f04 	addi	r2,r2,22908
    7284:	10c00017 	ldw	r3,0(r2)
    7288:	00800074 	movhi	r2,1
    728c:	109e5f04 	addi	r2,r2,31100
    7290:	31400115 	stw	r5,4(r6)
    7294:	38c7c83a 	sub	r3,r7,r3
    7298:	10c00015 	stw	r3,0(r2)
    729c:	003fd306 	br	71ec <_malloc_trim_r+0x78>

000072a0 <_free_r>:
    72a0:	defffd04 	addi	sp,sp,-12
    72a4:	dc400115 	stw	r17,4(sp)
    72a8:	dc000015 	stw	r16,0(sp)
    72ac:	dfc00215 	stw	ra,8(sp)
    72b0:	2821883a 	mov	r16,r5
    72b4:	2023883a 	mov	r17,r4
    72b8:	28005a26 	beq	r5,zero,7424 <_free_r+0x184>
    72bc:	000cde40 	call	cde4 <__malloc_lock>
    72c0:	823ffe04 	addi	r8,r16,-8
    72c4:	41400117 	ldw	r5,4(r8)
    72c8:	00bfff84 	movi	r2,-2
    72cc:	02800074 	movhi	r10,1
    72d0:	528fe204 	addi	r10,r10,16264
    72d4:	288e703a 	and	r7,r5,r2
    72d8:	41cd883a 	add	r6,r8,r7
    72dc:	30c00117 	ldw	r3,4(r6)
    72e0:	51000217 	ldw	r4,8(r10)
    72e4:	00bfff04 	movi	r2,-4
    72e8:	1892703a 	and	r9,r3,r2
    72ec:	5017883a 	mov	r11,r10
    72f0:	31006726 	beq	r6,r4,7490 <_free_r+0x1f0>
    72f4:	2880004c 	andi	r2,r5,1
    72f8:	1005003a 	cmpeq	r2,r2,zero
    72fc:	32400115 	stw	r9,4(r6)
    7300:	10001a1e 	bne	r2,zero,736c <_free_r+0xcc>
    7304:	000b883a 	mov	r5,zero
    7308:	3247883a 	add	r3,r6,r9
    730c:	18800117 	ldw	r2,4(r3)
    7310:	1080004c 	andi	r2,r2,1
    7314:	1000231e 	bne	r2,zero,73a4 <_free_r+0x104>
    7318:	280ac03a 	cmpne	r5,r5,zero
    731c:	3a4f883a 	add	r7,r7,r9
    7320:	2800451e 	bne	r5,zero,7438 <_free_r+0x198>
    7324:	31000217 	ldw	r4,8(r6)
    7328:	00800074 	movhi	r2,1
    732c:	108fe404 	addi	r2,r2,16272
    7330:	20807b26 	beq	r4,r2,7520 <_free_r+0x280>
    7334:	30800317 	ldw	r2,12(r6)
    7338:	3a07883a 	add	r3,r7,r8
    733c:	19c00015 	stw	r7,0(r3)
    7340:	11000215 	stw	r4,8(r2)
    7344:	20800315 	stw	r2,12(r4)
    7348:	38800054 	ori	r2,r7,1
    734c:	40800115 	stw	r2,4(r8)
    7350:	28001a26 	beq	r5,zero,73bc <_free_r+0x11c>
    7354:	8809883a 	mov	r4,r17
    7358:	dfc00217 	ldw	ra,8(sp)
    735c:	dc400117 	ldw	r17,4(sp)
    7360:	dc000017 	ldw	r16,0(sp)
    7364:	dec00304 	addi	sp,sp,12
    7368:	000ce041 	jmpi	ce04 <__malloc_unlock>
    736c:	80bffe17 	ldw	r2,-8(r16)
    7370:	50c00204 	addi	r3,r10,8
    7374:	4091c83a 	sub	r8,r8,r2
    7378:	41000217 	ldw	r4,8(r8)
    737c:	388f883a 	add	r7,r7,r2
    7380:	20c06126 	beq	r4,r3,7508 <_free_r+0x268>
    7384:	40800317 	ldw	r2,12(r8)
    7388:	3247883a 	add	r3,r6,r9
    738c:	000b883a 	mov	r5,zero
    7390:	11000215 	stw	r4,8(r2)
    7394:	20800315 	stw	r2,12(r4)
    7398:	18800117 	ldw	r2,4(r3)
    739c:	1080004c 	andi	r2,r2,1
    73a0:	103fdd26 	beq	r2,zero,7318 <_free_r+0x78>
    73a4:	38800054 	ori	r2,r7,1
    73a8:	3a07883a 	add	r3,r7,r8
    73ac:	280ac03a 	cmpne	r5,r5,zero
    73b0:	40800115 	stw	r2,4(r8)
    73b4:	19c00015 	stw	r7,0(r3)
    73b8:	283fe61e 	bne	r5,zero,7354 <_free_r+0xb4>
    73bc:	00807fc4 	movi	r2,511
    73c0:	11c01f2e 	bgeu	r2,r7,7440 <_free_r+0x1a0>
    73c4:	3806d27a 	srli	r3,r7,9
    73c8:	1800481e 	bne	r3,zero,74ec <_free_r+0x24c>
    73cc:	3804d0fa 	srli	r2,r7,3
    73d0:	100690fa 	slli	r3,r2,3
    73d4:	1acd883a 	add	r6,r3,r11
    73d8:	31400217 	ldw	r5,8(r6)
    73dc:	31405926 	beq	r6,r5,7544 <_free_r+0x2a4>
    73e0:	28800117 	ldw	r2,4(r5)
    73e4:	00ffff04 	movi	r3,-4
    73e8:	10c4703a 	and	r2,r2,r3
    73ec:	3880022e 	bgeu	r7,r2,73f8 <_free_r+0x158>
    73f0:	29400217 	ldw	r5,8(r5)
    73f4:	317ffa1e 	bne	r6,r5,73e0 <_free_r+0x140>
    73f8:	29800317 	ldw	r6,12(r5)
    73fc:	41800315 	stw	r6,12(r8)
    7400:	41400215 	stw	r5,8(r8)
    7404:	8809883a 	mov	r4,r17
    7408:	2a000315 	stw	r8,12(r5)
    740c:	32000215 	stw	r8,8(r6)
    7410:	dfc00217 	ldw	ra,8(sp)
    7414:	dc400117 	ldw	r17,4(sp)
    7418:	dc000017 	ldw	r16,0(sp)
    741c:	dec00304 	addi	sp,sp,12
    7420:	000ce041 	jmpi	ce04 <__malloc_unlock>
    7424:	dfc00217 	ldw	ra,8(sp)
    7428:	dc400117 	ldw	r17,4(sp)
    742c:	dc000017 	ldw	r16,0(sp)
    7430:	dec00304 	addi	sp,sp,12
    7434:	f800283a 	ret
    7438:	31000217 	ldw	r4,8(r6)
    743c:	003fbd06 	br	7334 <_free_r+0x94>
    7440:	3806d0fa 	srli	r3,r7,3
    7444:	00800044 	movi	r2,1
    7448:	51400117 	ldw	r5,4(r10)
    744c:	180890fa 	slli	r4,r3,3
    7450:	1807d0ba 	srai	r3,r3,2
    7454:	22c9883a 	add	r4,r4,r11
    7458:	21800217 	ldw	r6,8(r4)
    745c:	10c4983a 	sll	r2,r2,r3
    7460:	41000315 	stw	r4,12(r8)
    7464:	41800215 	stw	r6,8(r8)
    7468:	288ab03a 	or	r5,r5,r2
    746c:	22000215 	stw	r8,8(r4)
    7470:	8809883a 	mov	r4,r17
    7474:	51400115 	stw	r5,4(r10)
    7478:	32000315 	stw	r8,12(r6)
    747c:	dfc00217 	ldw	ra,8(sp)
    7480:	dc400117 	ldw	r17,4(sp)
    7484:	dc000017 	ldw	r16,0(sp)
    7488:	dec00304 	addi	sp,sp,12
    748c:	000ce041 	jmpi	ce04 <__malloc_unlock>
    7490:	2880004c 	andi	r2,r5,1
    7494:	3a4d883a 	add	r6,r7,r9
    7498:	1000071e 	bne	r2,zero,74b8 <_free_r+0x218>
    749c:	80bffe17 	ldw	r2,-8(r16)
    74a0:	4091c83a 	sub	r8,r8,r2
    74a4:	41000317 	ldw	r4,12(r8)
    74a8:	40c00217 	ldw	r3,8(r8)
    74ac:	308d883a 	add	r6,r6,r2
    74b0:	20c00215 	stw	r3,8(r4)
    74b4:	19000315 	stw	r4,12(r3)
    74b8:	00800074 	movhi	r2,1
    74bc:	10965e04 	addi	r2,r2,22904
    74c0:	11000017 	ldw	r4,0(r2)
    74c4:	30c00054 	ori	r3,r6,1
    74c8:	52000215 	stw	r8,8(r10)
    74cc:	40c00115 	stw	r3,4(r8)
    74d0:	313fa036 	bltu	r6,r4,7354 <_free_r+0xb4>
    74d4:	00800074 	movhi	r2,1
    74d8:	109e5304 	addi	r2,r2,31052
    74dc:	11400017 	ldw	r5,0(r2)
    74e0:	8809883a 	mov	r4,r17
    74e4:	00071740 	call	7174 <_malloc_trim_r>
    74e8:	003f9a06 	br	7354 <_free_r+0xb4>
    74ec:	00800104 	movi	r2,4
    74f0:	10c0072e 	bgeu	r2,r3,7510 <_free_r+0x270>
    74f4:	00800504 	movi	r2,20
    74f8:	10c01936 	bltu	r2,r3,7560 <_free_r+0x2c0>
    74fc:	188016c4 	addi	r2,r3,91
    7500:	100690fa 	slli	r3,r2,3
    7504:	003fb306 	br	73d4 <_free_r+0x134>
    7508:	01400044 	movi	r5,1
    750c:	003f7e06 	br	7308 <_free_r+0x68>
    7510:	3804d1ba 	srli	r2,r7,6
    7514:	10800e04 	addi	r2,r2,56
    7518:	100690fa 	slli	r3,r2,3
    751c:	003fad06 	br	73d4 <_free_r+0x134>
    7520:	22000315 	stw	r8,12(r4)
    7524:	22000215 	stw	r8,8(r4)
    7528:	3a05883a 	add	r2,r7,r8
    752c:	38c00054 	ori	r3,r7,1
    7530:	11c00015 	stw	r7,0(r2)
    7534:	41000215 	stw	r4,8(r8)
    7538:	40c00115 	stw	r3,4(r8)
    753c:	41000315 	stw	r4,12(r8)
    7540:	003f8406 	br	7354 <_free_r+0xb4>
    7544:	1005d0ba 	srai	r2,r2,2
    7548:	00c00044 	movi	r3,1
    754c:	51000117 	ldw	r4,4(r10)
    7550:	1886983a 	sll	r3,r3,r2
    7554:	20c8b03a 	or	r4,r4,r3
    7558:	51000115 	stw	r4,4(r10)
    755c:	003fa706 	br	73fc <_free_r+0x15c>
    7560:	00801504 	movi	r2,84
    7564:	10c00436 	bltu	r2,r3,7578 <_free_r+0x2d8>
    7568:	3804d33a 	srli	r2,r7,12
    756c:	10801b84 	addi	r2,r2,110
    7570:	100690fa 	slli	r3,r2,3
    7574:	003f9706 	br	73d4 <_free_r+0x134>
    7578:	00805504 	movi	r2,340
    757c:	10c00436 	bltu	r2,r3,7590 <_free_r+0x2f0>
    7580:	3804d3fa 	srli	r2,r7,15
    7584:	10801dc4 	addi	r2,r2,119
    7588:	100690fa 	slli	r3,r2,3
    758c:	003f9106 	br	73d4 <_free_r+0x134>
    7590:	00815504 	movi	r2,1364
    7594:	10c0032e 	bgeu	r2,r3,75a4 <_free_r+0x304>
    7598:	00801f84 	movi	r2,126
    759c:	00c0fc04 	movi	r3,1008
    75a0:	003f8c06 	br	73d4 <_free_r+0x134>
    75a4:	3804d4ba 	srli	r2,r7,18
    75a8:	10801f04 	addi	r2,r2,124
    75ac:	100690fa 	slli	r3,r2,3
    75b0:	003f8806 	br	73d4 <_free_r+0x134>

000075b4 <__sfvwrite_r>:
    75b4:	30800217 	ldw	r2,8(r6)
    75b8:	defff504 	addi	sp,sp,-44
    75bc:	df000915 	stw	fp,36(sp)
    75c0:	dd800715 	stw	r22,28(sp)
    75c4:	dc800315 	stw	r18,12(sp)
    75c8:	dfc00a15 	stw	ra,40(sp)
    75cc:	ddc00815 	stw	r23,32(sp)
    75d0:	dd400615 	stw	r21,24(sp)
    75d4:	dd000515 	stw	r20,20(sp)
    75d8:	dcc00415 	stw	r19,16(sp)
    75dc:	dc400215 	stw	r17,8(sp)
    75e0:	dc000115 	stw	r16,4(sp)
    75e4:	302d883a 	mov	r22,r6
    75e8:	2039883a 	mov	fp,r4
    75ec:	2825883a 	mov	r18,r5
    75f0:	10001c26 	beq	r2,zero,7664 <__sfvwrite_r+0xb0>
    75f4:	29c0030b 	ldhu	r7,12(r5)
    75f8:	3880020c 	andi	r2,r7,8
    75fc:	10002726 	beq	r2,zero,769c <__sfvwrite_r+0xe8>
    7600:	28800417 	ldw	r2,16(r5)
    7604:	10002526 	beq	r2,zero,769c <__sfvwrite_r+0xe8>
    7608:	3880008c 	andi	r2,r7,2
    760c:	b5400017 	ldw	r21,0(r22)
    7610:	10002826 	beq	r2,zero,76b4 <__sfvwrite_r+0x100>
    7614:	0021883a 	mov	r16,zero
    7618:	0023883a 	mov	r17,zero
    761c:	880d883a 	mov	r6,r17
    7620:	e009883a 	mov	r4,fp
    7624:	00810004 	movi	r2,1024
    7628:	80006e26 	beq	r16,zero,77e4 <__sfvwrite_r+0x230>
    762c:	800f883a 	mov	r7,r16
    7630:	91400717 	ldw	r5,28(r18)
    7634:	1400012e 	bgeu	r2,r16,763c <__sfvwrite_r+0x88>
    7638:	100f883a 	mov	r7,r2
    763c:	90c00917 	ldw	r3,36(r18)
    7640:	183ee83a 	callr	r3
    7644:	1007883a 	mov	r3,r2
    7648:	80a1c83a 	sub	r16,r16,r2
    764c:	88a3883a 	add	r17,r17,r2
    7650:	00806d0e 	bge	zero,r2,7808 <__sfvwrite_r+0x254>
    7654:	b0800217 	ldw	r2,8(r22)
    7658:	10c5c83a 	sub	r2,r2,r3
    765c:	b0800215 	stw	r2,8(r22)
    7660:	103fee1e 	bne	r2,zero,761c <__sfvwrite_r+0x68>
    7664:	0009883a 	mov	r4,zero
    7668:	2005883a 	mov	r2,r4
    766c:	dfc00a17 	ldw	ra,40(sp)
    7670:	df000917 	ldw	fp,36(sp)
    7674:	ddc00817 	ldw	r23,32(sp)
    7678:	dd800717 	ldw	r22,28(sp)
    767c:	dd400617 	ldw	r21,24(sp)
    7680:	dd000517 	ldw	r20,20(sp)
    7684:	dcc00417 	ldw	r19,16(sp)
    7688:	dc800317 	ldw	r18,12(sp)
    768c:	dc400217 	ldw	r17,8(sp)
    7690:	dc000117 	ldw	r16,4(sp)
    7694:	dec00b04 	addi	sp,sp,44
    7698:	f800283a 	ret
    769c:	000537c0 	call	537c <__swsetup_r>
    76a0:	1000e41e 	bne	r2,zero,7a34 <__sfvwrite_r+0x480>
    76a4:	91c0030b 	ldhu	r7,12(r18)
    76a8:	b5400017 	ldw	r21,0(r22)
    76ac:	3880008c 	andi	r2,r7,2
    76b0:	103fd81e 	bne	r2,zero,7614 <__sfvwrite_r+0x60>
    76b4:	3880004c 	andi	r2,r7,1
    76b8:	1005003a 	cmpeq	r2,r2,zero
    76bc:	10005726 	beq	r2,zero,781c <__sfvwrite_r+0x268>
    76c0:	0029883a 	mov	r20,zero
    76c4:	002f883a 	mov	r23,zero
    76c8:	a0004226 	beq	r20,zero,77d4 <__sfvwrite_r+0x220>
    76cc:	3880800c 	andi	r2,r7,512
    76d0:	94000217 	ldw	r16,8(r18)
    76d4:	10008b26 	beq	r2,zero,7904 <__sfvwrite_r+0x350>
    76d8:	800d883a 	mov	r6,r16
    76dc:	a400a536 	bltu	r20,r16,7974 <__sfvwrite_r+0x3c0>
    76e0:	3881200c 	andi	r2,r7,1152
    76e4:	10002726 	beq	r2,zero,7784 <__sfvwrite_r+0x1d0>
    76e8:	90800517 	ldw	r2,20(r18)
    76ec:	92000417 	ldw	r8,16(r18)
    76f0:	91400017 	ldw	r5,0(r18)
    76f4:	1087883a 	add	r3,r2,r2
    76f8:	1887883a 	add	r3,r3,r2
    76fc:	1808d7fa 	srli	r4,r3,31
    7700:	2a21c83a 	sub	r16,r5,r8
    7704:	80800044 	addi	r2,r16,1
    7708:	20c9883a 	add	r4,r4,r3
    770c:	2027d07a 	srai	r19,r4,1
    7710:	a085883a 	add	r2,r20,r2
    7714:	980d883a 	mov	r6,r19
    7718:	9880022e 	bgeu	r19,r2,7724 <__sfvwrite_r+0x170>
    771c:	1027883a 	mov	r19,r2
    7720:	100d883a 	mov	r6,r2
    7724:	3881000c 	andi	r2,r7,1024
    7728:	1000b826 	beq	r2,zero,7a0c <__sfvwrite_r+0x458>
    772c:	300b883a 	mov	r5,r6
    7730:	e009883a 	mov	r4,fp
    7734:	0007e280 	call	7e28 <_malloc_r>
    7738:	10003126 	beq	r2,zero,7800 <__sfvwrite_r+0x24c>
    773c:	91400417 	ldw	r5,16(r18)
    7740:	1009883a 	mov	r4,r2
    7744:	800d883a 	mov	r6,r16
    7748:	1023883a 	mov	r17,r2
    774c:	00032a40 	call	32a4 <memcpy>
    7750:	90c0030b 	ldhu	r3,12(r18)
    7754:	00beffc4 	movi	r2,-1025
    7758:	1886703a 	and	r3,r3,r2
    775c:	18c02014 	ori	r3,r3,128
    7760:	90c0030d 	sth	r3,12(r18)
    7764:	9c07c83a 	sub	r3,r19,r16
    7768:	8c05883a 	add	r2,r17,r16
    776c:	a00d883a 	mov	r6,r20
    7770:	a021883a 	mov	r16,r20
    7774:	90800015 	stw	r2,0(r18)
    7778:	90c00215 	stw	r3,8(r18)
    777c:	94400415 	stw	r17,16(r18)
    7780:	94c00515 	stw	r19,20(r18)
    7784:	91000017 	ldw	r4,0(r18)
    7788:	b80b883a 	mov	r5,r23
    778c:	a023883a 	mov	r17,r20
    7790:	000864c0 	call	864c <memmove>
    7794:	90c00217 	ldw	r3,8(r18)
    7798:	90800017 	ldw	r2,0(r18)
    779c:	a027883a 	mov	r19,r20
    77a0:	1c07c83a 	sub	r3,r3,r16
    77a4:	1405883a 	add	r2,r2,r16
    77a8:	90c00215 	stw	r3,8(r18)
    77ac:	a021883a 	mov	r16,r20
    77b0:	90800015 	stw	r2,0(r18)
    77b4:	b0800217 	ldw	r2,8(r22)
    77b8:	1405c83a 	sub	r2,r2,r16
    77bc:	b0800215 	stw	r2,8(r22)
    77c0:	103fa826 	beq	r2,zero,7664 <__sfvwrite_r+0xb0>
    77c4:	a469c83a 	sub	r20,r20,r17
    77c8:	91c0030b 	ldhu	r7,12(r18)
    77cc:	bcef883a 	add	r23,r23,r19
    77d0:	a03fbe1e 	bne	r20,zero,76cc <__sfvwrite_r+0x118>
    77d4:	adc00017 	ldw	r23,0(r21)
    77d8:	ad000117 	ldw	r20,4(r21)
    77dc:	ad400204 	addi	r21,r21,8
    77e0:	003fb906 	br	76c8 <__sfvwrite_r+0x114>
    77e4:	ac400017 	ldw	r17,0(r21)
    77e8:	ac000117 	ldw	r16,4(r21)
    77ec:	ad400204 	addi	r21,r21,8
    77f0:	003f8a06 	br	761c <__sfvwrite_r+0x68>
    77f4:	91400417 	ldw	r5,16(r18)
    77f8:	e009883a 	mov	r4,fp
    77fc:	00072a00 	call	72a0 <_free_r>
    7800:	00800304 	movi	r2,12
    7804:	e0800015 	stw	r2,0(fp)
    7808:	9080030b 	ldhu	r2,12(r18)
    780c:	013fffc4 	movi	r4,-1
    7810:	10801014 	ori	r2,r2,64
    7814:	9080030d 	sth	r2,12(r18)
    7818:	003f9306 	br	7668 <__sfvwrite_r+0xb4>
    781c:	0027883a 	mov	r19,zero
    7820:	002f883a 	mov	r23,zero
    7824:	d8000015 	stw	zero,0(sp)
    7828:	0029883a 	mov	r20,zero
    782c:	98001e26 	beq	r19,zero,78a8 <__sfvwrite_r+0x2f4>
    7830:	d8c00017 	ldw	r3,0(sp)
    7834:	1804c03a 	cmpne	r2,r3,zero
    7838:	10005e26 	beq	r2,zero,79b4 <__sfvwrite_r+0x400>
    783c:	9821883a 	mov	r16,r19
    7840:	a4c0012e 	bgeu	r20,r19,7848 <__sfvwrite_r+0x294>
    7844:	a021883a 	mov	r16,r20
    7848:	91000017 	ldw	r4,0(r18)
    784c:	90800417 	ldw	r2,16(r18)
    7850:	91800217 	ldw	r6,8(r18)
    7854:	91c00517 	ldw	r7,20(r18)
    7858:	1100022e 	bgeu	r2,r4,7864 <__sfvwrite_r+0x2b0>
    785c:	31e3883a 	add	r17,r6,r7
    7860:	8c001616 	blt	r17,r16,78bc <__sfvwrite_r+0x308>
    7864:	81c03816 	blt	r16,r7,7948 <__sfvwrite_r+0x394>
    7868:	90c00917 	ldw	r3,36(r18)
    786c:	91400717 	ldw	r5,28(r18)
    7870:	e009883a 	mov	r4,fp
    7874:	b80d883a 	mov	r6,r23
    7878:	183ee83a 	callr	r3
    787c:	1023883a 	mov	r17,r2
    7880:	00bfe10e 	bge	zero,r2,7808 <__sfvwrite_r+0x254>
    7884:	a469c83a 	sub	r20,r20,r17
    7888:	a0001826 	beq	r20,zero,78ec <__sfvwrite_r+0x338>
    788c:	b0800217 	ldw	r2,8(r22)
    7890:	1445c83a 	sub	r2,r2,r17
    7894:	b0800215 	stw	r2,8(r22)
    7898:	103f7226 	beq	r2,zero,7664 <__sfvwrite_r+0xb0>
    789c:	9c67c83a 	sub	r19,r19,r17
    78a0:	bc6f883a 	add	r23,r23,r17
    78a4:	983fe21e 	bne	r19,zero,7830 <__sfvwrite_r+0x27c>
    78a8:	adc00017 	ldw	r23,0(r21)
    78ac:	acc00117 	ldw	r19,4(r21)
    78b0:	ad400204 	addi	r21,r21,8
    78b4:	d8000015 	stw	zero,0(sp)
    78b8:	003fdc06 	br	782c <__sfvwrite_r+0x278>
    78bc:	b80b883a 	mov	r5,r23
    78c0:	880d883a 	mov	r6,r17
    78c4:	000864c0 	call	864c <memmove>
    78c8:	90c00017 	ldw	r3,0(r18)
    78cc:	e009883a 	mov	r4,fp
    78d0:	900b883a 	mov	r5,r18
    78d4:	1c47883a 	add	r3,r3,r17
    78d8:	90c00015 	stw	r3,0(r18)
    78dc:	0006c840 	call	6c84 <_fflush_r>
    78e0:	103fc91e 	bne	r2,zero,7808 <__sfvwrite_r+0x254>
    78e4:	a469c83a 	sub	r20,r20,r17
    78e8:	a03fe81e 	bne	r20,zero,788c <__sfvwrite_r+0x2d8>
    78ec:	e009883a 	mov	r4,fp
    78f0:	900b883a 	mov	r5,r18
    78f4:	0006c840 	call	6c84 <_fflush_r>
    78f8:	103fc31e 	bne	r2,zero,7808 <__sfvwrite_r+0x254>
    78fc:	d8000015 	stw	zero,0(sp)
    7900:	003fe206 	br	788c <__sfvwrite_r+0x2d8>
    7904:	91000017 	ldw	r4,0(r18)
    7908:	90800417 	ldw	r2,16(r18)
    790c:	1100022e 	bgeu	r2,r4,7918 <__sfvwrite_r+0x364>
    7910:	8023883a 	mov	r17,r16
    7914:	85003136 	bltu	r16,r20,79dc <__sfvwrite_r+0x428>
    7918:	91c00517 	ldw	r7,20(r18)
    791c:	a1c01836 	bltu	r20,r7,7980 <__sfvwrite_r+0x3cc>
    7920:	90c00917 	ldw	r3,36(r18)
    7924:	91400717 	ldw	r5,28(r18)
    7928:	e009883a 	mov	r4,fp
    792c:	b80d883a 	mov	r6,r23
    7930:	183ee83a 	callr	r3
    7934:	1021883a 	mov	r16,r2
    7938:	00bfb30e 	bge	zero,r2,7808 <__sfvwrite_r+0x254>
    793c:	1023883a 	mov	r17,r2
    7940:	1027883a 	mov	r19,r2
    7944:	003f9b06 	br	77b4 <__sfvwrite_r+0x200>
    7948:	b80b883a 	mov	r5,r23
    794c:	800d883a 	mov	r6,r16
    7950:	000864c0 	call	864c <memmove>
    7954:	90c00217 	ldw	r3,8(r18)
    7958:	90800017 	ldw	r2,0(r18)
    795c:	8023883a 	mov	r17,r16
    7960:	1c07c83a 	sub	r3,r3,r16
    7964:	1405883a 	add	r2,r2,r16
    7968:	90c00215 	stw	r3,8(r18)
    796c:	90800015 	stw	r2,0(r18)
    7970:	003fc406 	br	7884 <__sfvwrite_r+0x2d0>
    7974:	a00d883a 	mov	r6,r20
    7978:	a021883a 	mov	r16,r20
    797c:	003f8106 	br	7784 <__sfvwrite_r+0x1d0>
    7980:	b80b883a 	mov	r5,r23
    7984:	a00d883a 	mov	r6,r20
    7988:	000864c0 	call	864c <memmove>
    798c:	90c00217 	ldw	r3,8(r18)
    7990:	90800017 	ldw	r2,0(r18)
    7994:	a021883a 	mov	r16,r20
    7998:	1d07c83a 	sub	r3,r3,r20
    799c:	1505883a 	add	r2,r2,r20
    79a0:	a023883a 	mov	r17,r20
    79a4:	a027883a 	mov	r19,r20
    79a8:	90c00215 	stw	r3,8(r18)
    79ac:	90800015 	stw	r2,0(r18)
    79b0:	003f8006 	br	77b4 <__sfvwrite_r+0x200>
    79b4:	b809883a 	mov	r4,r23
    79b8:	01400284 	movi	r5,10
    79bc:	980d883a 	mov	r6,r19
    79c0:	00085680 	call	8568 <memchr>
    79c4:	10001726 	beq	r2,zero,7a24 <__sfvwrite_r+0x470>
    79c8:	15c5c83a 	sub	r2,r2,r23
    79cc:	15000044 	addi	r20,r2,1
    79d0:	00800044 	movi	r2,1
    79d4:	d8800015 	stw	r2,0(sp)
    79d8:	003f9806 	br	783c <__sfvwrite_r+0x288>
    79dc:	b80b883a 	mov	r5,r23
    79e0:	800d883a 	mov	r6,r16
    79e4:	000864c0 	call	864c <memmove>
    79e8:	90c00017 	ldw	r3,0(r18)
    79ec:	e009883a 	mov	r4,fp
    79f0:	900b883a 	mov	r5,r18
    79f4:	1c07883a 	add	r3,r3,r16
    79f8:	90c00015 	stw	r3,0(r18)
    79fc:	8027883a 	mov	r19,r16
    7a00:	0006c840 	call	6c84 <_fflush_r>
    7a04:	103f6b26 	beq	r2,zero,77b4 <__sfvwrite_r+0x200>
    7a08:	003f7f06 	br	7808 <__sfvwrite_r+0x254>
    7a0c:	400b883a 	mov	r5,r8
    7a10:	e009883a 	mov	r4,fp
    7a14:	00097200 	call	9720 <_realloc_r>
    7a18:	103f7626 	beq	r2,zero,77f4 <__sfvwrite_r+0x240>
    7a1c:	1023883a 	mov	r17,r2
    7a20:	003f5006 	br	7764 <__sfvwrite_r+0x1b0>
    7a24:	00c00044 	movi	r3,1
    7a28:	9d000044 	addi	r20,r19,1
    7a2c:	d8c00015 	stw	r3,0(sp)
    7a30:	003f8206 	br	783c <__sfvwrite_r+0x288>
    7a34:	9080030b 	ldhu	r2,12(r18)
    7a38:	00c00244 	movi	r3,9
    7a3c:	013fffc4 	movi	r4,-1
    7a40:	10801014 	ori	r2,r2,64
    7a44:	9080030d 	sth	r2,12(r18)
    7a48:	e0c00015 	stw	r3,0(fp)
    7a4c:	003f0606 	br	7668 <__sfvwrite_r+0xb4>

00007a50 <_fwalk_reent>:
    7a50:	defff704 	addi	sp,sp,-36
    7a54:	dcc00315 	stw	r19,12(sp)
    7a58:	24c0b804 	addi	r19,r4,736
    7a5c:	dd800615 	stw	r22,24(sp)
    7a60:	dd400515 	stw	r21,20(sp)
    7a64:	dfc00815 	stw	ra,32(sp)
    7a68:	ddc00715 	stw	r23,28(sp)
    7a6c:	dd000415 	stw	r20,16(sp)
    7a70:	dc800215 	stw	r18,8(sp)
    7a74:	dc400115 	stw	r17,4(sp)
    7a78:	dc000015 	stw	r16,0(sp)
    7a7c:	202b883a 	mov	r21,r4
    7a80:	282d883a 	mov	r22,r5
    7a84:	0006f0c0 	call	6f0c <__sfp_lock_acquire>
    7a88:	98002126 	beq	r19,zero,7b10 <_fwalk_reent+0xc0>
    7a8c:	002f883a 	mov	r23,zero
    7a90:	9c800117 	ldw	r18,4(r19)
    7a94:	9c000217 	ldw	r16,8(r19)
    7a98:	90bfffc4 	addi	r2,r18,-1
    7a9c:	10000d16 	blt	r2,zero,7ad4 <_fwalk_reent+0x84>
    7aa0:	0023883a 	mov	r17,zero
    7aa4:	053fffc4 	movi	r20,-1
    7aa8:	8080030f 	ldh	r2,12(r16)
    7aac:	8c400044 	addi	r17,r17,1
    7ab0:	10000626 	beq	r2,zero,7acc <_fwalk_reent+0x7c>
    7ab4:	8080038f 	ldh	r2,14(r16)
    7ab8:	800b883a 	mov	r5,r16
    7abc:	a809883a 	mov	r4,r21
    7ac0:	15000226 	beq	r2,r20,7acc <_fwalk_reent+0x7c>
    7ac4:	b03ee83a 	callr	r22
    7ac8:	b8aeb03a 	or	r23,r23,r2
    7acc:	84001704 	addi	r16,r16,92
    7ad0:	947ff51e 	bne	r18,r17,7aa8 <_fwalk_reent+0x58>
    7ad4:	9cc00017 	ldw	r19,0(r19)
    7ad8:	983fed1e 	bne	r19,zero,7a90 <_fwalk_reent+0x40>
    7adc:	0006f100 	call	6f10 <__sfp_lock_release>
    7ae0:	b805883a 	mov	r2,r23
    7ae4:	dfc00817 	ldw	ra,32(sp)
    7ae8:	ddc00717 	ldw	r23,28(sp)
    7aec:	dd800617 	ldw	r22,24(sp)
    7af0:	dd400517 	ldw	r21,20(sp)
    7af4:	dd000417 	ldw	r20,16(sp)
    7af8:	dcc00317 	ldw	r19,12(sp)
    7afc:	dc800217 	ldw	r18,8(sp)
    7b00:	dc400117 	ldw	r17,4(sp)
    7b04:	dc000017 	ldw	r16,0(sp)
    7b08:	dec00904 	addi	sp,sp,36
    7b0c:	f800283a 	ret
    7b10:	002f883a 	mov	r23,zero
    7b14:	003ff106 	br	7adc <_fwalk_reent+0x8c>

00007b18 <_fwalk>:
    7b18:	defff804 	addi	sp,sp,-32
    7b1c:	dcc00315 	stw	r19,12(sp)
    7b20:	24c0b804 	addi	r19,r4,736
    7b24:	dd400515 	stw	r21,20(sp)
    7b28:	dfc00715 	stw	ra,28(sp)
    7b2c:	dd800615 	stw	r22,24(sp)
    7b30:	dd000415 	stw	r20,16(sp)
    7b34:	dc800215 	stw	r18,8(sp)
    7b38:	dc400115 	stw	r17,4(sp)
    7b3c:	dc000015 	stw	r16,0(sp)
    7b40:	282b883a 	mov	r21,r5
    7b44:	0006f0c0 	call	6f0c <__sfp_lock_acquire>
    7b48:	98001f26 	beq	r19,zero,7bc8 <_fwalk+0xb0>
    7b4c:	002d883a 	mov	r22,zero
    7b50:	9c800117 	ldw	r18,4(r19)
    7b54:	9c000217 	ldw	r16,8(r19)
    7b58:	90bfffc4 	addi	r2,r18,-1
    7b5c:	10000c16 	blt	r2,zero,7b90 <_fwalk+0x78>
    7b60:	0023883a 	mov	r17,zero
    7b64:	053fffc4 	movi	r20,-1
    7b68:	8080030f 	ldh	r2,12(r16)
    7b6c:	8c400044 	addi	r17,r17,1
    7b70:	10000526 	beq	r2,zero,7b88 <_fwalk+0x70>
    7b74:	8080038f 	ldh	r2,14(r16)
    7b78:	8009883a 	mov	r4,r16
    7b7c:	15000226 	beq	r2,r20,7b88 <_fwalk+0x70>
    7b80:	a83ee83a 	callr	r21
    7b84:	b0acb03a 	or	r22,r22,r2
    7b88:	84001704 	addi	r16,r16,92
    7b8c:	947ff61e 	bne	r18,r17,7b68 <_fwalk+0x50>
    7b90:	9cc00017 	ldw	r19,0(r19)
    7b94:	983fee1e 	bne	r19,zero,7b50 <_fwalk+0x38>
    7b98:	0006f100 	call	6f10 <__sfp_lock_release>
    7b9c:	b005883a 	mov	r2,r22
    7ba0:	dfc00717 	ldw	ra,28(sp)
    7ba4:	dd800617 	ldw	r22,24(sp)
    7ba8:	dd400517 	ldw	r21,20(sp)
    7bac:	dd000417 	ldw	r20,16(sp)
    7bb0:	dcc00317 	ldw	r19,12(sp)
    7bb4:	dc800217 	ldw	r18,8(sp)
    7bb8:	dc400117 	ldw	r17,4(sp)
    7bbc:	dc000017 	ldw	r16,0(sp)
    7bc0:	dec00804 	addi	sp,sp,32
    7bc4:	f800283a 	ret
    7bc8:	002d883a 	mov	r22,zero
    7bcc:	003ff206 	br	7b98 <_fwalk+0x80>

00007bd0 <__locale_charset>:
    7bd0:	d0a00a17 	ldw	r2,-32728(gp)
    7bd4:	f800283a 	ret

00007bd8 <_localeconv_r>:
    7bd8:	00800074 	movhi	r2,1
    7bdc:	108dd804 	addi	r2,r2,14176
    7be0:	f800283a 	ret

00007be4 <localeconv>:
    7be4:	00800074 	movhi	r2,1
    7be8:	10965a04 	addi	r2,r2,22888
    7bec:	11000017 	ldw	r4,0(r2)
    7bf0:	0007bd81 	jmpi	7bd8 <_localeconv_r>

00007bf4 <_setlocale_r>:
    7bf4:	defffc04 	addi	sp,sp,-16
    7bf8:	00c00074 	movhi	r3,1
    7bfc:	18cdd304 	addi	r3,r3,14156
    7c00:	dc800215 	stw	r18,8(sp)
    7c04:	dc400115 	stw	r17,4(sp)
    7c08:	dc000015 	stw	r16,0(sp)
    7c0c:	2023883a 	mov	r17,r4
    7c10:	2825883a 	mov	r18,r5
    7c14:	dfc00315 	stw	ra,12(sp)
    7c18:	3021883a 	mov	r16,r6
    7c1c:	3009883a 	mov	r4,r6
    7c20:	180b883a 	mov	r5,r3
    7c24:	30000926 	beq	r6,zero,7c4c <_setlocale_r+0x58>
    7c28:	0009f400 	call	9f40 <strcmp>
    7c2c:	8009883a 	mov	r4,r16
    7c30:	01400074 	movhi	r5,1
    7c34:	294dbe04 	addi	r5,r5,14072
    7c38:	10000b1e 	bne	r2,zero,7c68 <_setlocale_r+0x74>
    7c3c:	8c000d15 	stw	r16,52(r17)
    7c40:	8c800c15 	stw	r18,48(r17)
    7c44:	00c00074 	movhi	r3,1
    7c48:	18cdd304 	addi	r3,r3,14156
    7c4c:	1805883a 	mov	r2,r3
    7c50:	dfc00317 	ldw	ra,12(sp)
    7c54:	dc800217 	ldw	r18,8(sp)
    7c58:	dc400117 	ldw	r17,4(sp)
    7c5c:	dc000017 	ldw	r16,0(sp)
    7c60:	dec00404 	addi	sp,sp,16
    7c64:	f800283a 	ret
    7c68:	0009f400 	call	9f40 <strcmp>
    7c6c:	0007883a 	mov	r3,zero
    7c70:	103ff226 	beq	r2,zero,7c3c <_setlocale_r+0x48>
    7c74:	003ff506 	br	7c4c <_setlocale_r+0x58>

00007c78 <setlocale>:
    7c78:	01800074 	movhi	r6,1
    7c7c:	31965a04 	addi	r6,r6,22888
    7c80:	2007883a 	mov	r3,r4
    7c84:	31000017 	ldw	r4,0(r6)
    7c88:	280d883a 	mov	r6,r5
    7c8c:	180b883a 	mov	r5,r3
    7c90:	0007bf41 	jmpi	7bf4 <_setlocale_r>

00007c94 <__smakebuf_r>:
    7c94:	2880030b 	ldhu	r2,12(r5)
    7c98:	deffed04 	addi	sp,sp,-76
    7c9c:	dc401015 	stw	r17,64(sp)
    7ca0:	1080008c 	andi	r2,r2,2
    7ca4:	dc000f15 	stw	r16,60(sp)
    7ca8:	dfc01215 	stw	ra,72(sp)
    7cac:	dc801115 	stw	r18,68(sp)
    7cb0:	2821883a 	mov	r16,r5
    7cb4:	2023883a 	mov	r17,r4
    7cb8:	10000b26 	beq	r2,zero,7ce8 <__smakebuf_r+0x54>
    7cbc:	28c010c4 	addi	r3,r5,67
    7cc0:	00800044 	movi	r2,1
    7cc4:	28800515 	stw	r2,20(r5)
    7cc8:	28c00415 	stw	r3,16(r5)
    7ccc:	28c00015 	stw	r3,0(r5)
    7cd0:	dfc01217 	ldw	ra,72(sp)
    7cd4:	dc801117 	ldw	r18,68(sp)
    7cd8:	dc401017 	ldw	r17,64(sp)
    7cdc:	dc000f17 	ldw	r16,60(sp)
    7ce0:	dec01304 	addi	sp,sp,76
    7ce4:	f800283a 	ret
    7ce8:	2940038f 	ldh	r5,14(r5)
    7cec:	28002116 	blt	r5,zero,7d74 <__smakebuf_r+0xe0>
    7cf0:	d80d883a 	mov	r6,sp
    7cf4:	000a3300 	call	a330 <_fstat_r>
    7cf8:	10001e16 	blt	r2,zero,7d74 <__smakebuf_r+0xe0>
    7cfc:	d8800117 	ldw	r2,4(sp)
    7d00:	00e00014 	movui	r3,32768
    7d04:	113c000c 	andi	r4,r2,61440
    7d08:	20c03126 	beq	r4,r3,7dd0 <__smakebuf_r+0x13c>
    7d0c:	8080030b 	ldhu	r2,12(r16)
    7d10:	00c80004 	movi	r3,8192
    7d14:	10820014 	ori	r2,r2,2048
    7d18:	8080030d 	sth	r2,12(r16)
    7d1c:	20c01e26 	beq	r4,r3,7d98 <__smakebuf_r+0x104>
    7d20:	04810004 	movi	r18,1024
    7d24:	8809883a 	mov	r4,r17
    7d28:	900b883a 	mov	r5,r18
    7d2c:	0007e280 	call	7e28 <_malloc_r>
    7d30:	1009883a 	mov	r4,r2
    7d34:	10003126 	beq	r2,zero,7dfc <__smakebuf_r+0x168>
    7d38:	80c0030b 	ldhu	r3,12(r16)
    7d3c:	00800034 	movhi	r2,0
    7d40:	109c0004 	addi	r2,r2,28672
    7d44:	88800f15 	stw	r2,60(r17)
    7d48:	18c02014 	ori	r3,r3,128
    7d4c:	84800515 	stw	r18,20(r16)
    7d50:	80c0030d 	sth	r3,12(r16)
    7d54:	81000415 	stw	r4,16(r16)
    7d58:	81000015 	stw	r4,0(r16)
    7d5c:	dfc01217 	ldw	ra,72(sp)
    7d60:	dc801117 	ldw	r18,68(sp)
    7d64:	dc401017 	ldw	r17,64(sp)
    7d68:	dc000f17 	ldw	r16,60(sp)
    7d6c:	dec01304 	addi	sp,sp,76
    7d70:	f800283a 	ret
    7d74:	80c0030b 	ldhu	r3,12(r16)
    7d78:	1880200c 	andi	r2,r3,128
    7d7c:	10000426 	beq	r2,zero,7d90 <__smakebuf_r+0xfc>
    7d80:	04801004 	movi	r18,64
    7d84:	18820014 	ori	r2,r3,2048
    7d88:	8080030d 	sth	r2,12(r16)
    7d8c:	003fe506 	br	7d24 <__smakebuf_r+0x90>
    7d90:	04810004 	movi	r18,1024
    7d94:	003ffb06 	br	7d84 <__smakebuf_r+0xf0>
    7d98:	8140038f 	ldh	r5,14(r16)
    7d9c:	8809883a 	mov	r4,r17
    7da0:	000a3a40 	call	a3a4 <_isatty_r>
    7da4:	103fde26 	beq	r2,zero,7d20 <__smakebuf_r+0x8c>
    7da8:	8080030b 	ldhu	r2,12(r16)
    7dac:	80c010c4 	addi	r3,r16,67
    7db0:	04810004 	movi	r18,1024
    7db4:	10800054 	ori	r2,r2,1
    7db8:	8080030d 	sth	r2,12(r16)
    7dbc:	00800044 	movi	r2,1
    7dc0:	80c00415 	stw	r3,16(r16)
    7dc4:	80800515 	stw	r2,20(r16)
    7dc8:	80c00015 	stw	r3,0(r16)
    7dcc:	003fd506 	br	7d24 <__smakebuf_r+0x90>
    7dd0:	80c00a17 	ldw	r3,40(r16)
    7dd4:	00800074 	movhi	r2,1
    7dd8:	10a77f04 	addi	r2,r2,-25092
    7ddc:	18bfcb1e 	bne	r3,r2,7d0c <__smakebuf_r+0x78>
    7de0:	8080030b 	ldhu	r2,12(r16)
    7de4:	00c10004 	movi	r3,1024
    7de8:	1825883a 	mov	r18,r3
    7dec:	10c4b03a 	or	r2,r2,r3
    7df0:	8080030d 	sth	r2,12(r16)
    7df4:	80c01315 	stw	r3,76(r16)
    7df8:	003fca06 	br	7d24 <__smakebuf_r+0x90>
    7dfc:	8100030b 	ldhu	r4,12(r16)
    7e00:	2080800c 	andi	r2,r4,512
    7e04:	103fb21e 	bne	r2,zero,7cd0 <__smakebuf_r+0x3c>
    7e08:	80c010c4 	addi	r3,r16,67
    7e0c:	21000094 	ori	r4,r4,2
    7e10:	00800044 	movi	r2,1
    7e14:	80800515 	stw	r2,20(r16)
    7e18:	8100030d 	sth	r4,12(r16)
    7e1c:	80c00415 	stw	r3,16(r16)
    7e20:	80c00015 	stw	r3,0(r16)
    7e24:	003faa06 	br	7cd0 <__smakebuf_r+0x3c>

00007e28 <_malloc_r>:
    7e28:	defff604 	addi	sp,sp,-40
    7e2c:	28c002c4 	addi	r3,r5,11
    7e30:	00800584 	movi	r2,22
    7e34:	dc800215 	stw	r18,8(sp)
    7e38:	dfc00915 	stw	ra,36(sp)
    7e3c:	df000815 	stw	fp,32(sp)
    7e40:	ddc00715 	stw	r23,28(sp)
    7e44:	dd800615 	stw	r22,24(sp)
    7e48:	dd400515 	stw	r21,20(sp)
    7e4c:	dd000415 	stw	r20,16(sp)
    7e50:	dcc00315 	stw	r19,12(sp)
    7e54:	dc400115 	stw	r17,4(sp)
    7e58:	dc000015 	stw	r16,0(sp)
    7e5c:	2025883a 	mov	r18,r4
    7e60:	10c01236 	bltu	r2,r3,7eac <_malloc_r+0x84>
    7e64:	04400404 	movi	r17,16
    7e68:	8940142e 	bgeu	r17,r5,7ebc <_malloc_r+0x94>
    7e6c:	00800304 	movi	r2,12
    7e70:	0007883a 	mov	r3,zero
    7e74:	90800015 	stw	r2,0(r18)
    7e78:	1805883a 	mov	r2,r3
    7e7c:	dfc00917 	ldw	ra,36(sp)
    7e80:	df000817 	ldw	fp,32(sp)
    7e84:	ddc00717 	ldw	r23,28(sp)
    7e88:	dd800617 	ldw	r22,24(sp)
    7e8c:	dd400517 	ldw	r21,20(sp)
    7e90:	dd000417 	ldw	r20,16(sp)
    7e94:	dcc00317 	ldw	r19,12(sp)
    7e98:	dc800217 	ldw	r18,8(sp)
    7e9c:	dc400117 	ldw	r17,4(sp)
    7ea0:	dc000017 	ldw	r16,0(sp)
    7ea4:	dec00a04 	addi	sp,sp,40
    7ea8:	f800283a 	ret
    7eac:	00bffe04 	movi	r2,-8
    7eb0:	18a2703a 	and	r17,r3,r2
    7eb4:	883fed16 	blt	r17,zero,7e6c <_malloc_r+0x44>
    7eb8:	897fec36 	bltu	r17,r5,7e6c <_malloc_r+0x44>
    7ebc:	9009883a 	mov	r4,r18
    7ec0:	000cde40 	call	cde4 <__malloc_lock>
    7ec4:	00807dc4 	movi	r2,503
    7ec8:	14402b2e 	bgeu	r2,r17,7f78 <_malloc_r+0x150>
    7ecc:	8806d27a 	srli	r3,r17,9
    7ed0:	18003f1e 	bne	r3,zero,7fd0 <_malloc_r+0x1a8>
    7ed4:	880cd0fa 	srli	r6,r17,3
    7ed8:	300490fa 	slli	r2,r6,3
    7edc:	02c00074 	movhi	r11,1
    7ee0:	5acfe204 	addi	r11,r11,16264
    7ee4:	12cb883a 	add	r5,r2,r11
    7ee8:	2c000317 	ldw	r16,12(r5)
    7eec:	580f883a 	mov	r7,r11
    7ef0:	2c00041e 	bne	r5,r16,7f04 <_malloc_r+0xdc>
    7ef4:	00000a06 	br	7f20 <_malloc_r+0xf8>
    7ef8:	1800860e 	bge	r3,zero,8114 <_malloc_r+0x2ec>
    7efc:	84000317 	ldw	r16,12(r16)
    7f00:	2c000726 	beq	r5,r16,7f20 <_malloc_r+0xf8>
    7f04:	80800117 	ldw	r2,4(r16)
    7f08:	00ffff04 	movi	r3,-4
    7f0c:	10c8703a 	and	r4,r2,r3
    7f10:	2447c83a 	sub	r3,r4,r17
    7f14:	008003c4 	movi	r2,15
    7f18:	10fff70e 	bge	r2,r3,7ef8 <_malloc_r+0xd0>
    7f1c:	31bfffc4 	addi	r6,r6,-1
    7f20:	32400044 	addi	r9,r6,1
    7f24:	02800074 	movhi	r10,1
    7f28:	528fe404 	addi	r10,r10,16272
    7f2c:	54000217 	ldw	r16,8(r10)
    7f30:	8280a026 	beq	r16,r10,81b4 <_malloc_r+0x38c>
    7f34:	80800117 	ldw	r2,4(r16)
    7f38:	00ffff04 	movi	r3,-4
    7f3c:	10ca703a 	and	r5,r2,r3
    7f40:	2c4dc83a 	sub	r6,r5,r17
    7f44:	008003c4 	movi	r2,15
    7f48:	11808316 	blt	r2,r6,8158 <_malloc_r+0x330>
    7f4c:	52800315 	stw	r10,12(r10)
    7f50:	52800215 	stw	r10,8(r10)
    7f54:	30002916 	blt	r6,zero,7ffc <_malloc_r+0x1d4>
    7f58:	8147883a 	add	r3,r16,r5
    7f5c:	18800117 	ldw	r2,4(r3)
    7f60:	9009883a 	mov	r4,r18
    7f64:	10800054 	ori	r2,r2,1
    7f68:	18800115 	stw	r2,4(r3)
    7f6c:	000ce040 	call	ce04 <__malloc_unlock>
    7f70:	80c00204 	addi	r3,r16,8
    7f74:	003fc006 	br	7e78 <_malloc_r+0x50>
    7f78:	02c00074 	movhi	r11,1
    7f7c:	5acfe204 	addi	r11,r11,16264
    7f80:	8ac5883a 	add	r2,r17,r11
    7f84:	14000317 	ldw	r16,12(r2)
    7f88:	580f883a 	mov	r7,r11
    7f8c:	8806d0fa 	srli	r3,r17,3
    7f90:	14006c26 	beq	r2,r16,8144 <_malloc_r+0x31c>
    7f94:	80c00117 	ldw	r3,4(r16)
    7f98:	00bfff04 	movi	r2,-4
    7f9c:	81800317 	ldw	r6,12(r16)
    7fa0:	1886703a 	and	r3,r3,r2
    7fa4:	80c7883a 	add	r3,r16,r3
    7fa8:	18800117 	ldw	r2,4(r3)
    7fac:	81400217 	ldw	r5,8(r16)
    7fb0:	9009883a 	mov	r4,r18
    7fb4:	10800054 	ori	r2,r2,1
    7fb8:	18800115 	stw	r2,4(r3)
    7fbc:	31400215 	stw	r5,8(r6)
    7fc0:	29800315 	stw	r6,12(r5)
    7fc4:	000ce040 	call	ce04 <__malloc_unlock>
    7fc8:	80c00204 	addi	r3,r16,8
    7fcc:	003faa06 	br	7e78 <_malloc_r+0x50>
    7fd0:	00800104 	movi	r2,4
    7fd4:	10c0052e 	bgeu	r2,r3,7fec <_malloc_r+0x1c4>
    7fd8:	00800504 	movi	r2,20
    7fdc:	10c07836 	bltu	r2,r3,81c0 <_malloc_r+0x398>
    7fe0:	198016c4 	addi	r6,r3,91
    7fe4:	300490fa 	slli	r2,r6,3
    7fe8:	003fbc06 	br	7edc <_malloc_r+0xb4>
    7fec:	8804d1ba 	srli	r2,r17,6
    7ff0:	11800e04 	addi	r6,r2,56
    7ff4:	300490fa 	slli	r2,r6,3
    7ff8:	003fb806 	br	7edc <_malloc_r+0xb4>
    7ffc:	00807fc4 	movi	r2,511
    8000:	1140bb36 	bltu	r2,r5,82f0 <_malloc_r+0x4c8>
    8004:	2806d0fa 	srli	r3,r5,3
    8008:	573ffe04 	addi	fp,r10,-8
    800c:	00800044 	movi	r2,1
    8010:	180890fa 	slli	r4,r3,3
    8014:	1807d0ba 	srai	r3,r3,2
    8018:	e1c00117 	ldw	r7,4(fp)
    801c:	5909883a 	add	r4,r11,r4
    8020:	21400217 	ldw	r5,8(r4)
    8024:	10c4983a 	sll	r2,r2,r3
    8028:	81000315 	stw	r4,12(r16)
    802c:	81400215 	stw	r5,8(r16)
    8030:	388eb03a 	or	r7,r7,r2
    8034:	2c000315 	stw	r16,12(r5)
    8038:	24000215 	stw	r16,8(r4)
    803c:	e1c00115 	stw	r7,4(fp)
    8040:	4807883a 	mov	r3,r9
    8044:	4800cd16 	blt	r9,zero,837c <_malloc_r+0x554>
    8048:	1807d0ba 	srai	r3,r3,2
    804c:	00800044 	movi	r2,1
    8050:	10c8983a 	sll	r4,r2,r3
    8054:	39004436 	bltu	r7,r4,8168 <_malloc_r+0x340>
    8058:	21c4703a 	and	r2,r4,r7
    805c:	10000a1e 	bne	r2,zero,8088 <_malloc_r+0x260>
    8060:	2109883a 	add	r4,r4,r4
    8064:	00bfff04 	movi	r2,-4
    8068:	4884703a 	and	r2,r9,r2
    806c:	3906703a 	and	r3,r7,r4
    8070:	12400104 	addi	r9,r2,4
    8074:	1800041e 	bne	r3,zero,8088 <_malloc_r+0x260>
    8078:	2109883a 	add	r4,r4,r4
    807c:	3904703a 	and	r2,r7,r4
    8080:	4a400104 	addi	r9,r9,4
    8084:	103ffc26 	beq	r2,zero,8078 <_malloc_r+0x250>
    8088:	480490fa 	slli	r2,r9,3
    808c:	4819883a 	mov	r12,r9
    8090:	023fff04 	movi	r8,-4
    8094:	589b883a 	add	r13,r11,r2
    8098:	6807883a 	mov	r3,r13
    809c:	014003c4 	movi	r5,15
    80a0:	1c000317 	ldw	r16,12(r3)
    80a4:	1c00041e 	bne	r3,r16,80b8 <_malloc_r+0x290>
    80a8:	0000a706 	br	8348 <_malloc_r+0x520>
    80ac:	3000ab0e 	bge	r6,zero,835c <_malloc_r+0x534>
    80b0:	84000317 	ldw	r16,12(r16)
    80b4:	1c00a426 	beq	r3,r16,8348 <_malloc_r+0x520>
    80b8:	80800117 	ldw	r2,4(r16)
    80bc:	1204703a 	and	r2,r2,r8
    80c0:	144dc83a 	sub	r6,r2,r17
    80c4:	29bff90e 	bge	r5,r6,80ac <_malloc_r+0x284>
    80c8:	81000317 	ldw	r4,12(r16)
    80cc:	80c00217 	ldw	r3,8(r16)
    80d0:	89400054 	ori	r5,r17,1
    80d4:	8445883a 	add	r2,r16,r17
    80d8:	20c00215 	stw	r3,8(r4)
    80dc:	19000315 	stw	r4,12(r3)
    80e0:	81400115 	stw	r5,4(r16)
    80e4:	1187883a 	add	r3,r2,r6
    80e8:	31000054 	ori	r4,r6,1
    80ec:	50800315 	stw	r2,12(r10)
    80f0:	50800215 	stw	r2,8(r10)
    80f4:	19800015 	stw	r6,0(r3)
    80f8:	11000115 	stw	r4,4(r2)
    80fc:	12800215 	stw	r10,8(r2)
    8100:	12800315 	stw	r10,12(r2)
    8104:	9009883a 	mov	r4,r18
    8108:	000ce040 	call	ce04 <__malloc_unlock>
    810c:	80c00204 	addi	r3,r16,8
    8110:	003f5906 	br	7e78 <_malloc_r+0x50>
    8114:	8109883a 	add	r4,r16,r4
    8118:	20800117 	ldw	r2,4(r4)
    811c:	80c00217 	ldw	r3,8(r16)
    8120:	81400317 	ldw	r5,12(r16)
    8124:	10800054 	ori	r2,r2,1
    8128:	20800115 	stw	r2,4(r4)
    812c:	28c00215 	stw	r3,8(r5)
    8130:	19400315 	stw	r5,12(r3)
    8134:	9009883a 	mov	r4,r18
    8138:	000ce040 	call	ce04 <__malloc_unlock>
    813c:	80c00204 	addi	r3,r16,8
    8140:	003f4d06 	br	7e78 <_malloc_r+0x50>
    8144:	80800204 	addi	r2,r16,8
    8148:	14000317 	ldw	r16,12(r2)
    814c:	143f911e 	bne	r2,r16,7f94 <_malloc_r+0x16c>
    8150:	1a400084 	addi	r9,r3,2
    8154:	003f7306 	br	7f24 <_malloc_r+0xfc>
    8158:	88c00054 	ori	r3,r17,1
    815c:	8445883a 	add	r2,r16,r17
    8160:	80c00115 	stw	r3,4(r16)
    8164:	003fdf06 	br	80e4 <_malloc_r+0x2bc>
    8168:	e4000217 	ldw	r16,8(fp)
    816c:	00bfff04 	movi	r2,-4
    8170:	80c00117 	ldw	r3,4(r16)
    8174:	802d883a 	mov	r22,r16
    8178:	18aa703a 	and	r21,r3,r2
    817c:	ac401636 	bltu	r21,r17,81d8 <_malloc_r+0x3b0>
    8180:	ac49c83a 	sub	r4,r21,r17
    8184:	008003c4 	movi	r2,15
    8188:	1100130e 	bge	r2,r4,81d8 <_malloc_r+0x3b0>
    818c:	88800054 	ori	r2,r17,1
    8190:	8447883a 	add	r3,r16,r17
    8194:	80800115 	stw	r2,4(r16)
    8198:	20800054 	ori	r2,r4,1
    819c:	18800115 	stw	r2,4(r3)
    81a0:	e0c00215 	stw	r3,8(fp)
    81a4:	9009883a 	mov	r4,r18
    81a8:	000ce040 	call	ce04 <__malloc_unlock>
    81ac:	80c00204 	addi	r3,r16,8
    81b0:	003f3106 	br	7e78 <_malloc_r+0x50>
    81b4:	39c00117 	ldw	r7,4(r7)
    81b8:	573ffe04 	addi	fp,r10,-8
    81bc:	003fa006 	br	8040 <_malloc_r+0x218>
    81c0:	00801504 	movi	r2,84
    81c4:	10c06736 	bltu	r2,r3,8364 <_malloc_r+0x53c>
    81c8:	8804d33a 	srli	r2,r17,12
    81cc:	11801b84 	addi	r6,r2,110
    81d0:	300490fa 	slli	r2,r6,3
    81d4:	003f4106 	br	7edc <_malloc_r+0xb4>
    81d8:	d0a80017 	ldw	r2,-24576(gp)
    81dc:	d0e00c17 	ldw	r3,-32720(gp)
    81e0:	053fffc4 	movi	r20,-1
    81e4:	10800404 	addi	r2,r2,16
    81e8:	88a7883a 	add	r19,r17,r2
    81ec:	1d000326 	beq	r3,r20,81fc <_malloc_r+0x3d4>
    81f0:	98c3ffc4 	addi	r3,r19,4095
    81f4:	00bc0004 	movi	r2,-4096
    81f8:	18a6703a 	and	r19,r3,r2
    81fc:	9009883a 	mov	r4,r18
    8200:	980b883a 	mov	r5,r19
    8204:	0009d840 	call	9d84 <_sbrk_r>
    8208:	1009883a 	mov	r4,r2
    820c:	15000426 	beq	r2,r20,8220 <_malloc_r+0x3f8>
    8210:	854b883a 	add	r5,r16,r21
    8214:	1029883a 	mov	r20,r2
    8218:	11405a2e 	bgeu	r2,r5,8384 <_malloc_r+0x55c>
    821c:	87000c26 	beq	r16,fp,8250 <_malloc_r+0x428>
    8220:	e4000217 	ldw	r16,8(fp)
    8224:	80c00117 	ldw	r3,4(r16)
    8228:	00bfff04 	movi	r2,-4
    822c:	1884703a 	and	r2,r3,r2
    8230:	14400336 	bltu	r2,r17,8240 <_malloc_r+0x418>
    8234:	1449c83a 	sub	r4,r2,r17
    8238:	008003c4 	movi	r2,15
    823c:	113fd316 	blt	r2,r4,818c <_malloc_r+0x364>
    8240:	9009883a 	mov	r4,r18
    8244:	000ce040 	call	ce04 <__malloc_unlock>
    8248:	0007883a 	mov	r3,zero
    824c:	003f0a06 	br	7e78 <_malloc_r+0x50>
    8250:	05c00074 	movhi	r23,1
    8254:	bdde5f04 	addi	r23,r23,31100
    8258:	b8800017 	ldw	r2,0(r23)
    825c:	988d883a 	add	r6,r19,r2
    8260:	b9800015 	stw	r6,0(r23)
    8264:	d0e00c17 	ldw	r3,-32720(gp)
    8268:	00bfffc4 	movi	r2,-1
    826c:	18808e26 	beq	r3,r2,84a8 <_malloc_r+0x680>
    8270:	2145c83a 	sub	r2,r4,r5
    8274:	3085883a 	add	r2,r6,r2
    8278:	b8800015 	stw	r2,0(r23)
    827c:	20c001cc 	andi	r3,r4,7
    8280:	18005f1e 	bne	r3,zero,8400 <_malloc_r+0x5d8>
    8284:	000b883a 	mov	r5,zero
    8288:	a4c5883a 	add	r2,r20,r19
    828c:	1083ffcc 	andi	r2,r2,4095
    8290:	00c40004 	movi	r3,4096
    8294:	1887c83a 	sub	r3,r3,r2
    8298:	28e7883a 	add	r19,r5,r3
    829c:	9009883a 	mov	r4,r18
    82a0:	980b883a 	mov	r5,r19
    82a4:	0009d840 	call	9d84 <_sbrk_r>
    82a8:	1007883a 	mov	r3,r2
    82ac:	00bfffc4 	movi	r2,-1
    82b0:	18807a26 	beq	r3,r2,849c <_malloc_r+0x674>
    82b4:	1d05c83a 	sub	r2,r3,r20
    82b8:	9885883a 	add	r2,r19,r2
    82bc:	10c00054 	ori	r3,r2,1
    82c0:	b8800017 	ldw	r2,0(r23)
    82c4:	a021883a 	mov	r16,r20
    82c8:	a0c00115 	stw	r3,4(r20)
    82cc:	9885883a 	add	r2,r19,r2
    82d0:	b8800015 	stw	r2,0(r23)
    82d4:	e5000215 	stw	r20,8(fp)
    82d8:	b7003626 	beq	r22,fp,83b4 <_malloc_r+0x58c>
    82dc:	018003c4 	movi	r6,15
    82e0:	35404b36 	bltu	r6,r21,8410 <_malloc_r+0x5e8>
    82e4:	00800044 	movi	r2,1
    82e8:	a0800115 	stw	r2,4(r20)
    82ec:	003fcd06 	br	8224 <_malloc_r+0x3fc>
    82f0:	2808d27a 	srli	r4,r5,9
    82f4:	2000371e 	bne	r4,zero,83d4 <_malloc_r+0x5ac>
    82f8:	2808d0fa 	srli	r4,r5,3
    82fc:	200690fa 	slli	r3,r4,3
    8300:	1ad1883a 	add	r8,r3,r11
    8304:	41800217 	ldw	r6,8(r8)
    8308:	41805b26 	beq	r8,r6,8478 <_malloc_r+0x650>
    830c:	30800117 	ldw	r2,4(r6)
    8310:	00ffff04 	movi	r3,-4
    8314:	10c4703a 	and	r2,r2,r3
    8318:	2880022e 	bgeu	r5,r2,8324 <_malloc_r+0x4fc>
    831c:	31800217 	ldw	r6,8(r6)
    8320:	41bffa1e 	bne	r8,r6,830c <_malloc_r+0x4e4>
    8324:	32000317 	ldw	r8,12(r6)
    8328:	39c00117 	ldw	r7,4(r7)
    832c:	82000315 	stw	r8,12(r16)
    8330:	81800215 	stw	r6,8(r16)
    8334:	07000074 	movhi	fp,1
    8338:	e70fe204 	addi	fp,fp,16264
    833c:	34000315 	stw	r16,12(r6)
    8340:	44000215 	stw	r16,8(r8)
    8344:	003f3e06 	br	8040 <_malloc_r+0x218>
    8348:	63000044 	addi	r12,r12,1
    834c:	608000cc 	andi	r2,r12,3
    8350:	10005d26 	beq	r2,zero,84c8 <_malloc_r+0x6a0>
    8354:	18c00204 	addi	r3,r3,8
    8358:	003f5106 	br	80a0 <_malloc_r+0x278>
    835c:	8089883a 	add	r4,r16,r2
    8360:	003f6d06 	br	8118 <_malloc_r+0x2f0>
    8364:	00805504 	movi	r2,340
    8368:	10c02036 	bltu	r2,r3,83ec <_malloc_r+0x5c4>
    836c:	8804d3fa 	srli	r2,r17,15
    8370:	11801dc4 	addi	r6,r2,119
    8374:	300490fa 	slli	r2,r6,3
    8378:	003ed806 	br	7edc <_malloc_r+0xb4>
    837c:	48c000c4 	addi	r3,r9,3
    8380:	003f3106 	br	8048 <_malloc_r+0x220>
    8384:	05c00074 	movhi	r23,1
    8388:	bdde5f04 	addi	r23,r23,31100
    838c:	b8800017 	ldw	r2,0(r23)
    8390:	988d883a 	add	r6,r19,r2
    8394:	b9800015 	stw	r6,0(r23)
    8398:	293fb21e 	bne	r5,r4,8264 <_malloc_r+0x43c>
    839c:	2083ffcc 	andi	r2,r4,4095
    83a0:	103fb01e 	bne	r2,zero,8264 <_malloc_r+0x43c>
    83a4:	e4000217 	ldw	r16,8(fp)
    83a8:	9d45883a 	add	r2,r19,r21
    83ac:	10800054 	ori	r2,r2,1
    83b0:	80800115 	stw	r2,4(r16)
    83b4:	b8c00017 	ldw	r3,0(r23)
    83b8:	d0a80117 	ldw	r2,-24572(gp)
    83bc:	10c0012e 	bgeu	r2,r3,83c4 <_malloc_r+0x59c>
    83c0:	d0e80115 	stw	r3,-24572(gp)
    83c4:	d0a80217 	ldw	r2,-24568(gp)
    83c8:	10ff962e 	bgeu	r2,r3,8224 <_malloc_r+0x3fc>
    83cc:	d0e80215 	stw	r3,-24568(gp)
    83d0:	003f9406 	br	8224 <_malloc_r+0x3fc>
    83d4:	00800104 	movi	r2,4
    83d8:	11001e36 	bltu	r2,r4,8454 <_malloc_r+0x62c>
    83dc:	2804d1ba 	srli	r2,r5,6
    83e0:	11000e04 	addi	r4,r2,56
    83e4:	200690fa 	slli	r3,r4,3
    83e8:	003fc506 	br	8300 <_malloc_r+0x4d8>
    83ec:	00815504 	movi	r2,1364
    83f0:	10c01d2e 	bgeu	r2,r3,8468 <_malloc_r+0x640>
    83f4:	01801f84 	movi	r6,126
    83f8:	0080fc04 	movi	r2,1008
    83fc:	003eb706 	br	7edc <_malloc_r+0xb4>
    8400:	00800204 	movi	r2,8
    8404:	10cbc83a 	sub	r5,r2,r3
    8408:	2169883a 	add	r20,r4,r5
    840c:	003f9e06 	br	8288 <_malloc_r+0x460>
    8410:	00bffe04 	movi	r2,-8
    8414:	a93ffd04 	addi	r4,r21,-12
    8418:	2088703a 	and	r4,r4,r2
    841c:	b10b883a 	add	r5,r22,r4
    8420:	00c00144 	movi	r3,5
    8424:	28c00215 	stw	r3,8(r5)
    8428:	28c00115 	stw	r3,4(r5)
    842c:	b0800117 	ldw	r2,4(r22)
    8430:	1080004c 	andi	r2,r2,1
    8434:	2084b03a 	or	r2,r4,r2
    8438:	b0800115 	stw	r2,4(r22)
    843c:	313fdd2e 	bgeu	r6,r4,83b4 <_malloc_r+0x58c>
    8440:	b1400204 	addi	r5,r22,8
    8444:	9009883a 	mov	r4,r18
    8448:	00072a00 	call	72a0 <_free_r>
    844c:	e4000217 	ldw	r16,8(fp)
    8450:	003fd806 	br	83b4 <_malloc_r+0x58c>
    8454:	00800504 	movi	r2,20
    8458:	11001536 	bltu	r2,r4,84b0 <_malloc_r+0x688>
    845c:	210016c4 	addi	r4,r4,91
    8460:	200690fa 	slli	r3,r4,3
    8464:	003fa606 	br	8300 <_malloc_r+0x4d8>
    8468:	8804d4ba 	srli	r2,r17,18
    846c:	11801f04 	addi	r6,r2,124
    8470:	300490fa 	slli	r2,r6,3
    8474:	003e9906 	br	7edc <_malloc_r+0xb4>
    8478:	2009d0ba 	srai	r4,r4,2
    847c:	01400074 	movhi	r5,1
    8480:	294fe204 	addi	r5,r5,16264
    8484:	00c00044 	movi	r3,1
    8488:	28800117 	ldw	r2,4(r5)
    848c:	1906983a 	sll	r3,r3,r4
    8490:	10c4b03a 	or	r2,r2,r3
    8494:	28800115 	stw	r2,4(r5)
    8498:	003fa306 	br	8328 <_malloc_r+0x500>
    849c:	0027883a 	mov	r19,zero
    84a0:	00c00044 	movi	r3,1
    84a4:	003f8606 	br	82c0 <_malloc_r+0x498>
    84a8:	d1200c15 	stw	r4,-32720(gp)
    84ac:	003f7306 	br	827c <_malloc_r+0x454>
    84b0:	00801504 	movi	r2,84
    84b4:	11001936 	bltu	r2,r4,851c <_malloc_r+0x6f4>
    84b8:	2804d33a 	srli	r2,r5,12
    84bc:	11001b84 	addi	r4,r2,110
    84c0:	200690fa 	slli	r3,r4,3
    84c4:	003f8e06 	br	8300 <_malloc_r+0x4d8>
    84c8:	480b883a 	mov	r5,r9
    84cc:	6807883a 	mov	r3,r13
    84d0:	288000cc 	andi	r2,r5,3
    84d4:	18fffe04 	addi	r3,r3,-8
    84d8:	297fffc4 	addi	r5,r5,-1
    84dc:	10001526 	beq	r2,zero,8534 <_malloc_r+0x70c>
    84e0:	18800217 	ldw	r2,8(r3)
    84e4:	10fffa26 	beq	r2,r3,84d0 <_malloc_r+0x6a8>
    84e8:	2109883a 	add	r4,r4,r4
    84ec:	393f1e36 	bltu	r7,r4,8168 <_malloc_r+0x340>
    84f0:	203f1d26 	beq	r4,zero,8168 <_malloc_r+0x340>
    84f4:	21c4703a 	and	r2,r4,r7
    84f8:	10000226 	beq	r2,zero,8504 <_malloc_r+0x6dc>
    84fc:	6013883a 	mov	r9,r12
    8500:	003ee106 	br	8088 <_malloc_r+0x260>
    8504:	2109883a 	add	r4,r4,r4
    8508:	3904703a 	and	r2,r7,r4
    850c:	63000104 	addi	r12,r12,4
    8510:	103ffc26 	beq	r2,zero,8504 <_malloc_r+0x6dc>
    8514:	6013883a 	mov	r9,r12
    8518:	003edb06 	br	8088 <_malloc_r+0x260>
    851c:	00805504 	movi	r2,340
    8520:	11000836 	bltu	r2,r4,8544 <_malloc_r+0x71c>
    8524:	2804d3fa 	srli	r2,r5,15
    8528:	11001dc4 	addi	r4,r2,119
    852c:	200690fa 	slli	r3,r4,3
    8530:	003f7306 	br	8300 <_malloc_r+0x4d8>
    8534:	0104303a 	nor	r2,zero,r4
    8538:	388e703a 	and	r7,r7,r2
    853c:	e1c00115 	stw	r7,4(fp)
    8540:	003fe906 	br	84e8 <_malloc_r+0x6c0>
    8544:	00815504 	movi	r2,1364
    8548:	1100032e 	bgeu	r2,r4,8558 <_malloc_r+0x730>
    854c:	01001f84 	movi	r4,126
    8550:	00c0fc04 	movi	r3,1008
    8554:	003f6a06 	br	8300 <_malloc_r+0x4d8>
    8558:	2804d4ba 	srli	r2,r5,18
    855c:	11001f04 	addi	r4,r2,124
    8560:	200690fa 	slli	r3,r4,3
    8564:	003f6606 	br	8300 <_malloc_r+0x4d8>

00008568 <memchr>:
    8568:	008000c4 	movi	r2,3
    856c:	29403fcc 	andi	r5,r5,255
    8570:	2007883a 	mov	r3,r4
    8574:	1180022e 	bgeu	r2,r6,8580 <memchr+0x18>
    8578:	2084703a 	and	r2,r4,r2
    857c:	10000b26 	beq	r2,zero,85ac <memchr+0x44>
    8580:	313fffc4 	addi	r4,r6,-1
    8584:	3000051e 	bne	r6,zero,859c <memchr+0x34>
    8588:	00002c06 	br	863c <memchr+0xd4>
    858c:	213fffc4 	addi	r4,r4,-1
    8590:	00bfffc4 	movi	r2,-1
    8594:	18c00044 	addi	r3,r3,1
    8598:	20802826 	beq	r4,r2,863c <memchr+0xd4>
    859c:	18800003 	ldbu	r2,0(r3)
    85a0:	28bffa1e 	bne	r5,r2,858c <memchr+0x24>
    85a4:	1805883a 	mov	r2,r3
    85a8:	f800283a 	ret
    85ac:	0011883a 	mov	r8,zero
    85b0:	0007883a 	mov	r3,zero
    85b4:	01c00104 	movi	r7,4
    85b8:	4004923a 	slli	r2,r8,8
    85bc:	18c00044 	addi	r3,r3,1
    85c0:	1151883a 	add	r8,r2,r5
    85c4:	19fffc1e 	bne	r3,r7,85b8 <memchr+0x50>
    85c8:	02bfbff4 	movhi	r10,65279
    85cc:	52bfbfc4 	addi	r10,r10,-257
    85d0:	02602074 	movhi	r9,32897
    85d4:	4a602004 	addi	r9,r9,-32640
    85d8:	02c000c4 	movi	r11,3
    85dc:	20800017 	ldw	r2,0(r4)
    85e0:	31bfff04 	addi	r6,r6,-4
    85e4:	200f883a 	mov	r7,r4
    85e8:	1204f03a 	xor	r2,r2,r8
    85ec:	1287883a 	add	r3,r2,r10
    85f0:	1a46703a 	and	r3,r3,r9
    85f4:	0084303a 	nor	r2,zero,r2
    85f8:	10c4703a 	and	r2,r2,r3
    85fc:	10000b26 	beq	r2,zero,862c <memchr+0xc4>
    8600:	20800003 	ldbu	r2,0(r4)
    8604:	28800f26 	beq	r5,r2,8644 <memchr+0xdc>
    8608:	20800043 	ldbu	r2,1(r4)
    860c:	21c00044 	addi	r7,r4,1
    8610:	28800c26 	beq	r5,r2,8644 <memchr+0xdc>
    8614:	20800083 	ldbu	r2,2(r4)
    8618:	21c00084 	addi	r7,r4,2
    861c:	28800926 	beq	r5,r2,8644 <memchr+0xdc>
    8620:	208000c3 	ldbu	r2,3(r4)
    8624:	21c000c4 	addi	r7,r4,3
    8628:	28800626 	beq	r5,r2,8644 <memchr+0xdc>
    862c:	21000104 	addi	r4,r4,4
    8630:	59bfea36 	bltu	r11,r6,85dc <memchr+0x74>
    8634:	2007883a 	mov	r3,r4
    8638:	003fd106 	br	8580 <memchr+0x18>
    863c:	0005883a 	mov	r2,zero
    8640:	f800283a 	ret
    8644:	3805883a 	mov	r2,r7
    8648:	f800283a 	ret

0000864c <memmove>:
    864c:	2807883a 	mov	r3,r5
    8650:	2011883a 	mov	r8,r4
    8654:	29000c2e 	bgeu	r5,r4,8688 <memmove+0x3c>
    8658:	298f883a 	add	r7,r5,r6
    865c:	21c00a2e 	bgeu	r4,r7,8688 <memmove+0x3c>
    8660:	30000726 	beq	r6,zero,8680 <memmove+0x34>
    8664:	2187883a 	add	r3,r4,r6
    8668:	198dc83a 	sub	r6,r3,r6
    866c:	39ffffc4 	addi	r7,r7,-1
    8670:	38800003 	ldbu	r2,0(r7)
    8674:	18ffffc4 	addi	r3,r3,-1
    8678:	18800005 	stb	r2,0(r3)
    867c:	19bffb1e 	bne	r3,r6,866c <memmove+0x20>
    8680:	2005883a 	mov	r2,r4
    8684:	f800283a 	ret
    8688:	01c003c4 	movi	r7,15
    868c:	39800a36 	bltu	r7,r6,86b8 <memmove+0x6c>
    8690:	303ffb26 	beq	r6,zero,8680 <memmove+0x34>
    8694:	400f883a 	mov	r7,r8
    8698:	320d883a 	add	r6,r6,r8
    869c:	28800003 	ldbu	r2,0(r5)
    86a0:	29400044 	addi	r5,r5,1
    86a4:	38800005 	stb	r2,0(r7)
    86a8:	39c00044 	addi	r7,r7,1
    86ac:	39bffb1e 	bne	r7,r6,869c <memmove+0x50>
    86b0:	2005883a 	mov	r2,r4
    86b4:	f800283a 	ret
    86b8:	1904b03a 	or	r2,r3,r4
    86bc:	108000cc 	andi	r2,r2,3
    86c0:	103ff31e 	bne	r2,zero,8690 <memmove+0x44>
    86c4:	3811883a 	mov	r8,r7
    86c8:	180b883a 	mov	r5,r3
    86cc:	200f883a 	mov	r7,r4
    86d0:	28c00017 	ldw	r3,0(r5)
    86d4:	31bffc04 	addi	r6,r6,-16
    86d8:	38c00015 	stw	r3,0(r7)
    86dc:	28800117 	ldw	r2,4(r5)
    86e0:	38800115 	stw	r2,4(r7)
    86e4:	28c00217 	ldw	r3,8(r5)
    86e8:	38c00215 	stw	r3,8(r7)
    86ec:	28800317 	ldw	r2,12(r5)
    86f0:	29400404 	addi	r5,r5,16
    86f4:	38800315 	stw	r2,12(r7)
    86f8:	39c00404 	addi	r7,r7,16
    86fc:	41bff436 	bltu	r8,r6,86d0 <memmove+0x84>
    8700:	008000c4 	movi	r2,3
    8704:	1180072e 	bgeu	r2,r6,8724 <memmove+0xd8>
    8708:	1007883a 	mov	r3,r2
    870c:	28800017 	ldw	r2,0(r5)
    8710:	31bfff04 	addi	r6,r6,-4
    8714:	29400104 	addi	r5,r5,4
    8718:	38800015 	stw	r2,0(r7)
    871c:	39c00104 	addi	r7,r7,4
    8720:	19bffa36 	bltu	r3,r6,870c <memmove+0xc0>
    8724:	3811883a 	mov	r8,r7
    8728:	003fd906 	br	8690 <memmove+0x44>

0000872c <_Bfree>:
    872c:	28000826 	beq	r5,zero,8750 <_Bfree+0x24>
    8730:	28800117 	ldw	r2,4(r5)
    8734:	21001317 	ldw	r4,76(r4)
    8738:	1085883a 	add	r2,r2,r2
    873c:	1085883a 	add	r2,r2,r2
    8740:	1105883a 	add	r2,r2,r4
    8744:	10c00017 	ldw	r3,0(r2)
    8748:	28c00015 	stw	r3,0(r5)
    874c:	11400015 	stw	r5,0(r2)
    8750:	f800283a 	ret

00008754 <__hi0bits>:
    8754:	20bfffec 	andhi	r2,r4,65535
    8758:	10001426 	beq	r2,zero,87ac <__hi0bits+0x58>
    875c:	0007883a 	mov	r3,zero
    8760:	20bfc02c 	andhi	r2,r4,65280
    8764:	1000021e 	bne	r2,zero,8770 <__hi0bits+0x1c>
    8768:	2008923a 	slli	r4,r4,8
    876c:	18c00204 	addi	r3,r3,8
    8770:	20bc002c 	andhi	r2,r4,61440
    8774:	1000021e 	bne	r2,zero,8780 <__hi0bits+0x2c>
    8778:	2008913a 	slli	r4,r4,4
    877c:	18c00104 	addi	r3,r3,4
    8780:	20b0002c 	andhi	r2,r4,49152
    8784:	1000031e 	bne	r2,zero,8794 <__hi0bits+0x40>
    8788:	2105883a 	add	r2,r4,r4
    878c:	18c00084 	addi	r3,r3,2
    8790:	1089883a 	add	r4,r2,r2
    8794:	20000316 	blt	r4,zero,87a4 <__hi0bits+0x50>
    8798:	2090002c 	andhi	r2,r4,16384
    879c:	10000626 	beq	r2,zero,87b8 <__hi0bits+0x64>
    87a0:	18c00044 	addi	r3,r3,1
    87a4:	1805883a 	mov	r2,r3
    87a8:	f800283a 	ret
    87ac:	2008943a 	slli	r4,r4,16
    87b0:	00c00404 	movi	r3,16
    87b4:	003fea06 	br	8760 <__hi0bits+0xc>
    87b8:	00c00804 	movi	r3,32
    87bc:	1805883a 	mov	r2,r3
    87c0:	f800283a 	ret

000087c4 <__lo0bits>:
    87c4:	20c00017 	ldw	r3,0(r4)
    87c8:	188001cc 	andi	r2,r3,7
    87cc:	10000a26 	beq	r2,zero,87f8 <__lo0bits+0x34>
    87d0:	1880004c 	andi	r2,r3,1
    87d4:	1005003a 	cmpeq	r2,r2,zero
    87d8:	10002126 	beq	r2,zero,8860 <__lo0bits+0x9c>
    87dc:	1880008c 	andi	r2,r3,2
    87e0:	1000251e 	bne	r2,zero,8878 <__lo0bits+0xb4>
    87e4:	1804d0ba 	srli	r2,r3,2
    87e8:	01400084 	movi	r5,2
    87ec:	20800015 	stw	r2,0(r4)
    87f0:	2805883a 	mov	r2,r5
    87f4:	f800283a 	ret
    87f8:	18bfffcc 	andi	r2,r3,65535
    87fc:	10001526 	beq	r2,zero,8854 <__lo0bits+0x90>
    8800:	000b883a 	mov	r5,zero
    8804:	18803fcc 	andi	r2,r3,255
    8808:	1000021e 	bne	r2,zero,8814 <__lo0bits+0x50>
    880c:	1806d23a 	srli	r3,r3,8
    8810:	29400204 	addi	r5,r5,8
    8814:	188003cc 	andi	r2,r3,15
    8818:	1000021e 	bne	r2,zero,8824 <__lo0bits+0x60>
    881c:	1806d13a 	srli	r3,r3,4
    8820:	29400104 	addi	r5,r5,4
    8824:	188000cc 	andi	r2,r3,3
    8828:	1000021e 	bne	r2,zero,8834 <__lo0bits+0x70>
    882c:	1806d0ba 	srli	r3,r3,2
    8830:	29400084 	addi	r5,r5,2
    8834:	1880004c 	andi	r2,r3,1
    8838:	1000031e 	bne	r2,zero,8848 <__lo0bits+0x84>
    883c:	1806d07a 	srli	r3,r3,1
    8840:	18000a26 	beq	r3,zero,886c <__lo0bits+0xa8>
    8844:	29400044 	addi	r5,r5,1
    8848:	2805883a 	mov	r2,r5
    884c:	20c00015 	stw	r3,0(r4)
    8850:	f800283a 	ret
    8854:	1806d43a 	srli	r3,r3,16
    8858:	01400404 	movi	r5,16
    885c:	003fe906 	br	8804 <__lo0bits+0x40>
    8860:	000b883a 	mov	r5,zero
    8864:	2805883a 	mov	r2,r5
    8868:	f800283a 	ret
    886c:	01400804 	movi	r5,32
    8870:	2805883a 	mov	r2,r5
    8874:	f800283a 	ret
    8878:	1804d07a 	srli	r2,r3,1
    887c:	01400044 	movi	r5,1
    8880:	20800015 	stw	r2,0(r4)
    8884:	003fda06 	br	87f0 <__lo0bits+0x2c>

00008888 <__mcmp>:
    8888:	20800417 	ldw	r2,16(r4)
    888c:	28c00417 	ldw	r3,16(r5)
    8890:	10cfc83a 	sub	r7,r2,r3
    8894:	38000c1e 	bne	r7,zero,88c8 <__mcmp+0x40>
    8898:	18c5883a 	add	r2,r3,r3
    889c:	1085883a 	add	r2,r2,r2
    88a0:	10c00504 	addi	r3,r2,20
    88a4:	21000504 	addi	r4,r4,20
    88a8:	28cb883a 	add	r5,r5,r3
    88ac:	2085883a 	add	r2,r4,r2
    88b0:	10bfff04 	addi	r2,r2,-4
    88b4:	297fff04 	addi	r5,r5,-4
    88b8:	11800017 	ldw	r6,0(r2)
    88bc:	28c00017 	ldw	r3,0(r5)
    88c0:	30c0031e 	bne	r6,r3,88d0 <__mcmp+0x48>
    88c4:	20bffa36 	bltu	r4,r2,88b0 <__mcmp+0x28>
    88c8:	3805883a 	mov	r2,r7
    88cc:	f800283a 	ret
    88d0:	30c00336 	bltu	r6,r3,88e0 <__mcmp+0x58>
    88d4:	01c00044 	movi	r7,1
    88d8:	3805883a 	mov	r2,r7
    88dc:	f800283a 	ret
    88e0:	01ffffc4 	movi	r7,-1
    88e4:	003ff806 	br	88c8 <__mcmp+0x40>

000088e8 <__ulp>:
    88e8:	295ffc2c 	andhi	r5,r5,32752
    88ec:	013f3034 	movhi	r4,64704
    88f0:	290b883a 	add	r5,r5,r4
    88f4:	0145c83a 	sub	r2,zero,r5
    88f8:	1007d53a 	srai	r3,r2,20
    88fc:	000d883a 	mov	r6,zero
    8900:	0140040e 	bge	zero,r5,8914 <__ulp+0x2c>
    8904:	280f883a 	mov	r7,r5
    8908:	3807883a 	mov	r3,r7
    890c:	3005883a 	mov	r2,r6
    8910:	f800283a 	ret
    8914:	008004c4 	movi	r2,19
    8918:	193ffb04 	addi	r4,r3,-20
    891c:	10c00c0e 	bge	r2,r3,8950 <__ulp+0x68>
    8920:	008007c4 	movi	r2,31
    8924:	1107c83a 	sub	r3,r2,r4
    8928:	00800784 	movi	r2,30
    892c:	01400044 	movi	r5,1
    8930:	11000216 	blt	r2,r4,893c <__ulp+0x54>
    8934:	00800044 	movi	r2,1
    8938:	10ca983a 	sll	r5,r2,r3
    893c:	000f883a 	mov	r7,zero
    8940:	280d883a 	mov	r6,r5
    8944:	3807883a 	mov	r3,r7
    8948:	3005883a 	mov	r2,r6
    894c:	f800283a 	ret
    8950:	00800234 	movhi	r2,8
    8954:	10cfd83a 	sra	r7,r2,r3
    8958:	000d883a 	mov	r6,zero
    895c:	3005883a 	mov	r2,r6
    8960:	3807883a 	mov	r3,r7
    8964:	f800283a 	ret

00008968 <__b2d>:
    8968:	20800417 	ldw	r2,16(r4)
    896c:	defff904 	addi	sp,sp,-28
    8970:	dd000415 	stw	r20,16(sp)
    8974:	1085883a 	add	r2,r2,r2
    8978:	25000504 	addi	r20,r4,20
    897c:	1085883a 	add	r2,r2,r2
    8980:	dc000015 	stw	r16,0(sp)
    8984:	a0a1883a 	add	r16,r20,r2
    8988:	dd400515 	stw	r21,20(sp)
    898c:	857fff17 	ldw	r21,-4(r16)
    8990:	dc400115 	stw	r17,4(sp)
    8994:	dfc00615 	stw	ra,24(sp)
    8998:	a809883a 	mov	r4,r21
    899c:	2823883a 	mov	r17,r5
    89a0:	dcc00315 	stw	r19,12(sp)
    89a4:	dc800215 	stw	r18,8(sp)
    89a8:	00087540 	call	8754 <__hi0bits>
    89ac:	100b883a 	mov	r5,r2
    89b0:	00800804 	movi	r2,32
    89b4:	1145c83a 	sub	r2,r2,r5
    89b8:	88800015 	stw	r2,0(r17)
    89bc:	00800284 	movi	r2,10
    89c0:	80ffff04 	addi	r3,r16,-4
    89c4:	11401416 	blt	r2,r5,8a18 <__b2d+0xb0>
    89c8:	008002c4 	movi	r2,11
    89cc:	1149c83a 	sub	r4,r2,r5
    89d0:	a0c02736 	bltu	r20,r3,8a70 <__b2d+0x108>
    89d4:	000d883a 	mov	r6,zero
    89d8:	28800544 	addi	r2,r5,21
    89dc:	a906d83a 	srl	r3,r21,r4
    89e0:	a884983a 	sll	r2,r21,r2
    89e4:	1ccffc34 	orhi	r19,r3,16368
    89e8:	11a4b03a 	or	r18,r2,r6
    89ec:	9005883a 	mov	r2,r18
    89f0:	9807883a 	mov	r3,r19
    89f4:	dfc00617 	ldw	ra,24(sp)
    89f8:	dd400517 	ldw	r21,20(sp)
    89fc:	dd000417 	ldw	r20,16(sp)
    8a00:	dcc00317 	ldw	r19,12(sp)
    8a04:	dc800217 	ldw	r18,8(sp)
    8a08:	dc400117 	ldw	r17,4(sp)
    8a0c:	dc000017 	ldw	r16,0(sp)
    8a10:	dec00704 	addi	sp,sp,28
    8a14:	f800283a 	ret
    8a18:	a0c00e36 	bltu	r20,r3,8a54 <__b2d+0xec>
    8a1c:	293ffd44 	addi	r4,r5,-11
    8a20:	000d883a 	mov	r6,zero
    8a24:	20000f26 	beq	r4,zero,8a64 <__b2d+0xfc>
    8a28:	00800804 	movi	r2,32
    8a2c:	110bc83a 	sub	r5,r2,r4
    8a30:	a0c01236 	bltu	r20,r3,8a7c <__b2d+0x114>
    8a34:	000f883a 	mov	r7,zero
    8a38:	a904983a 	sll	r2,r21,r4
    8a3c:	3146d83a 	srl	r3,r6,r5
    8a40:	3108983a 	sll	r4,r6,r4
    8a44:	108ffc34 	orhi	r2,r2,16368
    8a48:	18a6b03a 	or	r19,r3,r2
    8a4c:	3924b03a 	or	r18,r7,r4
    8a50:	003fe606 	br	89ec <__b2d+0x84>
    8a54:	293ffd44 	addi	r4,r5,-11
    8a58:	81bffe17 	ldw	r6,-8(r16)
    8a5c:	80fffe04 	addi	r3,r16,-8
    8a60:	203ff11e 	bne	r4,zero,8a28 <__b2d+0xc0>
    8a64:	accffc34 	orhi	r19,r21,16368
    8a68:	3025883a 	mov	r18,r6
    8a6c:	003fdf06 	br	89ec <__b2d+0x84>
    8a70:	18bfff17 	ldw	r2,-4(r3)
    8a74:	110cd83a 	srl	r6,r2,r4
    8a78:	003fd706 	br	89d8 <__b2d+0x70>
    8a7c:	18bfff17 	ldw	r2,-4(r3)
    8a80:	114ed83a 	srl	r7,r2,r5
    8a84:	003fec06 	br	8a38 <__b2d+0xd0>

00008a88 <__ratio>:
    8a88:	defff904 	addi	sp,sp,-28
    8a8c:	dc400215 	stw	r17,8(sp)
    8a90:	2823883a 	mov	r17,r5
    8a94:	d80b883a 	mov	r5,sp
    8a98:	dfc00615 	stw	ra,24(sp)
    8a9c:	dd000515 	stw	r20,20(sp)
    8aa0:	dcc00415 	stw	r19,16(sp)
    8aa4:	dc800315 	stw	r18,12(sp)
    8aa8:	2025883a 	mov	r18,r4
    8aac:	00089680 	call	8968 <__b2d>
    8ab0:	8809883a 	mov	r4,r17
    8ab4:	d9400104 	addi	r5,sp,4
    8ab8:	1027883a 	mov	r19,r2
    8abc:	1829883a 	mov	r20,r3
    8ac0:	00089680 	call	8968 <__b2d>
    8ac4:	89000417 	ldw	r4,16(r17)
    8ac8:	91c00417 	ldw	r7,16(r18)
    8acc:	d9800117 	ldw	r6,4(sp)
    8ad0:	180b883a 	mov	r5,r3
    8ad4:	390fc83a 	sub	r7,r7,r4
    8ad8:	1009883a 	mov	r4,r2
    8adc:	d8800017 	ldw	r2,0(sp)
    8ae0:	380e917a 	slli	r7,r7,5
    8ae4:	2011883a 	mov	r8,r4
    8ae8:	1185c83a 	sub	r2,r2,r6
    8aec:	11c5883a 	add	r2,r2,r7
    8af0:	1006953a 	slli	r3,r2,20
    8af4:	2813883a 	mov	r9,r5
    8af8:	00800d0e 	bge	zero,r2,8b30 <__ratio+0xa8>
    8afc:	1d29883a 	add	r20,r3,r20
    8b00:	a00b883a 	mov	r5,r20
    8b04:	480f883a 	mov	r7,r9
    8b08:	9809883a 	mov	r4,r19
    8b0c:	400d883a 	mov	r6,r8
    8b10:	000b9580 	call	b958 <__divdf3>
    8b14:	dfc00617 	ldw	ra,24(sp)
    8b18:	dd000517 	ldw	r20,20(sp)
    8b1c:	dcc00417 	ldw	r19,16(sp)
    8b20:	dc800317 	ldw	r18,12(sp)
    8b24:	dc400217 	ldw	r17,8(sp)
    8b28:	dec00704 	addi	sp,sp,28
    8b2c:	f800283a 	ret
    8b30:	28d3c83a 	sub	r9,r5,r3
    8b34:	003ff206 	br	8b00 <__ratio+0x78>

00008b38 <_mprec_log10>:
    8b38:	defffe04 	addi	sp,sp,-8
    8b3c:	008005c4 	movi	r2,23
    8b40:	dc000015 	stw	r16,0(sp)
    8b44:	dfc00115 	stw	ra,4(sp)
    8b48:	2021883a 	mov	r16,r4
    8b4c:	11000c16 	blt	r2,r4,8b80 <_mprec_log10+0x48>
    8b50:	200490fa 	slli	r2,r4,3
    8b54:	00c00074 	movhi	r3,1
    8b58:	18cde404 	addi	r3,r3,14224
    8b5c:	10c5883a 	add	r2,r2,r3
    8b60:	12400117 	ldw	r9,4(r2)
    8b64:	12000017 	ldw	r8,0(r2)
    8b68:	4807883a 	mov	r3,r9
    8b6c:	4005883a 	mov	r2,r8
    8b70:	dfc00117 	ldw	ra,4(sp)
    8b74:	dc000017 	ldw	r16,0(sp)
    8b78:	dec00204 	addi	sp,sp,8
    8b7c:	f800283a 	ret
    8b80:	0011883a 	mov	r8,zero
    8b84:	024ffc34 	movhi	r9,16368
    8b88:	0005883a 	mov	r2,zero
    8b8c:	00d00934 	movhi	r3,16420
    8b90:	480b883a 	mov	r5,r9
    8b94:	4009883a 	mov	r4,r8
    8b98:	180f883a 	mov	r7,r3
    8b9c:	100d883a 	mov	r6,r2
    8ba0:	000b5940 	call	b594 <__muldf3>
    8ba4:	843fffc4 	addi	r16,r16,-1
    8ba8:	1011883a 	mov	r8,r2
    8bac:	1813883a 	mov	r9,r3
    8bb0:	803ff51e 	bne	r16,zero,8b88 <_mprec_log10+0x50>
    8bb4:	4005883a 	mov	r2,r8
    8bb8:	4807883a 	mov	r3,r9
    8bbc:	dfc00117 	ldw	ra,4(sp)
    8bc0:	dc000017 	ldw	r16,0(sp)
    8bc4:	dec00204 	addi	sp,sp,8
    8bc8:	f800283a 	ret

00008bcc <__copybits>:
    8bcc:	297fffc4 	addi	r5,r5,-1
    8bd0:	30800417 	ldw	r2,16(r6)
    8bd4:	280bd17a 	srai	r5,r5,5
    8bd8:	31800504 	addi	r6,r6,20
    8bdc:	1085883a 	add	r2,r2,r2
    8be0:	294b883a 	add	r5,r5,r5
    8be4:	294b883a 	add	r5,r5,r5
    8be8:	1085883a 	add	r2,r2,r2
    8bec:	290b883a 	add	r5,r5,r4
    8bf0:	3087883a 	add	r3,r6,r2
    8bf4:	29400104 	addi	r5,r5,4
    8bf8:	30c0052e 	bgeu	r6,r3,8c10 <__copybits+0x44>
    8bfc:	30800017 	ldw	r2,0(r6)
    8c00:	31800104 	addi	r6,r6,4
    8c04:	20800015 	stw	r2,0(r4)
    8c08:	21000104 	addi	r4,r4,4
    8c0c:	30fffb36 	bltu	r6,r3,8bfc <__copybits+0x30>
    8c10:	2140032e 	bgeu	r4,r5,8c20 <__copybits+0x54>
    8c14:	20000015 	stw	zero,0(r4)
    8c18:	21000104 	addi	r4,r4,4
    8c1c:	217ffd36 	bltu	r4,r5,8c14 <__copybits+0x48>
    8c20:	f800283a 	ret

00008c24 <__any_on>:
    8c24:	20800417 	ldw	r2,16(r4)
    8c28:	2807d17a 	srai	r3,r5,5
    8c2c:	21000504 	addi	r4,r4,20
    8c30:	10c00d0e 	bge	r2,r3,8c68 <__any_on+0x44>
    8c34:	1085883a 	add	r2,r2,r2
    8c38:	1085883a 	add	r2,r2,r2
    8c3c:	208d883a 	add	r6,r4,r2
    8c40:	2180182e 	bgeu	r4,r6,8ca4 <__any_on+0x80>
    8c44:	30bfff17 	ldw	r2,-4(r6)
    8c48:	30ffff04 	addi	r3,r6,-4
    8c4c:	1000041e 	bne	r2,zero,8c60 <__any_on+0x3c>
    8c50:	20c0142e 	bgeu	r4,r3,8ca4 <__any_on+0x80>
    8c54:	18ffff04 	addi	r3,r3,-4
    8c58:	18800017 	ldw	r2,0(r3)
    8c5c:	103ffc26 	beq	r2,zero,8c50 <__any_on+0x2c>
    8c60:	00800044 	movi	r2,1
    8c64:	f800283a 	ret
    8c68:	18800a0e 	bge	r3,r2,8c94 <__any_on+0x70>
    8c6c:	294007cc 	andi	r5,r5,31
    8c70:	28000826 	beq	r5,zero,8c94 <__any_on+0x70>
    8c74:	18c5883a 	add	r2,r3,r3
    8c78:	1085883a 	add	r2,r2,r2
    8c7c:	208d883a 	add	r6,r4,r2
    8c80:	30c00017 	ldw	r3,0(r6)
    8c84:	1944d83a 	srl	r2,r3,r5
    8c88:	1144983a 	sll	r2,r2,r5
    8c8c:	18bff41e 	bne	r3,r2,8c60 <__any_on+0x3c>
    8c90:	003feb06 	br	8c40 <__any_on+0x1c>
    8c94:	18c5883a 	add	r2,r3,r3
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	208d883a 	add	r6,r4,r2
    8ca0:	003fe706 	br	8c40 <__any_on+0x1c>
    8ca4:	0005883a 	mov	r2,zero
    8ca8:	f800283a 	ret

00008cac <_Balloc>:
    8cac:	20c01317 	ldw	r3,76(r4)
    8cb0:	defffb04 	addi	sp,sp,-20
    8cb4:	dcc00315 	stw	r19,12(sp)
    8cb8:	dc800215 	stw	r18,8(sp)
    8cbc:	dfc00415 	stw	ra,16(sp)
    8cc0:	2825883a 	mov	r18,r5
    8cc4:	dc400115 	stw	r17,4(sp)
    8cc8:	dc000015 	stw	r16,0(sp)
    8ccc:	2027883a 	mov	r19,r4
    8cd0:	01800404 	movi	r6,16
    8cd4:	01400104 	movi	r5,4
    8cd8:	18001726 	beq	r3,zero,8d38 <_Balloc+0x8c>
    8cdc:	01400044 	movi	r5,1
    8ce0:	9485883a 	add	r2,r18,r18
    8ce4:	2ca2983a 	sll	r17,r5,r18
    8ce8:	1085883a 	add	r2,r2,r2
    8cec:	10c7883a 	add	r3,r2,r3
    8cf0:	1c000017 	ldw	r16,0(r3)
    8cf4:	8c4d883a 	add	r6,r17,r17
    8cf8:	318d883a 	add	r6,r6,r6
    8cfc:	9809883a 	mov	r4,r19
    8d00:	31800504 	addi	r6,r6,20
    8d04:	80001226 	beq	r16,zero,8d50 <_Balloc+0xa4>
    8d08:	80800017 	ldw	r2,0(r16)
    8d0c:	18800015 	stw	r2,0(r3)
    8d10:	80000415 	stw	zero,16(r16)
    8d14:	80000315 	stw	zero,12(r16)
    8d18:	8005883a 	mov	r2,r16
    8d1c:	dfc00417 	ldw	ra,16(sp)
    8d20:	dcc00317 	ldw	r19,12(sp)
    8d24:	dc800217 	ldw	r18,8(sp)
    8d28:	dc400117 	ldw	r17,4(sp)
    8d2c:	dc000017 	ldw	r16,0(sp)
    8d30:	dec00504 	addi	sp,sp,20
    8d34:	f800283a 	ret
    8d38:	000a0e80 	call	a0e8 <_calloc_r>
    8d3c:	1007883a 	mov	r3,r2
    8d40:	0021883a 	mov	r16,zero
    8d44:	98801315 	stw	r2,76(r19)
    8d48:	103fe41e 	bne	r2,zero,8cdc <_Balloc+0x30>
    8d4c:	003ff206 	br	8d18 <_Balloc+0x6c>
    8d50:	000a0e80 	call	a0e8 <_calloc_r>
    8d54:	103ff026 	beq	r2,zero,8d18 <_Balloc+0x6c>
    8d58:	1021883a 	mov	r16,r2
    8d5c:	14800115 	stw	r18,4(r2)
    8d60:	14400215 	stw	r17,8(r2)
    8d64:	003fea06 	br	8d10 <_Balloc+0x64>

00008d68 <__d2b>:
    8d68:	defff504 	addi	sp,sp,-44
    8d6c:	dcc00515 	stw	r19,20(sp)
    8d70:	04c00044 	movi	r19,1
    8d74:	dc000215 	stw	r16,8(sp)
    8d78:	2821883a 	mov	r16,r5
    8d7c:	980b883a 	mov	r5,r19
    8d80:	ddc00915 	stw	r23,36(sp)
    8d84:	dd800815 	stw	r22,32(sp)
    8d88:	dd400715 	stw	r21,28(sp)
    8d8c:	dd000615 	stw	r20,24(sp)
    8d90:	dc800415 	stw	r18,16(sp)
    8d94:	dc400315 	stw	r17,12(sp)
    8d98:	dfc00a15 	stw	ra,40(sp)
    8d9c:	3023883a 	mov	r17,r6
    8da0:	382d883a 	mov	r22,r7
    8da4:	ddc00b17 	ldw	r23,44(sp)
    8da8:	0008cac0 	call	8cac <_Balloc>
    8dac:	1025883a 	mov	r18,r2
    8db0:	00a00034 	movhi	r2,32768
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	8888703a 	and	r4,r17,r2
    8dbc:	202ad53a 	srli	r21,r4,20
    8dc0:	00800434 	movhi	r2,16
    8dc4:	10bfffc4 	addi	r2,r2,-1
    8dc8:	8886703a 	and	r3,r17,r2
    8dcc:	a829003a 	cmpeq	r20,r21,zero
    8dd0:	800b883a 	mov	r5,r16
    8dd4:	d8c00115 	stw	r3,4(sp)
    8dd8:	94000504 	addi	r16,r18,20
    8ddc:	a000021e 	bne	r20,zero,8de8 <__d2b+0x80>
    8de0:	18c00434 	orhi	r3,r3,16
    8de4:	d8c00115 	stw	r3,4(sp)
    8de8:	28002726 	beq	r5,zero,8e88 <__d2b+0x120>
    8dec:	d809883a 	mov	r4,sp
    8df0:	d9400015 	stw	r5,0(sp)
    8df4:	00087c40 	call	87c4 <__lo0bits>
    8df8:	100d883a 	mov	r6,r2
    8dfc:	10003526 	beq	r2,zero,8ed4 <__d2b+0x16c>
    8e00:	d8c00117 	ldw	r3,4(sp)
    8e04:	00800804 	movi	r2,32
    8e08:	1185c83a 	sub	r2,r2,r6
    8e0c:	d9000017 	ldw	r4,0(sp)
    8e10:	1886983a 	sll	r3,r3,r2
    8e14:	1906b03a 	or	r3,r3,r4
    8e18:	90c00515 	stw	r3,20(r18)
    8e1c:	d8c00117 	ldw	r3,4(sp)
    8e20:	1986d83a 	srl	r3,r3,r6
    8e24:	d8c00115 	stw	r3,4(sp)
    8e28:	180b003a 	cmpeq	r5,r3,zero
    8e2c:	00800084 	movi	r2,2
    8e30:	114bc83a 	sub	r5,r2,r5
    8e34:	80c00115 	stw	r3,4(r16)
    8e38:	91400415 	stw	r5,16(r18)
    8e3c:	a0001a1e 	bne	r20,zero,8ea8 <__d2b+0x140>
    8e40:	3545883a 	add	r2,r6,r21
    8e44:	10bef344 	addi	r2,r2,-1075
    8e48:	00c00d44 	movi	r3,53
    8e4c:	b0800015 	stw	r2,0(r22)
    8e50:	1987c83a 	sub	r3,r3,r6
    8e54:	b8c00015 	stw	r3,0(r23)
    8e58:	9005883a 	mov	r2,r18
    8e5c:	dfc00a17 	ldw	ra,40(sp)
    8e60:	ddc00917 	ldw	r23,36(sp)
    8e64:	dd800817 	ldw	r22,32(sp)
    8e68:	dd400717 	ldw	r21,28(sp)
    8e6c:	dd000617 	ldw	r20,24(sp)
    8e70:	dcc00517 	ldw	r19,20(sp)
    8e74:	dc800417 	ldw	r18,16(sp)
    8e78:	dc400317 	ldw	r17,12(sp)
    8e7c:	dc000217 	ldw	r16,8(sp)
    8e80:	dec00b04 	addi	sp,sp,44
    8e84:	f800283a 	ret
    8e88:	d9000104 	addi	r4,sp,4
    8e8c:	00087c40 	call	87c4 <__lo0bits>
    8e90:	11800804 	addi	r6,r2,32
    8e94:	d8800117 	ldw	r2,4(sp)
    8e98:	94c00415 	stw	r19,16(r18)
    8e9c:	980b883a 	mov	r5,r19
    8ea0:	90800515 	stw	r2,20(r18)
    8ea4:	a03fe626 	beq	r20,zero,8e40 <__d2b+0xd8>
    8ea8:	2945883a 	add	r2,r5,r5
    8eac:	1085883a 	add	r2,r2,r2
    8eb0:	1405883a 	add	r2,r2,r16
    8eb4:	113fff17 	ldw	r4,-4(r2)
    8eb8:	30fef384 	addi	r3,r6,-1074
    8ebc:	2820917a 	slli	r16,r5,5
    8ec0:	b0c00015 	stw	r3,0(r22)
    8ec4:	00087540 	call	8754 <__hi0bits>
    8ec8:	80a1c83a 	sub	r16,r16,r2
    8ecc:	bc000015 	stw	r16,0(r23)
    8ed0:	003fe106 	br	8e58 <__d2b+0xf0>
    8ed4:	d8800017 	ldw	r2,0(sp)
    8ed8:	90800515 	stw	r2,20(r18)
    8edc:	d8c00117 	ldw	r3,4(sp)
    8ee0:	003fd106 	br	8e28 <__d2b+0xc0>

00008ee4 <__mdiff>:
    8ee4:	defffb04 	addi	sp,sp,-20
    8ee8:	dc000015 	stw	r16,0(sp)
    8eec:	2821883a 	mov	r16,r5
    8ef0:	dc800215 	stw	r18,8(sp)
    8ef4:	300b883a 	mov	r5,r6
    8ef8:	2025883a 	mov	r18,r4
    8efc:	8009883a 	mov	r4,r16
    8f00:	dc400115 	stw	r17,4(sp)
    8f04:	dfc00415 	stw	ra,16(sp)
    8f08:	dcc00315 	stw	r19,12(sp)
    8f0c:	3023883a 	mov	r17,r6
    8f10:	00088880 	call	8888 <__mcmp>
    8f14:	10004226 	beq	r2,zero,9020 <__mdiff+0x13c>
    8f18:	10005016 	blt	r2,zero,905c <__mdiff+0x178>
    8f1c:	0027883a 	mov	r19,zero
    8f20:	81400117 	ldw	r5,4(r16)
    8f24:	9009883a 	mov	r4,r18
    8f28:	0008cac0 	call	8cac <_Balloc>
    8f2c:	1019883a 	mov	r12,r2
    8f30:	82800417 	ldw	r10,16(r16)
    8f34:	88800417 	ldw	r2,16(r17)
    8f38:	81800504 	addi	r6,r16,20
    8f3c:	5287883a 	add	r3,r10,r10
    8f40:	1085883a 	add	r2,r2,r2
    8f44:	18c7883a 	add	r3,r3,r3
    8f48:	1085883a 	add	r2,r2,r2
    8f4c:	8a000504 	addi	r8,r17,20
    8f50:	64c00315 	stw	r19,12(r12)
    8f54:	30db883a 	add	r13,r6,r3
    8f58:	4097883a 	add	r11,r8,r2
    8f5c:	61c00504 	addi	r7,r12,20
    8f60:	0013883a 	mov	r9,zero
    8f64:	31000017 	ldw	r4,0(r6)
    8f68:	41400017 	ldw	r5,0(r8)
    8f6c:	42000104 	addi	r8,r8,4
    8f70:	20bfffcc 	andi	r2,r4,65535
    8f74:	28ffffcc 	andi	r3,r5,65535
    8f78:	10c5c83a 	sub	r2,r2,r3
    8f7c:	1245883a 	add	r2,r2,r9
    8f80:	2008d43a 	srli	r4,r4,16
    8f84:	280ad43a 	srli	r5,r5,16
    8f88:	1007d43a 	srai	r3,r2,16
    8f8c:	3880000d 	sth	r2,0(r7)
    8f90:	2149c83a 	sub	r4,r4,r5
    8f94:	20c9883a 	add	r4,r4,r3
    8f98:	3900008d 	sth	r4,2(r7)
    8f9c:	31800104 	addi	r6,r6,4
    8fa0:	39c00104 	addi	r7,r7,4
    8fa4:	2013d43a 	srai	r9,r4,16
    8fa8:	42ffee36 	bltu	r8,r11,8f64 <__mdiff+0x80>
    8fac:	33400c2e 	bgeu	r6,r13,8fe0 <__mdiff+0xfc>
    8fb0:	30800017 	ldw	r2,0(r6)
    8fb4:	31800104 	addi	r6,r6,4
    8fb8:	10ffffcc 	andi	r3,r2,65535
    8fbc:	1a47883a 	add	r3,r3,r9
    8fc0:	1004d43a 	srli	r2,r2,16
    8fc4:	1809d43a 	srai	r4,r3,16
    8fc8:	38c0000d 	sth	r3,0(r7)
    8fcc:	1105883a 	add	r2,r2,r4
    8fd0:	3880008d 	sth	r2,2(r7)
    8fd4:	1013d43a 	srai	r9,r2,16
    8fd8:	39c00104 	addi	r7,r7,4
    8fdc:	337ff436 	bltu	r6,r13,8fb0 <__mdiff+0xcc>
    8fe0:	38bfff17 	ldw	r2,-4(r7)
    8fe4:	38ffff04 	addi	r3,r7,-4
    8fe8:	1000041e 	bne	r2,zero,8ffc <__mdiff+0x118>
    8fec:	18ffff04 	addi	r3,r3,-4
    8ff0:	18800017 	ldw	r2,0(r3)
    8ff4:	52bfffc4 	addi	r10,r10,-1
    8ff8:	103ffc26 	beq	r2,zero,8fec <__mdiff+0x108>
    8ffc:	6005883a 	mov	r2,r12
    9000:	62800415 	stw	r10,16(r12)
    9004:	dfc00417 	ldw	ra,16(sp)
    9008:	dcc00317 	ldw	r19,12(sp)
    900c:	dc800217 	ldw	r18,8(sp)
    9010:	dc400117 	ldw	r17,4(sp)
    9014:	dc000017 	ldw	r16,0(sp)
    9018:	dec00504 	addi	sp,sp,20
    901c:	f800283a 	ret
    9020:	9009883a 	mov	r4,r18
    9024:	000b883a 	mov	r5,zero
    9028:	0008cac0 	call	8cac <_Balloc>
    902c:	1019883a 	mov	r12,r2
    9030:	00800044 	movi	r2,1
    9034:	60800415 	stw	r2,16(r12)
    9038:	6005883a 	mov	r2,r12
    903c:	60000515 	stw	zero,20(r12)
    9040:	dfc00417 	ldw	ra,16(sp)
    9044:	dcc00317 	ldw	r19,12(sp)
    9048:	dc800217 	ldw	r18,8(sp)
    904c:	dc400117 	ldw	r17,4(sp)
    9050:	dc000017 	ldw	r16,0(sp)
    9054:	dec00504 	addi	sp,sp,20
    9058:	f800283a 	ret
    905c:	880d883a 	mov	r6,r17
    9060:	04c00044 	movi	r19,1
    9064:	8023883a 	mov	r17,r16
    9068:	3021883a 	mov	r16,r6
    906c:	003fac06 	br	8f20 <__mdiff+0x3c>

00009070 <__lshift>:
    9070:	defff904 	addi	sp,sp,-28
    9074:	28800417 	ldw	r2,16(r5)
    9078:	dc000015 	stw	r16,0(sp)
    907c:	3021d17a 	srai	r16,r6,5
    9080:	28c00217 	ldw	r3,8(r5)
    9084:	10800044 	addi	r2,r2,1
    9088:	dc400115 	stw	r17,4(sp)
    908c:	80a3883a 	add	r17,r16,r2
    9090:	dd400515 	stw	r21,20(sp)
    9094:	dd000415 	stw	r20,16(sp)
    9098:	dc800215 	stw	r18,8(sp)
    909c:	dfc00615 	stw	ra,24(sp)
    90a0:	2825883a 	mov	r18,r5
    90a4:	dcc00315 	stw	r19,12(sp)
    90a8:	3029883a 	mov	r20,r6
    90ac:	202b883a 	mov	r21,r4
    90b0:	29400117 	ldw	r5,4(r5)
    90b4:	1c40030e 	bge	r3,r17,90c4 <__lshift+0x54>
    90b8:	18c7883a 	add	r3,r3,r3
    90bc:	29400044 	addi	r5,r5,1
    90c0:	1c7ffd16 	blt	r3,r17,90b8 <__lshift+0x48>
    90c4:	a809883a 	mov	r4,r21
    90c8:	0008cac0 	call	8cac <_Balloc>
    90cc:	1027883a 	mov	r19,r2
    90d0:	11400504 	addi	r5,r2,20
    90d4:	0400090e 	bge	zero,r16,90fc <__lshift+0x8c>
    90d8:	2805883a 	mov	r2,r5
    90dc:	0007883a 	mov	r3,zero
    90e0:	18c00044 	addi	r3,r3,1
    90e4:	10000015 	stw	zero,0(r2)
    90e8:	10800104 	addi	r2,r2,4
    90ec:	80fffc1e 	bne	r16,r3,90e0 <__lshift+0x70>
    90f0:	8405883a 	add	r2,r16,r16
    90f4:	1085883a 	add	r2,r2,r2
    90f8:	288b883a 	add	r5,r5,r2
    90fc:	90800417 	ldw	r2,16(r18)
    9100:	91000504 	addi	r4,r18,20
    9104:	a18007cc 	andi	r6,r20,31
    9108:	1085883a 	add	r2,r2,r2
    910c:	1085883a 	add	r2,r2,r2
    9110:	208f883a 	add	r7,r4,r2
    9114:	30001e26 	beq	r6,zero,9190 <__lshift+0x120>
    9118:	00800804 	movi	r2,32
    911c:	1191c83a 	sub	r8,r2,r6
    9120:	0007883a 	mov	r3,zero
    9124:	20800017 	ldw	r2,0(r4)
    9128:	1184983a 	sll	r2,r2,r6
    912c:	1884b03a 	or	r2,r3,r2
    9130:	28800015 	stw	r2,0(r5)
    9134:	20c00017 	ldw	r3,0(r4)
    9138:	21000104 	addi	r4,r4,4
    913c:	29400104 	addi	r5,r5,4
    9140:	1a06d83a 	srl	r3,r3,r8
    9144:	21fff736 	bltu	r4,r7,9124 <__lshift+0xb4>
    9148:	28c00015 	stw	r3,0(r5)
    914c:	18000126 	beq	r3,zero,9154 <__lshift+0xe4>
    9150:	8c400044 	addi	r17,r17,1
    9154:	88bfffc4 	addi	r2,r17,-1
    9158:	98800415 	stw	r2,16(r19)
    915c:	a809883a 	mov	r4,r21
    9160:	900b883a 	mov	r5,r18
    9164:	000872c0 	call	872c <_Bfree>
    9168:	9805883a 	mov	r2,r19
    916c:	dfc00617 	ldw	ra,24(sp)
    9170:	dd400517 	ldw	r21,20(sp)
    9174:	dd000417 	ldw	r20,16(sp)
    9178:	dcc00317 	ldw	r19,12(sp)
    917c:	dc800217 	ldw	r18,8(sp)
    9180:	dc400117 	ldw	r17,4(sp)
    9184:	dc000017 	ldw	r16,0(sp)
    9188:	dec00704 	addi	sp,sp,28
    918c:	f800283a 	ret
    9190:	20800017 	ldw	r2,0(r4)
    9194:	21000104 	addi	r4,r4,4
    9198:	28800015 	stw	r2,0(r5)
    919c:	29400104 	addi	r5,r5,4
    91a0:	21ffec2e 	bgeu	r4,r7,9154 <__lshift+0xe4>
    91a4:	20800017 	ldw	r2,0(r4)
    91a8:	21000104 	addi	r4,r4,4
    91ac:	28800015 	stw	r2,0(r5)
    91b0:	29400104 	addi	r5,r5,4
    91b4:	21fff636 	bltu	r4,r7,9190 <__lshift+0x120>
    91b8:	003fe606 	br	9154 <__lshift+0xe4>

000091bc <__multiply>:
    91bc:	defff904 	addi	sp,sp,-28
    91c0:	dcc00315 	stw	r19,12(sp)
    91c4:	dc800215 	stw	r18,8(sp)
    91c8:	2cc00417 	ldw	r19,16(r5)
    91cc:	34800417 	ldw	r18,16(r6)
    91d0:	dd000415 	stw	r20,16(sp)
    91d4:	dc400115 	stw	r17,4(sp)
    91d8:	dfc00615 	stw	ra,24(sp)
    91dc:	dd400515 	stw	r21,20(sp)
    91e0:	dc000015 	stw	r16,0(sp)
    91e4:	2823883a 	mov	r17,r5
    91e8:	3029883a 	mov	r20,r6
    91ec:	9c80040e 	bge	r19,r18,9200 <__multiply+0x44>
    91f0:	9027883a 	mov	r19,r18
    91f4:	2c800417 	ldw	r18,16(r5)
    91f8:	2829883a 	mov	r20,r5
    91fc:	3023883a 	mov	r17,r6
    9200:	88800217 	ldw	r2,8(r17)
    9204:	9ca1883a 	add	r16,r19,r18
    9208:	89400117 	ldw	r5,4(r17)
    920c:	1400010e 	bge	r2,r16,9214 <__multiply+0x58>
    9210:	29400044 	addi	r5,r5,1
    9214:	0008cac0 	call	8cac <_Balloc>
    9218:	102b883a 	mov	r21,r2
    921c:	8405883a 	add	r2,r16,r16
    9220:	1085883a 	add	r2,r2,r2
    9224:	a9000504 	addi	r4,r21,20
    9228:	209d883a 	add	r14,r4,r2
    922c:	2380042e 	bgeu	r4,r14,9240 <__multiply+0x84>
    9230:	2005883a 	mov	r2,r4
    9234:	10000015 	stw	zero,0(r2)
    9238:	10800104 	addi	r2,r2,4
    923c:	13bffd36 	bltu	r2,r14,9234 <__multiply+0x78>
    9240:	9485883a 	add	r2,r18,r18
    9244:	9cc7883a 	add	r3,r19,r19
    9248:	a1800504 	addi	r6,r20,20
    924c:	1085883a 	add	r2,r2,r2
    9250:	8b400504 	addi	r13,r17,20
    9254:	18c7883a 	add	r3,r3,r3
    9258:	309f883a 	add	r15,r6,r2
    925c:	68d7883a 	add	r11,r13,r3
    9260:	33c03b2e 	bgeu	r6,r15,9350 <__multiply+0x194>
    9264:	2019883a 	mov	r12,r4
    9268:	30800017 	ldw	r2,0(r6)
    926c:	127fffcc 	andi	r9,r2,65535
    9270:	48001826 	beq	r9,zero,92d4 <__multiply+0x118>
    9274:	6811883a 	mov	r8,r13
    9278:	600f883a 	mov	r7,r12
    927c:	0015883a 	mov	r10,zero
    9280:	40c00017 	ldw	r3,0(r8)
    9284:	39400017 	ldw	r5,0(r7)
    9288:	42000104 	addi	r8,r8,4
    928c:	193fffcc 	andi	r4,r3,65535
    9290:	4909383a 	mul	r4,r9,r4
    9294:	1806d43a 	srli	r3,r3,16
    9298:	28bfffcc 	andi	r2,r5,65535
    929c:	5085883a 	add	r2,r10,r2
    92a0:	2089883a 	add	r4,r4,r2
    92a4:	48c7383a 	mul	r3,r9,r3
    92a8:	280ad43a 	srli	r5,r5,16
    92ac:	2004d43a 	srli	r2,r4,16
    92b0:	3900000d 	sth	r4,0(r7)
    92b4:	1947883a 	add	r3,r3,r5
    92b8:	10c5883a 	add	r2,r2,r3
    92bc:	3880008d 	sth	r2,2(r7)
    92c0:	1014d43a 	srli	r10,r2,16
    92c4:	39c00104 	addi	r7,r7,4
    92c8:	42ffed36 	bltu	r8,r11,9280 <__multiply+0xc4>
    92cc:	3a800015 	stw	r10,0(r7)
    92d0:	30800017 	ldw	r2,0(r6)
    92d4:	1012d43a 	srli	r9,r2,16
    92d8:	48001926 	beq	r9,zero,9340 <__multiply+0x184>
    92dc:	60800017 	ldw	r2,0(r12)
    92e0:	6811883a 	mov	r8,r13
    92e4:	600f883a 	mov	r7,r12
    92e8:	0015883a 	mov	r10,zero
    92ec:	100b883a 	mov	r5,r2
    92f0:	41000017 	ldw	r4,0(r8)
    92f4:	2806d43a 	srli	r3,r5,16
    92f8:	3880000d 	sth	r2,0(r7)
    92fc:	20bfffcc 	andi	r2,r4,65535
    9300:	4885383a 	mul	r2,r9,r2
    9304:	50c7883a 	add	r3,r10,r3
    9308:	2008d43a 	srli	r4,r4,16
    930c:	10c5883a 	add	r2,r2,r3
    9310:	3880008d 	sth	r2,2(r7)
    9314:	39c00104 	addi	r7,r7,4
    9318:	39400017 	ldw	r5,0(r7)
    931c:	4909383a 	mul	r4,r9,r4
    9320:	1004d43a 	srli	r2,r2,16
    9324:	28ffffcc 	andi	r3,r5,65535
    9328:	20c9883a 	add	r4,r4,r3
    932c:	1105883a 	add	r2,r2,r4
    9330:	42000104 	addi	r8,r8,4
    9334:	1014d43a 	srli	r10,r2,16
    9338:	42ffed36 	bltu	r8,r11,92f0 <__multiply+0x134>
    933c:	38800015 	stw	r2,0(r7)
    9340:	31800104 	addi	r6,r6,4
    9344:	33c0022e 	bgeu	r6,r15,9350 <__multiply+0x194>
    9348:	63000104 	addi	r12,r12,4
    934c:	003fc606 	br	9268 <__multiply+0xac>
    9350:	0400090e 	bge	zero,r16,9378 <__multiply+0x1bc>
    9354:	70bfff17 	ldw	r2,-4(r14)
    9358:	70ffff04 	addi	r3,r14,-4
    935c:	10000326 	beq	r2,zero,936c <__multiply+0x1b0>
    9360:	00000506 	br	9378 <__multiply+0x1bc>
    9364:	18800017 	ldw	r2,0(r3)
    9368:	1000031e 	bne	r2,zero,9378 <__multiply+0x1bc>
    936c:	843fffc4 	addi	r16,r16,-1
    9370:	18ffff04 	addi	r3,r3,-4
    9374:	803ffb1e 	bne	r16,zero,9364 <__multiply+0x1a8>
    9378:	a805883a 	mov	r2,r21
    937c:	ac000415 	stw	r16,16(r21)
    9380:	dfc00617 	ldw	ra,24(sp)
    9384:	dd400517 	ldw	r21,20(sp)
    9388:	dd000417 	ldw	r20,16(sp)
    938c:	dcc00317 	ldw	r19,12(sp)
    9390:	dc800217 	ldw	r18,8(sp)
    9394:	dc400117 	ldw	r17,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00704 	addi	sp,sp,28
    93a0:	f800283a 	ret

000093a4 <__i2b>:
    93a4:	defffd04 	addi	sp,sp,-12
    93a8:	dc000015 	stw	r16,0(sp)
    93ac:	04000044 	movi	r16,1
    93b0:	dc800115 	stw	r18,4(sp)
    93b4:	2825883a 	mov	r18,r5
    93b8:	800b883a 	mov	r5,r16
    93bc:	dfc00215 	stw	ra,8(sp)
    93c0:	0008cac0 	call	8cac <_Balloc>
    93c4:	14000415 	stw	r16,16(r2)
    93c8:	14800515 	stw	r18,20(r2)
    93cc:	dfc00217 	ldw	ra,8(sp)
    93d0:	dc800117 	ldw	r18,4(sp)
    93d4:	dc000017 	ldw	r16,0(sp)
    93d8:	dec00304 	addi	sp,sp,12
    93dc:	f800283a 	ret

000093e0 <__multadd>:
    93e0:	defffa04 	addi	sp,sp,-24
    93e4:	dc800215 	stw	r18,8(sp)
    93e8:	2c800417 	ldw	r18,16(r5)
    93ec:	dd000415 	stw	r20,16(sp)
    93f0:	dcc00315 	stw	r19,12(sp)
    93f4:	dc000015 	stw	r16,0(sp)
    93f8:	dfc00515 	stw	ra,20(sp)
    93fc:	3821883a 	mov	r16,r7
    9400:	dc400115 	stw	r17,4(sp)
    9404:	2827883a 	mov	r19,r5
    9408:	2029883a 	mov	r20,r4
    940c:	2a000504 	addi	r8,r5,20
    9410:	000f883a 	mov	r7,zero
    9414:	40800017 	ldw	r2,0(r8)
    9418:	39c00044 	addi	r7,r7,1
    941c:	10ffffcc 	andi	r3,r2,65535
    9420:	1987383a 	mul	r3,r3,r6
    9424:	1004d43a 	srli	r2,r2,16
    9428:	1c07883a 	add	r3,r3,r16
    942c:	180ad43a 	srli	r5,r3,16
    9430:	1185383a 	mul	r2,r2,r6
    9434:	18ffffcc 	andi	r3,r3,65535
    9438:	1145883a 	add	r2,r2,r5
    943c:	1008943a 	slli	r4,r2,16
    9440:	1020d43a 	srli	r16,r2,16
    9444:	20c9883a 	add	r4,r4,r3
    9448:	41000015 	stw	r4,0(r8)
    944c:	42000104 	addi	r8,r8,4
    9450:	3cbff016 	blt	r7,r18,9414 <__multadd+0x34>
    9454:	80000826 	beq	r16,zero,9478 <__multadd+0x98>
    9458:	98800217 	ldw	r2,8(r19)
    945c:	90800f0e 	bge	r18,r2,949c <__multadd+0xbc>
    9460:	9485883a 	add	r2,r18,r18
    9464:	1085883a 	add	r2,r2,r2
    9468:	14c5883a 	add	r2,r2,r19
    946c:	90c00044 	addi	r3,r18,1
    9470:	14000515 	stw	r16,20(r2)
    9474:	98c00415 	stw	r3,16(r19)
    9478:	9805883a 	mov	r2,r19
    947c:	dfc00517 	ldw	ra,20(sp)
    9480:	dd000417 	ldw	r20,16(sp)
    9484:	dcc00317 	ldw	r19,12(sp)
    9488:	dc800217 	ldw	r18,8(sp)
    948c:	dc400117 	ldw	r17,4(sp)
    9490:	dc000017 	ldw	r16,0(sp)
    9494:	dec00604 	addi	sp,sp,24
    9498:	f800283a 	ret
    949c:	99400117 	ldw	r5,4(r19)
    94a0:	a009883a 	mov	r4,r20
    94a4:	29400044 	addi	r5,r5,1
    94a8:	0008cac0 	call	8cac <_Balloc>
    94ac:	99800417 	ldw	r6,16(r19)
    94b0:	99400304 	addi	r5,r19,12
    94b4:	11000304 	addi	r4,r2,12
    94b8:	318d883a 	add	r6,r6,r6
    94bc:	318d883a 	add	r6,r6,r6
    94c0:	31800204 	addi	r6,r6,8
    94c4:	1023883a 	mov	r17,r2
    94c8:	00032a40 	call	32a4 <memcpy>
    94cc:	980b883a 	mov	r5,r19
    94d0:	a009883a 	mov	r4,r20
    94d4:	000872c0 	call	872c <_Bfree>
    94d8:	8827883a 	mov	r19,r17
    94dc:	003fe006 	br	9460 <__multadd+0x80>

000094e0 <__pow5mult>:
    94e0:	defffa04 	addi	sp,sp,-24
    94e4:	308000cc 	andi	r2,r6,3
    94e8:	dd000415 	stw	r20,16(sp)
    94ec:	dcc00315 	stw	r19,12(sp)
    94f0:	dc000015 	stw	r16,0(sp)
    94f4:	dfc00515 	stw	ra,20(sp)
    94f8:	dc800215 	stw	r18,8(sp)
    94fc:	dc400115 	stw	r17,4(sp)
    9500:	3021883a 	mov	r16,r6
    9504:	2027883a 	mov	r19,r4
    9508:	2829883a 	mov	r20,r5
    950c:	10002b1e 	bne	r2,zero,95bc <__pow5mult+0xdc>
    9510:	8025d0ba 	srai	r18,r16,2
    9514:	90001b26 	beq	r18,zero,9584 <__pow5mult+0xa4>
    9518:	9c001217 	ldw	r16,72(r19)
    951c:	8000081e 	bne	r16,zero,9540 <__pow5mult+0x60>
    9520:	00003006 	br	95e4 <__pow5mult+0x104>
    9524:	800b883a 	mov	r5,r16
    9528:	800d883a 	mov	r6,r16
    952c:	9809883a 	mov	r4,r19
    9530:	90001426 	beq	r18,zero,9584 <__pow5mult+0xa4>
    9534:	80800017 	ldw	r2,0(r16)
    9538:	10001b26 	beq	r2,zero,95a8 <__pow5mult+0xc8>
    953c:	1021883a 	mov	r16,r2
    9540:	9080004c 	andi	r2,r18,1
    9544:	1005003a 	cmpeq	r2,r2,zero
    9548:	9025d07a 	srai	r18,r18,1
    954c:	800d883a 	mov	r6,r16
    9550:	9809883a 	mov	r4,r19
    9554:	a00b883a 	mov	r5,r20
    9558:	103ff21e 	bne	r2,zero,9524 <__pow5mult+0x44>
    955c:	00091bc0 	call	91bc <__multiply>
    9560:	a00b883a 	mov	r5,r20
    9564:	9809883a 	mov	r4,r19
    9568:	1023883a 	mov	r17,r2
    956c:	000872c0 	call	872c <_Bfree>
    9570:	8829883a 	mov	r20,r17
    9574:	800b883a 	mov	r5,r16
    9578:	800d883a 	mov	r6,r16
    957c:	9809883a 	mov	r4,r19
    9580:	903fec1e 	bne	r18,zero,9534 <__pow5mult+0x54>
    9584:	a005883a 	mov	r2,r20
    9588:	dfc00517 	ldw	ra,20(sp)
    958c:	dd000417 	ldw	r20,16(sp)
    9590:	dcc00317 	ldw	r19,12(sp)
    9594:	dc800217 	ldw	r18,8(sp)
    9598:	dc400117 	ldw	r17,4(sp)
    959c:	dc000017 	ldw	r16,0(sp)
    95a0:	dec00604 	addi	sp,sp,24
    95a4:	f800283a 	ret
    95a8:	00091bc0 	call	91bc <__multiply>
    95ac:	80800015 	stw	r2,0(r16)
    95b0:	1021883a 	mov	r16,r2
    95b4:	10000015 	stw	zero,0(r2)
    95b8:	003fe106 	br	9540 <__pow5mult+0x60>
    95bc:	1085883a 	add	r2,r2,r2
    95c0:	00c00074 	movhi	r3,1
    95c4:	18ce2a04 	addi	r3,r3,14504
    95c8:	1085883a 	add	r2,r2,r2
    95cc:	10c5883a 	add	r2,r2,r3
    95d0:	11bfff17 	ldw	r6,-4(r2)
    95d4:	000f883a 	mov	r7,zero
    95d8:	00093e00 	call	93e0 <__multadd>
    95dc:	1029883a 	mov	r20,r2
    95e0:	003fcb06 	br	9510 <__pow5mult+0x30>
    95e4:	9809883a 	mov	r4,r19
    95e8:	01409c44 	movi	r5,625
    95ec:	00093a40 	call	93a4 <__i2b>
    95f0:	98801215 	stw	r2,72(r19)
    95f4:	1021883a 	mov	r16,r2
    95f8:	10000015 	stw	zero,0(r2)
    95fc:	003fd006 	br	9540 <__pow5mult+0x60>

00009600 <__s2b>:
    9600:	defff904 	addi	sp,sp,-28
    9604:	dcc00315 	stw	r19,12(sp)
    9608:	dc800215 	stw	r18,8(sp)
    960c:	2827883a 	mov	r19,r5
    9610:	2025883a 	mov	r18,r4
    9614:	01400244 	movi	r5,9
    9618:	39000204 	addi	r4,r7,8
    961c:	dd000415 	stw	r20,16(sp)
    9620:	dc400115 	stw	r17,4(sp)
    9624:	dfc00615 	stw	ra,24(sp)
    9628:	dd400515 	stw	r21,20(sp)
    962c:	dc000015 	stw	r16,0(sp)
    9630:	3829883a 	mov	r20,r7
    9634:	3023883a 	mov	r17,r6
    9638:	000c2380 	call	c238 <__divsi3>
    963c:	00c00044 	movi	r3,1
    9640:	1880350e 	bge	r3,r2,9718 <__s2b+0x118>
    9644:	000b883a 	mov	r5,zero
    9648:	18c7883a 	add	r3,r3,r3
    964c:	29400044 	addi	r5,r5,1
    9650:	18bffd16 	blt	r3,r2,9648 <__s2b+0x48>
    9654:	9009883a 	mov	r4,r18
    9658:	0008cac0 	call	8cac <_Balloc>
    965c:	1011883a 	mov	r8,r2
    9660:	d8800717 	ldw	r2,28(sp)
    9664:	00c00044 	movi	r3,1
    9668:	01800244 	movi	r6,9
    966c:	40800515 	stw	r2,20(r8)
    9670:	40c00415 	stw	r3,16(r8)
    9674:	3440260e 	bge	r6,r17,9710 <__s2b+0x110>
    9678:	3021883a 	mov	r16,r6
    967c:	99ab883a 	add	r21,r19,r6
    9680:	9c05883a 	add	r2,r19,r16
    9684:	11c00007 	ldb	r7,0(r2)
    9688:	400b883a 	mov	r5,r8
    968c:	9009883a 	mov	r4,r18
    9690:	39fff404 	addi	r7,r7,-48
    9694:	01800284 	movi	r6,10
    9698:	00093e00 	call	93e0 <__multadd>
    969c:	84000044 	addi	r16,r16,1
    96a0:	1011883a 	mov	r8,r2
    96a4:	8c3ff61e 	bne	r17,r16,9680 <__s2b+0x80>
    96a8:	ac45883a 	add	r2,r21,r17
    96ac:	117ffe04 	addi	r5,r2,-8
    96b0:	880d883a 	mov	r6,r17
    96b4:	35000c0e 	bge	r6,r20,96e8 <__s2b+0xe8>
    96b8:	a185c83a 	sub	r2,r20,r6
    96bc:	2821883a 	mov	r16,r5
    96c0:	28a3883a 	add	r17,r5,r2
    96c4:	81c00007 	ldb	r7,0(r16)
    96c8:	400b883a 	mov	r5,r8
    96cc:	9009883a 	mov	r4,r18
    96d0:	39fff404 	addi	r7,r7,-48
    96d4:	01800284 	movi	r6,10
    96d8:	00093e00 	call	93e0 <__multadd>
    96dc:	84000044 	addi	r16,r16,1
    96e0:	1011883a 	mov	r8,r2
    96e4:	847ff71e 	bne	r16,r17,96c4 <__s2b+0xc4>
    96e8:	4005883a 	mov	r2,r8
    96ec:	dfc00617 	ldw	ra,24(sp)
    96f0:	dd400517 	ldw	r21,20(sp)
    96f4:	dd000417 	ldw	r20,16(sp)
    96f8:	dcc00317 	ldw	r19,12(sp)
    96fc:	dc800217 	ldw	r18,8(sp)
    9700:	dc400117 	ldw	r17,4(sp)
    9704:	dc000017 	ldw	r16,0(sp)
    9708:	dec00704 	addi	sp,sp,28
    970c:	f800283a 	ret
    9710:	99400284 	addi	r5,r19,10
    9714:	003fe706 	br	96b4 <__s2b+0xb4>
    9718:	000b883a 	mov	r5,zero
    971c:	003fcd06 	br	9654 <__s2b+0x54>

00009720 <_realloc_r>:
    9720:	defff404 	addi	sp,sp,-48
    9724:	dd800815 	stw	r22,32(sp)
    9728:	dc800415 	stw	r18,16(sp)
    972c:	dc400315 	stw	r17,12(sp)
    9730:	dfc00b15 	stw	ra,44(sp)
    9734:	df000a15 	stw	fp,40(sp)
    9738:	ddc00915 	stw	r23,36(sp)
    973c:	dd400715 	stw	r21,28(sp)
    9740:	dd000615 	stw	r20,24(sp)
    9744:	dcc00515 	stw	r19,20(sp)
    9748:	dc000215 	stw	r16,8(sp)
    974c:	2825883a 	mov	r18,r5
    9750:	3023883a 	mov	r17,r6
    9754:	202d883a 	mov	r22,r4
    9758:	2800c926 	beq	r5,zero,9a80 <_realloc_r+0x360>
    975c:	000cde40 	call	cde4 <__malloc_lock>
    9760:	943ffe04 	addi	r16,r18,-8
    9764:	88c002c4 	addi	r3,r17,11
    9768:	00800584 	movi	r2,22
    976c:	82000117 	ldw	r8,4(r16)
    9770:	10c01b2e 	bgeu	r2,r3,97e0 <_realloc_r+0xc0>
    9774:	00bffe04 	movi	r2,-8
    9778:	188e703a 	and	r7,r3,r2
    977c:	3839883a 	mov	fp,r7
    9780:	38001a16 	blt	r7,zero,97ec <_realloc_r+0xcc>
    9784:	e4401936 	bltu	fp,r17,97ec <_realloc_r+0xcc>
    9788:	013fff04 	movi	r4,-4
    978c:	4126703a 	and	r19,r8,r4
    9790:	99c02616 	blt	r19,r7,982c <_realloc_r+0x10c>
    9794:	802b883a 	mov	r21,r16
    9798:	9829883a 	mov	r20,r19
    979c:	84000204 	addi	r16,r16,8
    97a0:	a80f883a 	mov	r7,r21
    97a4:	a70dc83a 	sub	r6,r20,fp
    97a8:	008003c4 	movi	r2,15
    97ac:	1180c136 	bltu	r2,r6,9ab4 <_realloc_r+0x394>
    97b0:	38800117 	ldw	r2,4(r7)
    97b4:	a549883a 	add	r4,r20,r21
    97b8:	1080004c 	andi	r2,r2,1
    97bc:	a084b03a 	or	r2,r20,r2
    97c0:	38800115 	stw	r2,4(r7)
    97c4:	20c00117 	ldw	r3,4(r4)
    97c8:	18c00054 	ori	r3,r3,1
    97cc:	20c00115 	stw	r3,4(r4)
    97d0:	b009883a 	mov	r4,r22
    97d4:	000ce040 	call	ce04 <__malloc_unlock>
    97d8:	8023883a 	mov	r17,r16
    97dc:	00000606 	br	97f8 <_realloc_r+0xd8>
    97e0:	01c00404 	movi	r7,16
    97e4:	3839883a 	mov	fp,r7
    97e8:	e47fe72e 	bgeu	fp,r17,9788 <_realloc_r+0x68>
    97ec:	00800304 	movi	r2,12
    97f0:	0023883a 	mov	r17,zero
    97f4:	b0800015 	stw	r2,0(r22)
    97f8:	8805883a 	mov	r2,r17
    97fc:	dfc00b17 	ldw	ra,44(sp)
    9800:	df000a17 	ldw	fp,40(sp)
    9804:	ddc00917 	ldw	r23,36(sp)
    9808:	dd800817 	ldw	r22,32(sp)
    980c:	dd400717 	ldw	r21,28(sp)
    9810:	dd000617 	ldw	r20,24(sp)
    9814:	dcc00517 	ldw	r19,20(sp)
    9818:	dc800417 	ldw	r18,16(sp)
    981c:	dc400317 	ldw	r17,12(sp)
    9820:	dc000217 	ldw	r16,8(sp)
    9824:	dec00c04 	addi	sp,sp,48
    9828:	f800283a 	ret
    982c:	00800074 	movhi	r2,1
    9830:	108fe204 	addi	r2,r2,16264
    9834:	12400217 	ldw	r9,8(r2)
    9838:	84cd883a 	add	r6,r16,r19
    983c:	802b883a 	mov	r21,r16
    9840:	3240b926 	beq	r6,r9,9b28 <_realloc_r+0x408>
    9844:	31400117 	ldw	r5,4(r6)
    9848:	00bfff84 	movi	r2,-2
    984c:	2884703a 	and	r2,r5,r2
    9850:	1185883a 	add	r2,r2,r6
    9854:	10c00117 	ldw	r3,4(r2)
    9858:	18c0004c 	andi	r3,r3,1
    985c:	1807003a 	cmpeq	r3,r3,zero
    9860:	1800a326 	beq	r3,zero,9af0 <_realloc_r+0x3d0>
    9864:	2908703a 	and	r4,r5,r4
    9868:	9929883a 	add	r20,r19,r4
    986c:	a1c0a30e 	bge	r20,r7,9afc <_realloc_r+0x3dc>
    9870:	4080004c 	andi	r2,r8,1
    9874:	1000551e 	bne	r2,zero,99cc <_realloc_r+0x2ac>
    9878:	80800017 	ldw	r2,0(r16)
    987c:	80afc83a 	sub	r23,r16,r2
    9880:	b8c00117 	ldw	r3,4(r23)
    9884:	00bfff04 	movi	r2,-4
    9888:	1884703a 	and	r2,r3,r2
    988c:	30002e26 	beq	r6,zero,9948 <_realloc_r+0x228>
    9890:	3240b926 	beq	r6,r9,9b78 <_realloc_r+0x458>
    9894:	98a9883a 	add	r20,r19,r2
    9898:	2509883a 	add	r4,r4,r20
    989c:	d9000015 	stw	r4,0(sp)
    98a0:	21c02a16 	blt	r4,r7,994c <_realloc_r+0x22c>
    98a4:	30800317 	ldw	r2,12(r6)
    98a8:	30c00217 	ldw	r3,8(r6)
    98ac:	01400904 	movi	r5,36
    98b0:	99bfff04 	addi	r6,r19,-4
    98b4:	18800315 	stw	r2,12(r3)
    98b8:	10c00215 	stw	r3,8(r2)
    98bc:	b9000317 	ldw	r4,12(r23)
    98c0:	b8800217 	ldw	r2,8(r23)
    98c4:	b82b883a 	mov	r21,r23
    98c8:	bc000204 	addi	r16,r23,8
    98cc:	20800215 	stw	r2,8(r4)
    98d0:	11000315 	stw	r4,12(r2)
    98d4:	2980e436 	bltu	r5,r6,9c68 <_realloc_r+0x548>
    98d8:	008004c4 	movi	r2,19
    98dc:	9009883a 	mov	r4,r18
    98e0:	8011883a 	mov	r8,r16
    98e4:	11800f2e 	bgeu	r2,r6,9924 <_realloc_r+0x204>
    98e8:	90800017 	ldw	r2,0(r18)
    98ec:	ba000404 	addi	r8,r23,16
    98f0:	91000204 	addi	r4,r18,8
    98f4:	b8800215 	stw	r2,8(r23)
    98f8:	90c00117 	ldw	r3,4(r18)
    98fc:	008006c4 	movi	r2,27
    9900:	b8c00315 	stw	r3,12(r23)
    9904:	1180072e 	bgeu	r2,r6,9924 <_realloc_r+0x204>
    9908:	90c00217 	ldw	r3,8(r18)
    990c:	ba000604 	addi	r8,r23,24
    9910:	91000404 	addi	r4,r18,16
    9914:	b8c00415 	stw	r3,16(r23)
    9918:	90800317 	ldw	r2,12(r18)
    991c:	b8800515 	stw	r2,20(r23)
    9920:	3140e726 	beq	r6,r5,9cc0 <_realloc_r+0x5a0>
    9924:	20800017 	ldw	r2,0(r4)
    9928:	dd000017 	ldw	r20,0(sp)
    992c:	b80f883a 	mov	r7,r23
    9930:	40800015 	stw	r2,0(r8)
    9934:	20c00117 	ldw	r3,4(r4)
    9938:	40c00115 	stw	r3,4(r8)
    993c:	20800217 	ldw	r2,8(r4)
    9940:	40800215 	stw	r2,8(r8)
    9944:	003f9706 	br	97a4 <_realloc_r+0x84>
    9948:	98a9883a 	add	r20,r19,r2
    994c:	a1c01f16 	blt	r20,r7,99cc <_realloc_r+0x2ac>
    9950:	b8c00317 	ldw	r3,12(r23)
    9954:	b8800217 	ldw	r2,8(r23)
    9958:	99bfff04 	addi	r6,r19,-4
    995c:	01400904 	movi	r5,36
    9960:	b82b883a 	mov	r21,r23
    9964:	18800215 	stw	r2,8(r3)
    9968:	10c00315 	stw	r3,12(r2)
    996c:	bc000204 	addi	r16,r23,8
    9970:	2980c336 	bltu	r5,r6,9c80 <_realloc_r+0x560>
    9974:	008004c4 	movi	r2,19
    9978:	9009883a 	mov	r4,r18
    997c:	8011883a 	mov	r8,r16
    9980:	11800f2e 	bgeu	r2,r6,99c0 <_realloc_r+0x2a0>
    9984:	90800017 	ldw	r2,0(r18)
    9988:	ba000404 	addi	r8,r23,16
    998c:	91000204 	addi	r4,r18,8
    9990:	b8800215 	stw	r2,8(r23)
    9994:	90c00117 	ldw	r3,4(r18)
    9998:	008006c4 	movi	r2,27
    999c:	b8c00315 	stw	r3,12(r23)
    99a0:	1180072e 	bgeu	r2,r6,99c0 <_realloc_r+0x2a0>
    99a4:	90c00217 	ldw	r3,8(r18)
    99a8:	ba000604 	addi	r8,r23,24
    99ac:	91000404 	addi	r4,r18,16
    99b0:	b8c00415 	stw	r3,16(r23)
    99b4:	90800317 	ldw	r2,12(r18)
    99b8:	b8800515 	stw	r2,20(r23)
    99bc:	3140c726 	beq	r6,r5,9cdc <_realloc_r+0x5bc>
    99c0:	20800017 	ldw	r2,0(r4)
    99c4:	b80f883a 	mov	r7,r23
    99c8:	003fd906 	br	9930 <_realloc_r+0x210>
    99cc:	880b883a 	mov	r5,r17
    99d0:	b009883a 	mov	r4,r22
    99d4:	0007e280 	call	7e28 <_malloc_r>
    99d8:	1023883a 	mov	r17,r2
    99dc:	10002526 	beq	r2,zero,9a74 <_realloc_r+0x354>
    99e0:	80800117 	ldw	r2,4(r16)
    99e4:	00ffff84 	movi	r3,-2
    99e8:	893ffe04 	addi	r4,r17,-8
    99ec:	10c4703a 	and	r2,r2,r3
    99f0:	8085883a 	add	r2,r16,r2
    99f4:	20809526 	beq	r4,r2,9c4c <_realloc_r+0x52c>
    99f8:	99bfff04 	addi	r6,r19,-4
    99fc:	01c00904 	movi	r7,36
    9a00:	39804536 	bltu	r7,r6,9b18 <_realloc_r+0x3f8>
    9a04:	008004c4 	movi	r2,19
    9a08:	9009883a 	mov	r4,r18
    9a0c:	880b883a 	mov	r5,r17
    9a10:	11800f2e 	bgeu	r2,r6,9a50 <_realloc_r+0x330>
    9a14:	90800017 	ldw	r2,0(r18)
    9a18:	89400204 	addi	r5,r17,8
    9a1c:	91000204 	addi	r4,r18,8
    9a20:	88800015 	stw	r2,0(r17)
    9a24:	90c00117 	ldw	r3,4(r18)
    9a28:	008006c4 	movi	r2,27
    9a2c:	88c00115 	stw	r3,4(r17)
    9a30:	1180072e 	bgeu	r2,r6,9a50 <_realloc_r+0x330>
    9a34:	90c00217 	ldw	r3,8(r18)
    9a38:	89400404 	addi	r5,r17,16
    9a3c:	91000404 	addi	r4,r18,16
    9a40:	88c00215 	stw	r3,8(r17)
    9a44:	90800317 	ldw	r2,12(r18)
    9a48:	88800315 	stw	r2,12(r17)
    9a4c:	31c09126 	beq	r6,r7,9c94 <_realloc_r+0x574>
    9a50:	20800017 	ldw	r2,0(r4)
    9a54:	28800015 	stw	r2,0(r5)
    9a58:	20c00117 	ldw	r3,4(r4)
    9a5c:	28c00115 	stw	r3,4(r5)
    9a60:	20800217 	ldw	r2,8(r4)
    9a64:	28800215 	stw	r2,8(r5)
    9a68:	900b883a 	mov	r5,r18
    9a6c:	b009883a 	mov	r4,r22
    9a70:	00072a00 	call	72a0 <_free_r>
    9a74:	b009883a 	mov	r4,r22
    9a78:	000ce040 	call	ce04 <__malloc_unlock>
    9a7c:	003f5e06 	br	97f8 <_realloc_r+0xd8>
    9a80:	300b883a 	mov	r5,r6
    9a84:	dfc00b17 	ldw	ra,44(sp)
    9a88:	df000a17 	ldw	fp,40(sp)
    9a8c:	ddc00917 	ldw	r23,36(sp)
    9a90:	dd800817 	ldw	r22,32(sp)
    9a94:	dd400717 	ldw	r21,28(sp)
    9a98:	dd000617 	ldw	r20,24(sp)
    9a9c:	dcc00517 	ldw	r19,20(sp)
    9aa0:	dc800417 	ldw	r18,16(sp)
    9aa4:	dc400317 	ldw	r17,12(sp)
    9aa8:	dc000217 	ldw	r16,8(sp)
    9aac:	dec00c04 	addi	sp,sp,48
    9ab0:	0007e281 	jmpi	7e28 <_malloc_r>
    9ab4:	38800117 	ldw	r2,4(r7)
    9ab8:	e54b883a 	add	r5,fp,r21
    9abc:	31000054 	ori	r4,r6,1
    9ac0:	1080004c 	andi	r2,r2,1
    9ac4:	1704b03a 	or	r2,r2,fp
    9ac8:	38800115 	stw	r2,4(r7)
    9acc:	29000115 	stw	r4,4(r5)
    9ad0:	2987883a 	add	r3,r5,r6
    9ad4:	18800117 	ldw	r2,4(r3)
    9ad8:	29400204 	addi	r5,r5,8
    9adc:	b009883a 	mov	r4,r22
    9ae0:	10800054 	ori	r2,r2,1
    9ae4:	18800115 	stw	r2,4(r3)
    9ae8:	00072a00 	call	72a0 <_free_r>
    9aec:	003f3806 	br	97d0 <_realloc_r+0xb0>
    9af0:	000d883a 	mov	r6,zero
    9af4:	0009883a 	mov	r4,zero
    9af8:	003f5d06 	br	9870 <_realloc_r+0x150>
    9afc:	30c00217 	ldw	r3,8(r6)
    9b00:	30800317 	ldw	r2,12(r6)
    9b04:	800f883a 	mov	r7,r16
    9b08:	84000204 	addi	r16,r16,8
    9b0c:	10c00215 	stw	r3,8(r2)
    9b10:	18800315 	stw	r2,12(r3)
    9b14:	003f2306 	br	97a4 <_realloc_r+0x84>
    9b18:	8809883a 	mov	r4,r17
    9b1c:	900b883a 	mov	r5,r18
    9b20:	000864c0 	call	864c <memmove>
    9b24:	003fd006 	br	9a68 <_realloc_r+0x348>
    9b28:	30800117 	ldw	r2,4(r6)
    9b2c:	e0c00404 	addi	r3,fp,16
    9b30:	1108703a 	and	r4,r2,r4
    9b34:	9905883a 	add	r2,r19,r4
    9b38:	10ff4d16 	blt	r2,r3,9870 <_realloc_r+0x150>
    9b3c:	1705c83a 	sub	r2,r2,fp
    9b40:	870b883a 	add	r5,r16,fp
    9b44:	10800054 	ori	r2,r2,1
    9b48:	28800115 	stw	r2,4(r5)
    9b4c:	80c00117 	ldw	r3,4(r16)
    9b50:	00800074 	movhi	r2,1
    9b54:	108fe204 	addi	r2,r2,16264
    9b58:	b009883a 	mov	r4,r22
    9b5c:	18c0004c 	andi	r3,r3,1
    9b60:	e0c6b03a 	or	r3,fp,r3
    9b64:	11400215 	stw	r5,8(r2)
    9b68:	80c00115 	stw	r3,4(r16)
    9b6c:	000ce040 	call	ce04 <__malloc_unlock>
    9b70:	84400204 	addi	r17,r16,8
    9b74:	003f2006 	br	97f8 <_realloc_r+0xd8>
    9b78:	98a9883a 	add	r20,r19,r2
    9b7c:	2509883a 	add	r4,r4,r20
    9b80:	e0800404 	addi	r2,fp,16
    9b84:	d9000115 	stw	r4,4(sp)
    9b88:	20bf7016 	blt	r4,r2,994c <_realloc_r+0x22c>
    9b8c:	b8c00317 	ldw	r3,12(r23)
    9b90:	b8800217 	ldw	r2,8(r23)
    9b94:	99bfff04 	addi	r6,r19,-4
    9b98:	01400904 	movi	r5,36
    9b9c:	18800215 	stw	r2,8(r3)
    9ba0:	10c00315 	stw	r3,12(r2)
    9ba4:	bc400204 	addi	r17,r23,8
    9ba8:	29804136 	bltu	r5,r6,9cb0 <_realloc_r+0x590>
    9bac:	008004c4 	movi	r2,19
    9bb0:	9009883a 	mov	r4,r18
    9bb4:	880f883a 	mov	r7,r17
    9bb8:	11800f2e 	bgeu	r2,r6,9bf8 <_realloc_r+0x4d8>
    9bbc:	90800017 	ldw	r2,0(r18)
    9bc0:	b9c00404 	addi	r7,r23,16
    9bc4:	91000204 	addi	r4,r18,8
    9bc8:	b8800215 	stw	r2,8(r23)
    9bcc:	90c00117 	ldw	r3,4(r18)
    9bd0:	008006c4 	movi	r2,27
    9bd4:	b8c00315 	stw	r3,12(r23)
    9bd8:	1180072e 	bgeu	r2,r6,9bf8 <_realloc_r+0x4d8>
    9bdc:	90c00217 	ldw	r3,8(r18)
    9be0:	b9c00604 	addi	r7,r23,24
    9be4:	91000404 	addi	r4,r18,16
    9be8:	b8c00415 	stw	r3,16(r23)
    9bec:	90800317 	ldw	r2,12(r18)
    9bf0:	b8800515 	stw	r2,20(r23)
    9bf4:	31404026 	beq	r6,r5,9cf8 <_realloc_r+0x5d8>
    9bf8:	20800017 	ldw	r2,0(r4)
    9bfc:	38800015 	stw	r2,0(r7)
    9c00:	20c00117 	ldw	r3,4(r4)
    9c04:	38c00115 	stw	r3,4(r7)
    9c08:	20800217 	ldw	r2,8(r4)
    9c0c:	38800215 	stw	r2,8(r7)
    9c10:	d8c00117 	ldw	r3,4(sp)
    9c14:	bf0b883a 	add	r5,r23,fp
    9c18:	b009883a 	mov	r4,r22
    9c1c:	1f05c83a 	sub	r2,r3,fp
    9c20:	10800054 	ori	r2,r2,1
    9c24:	28800115 	stw	r2,4(r5)
    9c28:	b8c00117 	ldw	r3,4(r23)
    9c2c:	00800074 	movhi	r2,1
    9c30:	108fe204 	addi	r2,r2,16264
    9c34:	11400215 	stw	r5,8(r2)
    9c38:	18c0004c 	andi	r3,r3,1
    9c3c:	e0c6b03a 	or	r3,fp,r3
    9c40:	b8c00115 	stw	r3,4(r23)
    9c44:	000ce040 	call	ce04 <__malloc_unlock>
    9c48:	003eeb06 	br	97f8 <_realloc_r+0xd8>
    9c4c:	20800117 	ldw	r2,4(r4)
    9c50:	00ffff04 	movi	r3,-4
    9c54:	800f883a 	mov	r7,r16
    9c58:	10c4703a 	and	r2,r2,r3
    9c5c:	98a9883a 	add	r20,r19,r2
    9c60:	84000204 	addi	r16,r16,8
    9c64:	003ecf06 	br	97a4 <_realloc_r+0x84>
    9c68:	900b883a 	mov	r5,r18
    9c6c:	8009883a 	mov	r4,r16
    9c70:	000864c0 	call	864c <memmove>
    9c74:	dd000017 	ldw	r20,0(sp)
    9c78:	b80f883a 	mov	r7,r23
    9c7c:	003ec906 	br	97a4 <_realloc_r+0x84>
    9c80:	900b883a 	mov	r5,r18
    9c84:	8009883a 	mov	r4,r16
    9c88:	000864c0 	call	864c <memmove>
    9c8c:	b80f883a 	mov	r7,r23
    9c90:	003ec406 	br	97a4 <_realloc_r+0x84>
    9c94:	90c00417 	ldw	r3,16(r18)
    9c98:	89400604 	addi	r5,r17,24
    9c9c:	91000604 	addi	r4,r18,24
    9ca0:	88c00415 	stw	r3,16(r17)
    9ca4:	90800517 	ldw	r2,20(r18)
    9ca8:	88800515 	stw	r2,20(r17)
    9cac:	003f6806 	br	9a50 <_realloc_r+0x330>
    9cb0:	900b883a 	mov	r5,r18
    9cb4:	8809883a 	mov	r4,r17
    9cb8:	000864c0 	call	864c <memmove>
    9cbc:	003fd406 	br	9c10 <_realloc_r+0x4f0>
    9cc0:	90c00417 	ldw	r3,16(r18)
    9cc4:	91000604 	addi	r4,r18,24
    9cc8:	ba000804 	addi	r8,r23,32
    9ccc:	b8c00615 	stw	r3,24(r23)
    9cd0:	90800517 	ldw	r2,20(r18)
    9cd4:	b8800715 	stw	r2,28(r23)
    9cd8:	003f1206 	br	9924 <_realloc_r+0x204>
    9cdc:	90c00417 	ldw	r3,16(r18)
    9ce0:	91000604 	addi	r4,r18,24
    9ce4:	ba000804 	addi	r8,r23,32
    9ce8:	b8c00615 	stw	r3,24(r23)
    9cec:	90800517 	ldw	r2,20(r18)
    9cf0:	b8800715 	stw	r2,28(r23)
    9cf4:	003f3206 	br	99c0 <_realloc_r+0x2a0>
    9cf8:	90c00417 	ldw	r3,16(r18)
    9cfc:	91000604 	addi	r4,r18,24
    9d00:	b9c00804 	addi	r7,r23,32
    9d04:	b8c00615 	stw	r3,24(r23)
    9d08:	90800517 	ldw	r2,20(r18)
    9d0c:	b8800715 	stw	r2,28(r23)
    9d10:	003fb906 	br	9bf8 <_realloc_r+0x4d8>

00009d14 <__isinfd>:
    9d14:	200d883a 	mov	r6,r4
    9d18:	0109c83a 	sub	r4,zero,r4
    9d1c:	2188b03a 	or	r4,r4,r6
    9d20:	2008d7fa 	srli	r4,r4,31
    9d24:	00a00034 	movhi	r2,32768
    9d28:	10bfffc4 	addi	r2,r2,-1
    9d2c:	1144703a 	and	r2,r2,r5
    9d30:	2088b03a 	or	r4,r4,r2
    9d34:	009ffc34 	movhi	r2,32752
    9d38:	1105c83a 	sub	r2,r2,r4
    9d3c:	0087c83a 	sub	r3,zero,r2
    9d40:	10c4b03a 	or	r2,r2,r3
    9d44:	1004d7fa 	srli	r2,r2,31
    9d48:	00c00044 	movi	r3,1
    9d4c:	1885c83a 	sub	r2,r3,r2
    9d50:	f800283a 	ret

00009d54 <__isnand>:
    9d54:	200d883a 	mov	r6,r4
    9d58:	0109c83a 	sub	r4,zero,r4
    9d5c:	2188b03a 	or	r4,r4,r6
    9d60:	2008d7fa 	srli	r4,r4,31
    9d64:	00a00034 	movhi	r2,32768
    9d68:	10bfffc4 	addi	r2,r2,-1
    9d6c:	1144703a 	and	r2,r2,r5
    9d70:	2088b03a 	or	r4,r4,r2
    9d74:	009ffc34 	movhi	r2,32752
    9d78:	1105c83a 	sub	r2,r2,r4
    9d7c:	1004d7fa 	srli	r2,r2,31
    9d80:	f800283a 	ret

00009d84 <_sbrk_r>:
    9d84:	defffd04 	addi	sp,sp,-12
    9d88:	dc000015 	stw	r16,0(sp)
    9d8c:	04000074 	movhi	r16,1
    9d90:	841e5604 	addi	r16,r16,31064
    9d94:	dc400115 	stw	r17,4(sp)
    9d98:	80000015 	stw	zero,0(r16)
    9d9c:	2023883a 	mov	r17,r4
    9da0:	2809883a 	mov	r4,r5
    9da4:	dfc00215 	stw	ra,8(sp)
    9da8:	000d29c0 	call	d29c <sbrk>
    9dac:	1007883a 	mov	r3,r2
    9db0:	00bfffc4 	movi	r2,-1
    9db4:	18800626 	beq	r3,r2,9dd0 <_sbrk_r+0x4c>
    9db8:	1805883a 	mov	r2,r3
    9dbc:	dfc00217 	ldw	ra,8(sp)
    9dc0:	dc400117 	ldw	r17,4(sp)
    9dc4:	dc000017 	ldw	r16,0(sp)
    9dc8:	dec00304 	addi	sp,sp,12
    9dcc:	f800283a 	ret
    9dd0:	80800017 	ldw	r2,0(r16)
    9dd4:	103ff826 	beq	r2,zero,9db8 <_sbrk_r+0x34>
    9dd8:	88800015 	stw	r2,0(r17)
    9ddc:	1805883a 	mov	r2,r3
    9de0:	dfc00217 	ldw	ra,8(sp)
    9de4:	dc400117 	ldw	r17,4(sp)
    9de8:	dc000017 	ldw	r16,0(sp)
    9dec:	dec00304 	addi	sp,sp,12
    9df0:	f800283a 	ret

00009df4 <__sclose>:
    9df4:	2940038f 	ldh	r5,14(r5)
    9df8:	000a19c1 	jmpi	a19c <_close_r>

00009dfc <__sseek>:
    9dfc:	defffe04 	addi	sp,sp,-8
    9e00:	dc000015 	stw	r16,0(sp)
    9e04:	2821883a 	mov	r16,r5
    9e08:	2940038f 	ldh	r5,14(r5)
    9e0c:	dfc00115 	stw	ra,4(sp)
    9e10:	000a4140 	call	a414 <_lseek_r>
    9e14:	1007883a 	mov	r3,r2
    9e18:	00bfffc4 	movi	r2,-1
    9e1c:	18800926 	beq	r3,r2,9e44 <__sseek+0x48>
    9e20:	8080030b 	ldhu	r2,12(r16)
    9e24:	80c01415 	stw	r3,80(r16)
    9e28:	10840014 	ori	r2,r2,4096
    9e2c:	8080030d 	sth	r2,12(r16)
    9e30:	1805883a 	mov	r2,r3
    9e34:	dfc00117 	ldw	ra,4(sp)
    9e38:	dc000017 	ldw	r16,0(sp)
    9e3c:	dec00204 	addi	sp,sp,8
    9e40:	f800283a 	ret
    9e44:	8080030b 	ldhu	r2,12(r16)
    9e48:	10bbffcc 	andi	r2,r2,61439
    9e4c:	8080030d 	sth	r2,12(r16)
    9e50:	1805883a 	mov	r2,r3
    9e54:	dfc00117 	ldw	ra,4(sp)
    9e58:	dc000017 	ldw	r16,0(sp)
    9e5c:	dec00204 	addi	sp,sp,8
    9e60:	f800283a 	ret

00009e64 <__swrite>:
    9e64:	2880030b 	ldhu	r2,12(r5)
    9e68:	defffb04 	addi	sp,sp,-20
    9e6c:	dcc00315 	stw	r19,12(sp)
    9e70:	1080400c 	andi	r2,r2,256
    9e74:	dc800215 	stw	r18,8(sp)
    9e78:	dc400115 	stw	r17,4(sp)
    9e7c:	dc000015 	stw	r16,0(sp)
    9e80:	3027883a 	mov	r19,r6
    9e84:	3825883a 	mov	r18,r7
    9e88:	dfc00415 	stw	ra,16(sp)
    9e8c:	2821883a 	mov	r16,r5
    9e90:	000d883a 	mov	r6,zero
    9e94:	01c00084 	movi	r7,2
    9e98:	2023883a 	mov	r17,r4
    9e9c:	10000226 	beq	r2,zero,9ea8 <__swrite+0x44>
    9ea0:	2940038f 	ldh	r5,14(r5)
    9ea4:	000a4140 	call	a414 <_lseek_r>
    9ea8:	8080030b 	ldhu	r2,12(r16)
    9eac:	8140038f 	ldh	r5,14(r16)
    9eb0:	8809883a 	mov	r4,r17
    9eb4:	10bbffcc 	andi	r2,r2,61439
    9eb8:	980d883a 	mov	r6,r19
    9ebc:	900f883a 	mov	r7,r18
    9ec0:	8080030d 	sth	r2,12(r16)
    9ec4:	dfc00417 	ldw	ra,16(sp)
    9ec8:	dcc00317 	ldw	r19,12(sp)
    9ecc:	dc800217 	ldw	r18,8(sp)
    9ed0:	dc400117 	ldw	r17,4(sp)
    9ed4:	dc000017 	ldw	r16,0(sp)
    9ed8:	dec00504 	addi	sp,sp,20
    9edc:	000a0701 	jmpi	a070 <_write_r>

00009ee0 <__sread>:
    9ee0:	defffe04 	addi	sp,sp,-8
    9ee4:	dc000015 	stw	r16,0(sp)
    9ee8:	2821883a 	mov	r16,r5
    9eec:	2940038f 	ldh	r5,14(r5)
    9ef0:	dfc00115 	stw	ra,4(sp)
    9ef4:	000a48c0 	call	a48c <_read_r>
    9ef8:	1007883a 	mov	r3,r2
    9efc:	10000816 	blt	r2,zero,9f20 <__sread+0x40>
    9f00:	80801417 	ldw	r2,80(r16)
    9f04:	10c5883a 	add	r2,r2,r3
    9f08:	80801415 	stw	r2,80(r16)
    9f0c:	1805883a 	mov	r2,r3
    9f10:	dfc00117 	ldw	ra,4(sp)
    9f14:	dc000017 	ldw	r16,0(sp)
    9f18:	dec00204 	addi	sp,sp,8
    9f1c:	f800283a 	ret
    9f20:	8080030b 	ldhu	r2,12(r16)
    9f24:	10bbffcc 	andi	r2,r2,61439
    9f28:	8080030d 	sth	r2,12(r16)
    9f2c:	1805883a 	mov	r2,r3
    9f30:	dfc00117 	ldw	ra,4(sp)
    9f34:	dc000017 	ldw	r16,0(sp)
    9f38:	dec00204 	addi	sp,sp,8
    9f3c:	f800283a 	ret

00009f40 <strcmp>:
    9f40:	2144b03a 	or	r2,r4,r5
    9f44:	108000cc 	andi	r2,r2,3
    9f48:	10001d1e 	bne	r2,zero,9fc0 <strcmp+0x80>
    9f4c:	200f883a 	mov	r7,r4
    9f50:	28800017 	ldw	r2,0(r5)
    9f54:	21000017 	ldw	r4,0(r4)
    9f58:	280d883a 	mov	r6,r5
    9f5c:	2080161e 	bne	r4,r2,9fb8 <strcmp+0x78>
    9f60:	023fbff4 	movhi	r8,65279
    9f64:	423fbfc4 	addi	r8,r8,-257
    9f68:	2207883a 	add	r3,r4,r8
    9f6c:	01602074 	movhi	r5,32897
    9f70:	29602004 	addi	r5,r5,-32640
    9f74:	1946703a 	and	r3,r3,r5
    9f78:	0104303a 	nor	r2,zero,r4
    9f7c:	10c4703a 	and	r2,r2,r3
    9f80:	10001c1e 	bne	r2,zero,9ff4 <strcmp+0xb4>
    9f84:	4013883a 	mov	r9,r8
    9f88:	2811883a 	mov	r8,r5
    9f8c:	00000106 	br	9f94 <strcmp+0x54>
    9f90:	1800181e 	bne	r3,zero,9ff4 <strcmp+0xb4>
    9f94:	39c00104 	addi	r7,r7,4
    9f98:	39000017 	ldw	r4,0(r7)
    9f9c:	31800104 	addi	r6,r6,4
    9fa0:	31400017 	ldw	r5,0(r6)
    9fa4:	2245883a 	add	r2,r4,r9
    9fa8:	1204703a 	and	r2,r2,r8
    9fac:	0106303a 	nor	r3,zero,r4
    9fb0:	1886703a 	and	r3,r3,r2
    9fb4:	217ff626 	beq	r4,r5,9f90 <strcmp+0x50>
    9fb8:	3809883a 	mov	r4,r7
    9fbc:	300b883a 	mov	r5,r6
    9fc0:	20c00007 	ldb	r3,0(r4)
    9fc4:	1800051e 	bne	r3,zero,9fdc <strcmp+0x9c>
    9fc8:	00000606 	br	9fe4 <strcmp+0xa4>
    9fcc:	21000044 	addi	r4,r4,1
    9fd0:	20c00007 	ldb	r3,0(r4)
    9fd4:	29400044 	addi	r5,r5,1
    9fd8:	18000226 	beq	r3,zero,9fe4 <strcmp+0xa4>
    9fdc:	28800007 	ldb	r2,0(r5)
    9fe0:	18bffa26 	beq	r3,r2,9fcc <strcmp+0x8c>
    9fe4:	20c00003 	ldbu	r3,0(r4)
    9fe8:	28800003 	ldbu	r2,0(r5)
    9fec:	1885c83a 	sub	r2,r3,r2
    9ff0:	f800283a 	ret
    9ff4:	0005883a 	mov	r2,zero
    9ff8:	f800283a 	ret

00009ffc <strlen>:
    9ffc:	208000cc 	andi	r2,r4,3
    a000:	2011883a 	mov	r8,r4
    a004:	1000161e 	bne	r2,zero,a060 <strlen+0x64>
    a008:	20c00017 	ldw	r3,0(r4)
    a00c:	017fbff4 	movhi	r5,65279
    a010:	297fbfc4 	addi	r5,r5,-257
    a014:	01e02074 	movhi	r7,32897
    a018:	39e02004 	addi	r7,r7,-32640
    a01c:	1945883a 	add	r2,r3,r5
    a020:	11c4703a 	and	r2,r2,r7
    a024:	00c6303a 	nor	r3,zero,r3
    a028:	1886703a 	and	r3,r3,r2
    a02c:	18000c1e 	bne	r3,zero,a060 <strlen+0x64>
    a030:	280d883a 	mov	r6,r5
    a034:	380b883a 	mov	r5,r7
    a038:	21000104 	addi	r4,r4,4
    a03c:	20800017 	ldw	r2,0(r4)
    a040:	1187883a 	add	r3,r2,r6
    a044:	1946703a 	and	r3,r3,r5
    a048:	0084303a 	nor	r2,zero,r2
    a04c:	10c4703a 	and	r2,r2,r3
    a050:	103ff926 	beq	r2,zero,a038 <strlen+0x3c>
    a054:	20800007 	ldb	r2,0(r4)
    a058:	10000326 	beq	r2,zero,a068 <strlen+0x6c>
    a05c:	21000044 	addi	r4,r4,1
    a060:	20800007 	ldb	r2,0(r4)
    a064:	103ffd1e 	bne	r2,zero,a05c <strlen+0x60>
    a068:	2205c83a 	sub	r2,r4,r8
    a06c:	f800283a 	ret

0000a070 <_write_r>:
    a070:	defffd04 	addi	sp,sp,-12
    a074:	dc000015 	stw	r16,0(sp)
    a078:	04000074 	movhi	r16,1
    a07c:	841e5604 	addi	r16,r16,31064
    a080:	dc400115 	stw	r17,4(sp)
    a084:	80000015 	stw	zero,0(r16)
    a088:	2023883a 	mov	r17,r4
    a08c:	2809883a 	mov	r4,r5
    a090:	300b883a 	mov	r5,r6
    a094:	380d883a 	mov	r6,r7
    a098:	dfc00215 	stw	ra,8(sp)
    a09c:	000d3580 	call	d358 <write>
    a0a0:	1007883a 	mov	r3,r2
    a0a4:	00bfffc4 	movi	r2,-1
    a0a8:	18800626 	beq	r3,r2,a0c4 <_write_r+0x54>
    a0ac:	1805883a 	mov	r2,r3
    a0b0:	dfc00217 	ldw	ra,8(sp)
    a0b4:	dc400117 	ldw	r17,4(sp)
    a0b8:	dc000017 	ldw	r16,0(sp)
    a0bc:	dec00304 	addi	sp,sp,12
    a0c0:	f800283a 	ret
    a0c4:	80800017 	ldw	r2,0(r16)
    a0c8:	103ff826 	beq	r2,zero,a0ac <_write_r+0x3c>
    a0cc:	88800015 	stw	r2,0(r17)
    a0d0:	1805883a 	mov	r2,r3
    a0d4:	dfc00217 	ldw	ra,8(sp)
    a0d8:	dc400117 	ldw	r17,4(sp)
    a0dc:	dc000017 	ldw	r16,0(sp)
    a0e0:	dec00304 	addi	sp,sp,12
    a0e4:	f800283a 	ret

0000a0e8 <_calloc_r>:
    a0e8:	298b383a 	mul	r5,r5,r6
    a0ec:	defffe04 	addi	sp,sp,-8
    a0f0:	dc000015 	stw	r16,0(sp)
    a0f4:	dfc00115 	stw	ra,4(sp)
    a0f8:	0007e280 	call	7e28 <_malloc_r>
    a0fc:	1021883a 	mov	r16,r2
    a100:	01c00904 	movi	r7,36
    a104:	10000d26 	beq	r2,zero,a13c <_calloc_r+0x54>
    a108:	10ffff17 	ldw	r3,-4(r2)
    a10c:	1009883a 	mov	r4,r2
    a110:	00bfff04 	movi	r2,-4
    a114:	1886703a 	and	r3,r3,r2
    a118:	1887883a 	add	r3,r3,r2
    a11c:	180d883a 	mov	r6,r3
    a120:	000b883a 	mov	r5,zero
    a124:	38c01736 	bltu	r7,r3,a184 <_calloc_r+0x9c>
    a128:	008004c4 	movi	r2,19
    a12c:	10c00836 	bltu	r2,r3,a150 <_calloc_r+0x68>
    a130:	20000215 	stw	zero,8(r4)
    a134:	20000015 	stw	zero,0(r4)
    a138:	20000115 	stw	zero,4(r4)
    a13c:	8005883a 	mov	r2,r16
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	dc000017 	ldw	r16,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret
    a150:	008006c4 	movi	r2,27
    a154:	80000015 	stw	zero,0(r16)
    a158:	80000115 	stw	zero,4(r16)
    a15c:	81000204 	addi	r4,r16,8
    a160:	10fff32e 	bgeu	r2,r3,a130 <_calloc_r+0x48>
    a164:	80000215 	stw	zero,8(r16)
    a168:	80000315 	stw	zero,12(r16)
    a16c:	81000404 	addi	r4,r16,16
    a170:	19ffef1e 	bne	r3,r7,a130 <_calloc_r+0x48>
    a174:	81000604 	addi	r4,r16,24
    a178:	80000415 	stw	zero,16(r16)
    a17c:	80000515 	stw	zero,20(r16)
    a180:	003feb06 	br	a130 <_calloc_r+0x48>
    a184:	00033440 	call	3344 <memset>
    a188:	8005883a 	mov	r2,r16
    a18c:	dfc00117 	ldw	ra,4(sp)
    a190:	dc000017 	ldw	r16,0(sp)
    a194:	dec00204 	addi	sp,sp,8
    a198:	f800283a 	ret

0000a19c <_close_r>:
    a19c:	defffd04 	addi	sp,sp,-12
    a1a0:	dc000015 	stw	r16,0(sp)
    a1a4:	04000074 	movhi	r16,1
    a1a8:	841e5604 	addi	r16,r16,31064
    a1ac:	dc400115 	stw	r17,4(sp)
    a1b0:	80000015 	stw	zero,0(r16)
    a1b4:	2023883a 	mov	r17,r4
    a1b8:	2809883a 	mov	r4,r5
    a1bc:	dfc00215 	stw	ra,8(sp)
    a1c0:	000c5a00 	call	c5a0 <close>
    a1c4:	1007883a 	mov	r3,r2
    a1c8:	00bfffc4 	movi	r2,-1
    a1cc:	18800626 	beq	r3,r2,a1e8 <_close_r+0x4c>
    a1d0:	1805883a 	mov	r2,r3
    a1d4:	dfc00217 	ldw	ra,8(sp)
    a1d8:	dc400117 	ldw	r17,4(sp)
    a1dc:	dc000017 	ldw	r16,0(sp)
    a1e0:	dec00304 	addi	sp,sp,12
    a1e4:	f800283a 	ret
    a1e8:	80800017 	ldw	r2,0(r16)
    a1ec:	103ff826 	beq	r2,zero,a1d0 <_close_r+0x34>
    a1f0:	88800015 	stw	r2,0(r17)
    a1f4:	1805883a 	mov	r2,r3
    a1f8:	dfc00217 	ldw	ra,8(sp)
    a1fc:	dc400117 	ldw	r17,4(sp)
    a200:	dc000017 	ldw	r16,0(sp)
    a204:	dec00304 	addi	sp,sp,12
    a208:	f800283a 	ret

0000a20c <_fclose_r>:
    a20c:	defffc04 	addi	sp,sp,-16
    a210:	dc400115 	stw	r17,4(sp)
    a214:	dc000015 	stw	r16,0(sp)
    a218:	dfc00315 	stw	ra,12(sp)
    a21c:	dc800215 	stw	r18,8(sp)
    a220:	2821883a 	mov	r16,r5
    a224:	2023883a 	mov	r17,r4
    a228:	28002926 	beq	r5,zero,a2d0 <_fclose_r+0xc4>
    a22c:	0006f0c0 	call	6f0c <__sfp_lock_acquire>
    a230:	88000226 	beq	r17,zero,a23c <_fclose_r+0x30>
    a234:	88800e17 	ldw	r2,56(r17)
    a238:	10002d26 	beq	r2,zero,a2f0 <_fclose_r+0xe4>
    a23c:	8080030f 	ldh	r2,12(r16)
    a240:	10002226 	beq	r2,zero,a2cc <_fclose_r+0xc0>
    a244:	8809883a 	mov	r4,r17
    a248:	800b883a 	mov	r5,r16
    a24c:	0006c840 	call	6c84 <_fflush_r>
    a250:	1025883a 	mov	r18,r2
    a254:	80800b17 	ldw	r2,44(r16)
    a258:	10000426 	beq	r2,zero,a26c <_fclose_r+0x60>
    a25c:	81400717 	ldw	r5,28(r16)
    a260:	8809883a 	mov	r4,r17
    a264:	103ee83a 	callr	r2
    a268:	10002a16 	blt	r2,zero,a314 <_fclose_r+0x108>
    a26c:	8080030b 	ldhu	r2,12(r16)
    a270:	1080200c 	andi	r2,r2,128
    a274:	1000231e 	bne	r2,zero,a304 <_fclose_r+0xf8>
    a278:	81400c17 	ldw	r5,48(r16)
    a27c:	28000526 	beq	r5,zero,a294 <_fclose_r+0x88>
    a280:	80801004 	addi	r2,r16,64
    a284:	28800226 	beq	r5,r2,a290 <_fclose_r+0x84>
    a288:	8809883a 	mov	r4,r17
    a28c:	00072a00 	call	72a0 <_free_r>
    a290:	80000c15 	stw	zero,48(r16)
    a294:	81401117 	ldw	r5,68(r16)
    a298:	28000326 	beq	r5,zero,a2a8 <_fclose_r+0x9c>
    a29c:	8809883a 	mov	r4,r17
    a2a0:	00072a00 	call	72a0 <_free_r>
    a2a4:	80001115 	stw	zero,68(r16)
    a2a8:	8000030d 	sth	zero,12(r16)
    a2ac:	0006f100 	call	6f10 <__sfp_lock_release>
    a2b0:	9005883a 	mov	r2,r18
    a2b4:	dfc00317 	ldw	ra,12(sp)
    a2b8:	dc800217 	ldw	r18,8(sp)
    a2bc:	dc400117 	ldw	r17,4(sp)
    a2c0:	dc000017 	ldw	r16,0(sp)
    a2c4:	dec00404 	addi	sp,sp,16
    a2c8:	f800283a 	ret
    a2cc:	0006f100 	call	6f10 <__sfp_lock_release>
    a2d0:	0025883a 	mov	r18,zero
    a2d4:	9005883a 	mov	r2,r18
    a2d8:	dfc00317 	ldw	ra,12(sp)
    a2dc:	dc800217 	ldw	r18,8(sp)
    a2e0:	dc400117 	ldw	r17,4(sp)
    a2e4:	dc000017 	ldw	r16,0(sp)
    a2e8:	dec00404 	addi	sp,sp,16
    a2ec:	f800283a 	ret
    a2f0:	8809883a 	mov	r4,r17
    a2f4:	0006f1c0 	call	6f1c <__sinit>
    a2f8:	8080030f 	ldh	r2,12(r16)
    a2fc:	103fd11e 	bne	r2,zero,a244 <_fclose_r+0x38>
    a300:	003ff206 	br	a2cc <_fclose_r+0xc0>
    a304:	81400417 	ldw	r5,16(r16)
    a308:	8809883a 	mov	r4,r17
    a30c:	00072a00 	call	72a0 <_free_r>
    a310:	003fd906 	br	a278 <_fclose_r+0x6c>
    a314:	04bfffc4 	movi	r18,-1
    a318:	003fd406 	br	a26c <_fclose_r+0x60>

0000a31c <fclose>:
    a31c:	00800074 	movhi	r2,1
    a320:	10965a04 	addi	r2,r2,22888
    a324:	200b883a 	mov	r5,r4
    a328:	11000017 	ldw	r4,0(r2)
    a32c:	000a20c1 	jmpi	a20c <_fclose_r>

0000a330 <_fstat_r>:
    a330:	defffd04 	addi	sp,sp,-12
    a334:	dc000015 	stw	r16,0(sp)
    a338:	04000074 	movhi	r16,1
    a33c:	841e5604 	addi	r16,r16,31064
    a340:	dc400115 	stw	r17,4(sp)
    a344:	80000015 	stw	zero,0(r16)
    a348:	2023883a 	mov	r17,r4
    a34c:	2809883a 	mov	r4,r5
    a350:	300b883a 	mov	r5,r6
    a354:	dfc00215 	stw	ra,8(sp)
    a358:	000c7280 	call	c728 <fstat>
    a35c:	1007883a 	mov	r3,r2
    a360:	00bfffc4 	movi	r2,-1
    a364:	18800626 	beq	r3,r2,a380 <_fstat_r+0x50>
    a368:	1805883a 	mov	r2,r3
    a36c:	dfc00217 	ldw	ra,8(sp)
    a370:	dc400117 	ldw	r17,4(sp)
    a374:	dc000017 	ldw	r16,0(sp)
    a378:	dec00304 	addi	sp,sp,12
    a37c:	f800283a 	ret
    a380:	80800017 	ldw	r2,0(r16)
    a384:	103ff826 	beq	r2,zero,a368 <_fstat_r+0x38>
    a388:	88800015 	stw	r2,0(r17)
    a38c:	1805883a 	mov	r2,r3
    a390:	dfc00217 	ldw	ra,8(sp)
    a394:	dc400117 	ldw	r17,4(sp)
    a398:	dc000017 	ldw	r16,0(sp)
    a39c:	dec00304 	addi	sp,sp,12
    a3a0:	f800283a 	ret

0000a3a4 <_isatty_r>:
    a3a4:	defffd04 	addi	sp,sp,-12
    a3a8:	dc000015 	stw	r16,0(sp)
    a3ac:	04000074 	movhi	r16,1
    a3b0:	841e5604 	addi	r16,r16,31064
    a3b4:	dc400115 	stw	r17,4(sp)
    a3b8:	80000015 	stw	zero,0(r16)
    a3bc:	2023883a 	mov	r17,r4
    a3c0:	2809883a 	mov	r4,r5
    a3c4:	dfc00215 	stw	ra,8(sp)
    a3c8:	000ca1c0 	call	ca1c <isatty>
    a3cc:	1007883a 	mov	r3,r2
    a3d0:	00bfffc4 	movi	r2,-1
    a3d4:	18800626 	beq	r3,r2,a3f0 <_isatty_r+0x4c>
    a3d8:	1805883a 	mov	r2,r3
    a3dc:	dfc00217 	ldw	ra,8(sp)
    a3e0:	dc400117 	ldw	r17,4(sp)
    a3e4:	dc000017 	ldw	r16,0(sp)
    a3e8:	dec00304 	addi	sp,sp,12
    a3ec:	f800283a 	ret
    a3f0:	80800017 	ldw	r2,0(r16)
    a3f4:	103ff826 	beq	r2,zero,a3d8 <_isatty_r+0x34>
    a3f8:	88800015 	stw	r2,0(r17)
    a3fc:	1805883a 	mov	r2,r3
    a400:	dfc00217 	ldw	ra,8(sp)
    a404:	dc400117 	ldw	r17,4(sp)
    a408:	dc000017 	ldw	r16,0(sp)
    a40c:	dec00304 	addi	sp,sp,12
    a410:	f800283a 	ret

0000a414 <_lseek_r>:
    a414:	defffd04 	addi	sp,sp,-12
    a418:	dc000015 	stw	r16,0(sp)
    a41c:	04000074 	movhi	r16,1
    a420:	841e5604 	addi	r16,r16,31064
    a424:	dc400115 	stw	r17,4(sp)
    a428:	80000015 	stw	zero,0(r16)
    a42c:	2023883a 	mov	r17,r4
    a430:	2809883a 	mov	r4,r5
    a434:	300b883a 	mov	r5,r6
    a438:	380d883a 	mov	r6,r7
    a43c:	dfc00215 	stw	ra,8(sp)
    a440:	000cc280 	call	cc28 <lseek>
    a444:	1007883a 	mov	r3,r2
    a448:	00bfffc4 	movi	r2,-1
    a44c:	18800626 	beq	r3,r2,a468 <_lseek_r+0x54>
    a450:	1805883a 	mov	r2,r3
    a454:	dfc00217 	ldw	ra,8(sp)
    a458:	dc400117 	ldw	r17,4(sp)
    a45c:	dc000017 	ldw	r16,0(sp)
    a460:	dec00304 	addi	sp,sp,12
    a464:	f800283a 	ret
    a468:	80800017 	ldw	r2,0(r16)
    a46c:	103ff826 	beq	r2,zero,a450 <_lseek_r+0x3c>
    a470:	88800015 	stw	r2,0(r17)
    a474:	1805883a 	mov	r2,r3
    a478:	dfc00217 	ldw	ra,8(sp)
    a47c:	dc400117 	ldw	r17,4(sp)
    a480:	dc000017 	ldw	r16,0(sp)
    a484:	dec00304 	addi	sp,sp,12
    a488:	f800283a 	ret

0000a48c <_read_r>:
    a48c:	defffd04 	addi	sp,sp,-12
    a490:	dc000015 	stw	r16,0(sp)
    a494:	04000074 	movhi	r16,1
    a498:	841e5604 	addi	r16,r16,31064
    a49c:	dc400115 	stw	r17,4(sp)
    a4a0:	80000015 	stw	zero,0(r16)
    a4a4:	2023883a 	mov	r17,r4
    a4a8:	2809883a 	mov	r4,r5
    a4ac:	300b883a 	mov	r5,r6
    a4b0:	380d883a 	mov	r6,r7
    a4b4:	dfc00215 	stw	ra,8(sp)
    a4b8:	000d0bc0 	call	d0bc <read>
    a4bc:	1007883a 	mov	r3,r2
    a4c0:	00bfffc4 	movi	r2,-1
    a4c4:	18800626 	beq	r3,r2,a4e0 <_read_r+0x54>
    a4c8:	1805883a 	mov	r2,r3
    a4cc:	dfc00217 	ldw	ra,8(sp)
    a4d0:	dc400117 	ldw	r17,4(sp)
    a4d4:	dc000017 	ldw	r16,0(sp)
    a4d8:	dec00304 	addi	sp,sp,12
    a4dc:	f800283a 	ret
    a4e0:	80800017 	ldw	r2,0(r16)
    a4e4:	103ff826 	beq	r2,zero,a4c8 <_read_r+0x3c>
    a4e8:	88800015 	stw	r2,0(r17)
    a4ec:	1805883a 	mov	r2,r3
    a4f0:	dfc00217 	ldw	ra,8(sp)
    a4f4:	dc400117 	ldw	r17,4(sp)
    a4f8:	dc000017 	ldw	r16,0(sp)
    a4fc:	dec00304 	addi	sp,sp,12
    a500:	f800283a 	ret

0000a504 <__udivdi3>:
    a504:	defff004 	addi	sp,sp,-64
    a508:	2005883a 	mov	r2,r4
    a50c:	3011883a 	mov	r8,r6
    a510:	df000e15 	stw	fp,56(sp)
    a514:	dd000a15 	stw	r20,40(sp)
    a518:	dc000615 	stw	r16,24(sp)
    a51c:	dfc00f15 	stw	ra,60(sp)
    a520:	ddc00d15 	stw	r23,52(sp)
    a524:	dd800c15 	stw	r22,48(sp)
    a528:	dd400b15 	stw	r21,44(sp)
    a52c:	dcc00915 	stw	r19,36(sp)
    a530:	dc800815 	stw	r18,32(sp)
    a534:	dc400715 	stw	r17,28(sp)
    a538:	4021883a 	mov	r16,r8
    a53c:	1039883a 	mov	fp,r2
    a540:	2829883a 	mov	r20,r5
    a544:	38003b1e 	bne	r7,zero,a634 <__udivdi3+0x130>
    a548:	2a005c36 	bltu	r5,r8,a6bc <__udivdi3+0x1b8>
    a54c:	4000a626 	beq	r8,zero,a7e8 <__udivdi3+0x2e4>
    a550:	00bfffd4 	movui	r2,65535
    a554:	14009e36 	bltu	r2,r16,a7d0 <__udivdi3+0x2cc>
    a558:	00803fc4 	movi	r2,255
    a55c:	14013d36 	bltu	r2,r16,aa54 <__udivdi3+0x550>
    a560:	000b883a 	mov	r5,zero
    a564:	0005883a 	mov	r2,zero
    a568:	8084d83a 	srl	r2,r16,r2
    a56c:	01000074 	movhi	r4,1
    a570:	210d6f04 	addi	r4,r4,13756
    a574:	01800804 	movi	r6,32
    a578:	1105883a 	add	r2,r2,r4
    a57c:	10c00003 	ldbu	r3,0(r2)
    a580:	28c7883a 	add	r3,r5,r3
    a584:	30edc83a 	sub	r22,r6,r3
    a588:	b000ee1e 	bne	r22,zero,a944 <__udivdi3+0x440>
    a58c:	802ad43a 	srli	r21,r16,16
    a590:	00800044 	movi	r2,1
    a594:	a423c83a 	sub	r17,r20,r16
    a598:	85ffffcc 	andi	r23,r16,65535
    a59c:	d8800315 	stw	r2,12(sp)
    a5a0:	8809883a 	mov	r4,r17
    a5a4:	a80b883a 	mov	r5,r21
    a5a8:	000c2f80 	call	c2f8 <__udivsi3>
    a5ac:	8809883a 	mov	r4,r17
    a5b0:	a80b883a 	mov	r5,r21
    a5b4:	102d883a 	mov	r22,r2
    a5b8:	000c3000 	call	c300 <__umodsi3>
    a5bc:	1004943a 	slli	r2,r2,16
    a5c0:	e006d43a 	srli	r3,fp,16
    a5c4:	bda3383a 	mul	r17,r23,r22
    a5c8:	10c4b03a 	or	r2,r2,r3
    a5cc:	1440042e 	bgeu	r2,r17,a5e0 <__udivdi3+0xdc>
    a5d0:	1405883a 	add	r2,r2,r16
    a5d4:	b5bfffc4 	addi	r22,r22,-1
    a5d8:	14000136 	bltu	r2,r16,a5e0 <__udivdi3+0xdc>
    a5dc:	14413d36 	bltu	r2,r17,aad4 <__udivdi3+0x5d0>
    a5e0:	1463c83a 	sub	r17,r2,r17
    a5e4:	8809883a 	mov	r4,r17
    a5e8:	a80b883a 	mov	r5,r21
    a5ec:	000c2f80 	call	c2f8 <__udivsi3>
    a5f0:	8809883a 	mov	r4,r17
    a5f4:	a80b883a 	mov	r5,r21
    a5f8:	1029883a 	mov	r20,r2
    a5fc:	000c3000 	call	c300 <__umodsi3>
    a600:	1004943a 	slli	r2,r2,16
    a604:	bd09383a 	mul	r4,r23,r20
    a608:	e0ffffcc 	andi	r3,fp,65535
    a60c:	10c4b03a 	or	r2,r2,r3
    a610:	1100042e 	bgeu	r2,r4,a624 <__udivdi3+0x120>
    a614:	8085883a 	add	r2,r16,r2
    a618:	a53fffc4 	addi	r20,r20,-1
    a61c:	14000136 	bltu	r2,r16,a624 <__udivdi3+0x120>
    a620:	11012036 	bltu	r2,r4,aaa4 <__udivdi3+0x5a0>
    a624:	b004943a 	slli	r2,r22,16
    a628:	d9000317 	ldw	r4,12(sp)
    a62c:	a084b03a 	or	r2,r20,r2
    a630:	00001506 	br	a688 <__udivdi3+0x184>
    a634:	380d883a 	mov	r6,r7
    a638:	29c06236 	bltu	r5,r7,a7c4 <__udivdi3+0x2c0>
    a63c:	00bfffd4 	movui	r2,65535
    a640:	11c05a36 	bltu	r2,r7,a7ac <__udivdi3+0x2a8>
    a644:	00803fc4 	movi	r2,255
    a648:	11c0fc36 	bltu	r2,r7,aa3c <__udivdi3+0x538>
    a64c:	000b883a 	mov	r5,zero
    a650:	0005883a 	mov	r2,zero
    a654:	3084d83a 	srl	r2,r6,r2
    a658:	01000074 	movhi	r4,1
    a65c:	210d6f04 	addi	r4,r4,13756
    a660:	01c00804 	movi	r7,32
    a664:	1105883a 	add	r2,r2,r4
    a668:	10c00003 	ldbu	r3,0(r2)
    a66c:	28c7883a 	add	r3,r5,r3
    a670:	38efc83a 	sub	r23,r7,r3
    a674:	b800691e 	bne	r23,zero,a81c <__udivdi3+0x318>
    a678:	35000136 	bltu	r6,r20,a680 <__udivdi3+0x17c>
    a67c:	e4005136 	bltu	fp,r16,a7c4 <__udivdi3+0x2c0>
    a680:	00800044 	movi	r2,1
    a684:	0009883a 	mov	r4,zero
    a688:	2007883a 	mov	r3,r4
    a68c:	dfc00f17 	ldw	ra,60(sp)
    a690:	df000e17 	ldw	fp,56(sp)
    a694:	ddc00d17 	ldw	r23,52(sp)
    a698:	dd800c17 	ldw	r22,48(sp)
    a69c:	dd400b17 	ldw	r21,44(sp)
    a6a0:	dd000a17 	ldw	r20,40(sp)
    a6a4:	dcc00917 	ldw	r19,36(sp)
    a6a8:	dc800817 	ldw	r18,32(sp)
    a6ac:	dc400717 	ldw	r17,28(sp)
    a6b0:	dc000617 	ldw	r16,24(sp)
    a6b4:	dec01004 	addi	sp,sp,64
    a6b8:	f800283a 	ret
    a6bc:	00bfffd4 	movui	r2,65535
    a6c0:	12005036 	bltu	r2,r8,a804 <__udivdi3+0x300>
    a6c4:	00803fc4 	movi	r2,255
    a6c8:	1200e836 	bltu	r2,r8,aa6c <__udivdi3+0x568>
    a6cc:	000b883a 	mov	r5,zero
    a6d0:	0005883a 	mov	r2,zero
    a6d4:	8084d83a 	srl	r2,r16,r2
    a6d8:	01000074 	movhi	r4,1
    a6dc:	210d6f04 	addi	r4,r4,13756
    a6e0:	01800804 	movi	r6,32
    a6e4:	1105883a 	add	r2,r2,r4
    a6e8:	10c00003 	ldbu	r3,0(r2)
    a6ec:	28c7883a 	add	r3,r5,r3
    a6f0:	30cbc83a 	sub	r5,r6,r3
    a6f4:	28000626 	beq	r5,zero,a710 <__udivdi3+0x20c>
    a6f8:	3145c83a 	sub	r2,r6,r5
    a6fc:	e084d83a 	srl	r2,fp,r2
    a700:	a146983a 	sll	r3,r20,r5
    a704:	e178983a 	sll	fp,fp,r5
    a708:	8160983a 	sll	r16,r16,r5
    a70c:	18a8b03a 	or	r20,r3,r2
    a710:	802ad43a 	srli	r21,r16,16
    a714:	a009883a 	mov	r4,r20
    a718:	85ffffcc 	andi	r23,r16,65535
    a71c:	a80b883a 	mov	r5,r21
    a720:	000c2f80 	call	c2f8 <__udivsi3>
    a724:	a009883a 	mov	r4,r20
    a728:	a80b883a 	mov	r5,r21
    a72c:	102d883a 	mov	r22,r2
    a730:	000c3000 	call	c300 <__umodsi3>
    a734:	1004943a 	slli	r2,r2,16
    a738:	e006d43a 	srli	r3,fp,16
    a73c:	bda3383a 	mul	r17,r23,r22
    a740:	10c4b03a 	or	r2,r2,r3
    a744:	1440042e 	bgeu	r2,r17,a758 <__udivdi3+0x254>
    a748:	1405883a 	add	r2,r2,r16
    a74c:	b5bfffc4 	addi	r22,r22,-1
    a750:	14000136 	bltu	r2,r16,a758 <__udivdi3+0x254>
    a754:	1440d536 	bltu	r2,r17,aaac <__udivdi3+0x5a8>
    a758:	1463c83a 	sub	r17,r2,r17
    a75c:	8809883a 	mov	r4,r17
    a760:	a80b883a 	mov	r5,r21
    a764:	000c2f80 	call	c2f8 <__udivsi3>
    a768:	8809883a 	mov	r4,r17
    a76c:	a80b883a 	mov	r5,r21
    a770:	1029883a 	mov	r20,r2
    a774:	000c3000 	call	c300 <__umodsi3>
    a778:	1004943a 	slli	r2,r2,16
    a77c:	bd09383a 	mul	r4,r23,r20
    a780:	e0ffffcc 	andi	r3,fp,65535
    a784:	10c4b03a 	or	r2,r2,r3
    a788:	1100042e 	bgeu	r2,r4,a79c <__udivdi3+0x298>
    a78c:	8085883a 	add	r2,r16,r2
    a790:	a53fffc4 	addi	r20,r20,-1
    a794:	14000136 	bltu	r2,r16,a79c <__udivdi3+0x298>
    a798:	1100c736 	bltu	r2,r4,aab8 <__udivdi3+0x5b4>
    a79c:	b004943a 	slli	r2,r22,16
    a7a0:	0009883a 	mov	r4,zero
    a7a4:	a084b03a 	or	r2,r20,r2
    a7a8:	003fb706 	br	a688 <__udivdi3+0x184>
    a7ac:	00804034 	movhi	r2,256
    a7b0:	10bfffc4 	addi	r2,r2,-1
    a7b4:	11c0a436 	bltu	r2,r7,aa48 <__udivdi3+0x544>
    a7b8:	01400404 	movi	r5,16
    a7bc:	2805883a 	mov	r2,r5
    a7c0:	003fa406 	br	a654 <__udivdi3+0x150>
    a7c4:	0005883a 	mov	r2,zero
    a7c8:	0009883a 	mov	r4,zero
    a7cc:	003fae06 	br	a688 <__udivdi3+0x184>
    a7d0:	00804034 	movhi	r2,256
    a7d4:	10bfffc4 	addi	r2,r2,-1
    a7d8:	1400a136 	bltu	r2,r16,aa60 <__udivdi3+0x55c>
    a7dc:	01400404 	movi	r5,16
    a7e0:	2805883a 	mov	r2,r5
    a7e4:	003f6006 	br	a568 <__udivdi3+0x64>
    a7e8:	01000044 	movi	r4,1
    a7ec:	000b883a 	mov	r5,zero
    a7f0:	000c2f80 	call	c2f8 <__udivsi3>
    a7f4:	1021883a 	mov	r16,r2
    a7f8:	00bfffd4 	movui	r2,65535
    a7fc:	143ff436 	bltu	r2,r16,a7d0 <__udivdi3+0x2cc>
    a800:	003f5506 	br	a558 <__udivdi3+0x54>
    a804:	00804034 	movhi	r2,256
    a808:	10bfffc4 	addi	r2,r2,-1
    a80c:	12009a36 	bltu	r2,r8,aa78 <__udivdi3+0x574>
    a810:	01400404 	movi	r5,16
    a814:	2805883a 	mov	r2,r5
    a818:	003fae06 	br	a6d4 <__udivdi3+0x1d0>
    a81c:	3dc5c83a 	sub	r2,r7,r23
    a820:	35c8983a 	sll	r4,r6,r23
    a824:	8086d83a 	srl	r3,r16,r2
    a828:	a0a2d83a 	srl	r17,r20,r2
    a82c:	e084d83a 	srl	r2,fp,r2
    a830:	20eab03a 	or	r21,r4,r3
    a834:	a82cd43a 	srli	r22,r21,16
    a838:	a5c6983a 	sll	r3,r20,r23
    a83c:	8809883a 	mov	r4,r17
    a840:	b00b883a 	mov	r5,r22
    a844:	1886b03a 	or	r3,r3,r2
    a848:	d8c00215 	stw	r3,8(sp)
    a84c:	000c2f80 	call	c2f8 <__udivsi3>
    a850:	8809883a 	mov	r4,r17
    a854:	b00b883a 	mov	r5,r22
    a858:	1029883a 	mov	r20,r2
    a85c:	000c3000 	call	c300 <__umodsi3>
    a860:	a8ffffcc 	andi	r3,r21,65535
    a864:	d8c00515 	stw	r3,20(sp)
    a868:	d9000217 	ldw	r4,8(sp)
    a86c:	d9400517 	ldw	r5,20(sp)
    a870:	1004943a 	slli	r2,r2,16
    a874:	2006d43a 	srli	r3,r4,16
    a878:	85e0983a 	sll	r16,r16,r23
    a87c:	2d23383a 	mul	r17,r5,r20
    a880:	10c4b03a 	or	r2,r2,r3
    a884:	dc000015 	stw	r16,0(sp)
    a888:	1440032e 	bgeu	r2,r17,a898 <__udivdi3+0x394>
    a88c:	1545883a 	add	r2,r2,r21
    a890:	a53fffc4 	addi	r20,r20,-1
    a894:	15407f2e 	bgeu	r2,r21,aa94 <__udivdi3+0x590>
    a898:	1463c83a 	sub	r17,r2,r17
    a89c:	8809883a 	mov	r4,r17
    a8a0:	b00b883a 	mov	r5,r22
    a8a4:	000c2f80 	call	c2f8 <__udivsi3>
    a8a8:	8809883a 	mov	r4,r17
    a8ac:	b00b883a 	mov	r5,r22
    a8b0:	1021883a 	mov	r16,r2
    a8b4:	000c3000 	call	c300 <__umodsi3>
    a8b8:	d8c00517 	ldw	r3,20(sp)
    a8bc:	d9000217 	ldw	r4,8(sp)
    a8c0:	1004943a 	slli	r2,r2,16
    a8c4:	1c0f383a 	mul	r7,r3,r16
    a8c8:	20ffffcc 	andi	r3,r4,65535
    a8cc:	10e2b03a 	or	r17,r2,r3
    a8d0:	89c0032e 	bgeu	r17,r7,a8e0 <__udivdi3+0x3dc>
    a8d4:	8d63883a 	add	r17,r17,r21
    a8d8:	843fffc4 	addi	r16,r16,-1
    a8dc:	8d40692e 	bgeu	r17,r21,aa84 <__udivdi3+0x580>
    a8e0:	a008943a 	slli	r4,r20,16
    a8e4:	d9400017 	ldw	r5,0(sp)
    a8e8:	89e3c83a 	sub	r17,r17,r7
    a8ec:	8110b03a 	or	r8,r16,r4
    a8f0:	280cd43a 	srli	r6,r5,16
    a8f4:	28ffffcc 	andi	r3,r5,65535
    a8f8:	40bfffcc 	andi	r2,r8,65535
    a8fc:	400ad43a 	srli	r5,r8,16
    a900:	10d3383a 	mul	r9,r2,r3
    a904:	1185383a 	mul	r2,r2,r6
    a908:	28c7383a 	mul	r3,r5,r3
    a90c:	4808d43a 	srli	r4,r9,16
    a910:	298b383a 	mul	r5,r5,r6
    a914:	10c5883a 	add	r2,r2,r3
    a918:	2089883a 	add	r4,r4,r2
    a91c:	20c0022e 	bgeu	r4,r3,a928 <__udivdi3+0x424>
    a920:	00800074 	movhi	r2,1
    a924:	288b883a 	add	r5,r5,r2
    a928:	2004d43a 	srli	r2,r4,16
    a92c:	288b883a 	add	r5,r5,r2
    a930:	89403f36 	bltu	r17,r5,aa30 <__udivdi3+0x52c>
    a934:	89403926 	beq	r17,r5,aa1c <__udivdi3+0x518>
    a938:	4005883a 	mov	r2,r8
    a93c:	0009883a 	mov	r4,zero
    a940:	003f5106 	br	a688 <__udivdi3+0x184>
    a944:	85a0983a 	sll	r16,r16,r22
    a948:	3585c83a 	sub	r2,r6,r22
    a94c:	a0a2d83a 	srl	r17,r20,r2
    a950:	802ad43a 	srli	r21,r16,16
    a954:	e084d83a 	srl	r2,fp,r2
    a958:	a586983a 	sll	r3,r20,r22
    a95c:	8809883a 	mov	r4,r17
    a960:	a80b883a 	mov	r5,r21
    a964:	1886b03a 	or	r3,r3,r2
    a968:	d8c00115 	stw	r3,4(sp)
    a96c:	000c2f80 	call	c2f8 <__udivsi3>
    a970:	8809883a 	mov	r4,r17
    a974:	a80b883a 	mov	r5,r21
    a978:	d8800415 	stw	r2,16(sp)
    a97c:	000c3000 	call	c300 <__umodsi3>
    a980:	d9000117 	ldw	r4,4(sp)
    a984:	d9400417 	ldw	r5,16(sp)
    a988:	1004943a 	slli	r2,r2,16
    a98c:	85ffffcc 	andi	r23,r16,65535
    a990:	2006d43a 	srli	r3,r4,16
    a994:	b963383a 	mul	r17,r23,r5
    a998:	10c4b03a 	or	r2,r2,r3
    a99c:	1440042e 	bgeu	r2,r17,a9b0 <__udivdi3+0x4ac>
    a9a0:	297fffc4 	addi	r5,r5,-1
    a9a4:	1405883a 	add	r2,r2,r16
    a9a8:	d9400415 	stw	r5,16(sp)
    a9ac:	1400442e 	bgeu	r2,r16,aac0 <__udivdi3+0x5bc>
    a9b0:	1463c83a 	sub	r17,r2,r17
    a9b4:	8809883a 	mov	r4,r17
    a9b8:	a80b883a 	mov	r5,r21
    a9bc:	000c2f80 	call	c2f8 <__udivsi3>
    a9c0:	8809883a 	mov	r4,r17
    a9c4:	a80b883a 	mov	r5,r21
    a9c8:	1029883a 	mov	r20,r2
    a9cc:	000c3000 	call	c300 <__umodsi3>
    a9d0:	d9400117 	ldw	r5,4(sp)
    a9d4:	1004943a 	slli	r2,r2,16
    a9d8:	bd09383a 	mul	r4,r23,r20
    a9dc:	28ffffcc 	andi	r3,r5,65535
    a9e0:	10c6b03a 	or	r3,r2,r3
    a9e4:	1900062e 	bgeu	r3,r4,aa00 <__udivdi3+0x4fc>
    a9e8:	1c07883a 	add	r3,r3,r16
    a9ec:	a53fffc4 	addi	r20,r20,-1
    a9f0:	1c000336 	bltu	r3,r16,aa00 <__udivdi3+0x4fc>
    a9f4:	1900022e 	bgeu	r3,r4,aa00 <__udivdi3+0x4fc>
    a9f8:	a53fffc4 	addi	r20,r20,-1
    a9fc:	1c07883a 	add	r3,r3,r16
    aa00:	d9400417 	ldw	r5,16(sp)
    aa04:	e5b8983a 	sll	fp,fp,r22
    aa08:	1923c83a 	sub	r17,r3,r4
    aa0c:	2804943a 	slli	r2,r5,16
    aa10:	a0a8b03a 	or	r20,r20,r2
    aa14:	dd000315 	stw	r20,12(sp)
    aa18:	003ee106 	br	a5a0 <__udivdi3+0x9c>
    aa1c:	2004943a 	slli	r2,r4,16
    aa20:	e5c8983a 	sll	r4,fp,r23
    aa24:	48ffffcc 	andi	r3,r9,65535
    aa28:	10c5883a 	add	r2,r2,r3
    aa2c:	20bfc22e 	bgeu	r4,r2,a938 <__udivdi3+0x434>
    aa30:	40bfffc4 	addi	r2,r8,-1
    aa34:	0009883a 	mov	r4,zero
    aa38:	003f1306 	br	a688 <__udivdi3+0x184>
    aa3c:	01400204 	movi	r5,8
    aa40:	2805883a 	mov	r2,r5
    aa44:	003f0306 	br	a654 <__udivdi3+0x150>
    aa48:	01400604 	movi	r5,24
    aa4c:	2805883a 	mov	r2,r5
    aa50:	003f0006 	br	a654 <__udivdi3+0x150>
    aa54:	01400204 	movi	r5,8
    aa58:	2805883a 	mov	r2,r5
    aa5c:	003ec206 	br	a568 <__udivdi3+0x64>
    aa60:	01400604 	movi	r5,24
    aa64:	2805883a 	mov	r2,r5
    aa68:	003ebf06 	br	a568 <__udivdi3+0x64>
    aa6c:	01400204 	movi	r5,8
    aa70:	2805883a 	mov	r2,r5
    aa74:	003f1706 	br	a6d4 <__udivdi3+0x1d0>
    aa78:	01400604 	movi	r5,24
    aa7c:	2805883a 	mov	r2,r5
    aa80:	003f1406 	br	a6d4 <__udivdi3+0x1d0>
    aa84:	89ff962e 	bgeu	r17,r7,a8e0 <__udivdi3+0x3dc>
    aa88:	8d63883a 	add	r17,r17,r21
    aa8c:	843fffc4 	addi	r16,r16,-1
    aa90:	003f9306 	br	a8e0 <__udivdi3+0x3dc>
    aa94:	147f802e 	bgeu	r2,r17,a898 <__udivdi3+0x394>
    aa98:	a53fffc4 	addi	r20,r20,-1
    aa9c:	1545883a 	add	r2,r2,r21
    aaa0:	003f7d06 	br	a898 <__udivdi3+0x394>
    aaa4:	a53fffc4 	addi	r20,r20,-1
    aaa8:	003ede06 	br	a624 <__udivdi3+0x120>
    aaac:	b5bfffc4 	addi	r22,r22,-1
    aab0:	1405883a 	add	r2,r2,r16
    aab4:	003f2806 	br	a758 <__udivdi3+0x254>
    aab8:	a53fffc4 	addi	r20,r20,-1
    aabc:	003f3706 	br	a79c <__udivdi3+0x298>
    aac0:	147fbb2e 	bgeu	r2,r17,a9b0 <__udivdi3+0x4ac>
    aac4:	297fffc4 	addi	r5,r5,-1
    aac8:	1405883a 	add	r2,r2,r16
    aacc:	d9400415 	stw	r5,16(sp)
    aad0:	003fb706 	br	a9b0 <__udivdi3+0x4ac>
    aad4:	b5bfffc4 	addi	r22,r22,-1
    aad8:	1405883a 	add	r2,r2,r16
    aadc:	003ec006 	br	a5e0 <__udivdi3+0xdc>

0000aae0 <__umoddi3>:
    aae0:	defff104 	addi	sp,sp,-60
    aae4:	dd800b15 	stw	r22,44(sp)
    aae8:	dd000915 	stw	r20,36(sp)
    aaec:	dc000515 	stw	r16,20(sp)
    aaf0:	dfc00e15 	stw	ra,56(sp)
    aaf4:	df000d15 	stw	fp,52(sp)
    aaf8:	ddc00c15 	stw	r23,48(sp)
    aafc:	dd400a15 	stw	r21,40(sp)
    ab00:	dcc00815 	stw	r19,32(sp)
    ab04:	dc800715 	stw	r18,28(sp)
    ab08:	dc400615 	stw	r17,24(sp)
    ab0c:	3021883a 	mov	r16,r6
    ab10:	202d883a 	mov	r22,r4
    ab14:	2829883a 	mov	r20,r5
    ab18:	38002b1e 	bne	r7,zero,abc8 <__umoddi3+0xe8>
    ab1c:	29805036 	bltu	r5,r6,ac60 <__umoddi3+0x180>
    ab20:	30008a26 	beq	r6,zero,ad4c <__umoddi3+0x26c>
    ab24:	00bfffd4 	movui	r2,65535
    ab28:	14008236 	bltu	r2,r16,ad34 <__umoddi3+0x254>
    ab2c:	00803fc4 	movi	r2,255
    ab30:	14013636 	bltu	r2,r16,b00c <__umoddi3+0x52c>
    ab34:	000b883a 	mov	r5,zero
    ab38:	0005883a 	mov	r2,zero
    ab3c:	8084d83a 	srl	r2,r16,r2
    ab40:	01000074 	movhi	r4,1
    ab44:	210d6f04 	addi	r4,r4,13756
    ab48:	01800804 	movi	r6,32
    ab4c:	1105883a 	add	r2,r2,r4
    ab50:	10c00003 	ldbu	r3,0(r2)
    ab54:	28c7883a 	add	r3,r5,r3
    ab58:	30efc83a 	sub	r23,r6,r3
    ab5c:	b800941e 	bne	r23,zero,adb0 <__umoddi3+0x2d0>
    ab60:	802ad43a 	srli	r21,r16,16
    ab64:	a423c83a 	sub	r17,r20,r16
    ab68:	0039883a 	mov	fp,zero
    ab6c:	853fffcc 	andi	r20,r16,65535
    ab70:	8809883a 	mov	r4,r17
    ab74:	a80b883a 	mov	r5,r21
    ab78:	000c2f80 	call	c2f8 <__udivsi3>
    ab7c:	8809883a 	mov	r4,r17
    ab80:	a80b883a 	mov	r5,r21
    ab84:	a0a3383a 	mul	r17,r20,r2
    ab88:	000c3000 	call	c300 <__umodsi3>
    ab8c:	1004943a 	slli	r2,r2,16
    ab90:	b006d43a 	srli	r3,r22,16
    ab94:	10c4b03a 	or	r2,r2,r3
    ab98:	1440032e 	bgeu	r2,r17,aba8 <__umoddi3+0xc8>
    ab9c:	1405883a 	add	r2,r2,r16
    aba0:	14000136 	bltu	r2,r16,aba8 <__umoddi3+0xc8>
    aba4:	14413536 	bltu	r2,r17,b07c <__umoddi3+0x59c>
    aba8:	1463c83a 	sub	r17,r2,r17
    abac:	8809883a 	mov	r4,r17
    abb0:	a80b883a 	mov	r5,r21
    abb4:	000c2f80 	call	c2f8 <__udivsi3>
    abb8:	8809883a 	mov	r4,r17
    abbc:	a0a3383a 	mul	r17,r20,r2
    abc0:	a80b883a 	mov	r5,r21
    abc4:	00004d06 	br	acfc <__umoddi3+0x21c>
    abc8:	380d883a 	mov	r6,r7
    abcc:	29c0102e 	bgeu	r5,r7,ac10 <__umoddi3+0x130>
    abd0:	2011883a 	mov	r8,r4
    abd4:	2813883a 	mov	r9,r5
    abd8:	4005883a 	mov	r2,r8
    abdc:	4807883a 	mov	r3,r9
    abe0:	dfc00e17 	ldw	ra,56(sp)
    abe4:	df000d17 	ldw	fp,52(sp)
    abe8:	ddc00c17 	ldw	r23,48(sp)
    abec:	dd800b17 	ldw	r22,44(sp)
    abf0:	dd400a17 	ldw	r21,40(sp)
    abf4:	dd000917 	ldw	r20,36(sp)
    abf8:	dcc00817 	ldw	r19,32(sp)
    abfc:	dc800717 	ldw	r18,28(sp)
    ac00:	dc400617 	ldw	r17,24(sp)
    ac04:	dc000517 	ldw	r16,20(sp)
    ac08:	dec00f04 	addi	sp,sp,60
    ac0c:	f800283a 	ret
    ac10:	00bfffd4 	movui	r2,65535
    ac14:	11c05a36 	bltu	r2,r7,ad80 <__umoddi3+0x2a0>
    ac18:	00803fc4 	movi	r2,255
    ac1c:	11c0fe36 	bltu	r2,r7,b018 <__umoddi3+0x538>
    ac20:	000b883a 	mov	r5,zero
    ac24:	0005883a 	mov	r2,zero
    ac28:	3084d83a 	srl	r2,r6,r2
    ac2c:	01000074 	movhi	r4,1
    ac30:	210d6f04 	addi	r4,r4,13756
    ac34:	01c00804 	movi	r7,32
    ac38:	1105883a 	add	r2,r2,r4
    ac3c:	10c00003 	ldbu	r3,0(r2)
    ac40:	28c7883a 	add	r3,r5,r3
    ac44:	38ebc83a 	sub	r21,r7,r3
    ac48:	a800851e 	bne	r21,zero,ae60 <__umoddi3+0x380>
    ac4c:	35005236 	bltu	r6,r20,ad98 <__umoddi3+0x2b8>
    ac50:	b400512e 	bgeu	r22,r16,ad98 <__umoddi3+0x2b8>
    ac54:	b011883a 	mov	r8,r22
    ac58:	a013883a 	mov	r9,r20
    ac5c:	003fde06 	br	abd8 <__umoddi3+0xf8>
    ac60:	00bfffd4 	movui	r2,65535
    ac64:	11804036 	bltu	r2,r6,ad68 <__umoddi3+0x288>
    ac68:	00803fc4 	movi	r2,255
    ac6c:	1180ed36 	bltu	r2,r6,b024 <__umoddi3+0x544>
    ac70:	000b883a 	mov	r5,zero
    ac74:	0005883a 	mov	r2,zero
    ac78:	8084d83a 	srl	r2,r16,r2
    ac7c:	01000074 	movhi	r4,1
    ac80:	210d6f04 	addi	r4,r4,13756
    ac84:	01800804 	movi	r6,32
    ac88:	1105883a 	add	r2,r2,r4
    ac8c:	10c00003 	ldbu	r3,0(r2)
    ac90:	28c7883a 	add	r3,r5,r3
    ac94:	30c7c83a 	sub	r3,r6,r3
    ac98:	1800bf1e 	bne	r3,zero,af98 <__umoddi3+0x4b8>
    ac9c:	0039883a 	mov	fp,zero
    aca0:	802ad43a 	srli	r21,r16,16
    aca4:	a009883a 	mov	r4,r20
    aca8:	85ffffcc 	andi	r23,r16,65535
    acac:	a80b883a 	mov	r5,r21
    acb0:	000c2f80 	call	c2f8 <__udivsi3>
    acb4:	a009883a 	mov	r4,r20
    acb8:	a80b883a 	mov	r5,r21
    acbc:	b8a3383a 	mul	r17,r23,r2
    acc0:	000c3000 	call	c300 <__umodsi3>
    acc4:	1004943a 	slli	r2,r2,16
    acc8:	b006d43a 	srli	r3,r22,16
    accc:	10c4b03a 	or	r2,r2,r3
    acd0:	1440032e 	bgeu	r2,r17,ace0 <__umoddi3+0x200>
    acd4:	1405883a 	add	r2,r2,r16
    acd8:	14000136 	bltu	r2,r16,ace0 <__umoddi3+0x200>
    acdc:	1440e536 	bltu	r2,r17,b074 <__umoddi3+0x594>
    ace0:	1463c83a 	sub	r17,r2,r17
    ace4:	8809883a 	mov	r4,r17
    ace8:	a80b883a 	mov	r5,r21
    acec:	000c2f80 	call	c2f8 <__udivsi3>
    acf0:	8809883a 	mov	r4,r17
    acf4:	b8a3383a 	mul	r17,r23,r2
    acf8:	a80b883a 	mov	r5,r21
    acfc:	000c3000 	call	c300 <__umodsi3>
    ad00:	1004943a 	slli	r2,r2,16
    ad04:	b0ffffcc 	andi	r3,r22,65535
    ad08:	10c4b03a 	or	r2,r2,r3
    ad0c:	1440042e 	bgeu	r2,r17,ad20 <__umoddi3+0x240>
    ad10:	1405883a 	add	r2,r2,r16
    ad14:	14000236 	bltu	r2,r16,ad20 <__umoddi3+0x240>
    ad18:	1440012e 	bgeu	r2,r17,ad20 <__umoddi3+0x240>
    ad1c:	1405883a 	add	r2,r2,r16
    ad20:	1445c83a 	sub	r2,r2,r17
    ad24:	1724d83a 	srl	r18,r2,fp
    ad28:	0013883a 	mov	r9,zero
    ad2c:	9011883a 	mov	r8,r18
    ad30:	003fa906 	br	abd8 <__umoddi3+0xf8>
    ad34:	00804034 	movhi	r2,256
    ad38:	10bfffc4 	addi	r2,r2,-1
    ad3c:	1400b036 	bltu	r2,r16,b000 <__umoddi3+0x520>
    ad40:	01400404 	movi	r5,16
    ad44:	2805883a 	mov	r2,r5
    ad48:	003f7c06 	br	ab3c <__umoddi3+0x5c>
    ad4c:	01000044 	movi	r4,1
    ad50:	000b883a 	mov	r5,zero
    ad54:	000c2f80 	call	c2f8 <__udivsi3>
    ad58:	1021883a 	mov	r16,r2
    ad5c:	00bfffd4 	movui	r2,65535
    ad60:	143ff436 	bltu	r2,r16,ad34 <__umoddi3+0x254>
    ad64:	003f7106 	br	ab2c <__umoddi3+0x4c>
    ad68:	00804034 	movhi	r2,256
    ad6c:	10bfffc4 	addi	r2,r2,-1
    ad70:	1180af36 	bltu	r2,r6,b030 <__umoddi3+0x550>
    ad74:	01400404 	movi	r5,16
    ad78:	2805883a 	mov	r2,r5
    ad7c:	003fbe06 	br	ac78 <__umoddi3+0x198>
    ad80:	00804034 	movhi	r2,256
    ad84:	10bfffc4 	addi	r2,r2,-1
    ad88:	11c0ac36 	bltu	r2,r7,b03c <__umoddi3+0x55c>
    ad8c:	01400404 	movi	r5,16
    ad90:	2805883a 	mov	r2,r5
    ad94:	003fa406 	br	ac28 <__umoddi3+0x148>
    ad98:	b409c83a 	sub	r4,r22,r16
    ad9c:	b105803a 	cmpltu	r2,r22,r4
    ada0:	a187c83a 	sub	r3,r20,r6
    ada4:	18a9c83a 	sub	r20,r3,r2
    ada8:	202d883a 	mov	r22,r4
    adac:	003fa906 	br	ac54 <__umoddi3+0x174>
    adb0:	85e0983a 	sll	r16,r16,r23
    adb4:	35c5c83a 	sub	r2,r6,r23
    adb8:	a0a2d83a 	srl	r17,r20,r2
    adbc:	802ad43a 	srli	r21,r16,16
    adc0:	b084d83a 	srl	r2,r22,r2
    adc4:	a5c6983a 	sll	r3,r20,r23
    adc8:	8809883a 	mov	r4,r17
    adcc:	a80b883a 	mov	r5,r21
    add0:	1886b03a 	or	r3,r3,r2
    add4:	d8c00115 	stw	r3,4(sp)
    add8:	853fffcc 	andi	r20,r16,65535
    addc:	000c2f80 	call	c2f8 <__udivsi3>
    ade0:	8809883a 	mov	r4,r17
    ade4:	a80b883a 	mov	r5,r21
    ade8:	a0a3383a 	mul	r17,r20,r2
    adec:	000c3000 	call	c300 <__umodsi3>
    adf0:	d9000117 	ldw	r4,4(sp)
    adf4:	1004943a 	slli	r2,r2,16
    adf8:	b839883a 	mov	fp,r23
    adfc:	2006d43a 	srli	r3,r4,16
    ae00:	10c4b03a 	or	r2,r2,r3
    ae04:	1440022e 	bgeu	r2,r17,ae10 <__umoddi3+0x330>
    ae08:	1405883a 	add	r2,r2,r16
    ae0c:	1400962e 	bgeu	r2,r16,b068 <__umoddi3+0x588>
    ae10:	1463c83a 	sub	r17,r2,r17
    ae14:	8809883a 	mov	r4,r17
    ae18:	a80b883a 	mov	r5,r21
    ae1c:	000c2f80 	call	c2f8 <__udivsi3>
    ae20:	8809883a 	mov	r4,r17
    ae24:	a80b883a 	mov	r5,r21
    ae28:	a0a3383a 	mul	r17,r20,r2
    ae2c:	000c3000 	call	c300 <__umodsi3>
    ae30:	d9400117 	ldw	r5,4(sp)
    ae34:	1004943a 	slli	r2,r2,16
    ae38:	28ffffcc 	andi	r3,r5,65535
    ae3c:	10c4b03a 	or	r2,r2,r3
    ae40:	1440042e 	bgeu	r2,r17,ae54 <__umoddi3+0x374>
    ae44:	1405883a 	add	r2,r2,r16
    ae48:	14000236 	bltu	r2,r16,ae54 <__umoddi3+0x374>
    ae4c:	1440012e 	bgeu	r2,r17,ae54 <__umoddi3+0x374>
    ae50:	1405883a 	add	r2,r2,r16
    ae54:	b5ec983a 	sll	r22,r22,r23
    ae58:	1463c83a 	sub	r17,r2,r17
    ae5c:	003f4406 	br	ab70 <__umoddi3+0x90>
    ae60:	3d4fc83a 	sub	r7,r7,r21
    ae64:	3546983a 	sll	r3,r6,r21
    ae68:	81c4d83a 	srl	r2,r16,r7
    ae6c:	a1e2d83a 	srl	r17,r20,r7
    ae70:	a54c983a 	sll	r6,r20,r21
    ae74:	18aeb03a 	or	r23,r3,r2
    ae78:	b828d43a 	srli	r20,r23,16
    ae7c:	b1c4d83a 	srl	r2,r22,r7
    ae80:	8809883a 	mov	r4,r17
    ae84:	a00b883a 	mov	r5,r20
    ae88:	308cb03a 	or	r6,r6,r2
    ae8c:	d9c00315 	stw	r7,12(sp)
    ae90:	d9800215 	stw	r6,8(sp)
    ae94:	000c2f80 	call	c2f8 <__udivsi3>
    ae98:	8809883a 	mov	r4,r17
    ae9c:	a00b883a 	mov	r5,r20
    aea0:	1039883a 	mov	fp,r2
    aea4:	000c3000 	call	c300 <__umodsi3>
    aea8:	b8ffffcc 	andi	r3,r23,65535
    aeac:	d8c00415 	stw	r3,16(sp)
    aeb0:	d9000217 	ldw	r4,8(sp)
    aeb4:	d9400417 	ldw	r5,16(sp)
    aeb8:	1004943a 	slli	r2,r2,16
    aebc:	2006d43a 	srli	r3,r4,16
    aec0:	8560983a 	sll	r16,r16,r21
    aec4:	2f23383a 	mul	r17,r5,fp
    aec8:	10c4b03a 	or	r2,r2,r3
    aecc:	dc000015 	stw	r16,0(sp)
    aed0:	b56c983a 	sll	r22,r22,r21
    aed4:	1440032e 	bgeu	r2,r17,aee4 <__umoddi3+0x404>
    aed8:	15c5883a 	add	r2,r2,r23
    aedc:	e73fffc4 	addi	fp,fp,-1
    aee0:	15c05d2e 	bgeu	r2,r23,b058 <__umoddi3+0x578>
    aee4:	1463c83a 	sub	r17,r2,r17
    aee8:	8809883a 	mov	r4,r17
    aeec:	a00b883a 	mov	r5,r20
    aef0:	000c2f80 	call	c2f8 <__udivsi3>
    aef4:	8809883a 	mov	r4,r17
    aef8:	a00b883a 	mov	r5,r20
    aefc:	1021883a 	mov	r16,r2
    af00:	000c3000 	call	c300 <__umodsi3>
    af04:	d8c00417 	ldw	r3,16(sp)
    af08:	d9000217 	ldw	r4,8(sp)
    af0c:	1004943a 	slli	r2,r2,16
    af10:	1c23383a 	mul	r17,r3,r16
    af14:	20ffffcc 	andi	r3,r4,65535
    af18:	10ceb03a 	or	r7,r2,r3
    af1c:	3c40032e 	bgeu	r7,r17,af2c <__umoddi3+0x44c>
    af20:	3dcf883a 	add	r7,r7,r23
    af24:	843fffc4 	addi	r16,r16,-1
    af28:	3dc0472e 	bgeu	r7,r23,b048 <__umoddi3+0x568>
    af2c:	e004943a 	slli	r2,fp,16
    af30:	d9400017 	ldw	r5,0(sp)
    af34:	3c4fc83a 	sub	r7,r7,r17
    af38:	8084b03a 	or	r2,r16,r2
    af3c:	28ffffcc 	andi	r3,r5,65535
    af40:	280cd43a 	srli	r6,r5,16
    af44:	100ad43a 	srli	r5,r2,16
    af48:	10bfffcc 	andi	r2,r2,65535
    af4c:	10d1383a 	mul	r8,r2,r3
    af50:	28c7383a 	mul	r3,r5,r3
    af54:	1185383a 	mul	r2,r2,r6
    af58:	4008d43a 	srli	r4,r8,16
    af5c:	298b383a 	mul	r5,r5,r6
    af60:	10c5883a 	add	r2,r2,r3
    af64:	2089883a 	add	r4,r4,r2
    af68:	20c0022e 	bgeu	r4,r3,af74 <__umoddi3+0x494>
    af6c:	00800074 	movhi	r2,1
    af70:	288b883a 	add	r5,r5,r2
    af74:	2004d43a 	srli	r2,r4,16
    af78:	2008943a 	slli	r4,r4,16
    af7c:	40ffffcc 	andi	r3,r8,65535
    af80:	288b883a 	add	r5,r5,r2
    af84:	20c9883a 	add	r4,r4,r3
    af88:	39400b36 	bltu	r7,r5,afb8 <__umoddi3+0x4d8>
    af8c:	39403d26 	beq	r7,r5,b084 <__umoddi3+0x5a4>
    af90:	394bc83a 	sub	r5,r7,r5
    af94:	00000f06 	br	afd4 <__umoddi3+0x4f4>
    af98:	30c5c83a 	sub	r2,r6,r3
    af9c:	1839883a 	mov	fp,r3
    afa0:	b084d83a 	srl	r2,r22,r2
    afa4:	a0c6983a 	sll	r3,r20,r3
    afa8:	8720983a 	sll	r16,r16,fp
    afac:	b72c983a 	sll	r22,r22,fp
    afb0:	18a8b03a 	or	r20,r3,r2
    afb4:	003f3a06 	br	aca0 <__umoddi3+0x1c0>
    afb8:	d8c00017 	ldw	r3,0(sp)
    afbc:	20c5c83a 	sub	r2,r4,r3
    afc0:	2089803a 	cmpltu	r4,r4,r2
    afc4:	2dc7c83a 	sub	r3,r5,r23
    afc8:	1907c83a 	sub	r3,r3,r4
    afcc:	38cbc83a 	sub	r5,r7,r3
    afd0:	1009883a 	mov	r4,r2
    afd4:	b105c83a 	sub	r2,r22,r4
    afd8:	b087803a 	cmpltu	r3,r22,r2
    afdc:	28c7c83a 	sub	r3,r5,r3
    afe0:	d9400317 	ldw	r5,12(sp)
    afe4:	1544d83a 	srl	r2,r2,r21
    afe8:	1948983a 	sll	r4,r3,r5
    afec:	1d46d83a 	srl	r3,r3,r21
    aff0:	20a4b03a 	or	r18,r4,r2
    aff4:	9011883a 	mov	r8,r18
    aff8:	1813883a 	mov	r9,r3
    affc:	003ef606 	br	abd8 <__umoddi3+0xf8>
    b000:	01400604 	movi	r5,24
    b004:	2805883a 	mov	r2,r5
    b008:	003ecc06 	br	ab3c <__umoddi3+0x5c>
    b00c:	01400204 	movi	r5,8
    b010:	2805883a 	mov	r2,r5
    b014:	003ec906 	br	ab3c <__umoddi3+0x5c>
    b018:	01400204 	movi	r5,8
    b01c:	2805883a 	mov	r2,r5
    b020:	003f0106 	br	ac28 <__umoddi3+0x148>
    b024:	01400204 	movi	r5,8
    b028:	2805883a 	mov	r2,r5
    b02c:	003f1206 	br	ac78 <__umoddi3+0x198>
    b030:	01400604 	movi	r5,24
    b034:	2805883a 	mov	r2,r5
    b038:	003f0f06 	br	ac78 <__umoddi3+0x198>
    b03c:	01400604 	movi	r5,24
    b040:	2805883a 	mov	r2,r5
    b044:	003ef806 	br	ac28 <__umoddi3+0x148>
    b048:	3c7fb82e 	bgeu	r7,r17,af2c <__umoddi3+0x44c>
    b04c:	843fffc4 	addi	r16,r16,-1
    b050:	3dcf883a 	add	r7,r7,r23
    b054:	003fb506 	br	af2c <__umoddi3+0x44c>
    b058:	147fa22e 	bgeu	r2,r17,aee4 <__umoddi3+0x404>
    b05c:	e73fffc4 	addi	fp,fp,-1
    b060:	15c5883a 	add	r2,r2,r23
    b064:	003f9f06 	br	aee4 <__umoddi3+0x404>
    b068:	147f692e 	bgeu	r2,r17,ae10 <__umoddi3+0x330>
    b06c:	1405883a 	add	r2,r2,r16
    b070:	003f6706 	br	ae10 <__umoddi3+0x330>
    b074:	1405883a 	add	r2,r2,r16
    b078:	003f1906 	br	ace0 <__umoddi3+0x200>
    b07c:	1405883a 	add	r2,r2,r16
    b080:	003ec906 	br	aba8 <__umoddi3+0xc8>
    b084:	b13fcc36 	bltu	r22,r4,afb8 <__umoddi3+0x4d8>
    b088:	000b883a 	mov	r5,zero
    b08c:	003fd106 	br	afd4 <__umoddi3+0x4f4>

0000b090 <_fpadd_parts>:
    b090:	defff804 	addi	sp,sp,-32
    b094:	dcc00315 	stw	r19,12(sp)
    b098:	2027883a 	mov	r19,r4
    b09c:	21000017 	ldw	r4,0(r4)
    b0a0:	00c00044 	movi	r3,1
    b0a4:	dd400515 	stw	r21,20(sp)
    b0a8:	dd000415 	stw	r20,16(sp)
    b0ac:	ddc00715 	stw	r23,28(sp)
    b0b0:	dd800615 	stw	r22,24(sp)
    b0b4:	dc800215 	stw	r18,8(sp)
    b0b8:	dc400115 	stw	r17,4(sp)
    b0bc:	dc000015 	stw	r16,0(sp)
    b0c0:	282b883a 	mov	r21,r5
    b0c4:	3029883a 	mov	r20,r6
    b0c8:	1900632e 	bgeu	r3,r4,b258 <_fpadd_parts+0x1c8>
    b0cc:	28800017 	ldw	r2,0(r5)
    b0d0:	1880812e 	bgeu	r3,r2,b2d8 <_fpadd_parts+0x248>
    b0d4:	00c00104 	movi	r3,4
    b0d8:	20c0dc26 	beq	r4,r3,b44c <_fpadd_parts+0x3bc>
    b0dc:	10c07e26 	beq	r2,r3,b2d8 <_fpadd_parts+0x248>
    b0e0:	00c00084 	movi	r3,2
    b0e4:	10c06726 	beq	r2,r3,b284 <_fpadd_parts+0x1f4>
    b0e8:	20c07b26 	beq	r4,r3,b2d8 <_fpadd_parts+0x248>
    b0ec:	9dc00217 	ldw	r23,8(r19)
    b0f0:	28c00217 	ldw	r3,8(r5)
    b0f4:	9c400317 	ldw	r17,12(r19)
    b0f8:	2bc00317 	ldw	r15,12(r5)
    b0fc:	b8cdc83a 	sub	r6,r23,r3
    b100:	9c800417 	ldw	r18,16(r19)
    b104:	2c000417 	ldw	r16,16(r5)
    b108:	3009883a 	mov	r4,r6
    b10c:	30009716 	blt	r6,zero,b36c <_fpadd_parts+0x2dc>
    b110:	00800fc4 	movi	r2,63
    b114:	11806b16 	blt	r2,r6,b2c4 <_fpadd_parts+0x234>
    b118:	0100a40e 	bge	zero,r4,b3ac <_fpadd_parts+0x31c>
    b11c:	35bff804 	addi	r22,r6,-32
    b120:	b000bc16 	blt	r22,zero,b414 <_fpadd_parts+0x384>
    b124:	8596d83a 	srl	r11,r16,r22
    b128:	0019883a 	mov	r12,zero
    b12c:	0013883a 	mov	r9,zero
    b130:	01000044 	movi	r4,1
    b134:	0015883a 	mov	r10,zero
    b138:	b000be16 	blt	r22,zero,b434 <_fpadd_parts+0x3a4>
    b13c:	2590983a 	sll	r8,r4,r22
    b140:	000f883a 	mov	r7,zero
    b144:	00bfffc4 	movi	r2,-1
    b148:	3889883a 	add	r4,r7,r2
    b14c:	408b883a 	add	r5,r8,r2
    b150:	21cd803a 	cmpltu	r6,r4,r7
    b154:	314b883a 	add	r5,r6,r5
    b158:	7904703a 	and	r2,r15,r4
    b15c:	8146703a 	and	r3,r16,r5
    b160:	10c4b03a 	or	r2,r2,r3
    b164:	10000226 	beq	r2,zero,b170 <_fpadd_parts+0xe0>
    b168:	02400044 	movi	r9,1
    b16c:	0015883a 	mov	r10,zero
    b170:	5a5eb03a 	or	r15,r11,r9
    b174:	62a0b03a 	or	r16,r12,r10
    b178:	99400117 	ldw	r5,4(r19)
    b17c:	a8800117 	ldw	r2,4(r21)
    b180:	28806e26 	beq	r5,r2,b33c <_fpadd_parts+0x2ac>
    b184:	28006626 	beq	r5,zero,b320 <_fpadd_parts+0x290>
    b188:	7c45c83a 	sub	r2,r15,r17
    b18c:	7889803a 	cmpltu	r4,r15,r2
    b190:	8487c83a 	sub	r3,r16,r18
    b194:	1909c83a 	sub	r4,r3,r4
    b198:	100d883a 	mov	r6,r2
    b19c:	200f883a 	mov	r7,r4
    b1a0:	38007716 	blt	r7,zero,b380 <_fpadd_parts+0x2f0>
    b1a4:	a5c00215 	stw	r23,8(r20)
    b1a8:	a1c00415 	stw	r7,16(r20)
    b1ac:	a0000115 	stw	zero,4(r20)
    b1b0:	a1800315 	stw	r6,12(r20)
    b1b4:	a2000317 	ldw	r8,12(r20)
    b1b8:	a2400417 	ldw	r9,16(r20)
    b1bc:	00bfffc4 	movi	r2,-1
    b1c0:	408b883a 	add	r5,r8,r2
    b1c4:	2a09803a 	cmpltu	r4,r5,r8
    b1c8:	488d883a 	add	r6,r9,r2
    b1cc:	01c40034 	movhi	r7,4096
    b1d0:	39ffffc4 	addi	r7,r7,-1
    b1d4:	218d883a 	add	r6,r4,r6
    b1d8:	39801736 	bltu	r7,r6,b238 <_fpadd_parts+0x1a8>
    b1dc:	31c06526 	beq	r6,r7,b374 <_fpadd_parts+0x2e4>
    b1e0:	a3000217 	ldw	r12,8(r20)
    b1e4:	4209883a 	add	r4,r8,r8
    b1e8:	00bfffc4 	movi	r2,-1
    b1ec:	220f803a 	cmpltu	r7,r4,r8
    b1f0:	4a4b883a 	add	r5,r9,r9
    b1f4:	394f883a 	add	r7,r7,r5
    b1f8:	2095883a 	add	r10,r4,r2
    b1fc:	3897883a 	add	r11,r7,r2
    b200:	510d803a 	cmpltu	r6,r10,r4
    b204:	6099883a 	add	r12,r12,r2
    b208:	32d7883a 	add	r11,r6,r11
    b20c:	00840034 	movhi	r2,4096
    b210:	10bfffc4 	addi	r2,r2,-1
    b214:	2011883a 	mov	r8,r4
    b218:	3813883a 	mov	r9,r7
    b21c:	a1000315 	stw	r4,12(r20)
    b220:	a1c00415 	stw	r7,16(r20)
    b224:	a3000215 	stw	r12,8(r20)
    b228:	12c00336 	bltu	r2,r11,b238 <_fpadd_parts+0x1a8>
    b22c:	58bfed1e 	bne	r11,r2,b1e4 <_fpadd_parts+0x154>
    b230:	00bfff84 	movi	r2,-2
    b234:	12bfeb2e 	bgeu	r2,r10,b1e4 <_fpadd_parts+0x154>
    b238:	a2800417 	ldw	r10,16(r20)
    b23c:	008000c4 	movi	r2,3
    b240:	00c80034 	movhi	r3,8192
    b244:	18ffffc4 	addi	r3,r3,-1
    b248:	a2400317 	ldw	r9,12(r20)
    b24c:	a0800015 	stw	r2,0(r20)
    b250:	1a802336 	bltu	r3,r10,b2e0 <_fpadd_parts+0x250>
    b254:	a027883a 	mov	r19,r20
    b258:	9805883a 	mov	r2,r19
    b25c:	ddc00717 	ldw	r23,28(sp)
    b260:	dd800617 	ldw	r22,24(sp)
    b264:	dd400517 	ldw	r21,20(sp)
    b268:	dd000417 	ldw	r20,16(sp)
    b26c:	dcc00317 	ldw	r19,12(sp)
    b270:	dc800217 	ldw	r18,8(sp)
    b274:	dc400117 	ldw	r17,4(sp)
    b278:	dc000017 	ldw	r16,0(sp)
    b27c:	dec00804 	addi	sp,sp,32
    b280:	f800283a 	ret
    b284:	20fff41e 	bne	r4,r3,b258 <_fpadd_parts+0x1c8>
    b288:	31000015 	stw	r4,0(r6)
    b28c:	98800117 	ldw	r2,4(r19)
    b290:	30800115 	stw	r2,4(r6)
    b294:	98c00217 	ldw	r3,8(r19)
    b298:	30c00215 	stw	r3,8(r6)
    b29c:	98800317 	ldw	r2,12(r19)
    b2a0:	30800315 	stw	r2,12(r6)
    b2a4:	98c00417 	ldw	r3,16(r19)
    b2a8:	30c00415 	stw	r3,16(r6)
    b2ac:	98800117 	ldw	r2,4(r19)
    b2b0:	28c00117 	ldw	r3,4(r5)
    b2b4:	3027883a 	mov	r19,r6
    b2b8:	10c4703a 	and	r2,r2,r3
    b2bc:	30800115 	stw	r2,4(r6)
    b2c0:	003fe506 	br	b258 <_fpadd_parts+0x1c8>
    b2c4:	1dc02616 	blt	r3,r23,b360 <_fpadd_parts+0x2d0>
    b2c8:	0023883a 	mov	r17,zero
    b2cc:	182f883a 	mov	r23,r3
    b2d0:	0025883a 	mov	r18,zero
    b2d4:	003fa806 	br	b178 <_fpadd_parts+0xe8>
    b2d8:	a827883a 	mov	r19,r21
    b2dc:	003fde06 	br	b258 <_fpadd_parts+0x1c8>
    b2e0:	01800044 	movi	r6,1
    b2e4:	500497fa 	slli	r2,r10,31
    b2e8:	4808d07a 	srli	r4,r9,1
    b2ec:	518ad83a 	srl	r5,r10,r6
    b2f0:	a2000217 	ldw	r8,8(r20)
    b2f4:	1108b03a 	or	r4,r2,r4
    b2f8:	0007883a 	mov	r3,zero
    b2fc:	4984703a 	and	r2,r9,r6
    b300:	208cb03a 	or	r6,r4,r2
    b304:	28ceb03a 	or	r7,r5,r3
    b308:	42000044 	addi	r8,r8,1
    b30c:	a027883a 	mov	r19,r20
    b310:	a1c00415 	stw	r7,16(r20)
    b314:	a2000215 	stw	r8,8(r20)
    b318:	a1800315 	stw	r6,12(r20)
    b31c:	003fce06 	br	b258 <_fpadd_parts+0x1c8>
    b320:	8bc5c83a 	sub	r2,r17,r15
    b324:	8889803a 	cmpltu	r4,r17,r2
    b328:	9407c83a 	sub	r3,r18,r16
    b32c:	1909c83a 	sub	r4,r3,r4
    b330:	100d883a 	mov	r6,r2
    b334:	200f883a 	mov	r7,r4
    b338:	003f9906 	br	b1a0 <_fpadd_parts+0x110>
    b33c:	7c45883a 	add	r2,r15,r17
    b340:	13c9803a 	cmpltu	r4,r2,r15
    b344:	8487883a 	add	r3,r16,r18
    b348:	20c9883a 	add	r4,r4,r3
    b34c:	a1400115 	stw	r5,4(r20)
    b350:	a5c00215 	stw	r23,8(r20)
    b354:	a0800315 	stw	r2,12(r20)
    b358:	a1000415 	stw	r4,16(r20)
    b35c:	003fb606 	br	b238 <_fpadd_parts+0x1a8>
    b360:	001f883a 	mov	r15,zero
    b364:	0021883a 	mov	r16,zero
    b368:	003f8306 	br	b178 <_fpadd_parts+0xe8>
    b36c:	018dc83a 	sub	r6,zero,r6
    b370:	003f6706 	br	b110 <_fpadd_parts+0x80>
    b374:	00bfff84 	movi	r2,-2
    b378:	117faf36 	bltu	r2,r5,b238 <_fpadd_parts+0x1a8>
    b37c:	003f9806 	br	b1e0 <_fpadd_parts+0x150>
    b380:	0005883a 	mov	r2,zero
    b384:	1189c83a 	sub	r4,r2,r6
    b388:	1105803a 	cmpltu	r2,r2,r4
    b38c:	01cbc83a 	sub	r5,zero,r7
    b390:	2885c83a 	sub	r2,r5,r2
    b394:	01800044 	movi	r6,1
    b398:	a1800115 	stw	r6,4(r20)
    b39c:	a5c00215 	stw	r23,8(r20)
    b3a0:	a1000315 	stw	r4,12(r20)
    b3a4:	a0800415 	stw	r2,16(r20)
    b3a8:	003f8206 	br	b1b4 <_fpadd_parts+0x124>
    b3ac:	203f7226 	beq	r4,zero,b178 <_fpadd_parts+0xe8>
    b3b0:	35bff804 	addi	r22,r6,-32
    b3b4:	b9af883a 	add	r23,r23,r6
    b3b8:	b0003116 	blt	r22,zero,b480 <_fpadd_parts+0x3f0>
    b3bc:	959ad83a 	srl	r13,r18,r22
    b3c0:	001d883a 	mov	r14,zero
    b3c4:	000f883a 	mov	r7,zero
    b3c8:	01000044 	movi	r4,1
    b3cc:	0011883a 	mov	r8,zero
    b3d0:	b0002516 	blt	r22,zero,b468 <_fpadd_parts+0x3d8>
    b3d4:	2594983a 	sll	r10,r4,r22
    b3d8:	0013883a 	mov	r9,zero
    b3dc:	00bfffc4 	movi	r2,-1
    b3e0:	4889883a 	add	r4,r9,r2
    b3e4:	508b883a 	add	r5,r10,r2
    b3e8:	224d803a 	cmpltu	r6,r4,r9
    b3ec:	314b883a 	add	r5,r6,r5
    b3f0:	8904703a 	and	r2,r17,r4
    b3f4:	9146703a 	and	r3,r18,r5
    b3f8:	10c4b03a 	or	r2,r2,r3
    b3fc:	10000226 	beq	r2,zero,b408 <_fpadd_parts+0x378>
    b400:	01c00044 	movi	r7,1
    b404:	0011883a 	mov	r8,zero
    b408:	69e2b03a 	or	r17,r13,r7
    b40c:	7224b03a 	or	r18,r14,r8
    b410:	003f5906 	br	b178 <_fpadd_parts+0xe8>
    b414:	8407883a 	add	r3,r16,r16
    b418:	008007c4 	movi	r2,31
    b41c:	1185c83a 	sub	r2,r2,r6
    b420:	1886983a 	sll	r3,r3,r2
    b424:	7996d83a 	srl	r11,r15,r6
    b428:	8198d83a 	srl	r12,r16,r6
    b42c:	1ad6b03a 	or	r11,r3,r11
    b430:	003f3e06 	br	b12c <_fpadd_parts+0x9c>
    b434:	2006d07a 	srli	r3,r4,1
    b438:	008007c4 	movi	r2,31
    b43c:	1185c83a 	sub	r2,r2,r6
    b440:	1890d83a 	srl	r8,r3,r2
    b444:	218e983a 	sll	r7,r4,r6
    b448:	003f3e06 	br	b144 <_fpadd_parts+0xb4>
    b44c:	113f821e 	bne	r2,r4,b258 <_fpadd_parts+0x1c8>
    b450:	28c00117 	ldw	r3,4(r5)
    b454:	98800117 	ldw	r2,4(r19)
    b458:	10ff7f26 	beq	r2,r3,b258 <_fpadd_parts+0x1c8>
    b45c:	04c00074 	movhi	r19,1
    b460:	9cce2d04 	addi	r19,r19,14516
    b464:	003f7c06 	br	b258 <_fpadd_parts+0x1c8>
    b468:	2006d07a 	srli	r3,r4,1
    b46c:	008007c4 	movi	r2,31
    b470:	1185c83a 	sub	r2,r2,r6
    b474:	1894d83a 	srl	r10,r3,r2
    b478:	2192983a 	sll	r9,r4,r6
    b47c:	003fd706 	br	b3dc <_fpadd_parts+0x34c>
    b480:	9487883a 	add	r3,r18,r18
    b484:	008007c4 	movi	r2,31
    b488:	1185c83a 	sub	r2,r2,r6
    b48c:	1886983a 	sll	r3,r3,r2
    b490:	899ad83a 	srl	r13,r17,r6
    b494:	919cd83a 	srl	r14,r18,r6
    b498:	1b5ab03a 	or	r13,r3,r13
    b49c:	003fc906 	br	b3c4 <_fpadd_parts+0x334>

0000b4a0 <__subdf3>:
    b4a0:	deffea04 	addi	sp,sp,-88
    b4a4:	dcc01415 	stw	r19,80(sp)
    b4a8:	dcc00404 	addi	r19,sp,16
    b4ac:	2011883a 	mov	r8,r4
    b4b0:	2813883a 	mov	r9,r5
    b4b4:	dc401315 	stw	r17,76(sp)
    b4b8:	d809883a 	mov	r4,sp
    b4bc:	980b883a 	mov	r5,r19
    b4c0:	dc400904 	addi	r17,sp,36
    b4c4:	dfc01515 	stw	ra,84(sp)
    b4c8:	da400115 	stw	r9,4(sp)
    b4cc:	d9c00315 	stw	r7,12(sp)
    b4d0:	da000015 	stw	r8,0(sp)
    b4d4:	d9800215 	stw	r6,8(sp)
    b4d8:	000c3a00 	call	c3a0 <__unpack_d>
    b4dc:	d9000204 	addi	r4,sp,8
    b4e0:	880b883a 	mov	r5,r17
    b4e4:	000c3a00 	call	c3a0 <__unpack_d>
    b4e8:	d8800a17 	ldw	r2,40(sp)
    b4ec:	880b883a 	mov	r5,r17
    b4f0:	9809883a 	mov	r4,r19
    b4f4:	d9800e04 	addi	r6,sp,56
    b4f8:	1080005c 	xori	r2,r2,1
    b4fc:	d8800a15 	stw	r2,40(sp)
    b500:	000b0900 	call	b090 <_fpadd_parts>
    b504:	1009883a 	mov	r4,r2
    b508:	0002f900 	call	2f90 <__pack_d>
    b50c:	dfc01517 	ldw	ra,84(sp)
    b510:	dcc01417 	ldw	r19,80(sp)
    b514:	dc401317 	ldw	r17,76(sp)
    b518:	dec01604 	addi	sp,sp,88
    b51c:	f800283a 	ret

0000b520 <__adddf3>:
    b520:	deffea04 	addi	sp,sp,-88
    b524:	dcc01415 	stw	r19,80(sp)
    b528:	dcc00404 	addi	r19,sp,16
    b52c:	2011883a 	mov	r8,r4
    b530:	2813883a 	mov	r9,r5
    b534:	dc401315 	stw	r17,76(sp)
    b538:	d809883a 	mov	r4,sp
    b53c:	980b883a 	mov	r5,r19
    b540:	dc400904 	addi	r17,sp,36
    b544:	dfc01515 	stw	ra,84(sp)
    b548:	da400115 	stw	r9,4(sp)
    b54c:	d9c00315 	stw	r7,12(sp)
    b550:	da000015 	stw	r8,0(sp)
    b554:	d9800215 	stw	r6,8(sp)
    b558:	000c3a00 	call	c3a0 <__unpack_d>
    b55c:	d9000204 	addi	r4,sp,8
    b560:	880b883a 	mov	r5,r17
    b564:	000c3a00 	call	c3a0 <__unpack_d>
    b568:	d9800e04 	addi	r6,sp,56
    b56c:	9809883a 	mov	r4,r19
    b570:	880b883a 	mov	r5,r17
    b574:	000b0900 	call	b090 <_fpadd_parts>
    b578:	1009883a 	mov	r4,r2
    b57c:	0002f900 	call	2f90 <__pack_d>
    b580:	dfc01517 	ldw	ra,84(sp)
    b584:	dcc01417 	ldw	r19,80(sp)
    b588:	dc401317 	ldw	r17,76(sp)
    b58c:	dec01604 	addi	sp,sp,88
    b590:	f800283a 	ret

0000b594 <__muldf3>:
    b594:	deffe004 	addi	sp,sp,-128
    b598:	dc401815 	stw	r17,96(sp)
    b59c:	dc400404 	addi	r17,sp,16
    b5a0:	2011883a 	mov	r8,r4
    b5a4:	2813883a 	mov	r9,r5
    b5a8:	dc001715 	stw	r16,92(sp)
    b5ac:	d809883a 	mov	r4,sp
    b5b0:	880b883a 	mov	r5,r17
    b5b4:	dc000904 	addi	r16,sp,36
    b5b8:	dfc01f15 	stw	ra,124(sp)
    b5bc:	da400115 	stw	r9,4(sp)
    b5c0:	d9c00315 	stw	r7,12(sp)
    b5c4:	da000015 	stw	r8,0(sp)
    b5c8:	d9800215 	stw	r6,8(sp)
    b5cc:	ddc01e15 	stw	r23,120(sp)
    b5d0:	dd801d15 	stw	r22,116(sp)
    b5d4:	dd401c15 	stw	r21,112(sp)
    b5d8:	dd001b15 	stw	r20,108(sp)
    b5dc:	dcc01a15 	stw	r19,104(sp)
    b5e0:	dc801915 	stw	r18,100(sp)
    b5e4:	000c3a00 	call	c3a0 <__unpack_d>
    b5e8:	d9000204 	addi	r4,sp,8
    b5ec:	800b883a 	mov	r5,r16
    b5f0:	000c3a00 	call	c3a0 <__unpack_d>
    b5f4:	d9000417 	ldw	r4,16(sp)
    b5f8:	00800044 	movi	r2,1
    b5fc:	1100102e 	bgeu	r2,r4,b640 <__muldf3+0xac>
    b600:	d8c00917 	ldw	r3,36(sp)
    b604:	10c0062e 	bgeu	r2,r3,b620 <__muldf3+0x8c>
    b608:	00800104 	movi	r2,4
    b60c:	20800a26 	beq	r4,r2,b638 <__muldf3+0xa4>
    b610:	1880cc26 	beq	r3,r2,b944 <__muldf3+0x3b0>
    b614:	00800084 	movi	r2,2
    b618:	20800926 	beq	r4,r2,b640 <__muldf3+0xac>
    b61c:	1880191e 	bne	r3,r2,b684 <__muldf3+0xf0>
    b620:	d8c00a17 	ldw	r3,40(sp)
    b624:	d8800517 	ldw	r2,20(sp)
    b628:	8009883a 	mov	r4,r16
    b62c:	10c4c03a 	cmpne	r2,r2,r3
    b630:	d8800a15 	stw	r2,40(sp)
    b634:	00000706 	br	b654 <__muldf3+0xc0>
    b638:	00800084 	movi	r2,2
    b63c:	1880c326 	beq	r3,r2,b94c <__muldf3+0x3b8>
    b640:	d8800517 	ldw	r2,20(sp)
    b644:	d8c00a17 	ldw	r3,40(sp)
    b648:	8809883a 	mov	r4,r17
    b64c:	10c4c03a 	cmpne	r2,r2,r3
    b650:	d8800515 	stw	r2,20(sp)
    b654:	0002f900 	call	2f90 <__pack_d>
    b658:	dfc01f17 	ldw	ra,124(sp)
    b65c:	ddc01e17 	ldw	r23,120(sp)
    b660:	dd801d17 	ldw	r22,116(sp)
    b664:	dd401c17 	ldw	r21,112(sp)
    b668:	dd001b17 	ldw	r20,108(sp)
    b66c:	dcc01a17 	ldw	r19,104(sp)
    b670:	dc801917 	ldw	r18,100(sp)
    b674:	dc401817 	ldw	r17,96(sp)
    b678:	dc001717 	ldw	r16,92(sp)
    b67c:	dec02004 	addi	sp,sp,128
    b680:	f800283a 	ret
    b684:	dd800717 	ldw	r22,28(sp)
    b688:	dc800c17 	ldw	r18,48(sp)
    b68c:	002b883a 	mov	r21,zero
    b690:	0023883a 	mov	r17,zero
    b694:	a80b883a 	mov	r5,r21
    b698:	b00d883a 	mov	r6,r22
    b69c:	880f883a 	mov	r7,r17
    b6a0:	ddc00817 	ldw	r23,32(sp)
    b6a4:	dcc00d17 	ldw	r19,52(sp)
    b6a8:	9009883a 	mov	r4,r18
    b6ac:	000c3080 	call	c308 <__muldi3>
    b6b0:	001b883a 	mov	r13,zero
    b6b4:	680f883a 	mov	r7,r13
    b6b8:	b009883a 	mov	r4,r22
    b6bc:	000b883a 	mov	r5,zero
    b6c0:	980d883a 	mov	r6,r19
    b6c4:	b82d883a 	mov	r22,r23
    b6c8:	002f883a 	mov	r23,zero
    b6cc:	db401615 	stw	r13,88(sp)
    b6d0:	d8801315 	stw	r2,76(sp)
    b6d4:	d8c01415 	stw	r3,80(sp)
    b6d8:	dcc01515 	stw	r19,84(sp)
    b6dc:	000c3080 	call	c308 <__muldi3>
    b6e0:	b00d883a 	mov	r6,r22
    b6e4:	000b883a 	mov	r5,zero
    b6e8:	9009883a 	mov	r4,r18
    b6ec:	b80f883a 	mov	r7,r23
    b6f0:	1021883a 	mov	r16,r2
    b6f4:	1823883a 	mov	r17,r3
    b6f8:	000c3080 	call	c308 <__muldi3>
    b6fc:	8085883a 	add	r2,r16,r2
    b700:	140d803a 	cmpltu	r6,r2,r16
    b704:	88c7883a 	add	r3,r17,r3
    b708:	30cd883a 	add	r6,r6,r3
    b70c:	1029883a 	mov	r20,r2
    b710:	302b883a 	mov	r21,r6
    b714:	da801317 	ldw	r10,76(sp)
    b718:	dac01417 	ldw	r11,80(sp)
    b71c:	db001517 	ldw	r12,84(sp)
    b720:	db401617 	ldw	r13,88(sp)
    b724:	3440612e 	bgeu	r6,r17,b8ac <__muldf3+0x318>
    b728:	0009883a 	mov	r4,zero
    b72c:	5105883a 	add	r2,r10,r4
    b730:	128d803a 	cmpltu	r6,r2,r10
    b734:	5d07883a 	add	r3,r11,r20
    b738:	30cd883a 	add	r6,r6,r3
    b73c:	0021883a 	mov	r16,zero
    b740:	04400044 	movi	r17,1
    b744:	1025883a 	mov	r18,r2
    b748:	3027883a 	mov	r19,r6
    b74c:	32c06236 	bltu	r6,r11,b8d8 <__muldf3+0x344>
    b750:	59807a26 	beq	r11,r6,b93c <__muldf3+0x3a8>
    b754:	680b883a 	mov	r5,r13
    b758:	b80f883a 	mov	r7,r23
    b75c:	6009883a 	mov	r4,r12
    b760:	b00d883a 	mov	r6,r22
    b764:	000c3080 	call	c308 <__muldi3>
    b768:	1009883a 	mov	r4,r2
    b76c:	000f883a 	mov	r7,zero
    b770:	1545883a 	add	r2,r2,r21
    b774:	1111803a 	cmpltu	r8,r2,r4
    b778:	19c7883a 	add	r3,r3,r7
    b77c:	40c7883a 	add	r3,r8,r3
    b780:	88cb883a 	add	r5,r17,r3
    b784:	d8c00617 	ldw	r3,24(sp)
    b788:	8089883a 	add	r4,r16,r2
    b78c:	d8800b17 	ldw	r2,44(sp)
    b790:	18c00104 	addi	r3,r3,4
    b794:	240d803a 	cmpltu	r6,r4,r16
    b798:	10c7883a 	add	r3,r2,r3
    b79c:	2013883a 	mov	r9,r4
    b7a0:	d8800a17 	ldw	r2,40(sp)
    b7a4:	d9000517 	ldw	r4,20(sp)
    b7a8:	314d883a 	add	r6,r6,r5
    b7ac:	3015883a 	mov	r10,r6
    b7b0:	2088c03a 	cmpne	r4,r4,r2
    b7b4:	00880034 	movhi	r2,8192
    b7b8:	10bfffc4 	addi	r2,r2,-1
    b7bc:	d9000f15 	stw	r4,60(sp)
    b7c0:	d8c01015 	stw	r3,64(sp)
    b7c4:	1180162e 	bgeu	r2,r6,b820 <__muldf3+0x28c>
    b7c8:	1811883a 	mov	r8,r3
    b7cc:	101f883a 	mov	r15,r2
    b7d0:	980497fa 	slli	r2,r19,31
    b7d4:	9016d07a 	srli	r11,r18,1
    b7d8:	500697fa 	slli	r3,r10,31
    b7dc:	480cd07a 	srli	r6,r9,1
    b7e0:	500ed07a 	srli	r7,r10,1
    b7e4:	12d6b03a 	or	r11,r2,r11
    b7e8:	00800044 	movi	r2,1
    b7ec:	198cb03a 	or	r6,r3,r6
    b7f0:	4888703a 	and	r4,r9,r2
    b7f4:	9818d07a 	srli	r12,r19,1
    b7f8:	001b883a 	mov	r13,zero
    b7fc:	03a00034 	movhi	r14,32768
    b800:	3013883a 	mov	r9,r6
    b804:	3815883a 	mov	r10,r7
    b808:	4091883a 	add	r8,r8,r2
    b80c:	20000226 	beq	r4,zero,b818 <__muldf3+0x284>
    b810:	5b64b03a 	or	r18,r11,r13
    b814:	63a6b03a 	or	r19,r12,r14
    b818:	7abfed36 	bltu	r15,r10,b7d0 <__muldf3+0x23c>
    b81c:	da001015 	stw	r8,64(sp)
    b820:	00840034 	movhi	r2,4096
    b824:	10bfffc4 	addi	r2,r2,-1
    b828:	12801436 	bltu	r2,r10,b87c <__muldf3+0x2e8>
    b82c:	da001017 	ldw	r8,64(sp)
    b830:	101f883a 	mov	r15,r2
    b834:	4a45883a 	add	r2,r9,r9
    b838:	124d803a 	cmpltu	r6,r2,r9
    b83c:	5287883a 	add	r3,r10,r10
    b840:	9497883a 	add	r11,r18,r18
    b844:	5c8f803a 	cmpltu	r7,r11,r18
    b848:	9cd9883a 	add	r12,r19,r19
    b84c:	01000044 	movi	r4,1
    b850:	30cd883a 	add	r6,r6,r3
    b854:	3b0f883a 	add	r7,r7,r12
    b858:	423fffc4 	addi	r8,r8,-1
    b85c:	1013883a 	mov	r9,r2
    b860:	3015883a 	mov	r10,r6
    b864:	111ab03a 	or	r13,r2,r4
    b868:	98003016 	blt	r19,zero,b92c <__muldf3+0x398>
    b86c:	5825883a 	mov	r18,r11
    b870:	3827883a 	mov	r19,r7
    b874:	7abfef2e 	bgeu	r15,r10,b834 <__muldf3+0x2a0>
    b878:	da001015 	stw	r8,64(sp)
    b87c:	00803fc4 	movi	r2,255
    b880:	488e703a 	and	r7,r9,r2
    b884:	00802004 	movi	r2,128
    b888:	0007883a 	mov	r3,zero
    b88c:	0011883a 	mov	r8,zero
    b890:	38801826 	beq	r7,r2,b8f4 <__muldf3+0x360>
    b894:	008000c4 	movi	r2,3
    b898:	d9000e04 	addi	r4,sp,56
    b89c:	da801215 	stw	r10,72(sp)
    b8a0:	d8800e15 	stw	r2,56(sp)
    b8a4:	da401115 	stw	r9,68(sp)
    b8a8:	003f6a06 	br	b654 <__muldf3+0xc0>
    b8ac:	89802126 	beq	r17,r6,b934 <__muldf3+0x3a0>
    b8b0:	0009883a 	mov	r4,zero
    b8b4:	5105883a 	add	r2,r10,r4
    b8b8:	128d803a 	cmpltu	r6,r2,r10
    b8bc:	5d07883a 	add	r3,r11,r20
    b8c0:	30cd883a 	add	r6,r6,r3
    b8c4:	0021883a 	mov	r16,zero
    b8c8:	0023883a 	mov	r17,zero
    b8cc:	1025883a 	mov	r18,r2
    b8d0:	3027883a 	mov	r19,r6
    b8d4:	32ff9e2e 	bgeu	r6,r11,b750 <__muldf3+0x1bc>
    b8d8:	00800044 	movi	r2,1
    b8dc:	8089883a 	add	r4,r16,r2
    b8e0:	240d803a 	cmpltu	r6,r4,r16
    b8e4:	344d883a 	add	r6,r6,r17
    b8e8:	2021883a 	mov	r16,r4
    b8ec:	3023883a 	mov	r17,r6
    b8f0:	003f9806 	br	b754 <__muldf3+0x1c0>
    b8f4:	403fe71e 	bne	r8,zero,b894 <__muldf3+0x300>
    b8f8:	01004004 	movi	r4,256
    b8fc:	4904703a 	and	r2,r9,r4
    b900:	10c4b03a 	or	r2,r2,r3
    b904:	103fe31e 	bne	r2,zero,b894 <__muldf3+0x300>
    b908:	94c4b03a 	or	r2,r18,r19
    b90c:	103fe126 	beq	r2,zero,b894 <__muldf3+0x300>
    b910:	49c5883a 	add	r2,r9,r7
    b914:	1251803a 	cmpltu	r8,r2,r9
    b918:	4291883a 	add	r8,r8,r10
    b91c:	013fc004 	movi	r4,-256
    b920:	1112703a 	and	r9,r2,r4
    b924:	4015883a 	mov	r10,r8
    b928:	003fda06 	br	b894 <__muldf3+0x300>
    b92c:	6813883a 	mov	r9,r13
    b930:	003fce06 	br	b86c <__muldf3+0x2d8>
    b934:	143f7c36 	bltu	r2,r16,b728 <__muldf3+0x194>
    b938:	003fdd06 	br	b8b0 <__muldf3+0x31c>
    b93c:	12bf852e 	bgeu	r2,r10,b754 <__muldf3+0x1c0>
    b940:	003fe506 	br	b8d8 <__muldf3+0x344>
    b944:	00800084 	movi	r2,2
    b948:	20bf351e 	bne	r4,r2,b620 <__muldf3+0x8c>
    b94c:	01000074 	movhi	r4,1
    b950:	210e2d04 	addi	r4,r4,14516
    b954:	003f3f06 	br	b654 <__muldf3+0xc0>

0000b958 <__divdf3>:
    b958:	deffed04 	addi	sp,sp,-76
    b95c:	dcc01115 	stw	r19,68(sp)
    b960:	dcc00404 	addi	r19,sp,16
    b964:	2011883a 	mov	r8,r4
    b968:	2813883a 	mov	r9,r5
    b96c:	dc000e15 	stw	r16,56(sp)
    b970:	d809883a 	mov	r4,sp
    b974:	980b883a 	mov	r5,r19
    b978:	dc000904 	addi	r16,sp,36
    b97c:	dfc01215 	stw	ra,72(sp)
    b980:	da400115 	stw	r9,4(sp)
    b984:	d9c00315 	stw	r7,12(sp)
    b988:	da000015 	stw	r8,0(sp)
    b98c:	d9800215 	stw	r6,8(sp)
    b990:	dc801015 	stw	r18,64(sp)
    b994:	dc400f15 	stw	r17,60(sp)
    b998:	000c3a00 	call	c3a0 <__unpack_d>
    b99c:	d9000204 	addi	r4,sp,8
    b9a0:	800b883a 	mov	r5,r16
    b9a4:	000c3a00 	call	c3a0 <__unpack_d>
    b9a8:	d9000417 	ldw	r4,16(sp)
    b9ac:	00800044 	movi	r2,1
    b9b0:	11000b2e 	bgeu	r2,r4,b9e0 <__divdf3+0x88>
    b9b4:	d9400917 	ldw	r5,36(sp)
    b9b8:	1140762e 	bgeu	r2,r5,bb94 <__divdf3+0x23c>
    b9bc:	d8800517 	ldw	r2,20(sp)
    b9c0:	d8c00a17 	ldw	r3,40(sp)
    b9c4:	01800104 	movi	r6,4
    b9c8:	10c4f03a 	xor	r2,r2,r3
    b9cc:	d8800515 	stw	r2,20(sp)
    b9d0:	21800226 	beq	r4,r6,b9dc <__divdf3+0x84>
    b9d4:	00800084 	movi	r2,2
    b9d8:	2080141e 	bne	r4,r2,ba2c <__divdf3+0xd4>
    b9dc:	29000926 	beq	r5,r4,ba04 <__divdf3+0xac>
    b9e0:	9809883a 	mov	r4,r19
    b9e4:	0002f900 	call	2f90 <__pack_d>
    b9e8:	dfc01217 	ldw	ra,72(sp)
    b9ec:	dcc01117 	ldw	r19,68(sp)
    b9f0:	dc801017 	ldw	r18,64(sp)
    b9f4:	dc400f17 	ldw	r17,60(sp)
    b9f8:	dc000e17 	ldw	r16,56(sp)
    b9fc:	dec01304 	addi	sp,sp,76
    ba00:	f800283a 	ret
    ba04:	01000074 	movhi	r4,1
    ba08:	210e2d04 	addi	r4,r4,14516
    ba0c:	0002f900 	call	2f90 <__pack_d>
    ba10:	dfc01217 	ldw	ra,72(sp)
    ba14:	dcc01117 	ldw	r19,68(sp)
    ba18:	dc801017 	ldw	r18,64(sp)
    ba1c:	dc400f17 	ldw	r17,60(sp)
    ba20:	dc000e17 	ldw	r16,56(sp)
    ba24:	dec01304 	addi	sp,sp,76
    ba28:	f800283a 	ret
    ba2c:	29805b26 	beq	r5,r6,bb9c <__divdf3+0x244>
    ba30:	28802d26 	beq	r5,r2,bae8 <__divdf3+0x190>
    ba34:	d8c00617 	ldw	r3,24(sp)
    ba38:	d8800b17 	ldw	r2,44(sp)
    ba3c:	d9c00817 	ldw	r7,32(sp)
    ba40:	dc400d17 	ldw	r17,52(sp)
    ba44:	188bc83a 	sub	r5,r3,r2
    ba48:	d9800717 	ldw	r6,28(sp)
    ba4c:	dc000c17 	ldw	r16,48(sp)
    ba50:	d9400615 	stw	r5,24(sp)
    ba54:	3c403836 	bltu	r7,r17,bb38 <__divdf3+0x1e0>
    ba58:	89c03626 	beq	r17,r7,bb34 <__divdf3+0x1dc>
    ba5c:	0015883a 	mov	r10,zero
    ba60:	001d883a 	mov	r14,zero
    ba64:	02c40034 	movhi	r11,4096
    ba68:	001f883a 	mov	r15,zero
    ba6c:	003f883a 	mov	ra,zero
    ba70:	04800f44 	movi	r18,61
    ba74:	00000f06 	br	bab4 <__divdf3+0x15c>
    ba78:	601d883a 	mov	r14,r12
    ba7c:	681f883a 	mov	r15,r13
    ba80:	400d883a 	mov	r6,r8
    ba84:	100f883a 	mov	r7,r2
    ba88:	3191883a 	add	r8,r6,r6
    ba8c:	5808d07a 	srli	r4,r11,1
    ba90:	4185803a 	cmpltu	r2,r8,r6
    ba94:	39d3883a 	add	r9,r7,r7
    ba98:	28c6b03a 	or	r3,r5,r3
    ba9c:	1245883a 	add	r2,r2,r9
    baa0:	1815883a 	mov	r10,r3
    baa4:	2017883a 	mov	r11,r4
    baa8:	400d883a 	mov	r6,r8
    baac:	100f883a 	mov	r7,r2
    bab0:	fc801726 	beq	ra,r18,bb10 <__divdf3+0x1b8>
    bab4:	580a97fa 	slli	r5,r11,31
    bab8:	5006d07a 	srli	r3,r10,1
    babc:	ffc00044 	addi	ra,ra,1
    bac0:	3c7ff136 	bltu	r7,r17,ba88 <__divdf3+0x130>
    bac4:	3411c83a 	sub	r8,r6,r16
    bac8:	3205803a 	cmpltu	r2,r6,r8
    bacc:	3c53c83a 	sub	r9,r7,r17
    bad0:	7298b03a 	or	r12,r14,r10
    bad4:	7adab03a 	or	r13,r15,r11
    bad8:	4885c83a 	sub	r2,r9,r2
    badc:	89ffe61e 	bne	r17,r7,ba78 <__divdf3+0x120>
    bae0:	343fe936 	bltu	r6,r16,ba88 <__divdf3+0x130>
    bae4:	003fe406 	br	ba78 <__divdf3+0x120>
    bae8:	9809883a 	mov	r4,r19
    baec:	d9800415 	stw	r6,16(sp)
    baf0:	0002f900 	call	2f90 <__pack_d>
    baf4:	dfc01217 	ldw	ra,72(sp)
    baf8:	dcc01117 	ldw	r19,68(sp)
    bafc:	dc801017 	ldw	r18,64(sp)
    bb00:	dc400f17 	ldw	r17,60(sp)
    bb04:	dc000e17 	ldw	r16,56(sp)
    bb08:	dec01304 	addi	sp,sp,76
    bb0c:	f800283a 	ret
    bb10:	00803fc4 	movi	r2,255
    bb14:	7090703a 	and	r8,r14,r2
    bb18:	00802004 	movi	r2,128
    bb1c:	0007883a 	mov	r3,zero
    bb20:	0013883a 	mov	r9,zero
    bb24:	40800d26 	beq	r8,r2,bb5c <__divdf3+0x204>
    bb28:	dbc00815 	stw	r15,32(sp)
    bb2c:	db800715 	stw	r14,28(sp)
    bb30:	003fab06 	br	b9e0 <__divdf3+0x88>
    bb34:	343fc92e 	bgeu	r6,r16,ba5c <__divdf3+0x104>
    bb38:	3185883a 	add	r2,r6,r6
    bb3c:	1189803a 	cmpltu	r4,r2,r6
    bb40:	39c7883a 	add	r3,r7,r7
    bb44:	20c9883a 	add	r4,r4,r3
    bb48:	297fffc4 	addi	r5,r5,-1
    bb4c:	100d883a 	mov	r6,r2
    bb50:	200f883a 	mov	r7,r4
    bb54:	d9400615 	stw	r5,24(sp)
    bb58:	003fc006 	br	ba5c <__divdf3+0x104>
    bb5c:	483ff21e 	bne	r9,zero,bb28 <__divdf3+0x1d0>
    bb60:	01004004 	movi	r4,256
    bb64:	7104703a 	and	r2,r14,r4
    bb68:	10c4b03a 	or	r2,r2,r3
    bb6c:	103fee1e 	bne	r2,zero,bb28 <__divdf3+0x1d0>
    bb70:	31c4b03a 	or	r2,r6,r7
    bb74:	103fec26 	beq	r2,zero,bb28 <__divdf3+0x1d0>
    bb78:	7205883a 	add	r2,r14,r8
    bb7c:	1391803a 	cmpltu	r8,r2,r14
    bb80:	43d1883a 	add	r8,r8,r15
    bb84:	013fc004 	movi	r4,-256
    bb88:	111c703a 	and	r14,r2,r4
    bb8c:	401f883a 	mov	r15,r8
    bb90:	003fe506 	br	bb28 <__divdf3+0x1d0>
    bb94:	8009883a 	mov	r4,r16
    bb98:	003f9206 	br	b9e4 <__divdf3+0x8c>
    bb9c:	9809883a 	mov	r4,r19
    bba0:	d8000715 	stw	zero,28(sp)
    bba4:	d8000815 	stw	zero,32(sp)
    bba8:	d8000615 	stw	zero,24(sp)
    bbac:	003f8d06 	br	b9e4 <__divdf3+0x8c>

0000bbb0 <__eqdf2>:
    bbb0:	deffef04 	addi	sp,sp,-68
    bbb4:	dc400f15 	stw	r17,60(sp)
    bbb8:	dc400404 	addi	r17,sp,16
    bbbc:	2005883a 	mov	r2,r4
    bbc0:	2807883a 	mov	r3,r5
    bbc4:	dc000e15 	stw	r16,56(sp)
    bbc8:	d809883a 	mov	r4,sp
    bbcc:	880b883a 	mov	r5,r17
    bbd0:	dc000904 	addi	r16,sp,36
    bbd4:	d8c00115 	stw	r3,4(sp)
    bbd8:	d8800015 	stw	r2,0(sp)
    bbdc:	d9800215 	stw	r6,8(sp)
    bbe0:	dfc01015 	stw	ra,64(sp)
    bbe4:	d9c00315 	stw	r7,12(sp)
    bbe8:	000c3a00 	call	c3a0 <__unpack_d>
    bbec:	d9000204 	addi	r4,sp,8
    bbf0:	800b883a 	mov	r5,r16
    bbf4:	000c3a00 	call	c3a0 <__unpack_d>
    bbf8:	d8800417 	ldw	r2,16(sp)
    bbfc:	00c00044 	movi	r3,1
    bc00:	180d883a 	mov	r6,r3
    bc04:	1880062e 	bgeu	r3,r2,bc20 <__eqdf2+0x70>
    bc08:	d8800917 	ldw	r2,36(sp)
    bc0c:	8809883a 	mov	r4,r17
    bc10:	800b883a 	mov	r5,r16
    bc14:	1880022e 	bgeu	r3,r2,bc20 <__eqdf2+0x70>
    bc18:	000c4d80 	call	c4d8 <__fpcmp_parts_d>
    bc1c:	100d883a 	mov	r6,r2
    bc20:	3005883a 	mov	r2,r6
    bc24:	dfc01017 	ldw	ra,64(sp)
    bc28:	dc400f17 	ldw	r17,60(sp)
    bc2c:	dc000e17 	ldw	r16,56(sp)
    bc30:	dec01104 	addi	sp,sp,68
    bc34:	f800283a 	ret

0000bc38 <__nedf2>:
    bc38:	deffef04 	addi	sp,sp,-68
    bc3c:	dc400f15 	stw	r17,60(sp)
    bc40:	dc400404 	addi	r17,sp,16
    bc44:	2005883a 	mov	r2,r4
    bc48:	2807883a 	mov	r3,r5
    bc4c:	dc000e15 	stw	r16,56(sp)
    bc50:	d809883a 	mov	r4,sp
    bc54:	880b883a 	mov	r5,r17
    bc58:	dc000904 	addi	r16,sp,36
    bc5c:	d8c00115 	stw	r3,4(sp)
    bc60:	d8800015 	stw	r2,0(sp)
    bc64:	d9800215 	stw	r6,8(sp)
    bc68:	dfc01015 	stw	ra,64(sp)
    bc6c:	d9c00315 	stw	r7,12(sp)
    bc70:	000c3a00 	call	c3a0 <__unpack_d>
    bc74:	d9000204 	addi	r4,sp,8
    bc78:	800b883a 	mov	r5,r16
    bc7c:	000c3a00 	call	c3a0 <__unpack_d>
    bc80:	d8800417 	ldw	r2,16(sp)
    bc84:	00c00044 	movi	r3,1
    bc88:	180d883a 	mov	r6,r3
    bc8c:	1880062e 	bgeu	r3,r2,bca8 <__nedf2+0x70>
    bc90:	d8800917 	ldw	r2,36(sp)
    bc94:	8809883a 	mov	r4,r17
    bc98:	800b883a 	mov	r5,r16
    bc9c:	1880022e 	bgeu	r3,r2,bca8 <__nedf2+0x70>
    bca0:	000c4d80 	call	c4d8 <__fpcmp_parts_d>
    bca4:	100d883a 	mov	r6,r2
    bca8:	3005883a 	mov	r2,r6
    bcac:	dfc01017 	ldw	ra,64(sp)
    bcb0:	dc400f17 	ldw	r17,60(sp)
    bcb4:	dc000e17 	ldw	r16,56(sp)
    bcb8:	dec01104 	addi	sp,sp,68
    bcbc:	f800283a 	ret

0000bcc0 <__gtdf2>:
    bcc0:	deffef04 	addi	sp,sp,-68
    bcc4:	dc400f15 	stw	r17,60(sp)
    bcc8:	dc400404 	addi	r17,sp,16
    bccc:	2005883a 	mov	r2,r4
    bcd0:	2807883a 	mov	r3,r5
    bcd4:	dc000e15 	stw	r16,56(sp)
    bcd8:	d809883a 	mov	r4,sp
    bcdc:	880b883a 	mov	r5,r17
    bce0:	dc000904 	addi	r16,sp,36
    bce4:	d8c00115 	stw	r3,4(sp)
    bce8:	d8800015 	stw	r2,0(sp)
    bcec:	d9800215 	stw	r6,8(sp)
    bcf0:	dfc01015 	stw	ra,64(sp)
    bcf4:	d9c00315 	stw	r7,12(sp)
    bcf8:	000c3a00 	call	c3a0 <__unpack_d>
    bcfc:	d9000204 	addi	r4,sp,8
    bd00:	800b883a 	mov	r5,r16
    bd04:	000c3a00 	call	c3a0 <__unpack_d>
    bd08:	d8800417 	ldw	r2,16(sp)
    bd0c:	00c00044 	movi	r3,1
    bd10:	01bfffc4 	movi	r6,-1
    bd14:	1880062e 	bgeu	r3,r2,bd30 <__gtdf2+0x70>
    bd18:	d8800917 	ldw	r2,36(sp)
    bd1c:	8809883a 	mov	r4,r17
    bd20:	800b883a 	mov	r5,r16
    bd24:	1880022e 	bgeu	r3,r2,bd30 <__gtdf2+0x70>
    bd28:	000c4d80 	call	c4d8 <__fpcmp_parts_d>
    bd2c:	100d883a 	mov	r6,r2
    bd30:	3005883a 	mov	r2,r6
    bd34:	dfc01017 	ldw	ra,64(sp)
    bd38:	dc400f17 	ldw	r17,60(sp)
    bd3c:	dc000e17 	ldw	r16,56(sp)
    bd40:	dec01104 	addi	sp,sp,68
    bd44:	f800283a 	ret

0000bd48 <__gedf2>:
    bd48:	deffef04 	addi	sp,sp,-68
    bd4c:	dc400f15 	stw	r17,60(sp)
    bd50:	dc400404 	addi	r17,sp,16
    bd54:	2005883a 	mov	r2,r4
    bd58:	2807883a 	mov	r3,r5
    bd5c:	dc000e15 	stw	r16,56(sp)
    bd60:	d809883a 	mov	r4,sp
    bd64:	880b883a 	mov	r5,r17
    bd68:	dc000904 	addi	r16,sp,36
    bd6c:	d8c00115 	stw	r3,4(sp)
    bd70:	d8800015 	stw	r2,0(sp)
    bd74:	d9800215 	stw	r6,8(sp)
    bd78:	dfc01015 	stw	ra,64(sp)
    bd7c:	d9c00315 	stw	r7,12(sp)
    bd80:	000c3a00 	call	c3a0 <__unpack_d>
    bd84:	d9000204 	addi	r4,sp,8
    bd88:	800b883a 	mov	r5,r16
    bd8c:	000c3a00 	call	c3a0 <__unpack_d>
    bd90:	d8800417 	ldw	r2,16(sp)
    bd94:	00c00044 	movi	r3,1
    bd98:	01bfffc4 	movi	r6,-1
    bd9c:	1880062e 	bgeu	r3,r2,bdb8 <__gedf2+0x70>
    bda0:	d8800917 	ldw	r2,36(sp)
    bda4:	8809883a 	mov	r4,r17
    bda8:	800b883a 	mov	r5,r16
    bdac:	1880022e 	bgeu	r3,r2,bdb8 <__gedf2+0x70>
    bdb0:	000c4d80 	call	c4d8 <__fpcmp_parts_d>
    bdb4:	100d883a 	mov	r6,r2
    bdb8:	3005883a 	mov	r2,r6
    bdbc:	dfc01017 	ldw	ra,64(sp)
    bdc0:	dc400f17 	ldw	r17,60(sp)
    bdc4:	dc000e17 	ldw	r16,56(sp)
    bdc8:	dec01104 	addi	sp,sp,68
    bdcc:	f800283a 	ret

0000bdd0 <__ltdf2>:
    bdd0:	deffef04 	addi	sp,sp,-68
    bdd4:	dc400f15 	stw	r17,60(sp)
    bdd8:	dc400404 	addi	r17,sp,16
    bddc:	2005883a 	mov	r2,r4
    bde0:	2807883a 	mov	r3,r5
    bde4:	dc000e15 	stw	r16,56(sp)
    bde8:	d809883a 	mov	r4,sp
    bdec:	880b883a 	mov	r5,r17
    bdf0:	dc000904 	addi	r16,sp,36
    bdf4:	d8c00115 	stw	r3,4(sp)
    bdf8:	d8800015 	stw	r2,0(sp)
    bdfc:	d9800215 	stw	r6,8(sp)
    be00:	dfc01015 	stw	ra,64(sp)
    be04:	d9c00315 	stw	r7,12(sp)
    be08:	000c3a00 	call	c3a0 <__unpack_d>
    be0c:	d9000204 	addi	r4,sp,8
    be10:	800b883a 	mov	r5,r16
    be14:	000c3a00 	call	c3a0 <__unpack_d>
    be18:	d8800417 	ldw	r2,16(sp)
    be1c:	00c00044 	movi	r3,1
    be20:	180d883a 	mov	r6,r3
    be24:	1880062e 	bgeu	r3,r2,be40 <__ltdf2+0x70>
    be28:	d8800917 	ldw	r2,36(sp)
    be2c:	8809883a 	mov	r4,r17
    be30:	800b883a 	mov	r5,r16
    be34:	1880022e 	bgeu	r3,r2,be40 <__ltdf2+0x70>
    be38:	000c4d80 	call	c4d8 <__fpcmp_parts_d>
    be3c:	100d883a 	mov	r6,r2
    be40:	3005883a 	mov	r2,r6
    be44:	dfc01017 	ldw	ra,64(sp)
    be48:	dc400f17 	ldw	r17,60(sp)
    be4c:	dc000e17 	ldw	r16,56(sp)
    be50:	dec01104 	addi	sp,sp,68
    be54:	f800283a 	ret

0000be58 <__floatsidf>:
    be58:	2006d7fa 	srli	r3,r4,31
    be5c:	defff604 	addi	sp,sp,-40
    be60:	008000c4 	movi	r2,3
    be64:	dfc00915 	stw	ra,36(sp)
    be68:	dcc00815 	stw	r19,32(sp)
    be6c:	dc800715 	stw	r18,28(sp)
    be70:	dc400615 	stw	r17,24(sp)
    be74:	dc000515 	stw	r16,20(sp)
    be78:	d8800015 	stw	r2,0(sp)
    be7c:	d8c00115 	stw	r3,4(sp)
    be80:	20000f1e 	bne	r4,zero,bec0 <__floatsidf+0x68>
    be84:	00800084 	movi	r2,2
    be88:	d8800015 	stw	r2,0(sp)
    be8c:	d809883a 	mov	r4,sp
    be90:	0002f900 	call	2f90 <__pack_d>
    be94:	1009883a 	mov	r4,r2
    be98:	180b883a 	mov	r5,r3
    be9c:	2005883a 	mov	r2,r4
    bea0:	2807883a 	mov	r3,r5
    bea4:	dfc00917 	ldw	ra,36(sp)
    bea8:	dcc00817 	ldw	r19,32(sp)
    beac:	dc800717 	ldw	r18,28(sp)
    beb0:	dc400617 	ldw	r17,24(sp)
    beb4:	dc000517 	ldw	r16,20(sp)
    beb8:	dec00a04 	addi	sp,sp,40
    bebc:	f800283a 	ret
    bec0:	00800f04 	movi	r2,60
    bec4:	1807003a 	cmpeq	r3,r3,zero
    bec8:	d8800215 	stw	r2,8(sp)
    becc:	18001126 	beq	r3,zero,bf14 <__floatsidf+0xbc>
    bed0:	0027883a 	mov	r19,zero
    bed4:	2025883a 	mov	r18,r4
    bed8:	d9000315 	stw	r4,12(sp)
    bedc:	dcc00415 	stw	r19,16(sp)
    bee0:	0002ce80 	call	2ce8 <__clzsi2>
    bee4:	11000744 	addi	r4,r2,29
    bee8:	013fe80e 	bge	zero,r4,be8c <__floatsidf+0x34>
    beec:	10bfff44 	addi	r2,r2,-3
    bef0:	10000c16 	blt	r2,zero,bf24 <__floatsidf+0xcc>
    bef4:	90a2983a 	sll	r17,r18,r2
    bef8:	0021883a 	mov	r16,zero
    befc:	d8800217 	ldw	r2,8(sp)
    bf00:	dc400415 	stw	r17,16(sp)
    bf04:	dc000315 	stw	r16,12(sp)
    bf08:	1105c83a 	sub	r2,r2,r4
    bf0c:	d8800215 	stw	r2,8(sp)
    bf10:	003fde06 	br	be8c <__floatsidf+0x34>
    bf14:	00a00034 	movhi	r2,32768
    bf18:	20800a26 	beq	r4,r2,bf44 <__floatsidf+0xec>
    bf1c:	0109c83a 	sub	r4,zero,r4
    bf20:	003feb06 	br	bed0 <__floatsidf+0x78>
    bf24:	9006d07a 	srli	r3,r18,1
    bf28:	008007c4 	movi	r2,31
    bf2c:	1105c83a 	sub	r2,r2,r4
    bf30:	1886d83a 	srl	r3,r3,r2
    bf34:	9922983a 	sll	r17,r19,r4
    bf38:	9120983a 	sll	r16,r18,r4
    bf3c:	1c62b03a 	or	r17,r3,r17
    bf40:	003fee06 	br	befc <__floatsidf+0xa4>
    bf44:	0009883a 	mov	r4,zero
    bf48:	01707834 	movhi	r5,49632
    bf4c:	003fd306 	br	be9c <__floatsidf+0x44>

0000bf50 <__fixdfsi>:
    bf50:	defff804 	addi	sp,sp,-32
    bf54:	2005883a 	mov	r2,r4
    bf58:	2807883a 	mov	r3,r5
    bf5c:	d809883a 	mov	r4,sp
    bf60:	d9400204 	addi	r5,sp,8
    bf64:	d8c00115 	stw	r3,4(sp)
    bf68:	d8800015 	stw	r2,0(sp)
    bf6c:	dfc00715 	stw	ra,28(sp)
    bf70:	000c3a00 	call	c3a0 <__unpack_d>
    bf74:	d8c00217 	ldw	r3,8(sp)
    bf78:	00800084 	movi	r2,2
    bf7c:	1880051e 	bne	r3,r2,bf94 <__fixdfsi+0x44>
    bf80:	0007883a 	mov	r3,zero
    bf84:	1805883a 	mov	r2,r3
    bf88:	dfc00717 	ldw	ra,28(sp)
    bf8c:	dec00804 	addi	sp,sp,32
    bf90:	f800283a 	ret
    bf94:	00800044 	movi	r2,1
    bf98:	10fff92e 	bgeu	r2,r3,bf80 <__fixdfsi+0x30>
    bf9c:	00800104 	movi	r2,4
    bfa0:	18800426 	beq	r3,r2,bfb4 <__fixdfsi+0x64>
    bfa4:	d8c00417 	ldw	r3,16(sp)
    bfa8:	183ff516 	blt	r3,zero,bf80 <__fixdfsi+0x30>
    bfac:	00800784 	movi	r2,30
    bfb0:	10c0080e 	bge	r2,r3,bfd4 <__fixdfsi+0x84>
    bfb4:	d8800317 	ldw	r2,12(sp)
    bfb8:	1000121e 	bne	r2,zero,c004 <__fixdfsi+0xb4>
    bfbc:	00e00034 	movhi	r3,32768
    bfc0:	18ffffc4 	addi	r3,r3,-1
    bfc4:	1805883a 	mov	r2,r3
    bfc8:	dfc00717 	ldw	ra,28(sp)
    bfcc:	dec00804 	addi	sp,sp,32
    bfd0:	f800283a 	ret
    bfd4:	00800f04 	movi	r2,60
    bfd8:	10d1c83a 	sub	r8,r2,r3
    bfdc:	40bff804 	addi	r2,r8,-32
    bfe0:	d9800517 	ldw	r6,20(sp)
    bfe4:	d9c00617 	ldw	r7,24(sp)
    bfe8:	10000816 	blt	r2,zero,c00c <__fixdfsi+0xbc>
    bfec:	3888d83a 	srl	r4,r7,r2
    bff0:	d8800317 	ldw	r2,12(sp)
    bff4:	2007883a 	mov	r3,r4
    bff8:	103fe226 	beq	r2,zero,bf84 <__fixdfsi+0x34>
    bffc:	0107c83a 	sub	r3,zero,r4
    c000:	003fe006 	br	bf84 <__fixdfsi+0x34>
    c004:	00e00034 	movhi	r3,32768
    c008:	003fde06 	br	bf84 <__fixdfsi+0x34>
    c00c:	39c7883a 	add	r3,r7,r7
    c010:	008007c4 	movi	r2,31
    c014:	1205c83a 	sub	r2,r2,r8
    c018:	1886983a 	sll	r3,r3,r2
    c01c:	3208d83a 	srl	r4,r6,r8
    c020:	1908b03a 	or	r4,r3,r4
    c024:	003ff206 	br	bff0 <__fixdfsi+0xa0>

0000c028 <__floatunsidf>:
    c028:	defff204 	addi	sp,sp,-56
    c02c:	dfc00d15 	stw	ra,52(sp)
    c030:	ddc00c15 	stw	r23,48(sp)
    c034:	dd800b15 	stw	r22,44(sp)
    c038:	dd400a15 	stw	r21,40(sp)
    c03c:	dd000915 	stw	r20,36(sp)
    c040:	dcc00815 	stw	r19,32(sp)
    c044:	dc800715 	stw	r18,28(sp)
    c048:	dc400615 	stw	r17,24(sp)
    c04c:	dc000515 	stw	r16,20(sp)
    c050:	d8000115 	stw	zero,4(sp)
    c054:	20000f1e 	bne	r4,zero,c094 <__floatunsidf+0x6c>
    c058:	00800084 	movi	r2,2
    c05c:	d8800015 	stw	r2,0(sp)
    c060:	d809883a 	mov	r4,sp
    c064:	0002f900 	call	2f90 <__pack_d>
    c068:	dfc00d17 	ldw	ra,52(sp)
    c06c:	ddc00c17 	ldw	r23,48(sp)
    c070:	dd800b17 	ldw	r22,44(sp)
    c074:	dd400a17 	ldw	r21,40(sp)
    c078:	dd000917 	ldw	r20,36(sp)
    c07c:	dcc00817 	ldw	r19,32(sp)
    c080:	dc800717 	ldw	r18,28(sp)
    c084:	dc400617 	ldw	r17,24(sp)
    c088:	dc000517 	ldw	r16,20(sp)
    c08c:	dec00e04 	addi	sp,sp,56
    c090:	f800283a 	ret
    c094:	008000c4 	movi	r2,3
    c098:	00c00f04 	movi	r3,60
    c09c:	002f883a 	mov	r23,zero
    c0a0:	202d883a 	mov	r22,r4
    c0a4:	d8800015 	stw	r2,0(sp)
    c0a8:	d8c00215 	stw	r3,8(sp)
    c0ac:	d9000315 	stw	r4,12(sp)
    c0b0:	ddc00415 	stw	r23,16(sp)
    c0b4:	0002ce80 	call	2ce8 <__clzsi2>
    c0b8:	12400744 	addi	r9,r2,29
    c0bc:	48000b16 	blt	r9,zero,c0ec <__floatunsidf+0xc4>
    c0c0:	483fe726 	beq	r9,zero,c060 <__floatunsidf+0x38>
    c0c4:	10bfff44 	addi	r2,r2,-3
    c0c8:	10002e16 	blt	r2,zero,c184 <__floatunsidf+0x15c>
    c0cc:	b0a2983a 	sll	r17,r22,r2
    c0d0:	0021883a 	mov	r16,zero
    c0d4:	d8800217 	ldw	r2,8(sp)
    c0d8:	dc400415 	stw	r17,16(sp)
    c0dc:	dc000315 	stw	r16,12(sp)
    c0e0:	1245c83a 	sub	r2,r2,r9
    c0e4:	d8800215 	stw	r2,8(sp)
    c0e8:	003fdd06 	br	c060 <__floatunsidf+0x38>
    c0ec:	0255c83a 	sub	r10,zero,r9
    c0f0:	51bff804 	addi	r6,r10,-32
    c0f4:	30001b16 	blt	r6,zero,c164 <__floatunsidf+0x13c>
    c0f8:	b9a8d83a 	srl	r20,r23,r6
    c0fc:	002b883a 	mov	r21,zero
    c100:	000f883a 	mov	r7,zero
    c104:	01000044 	movi	r4,1
    c108:	0011883a 	mov	r8,zero
    c10c:	30002516 	blt	r6,zero,c1a4 <__floatunsidf+0x17c>
    c110:	21a6983a 	sll	r19,r4,r6
    c114:	0025883a 	mov	r18,zero
    c118:	00bfffc4 	movi	r2,-1
    c11c:	9089883a 	add	r4,r18,r2
    c120:	988b883a 	add	r5,r19,r2
    c124:	248d803a 	cmpltu	r6,r4,r18
    c128:	314b883a 	add	r5,r6,r5
    c12c:	b104703a 	and	r2,r22,r4
    c130:	b946703a 	and	r3,r23,r5
    c134:	10c4b03a 	or	r2,r2,r3
    c138:	10000226 	beq	r2,zero,c144 <__floatunsidf+0x11c>
    c13c:	01c00044 	movi	r7,1
    c140:	0011883a 	mov	r8,zero
    c144:	d9000217 	ldw	r4,8(sp)
    c148:	a1c4b03a 	or	r2,r20,r7
    c14c:	aa06b03a 	or	r3,r21,r8
    c150:	2249c83a 	sub	r4,r4,r9
    c154:	d8c00415 	stw	r3,16(sp)
    c158:	d9000215 	stw	r4,8(sp)
    c15c:	d8800315 	stw	r2,12(sp)
    c160:	003fbf06 	br	c060 <__floatunsidf+0x38>
    c164:	bdc7883a 	add	r3,r23,r23
    c168:	008007c4 	movi	r2,31
    c16c:	1285c83a 	sub	r2,r2,r10
    c170:	1886983a 	sll	r3,r3,r2
    c174:	b2a8d83a 	srl	r20,r22,r10
    c178:	baaad83a 	srl	r21,r23,r10
    c17c:	1d28b03a 	or	r20,r3,r20
    c180:	003fdf06 	br	c100 <__floatunsidf+0xd8>
    c184:	b006d07a 	srli	r3,r22,1
    c188:	008007c4 	movi	r2,31
    c18c:	1245c83a 	sub	r2,r2,r9
    c190:	1886d83a 	srl	r3,r3,r2
    c194:	ba62983a 	sll	r17,r23,r9
    c198:	b260983a 	sll	r16,r22,r9
    c19c:	1c62b03a 	or	r17,r3,r17
    c1a0:	003fcc06 	br	c0d4 <__floatunsidf+0xac>
    c1a4:	2006d07a 	srli	r3,r4,1
    c1a8:	008007c4 	movi	r2,31
    c1ac:	1285c83a 	sub	r2,r2,r10
    c1b0:	18a6d83a 	srl	r19,r3,r2
    c1b4:	22a4983a 	sll	r18,r4,r10
    c1b8:	003fd706 	br	c118 <__floatunsidf+0xf0>

0000c1bc <udivmodsi4>:
    c1bc:	29001b2e 	bgeu	r5,r4,c22c <udivmodsi4+0x70>
    c1c0:	28001a16 	blt	r5,zero,c22c <udivmodsi4+0x70>
    c1c4:	00800044 	movi	r2,1
    c1c8:	0007883a 	mov	r3,zero
    c1cc:	01c007c4 	movi	r7,31
    c1d0:	00000306 	br	c1e0 <udivmodsi4+0x24>
    c1d4:	19c01326 	beq	r3,r7,c224 <udivmodsi4+0x68>
    c1d8:	18c00044 	addi	r3,r3,1
    c1dc:	28000416 	blt	r5,zero,c1f0 <udivmodsi4+0x34>
    c1e0:	294b883a 	add	r5,r5,r5
    c1e4:	1085883a 	add	r2,r2,r2
    c1e8:	293ffa36 	bltu	r5,r4,c1d4 <udivmodsi4+0x18>
    c1ec:	10000d26 	beq	r2,zero,c224 <udivmodsi4+0x68>
    c1f0:	0007883a 	mov	r3,zero
    c1f4:	21400236 	bltu	r4,r5,c200 <udivmodsi4+0x44>
    c1f8:	2149c83a 	sub	r4,r4,r5
    c1fc:	1886b03a 	or	r3,r3,r2
    c200:	1004d07a 	srli	r2,r2,1
    c204:	280ad07a 	srli	r5,r5,1
    c208:	103ffa1e 	bne	r2,zero,c1f4 <udivmodsi4+0x38>
    c20c:	30000226 	beq	r6,zero,c218 <udivmodsi4+0x5c>
    c210:	2005883a 	mov	r2,r4
    c214:	f800283a 	ret
    c218:	1809883a 	mov	r4,r3
    c21c:	2005883a 	mov	r2,r4
    c220:	f800283a 	ret
    c224:	0007883a 	mov	r3,zero
    c228:	003ff806 	br	c20c <udivmodsi4+0x50>
    c22c:	00800044 	movi	r2,1
    c230:	0007883a 	mov	r3,zero
    c234:	003fef06 	br	c1f4 <udivmodsi4+0x38>

0000c238 <__divsi3>:
    c238:	defffe04 	addi	sp,sp,-8
    c23c:	dc000015 	stw	r16,0(sp)
    c240:	dfc00115 	stw	ra,4(sp)
    c244:	0021883a 	mov	r16,zero
    c248:	20000c16 	blt	r4,zero,c27c <__divsi3+0x44>
    c24c:	000d883a 	mov	r6,zero
    c250:	28000e16 	blt	r5,zero,c28c <__divsi3+0x54>
    c254:	000c1bc0 	call	c1bc <udivmodsi4>
    c258:	1007883a 	mov	r3,r2
    c25c:	8005003a 	cmpeq	r2,r16,zero
    c260:	1000011e 	bne	r2,zero,c268 <__divsi3+0x30>
    c264:	00c7c83a 	sub	r3,zero,r3
    c268:	1805883a 	mov	r2,r3
    c26c:	dfc00117 	ldw	ra,4(sp)
    c270:	dc000017 	ldw	r16,0(sp)
    c274:	dec00204 	addi	sp,sp,8
    c278:	f800283a 	ret
    c27c:	0109c83a 	sub	r4,zero,r4
    c280:	04000044 	movi	r16,1
    c284:	000d883a 	mov	r6,zero
    c288:	283ff20e 	bge	r5,zero,c254 <__divsi3+0x1c>
    c28c:	014bc83a 	sub	r5,zero,r5
    c290:	8021003a 	cmpeq	r16,r16,zero
    c294:	003fef06 	br	c254 <__divsi3+0x1c>

0000c298 <__modsi3>:
    c298:	deffff04 	addi	sp,sp,-4
    c29c:	dfc00015 	stw	ra,0(sp)
    c2a0:	01800044 	movi	r6,1
    c2a4:	2807883a 	mov	r3,r5
    c2a8:	20000416 	blt	r4,zero,c2bc <__modsi3+0x24>
    c2ac:	28000c16 	blt	r5,zero,c2e0 <__modsi3+0x48>
    c2b0:	dfc00017 	ldw	ra,0(sp)
    c2b4:	dec00104 	addi	sp,sp,4
    c2b8:	000c1bc1 	jmpi	c1bc <udivmodsi4>
    c2bc:	0109c83a 	sub	r4,zero,r4
    c2c0:	28000b16 	blt	r5,zero,c2f0 <__modsi3+0x58>
    c2c4:	180b883a 	mov	r5,r3
    c2c8:	01800044 	movi	r6,1
    c2cc:	000c1bc0 	call	c1bc <udivmodsi4>
    c2d0:	0085c83a 	sub	r2,zero,r2
    c2d4:	dfc00017 	ldw	ra,0(sp)
    c2d8:	dec00104 	addi	sp,sp,4
    c2dc:	f800283a 	ret
    c2e0:	014bc83a 	sub	r5,zero,r5
    c2e4:	dfc00017 	ldw	ra,0(sp)
    c2e8:	dec00104 	addi	sp,sp,4
    c2ec:	000c1bc1 	jmpi	c1bc <udivmodsi4>
    c2f0:	0147c83a 	sub	r3,zero,r5
    c2f4:	003ff306 	br	c2c4 <__modsi3+0x2c>

0000c2f8 <__udivsi3>:
    c2f8:	000d883a 	mov	r6,zero
    c2fc:	000c1bc1 	jmpi	c1bc <udivmodsi4>

0000c300 <__umodsi3>:
    c300:	01800044 	movi	r6,1
    c304:	000c1bc1 	jmpi	c1bc <udivmodsi4>

0000c308 <__muldi3>:
    c308:	2011883a 	mov	r8,r4
    c30c:	427fffcc 	andi	r9,r8,65535
    c310:	4018d43a 	srli	r12,r8,16
    c314:	32bfffcc 	andi	r10,r6,65535
    c318:	3016d43a 	srli	r11,r6,16
    c31c:	4a85383a 	mul	r2,r9,r10
    c320:	6295383a 	mul	r10,r12,r10
    c324:	4ad3383a 	mul	r9,r9,r11
    c328:	113fffcc 	andi	r4,r2,65535
    c32c:	1004d43a 	srli	r2,r2,16
    c330:	4a93883a 	add	r9,r9,r10
    c334:	3807883a 	mov	r3,r7
    c338:	1245883a 	add	r2,r2,r9
    c33c:	280f883a 	mov	r7,r5
    c340:	180b883a 	mov	r5,r3
    c344:	1006943a 	slli	r3,r2,16
    c348:	defffd04 	addi	sp,sp,-12
    c34c:	dc800215 	stw	r18,8(sp)
    c350:	1907883a 	add	r3,r3,r4
    c354:	dc400115 	stw	r17,4(sp)
    c358:	dc000015 	stw	r16,0(sp)
    c35c:	4165383a 	mul	r18,r8,r5
    c360:	31e3383a 	mul	r17,r6,r7
    c364:	1012d43a 	srli	r9,r2,16
    c368:	62d9383a 	mul	r12,r12,r11
    c36c:	181f883a 	mov	r15,r3
    c370:	1280022e 	bgeu	r2,r10,c37c <__muldi3+0x74>
    c374:	00800074 	movhi	r2,1
    c378:	6099883a 	add	r12,r12,r2
    c37c:	624d883a 	add	r6,r12,r9
    c380:	9187883a 	add	r3,r18,r6
    c384:	88c7883a 	add	r3,r17,r3
    c388:	7805883a 	mov	r2,r15
    c38c:	dc800217 	ldw	r18,8(sp)
    c390:	dc400117 	ldw	r17,4(sp)
    c394:	dc000017 	ldw	r16,0(sp)
    c398:	dec00304 	addi	sp,sp,12
    c39c:	f800283a 	ret

0000c3a0 <__unpack_d>:
    c3a0:	20c00117 	ldw	r3,4(r4)
    c3a4:	22400017 	ldw	r9,0(r4)
    c3a8:	00800434 	movhi	r2,16
    c3ac:	10bfffc4 	addi	r2,r2,-1
    c3b0:	1808d53a 	srli	r4,r3,20
    c3b4:	180cd7fa 	srli	r6,r3,31
    c3b8:	1894703a 	and	r10,r3,r2
    c3bc:	2201ffcc 	andi	r8,r4,2047
    c3c0:	281b883a 	mov	r13,r5
    c3c4:	4817883a 	mov	r11,r9
    c3c8:	29800115 	stw	r6,4(r5)
    c3cc:	5019883a 	mov	r12,r10
    c3d0:	40001e1e 	bne	r8,zero,c44c <__unpack_d+0xac>
    c3d4:	4a84b03a 	or	r2,r9,r10
    c3d8:	10001926 	beq	r2,zero,c440 <__unpack_d+0xa0>
    c3dc:	4804d63a 	srli	r2,r9,24
    c3e0:	500c923a 	slli	r6,r10,8
    c3e4:	013f0084 	movi	r4,-1022
    c3e8:	00c40034 	movhi	r3,4096
    c3ec:	18ffffc4 	addi	r3,r3,-1
    c3f0:	118cb03a 	or	r6,r2,r6
    c3f4:	008000c4 	movi	r2,3
    c3f8:	480a923a 	slli	r5,r9,8
    c3fc:	68800015 	stw	r2,0(r13)
    c400:	69000215 	stw	r4,8(r13)
    c404:	19800b36 	bltu	r3,r6,c434 <__unpack_d+0x94>
    c408:	200f883a 	mov	r7,r4
    c40c:	1811883a 	mov	r8,r3
    c410:	2945883a 	add	r2,r5,r5
    c414:	1149803a 	cmpltu	r4,r2,r5
    c418:	3187883a 	add	r3,r6,r6
    c41c:	20c9883a 	add	r4,r4,r3
    c420:	100b883a 	mov	r5,r2
    c424:	200d883a 	mov	r6,r4
    c428:	39ffffc4 	addi	r7,r7,-1
    c42c:	413ff82e 	bgeu	r8,r4,c410 <__unpack_d+0x70>
    c430:	69c00215 	stw	r7,8(r13)
    c434:	69800415 	stw	r6,16(r13)
    c438:	69400315 	stw	r5,12(r13)
    c43c:	f800283a 	ret
    c440:	00800084 	movi	r2,2
    c444:	28800015 	stw	r2,0(r5)
    c448:	f800283a 	ret
    c44c:	0081ffc4 	movi	r2,2047
    c450:	40800f26 	beq	r8,r2,c490 <__unpack_d+0xf0>
    c454:	480cd63a 	srli	r6,r9,24
    c458:	5006923a 	slli	r3,r10,8
    c45c:	4804923a 	slli	r2,r9,8
    c460:	0009883a 	mov	r4,zero
    c464:	30c6b03a 	or	r3,r6,r3
    c468:	01440034 	movhi	r5,4096
    c46c:	110cb03a 	or	r6,r2,r4
    c470:	423f0044 	addi	r8,r8,-1023
    c474:	194eb03a 	or	r7,r3,r5
    c478:	008000c4 	movi	r2,3
    c47c:	69c00415 	stw	r7,16(r13)
    c480:	6a000215 	stw	r8,8(r13)
    c484:	68800015 	stw	r2,0(r13)
    c488:	69800315 	stw	r6,12(r13)
    c48c:	f800283a 	ret
    c490:	4a84b03a 	or	r2,r9,r10
    c494:	1000031e 	bne	r2,zero,c4a4 <__unpack_d+0x104>
    c498:	00800104 	movi	r2,4
    c49c:	28800015 	stw	r2,0(r5)
    c4a0:	f800283a 	ret
    c4a4:	0009883a 	mov	r4,zero
    c4a8:	01400234 	movhi	r5,8
    c4ac:	4904703a 	and	r2,r9,r4
    c4b0:	5146703a 	and	r3,r10,r5
    c4b4:	10c4b03a 	or	r2,r2,r3
    c4b8:	10000526 	beq	r2,zero,c4d0 <__unpack_d+0x130>
    c4bc:	00800044 	movi	r2,1
    c4c0:	68800015 	stw	r2,0(r13)
    c4c4:	6b000415 	stw	r12,16(r13)
    c4c8:	6ac00315 	stw	r11,12(r13)
    c4cc:	f800283a 	ret
    c4d0:	68000015 	stw	zero,0(r13)
    c4d4:	003ffb06 	br	c4c4 <__unpack_d+0x124>

0000c4d8 <__fpcmp_parts_d>:
    c4d8:	21800017 	ldw	r6,0(r4)
    c4dc:	00c00044 	movi	r3,1
    c4e0:	19800a2e 	bgeu	r3,r6,c50c <__fpcmp_parts_d+0x34>
    c4e4:	28800017 	ldw	r2,0(r5)
    c4e8:	1880082e 	bgeu	r3,r2,c50c <__fpcmp_parts_d+0x34>
    c4ec:	00c00104 	movi	r3,4
    c4f0:	30c02626 	beq	r6,r3,c58c <__fpcmp_parts_d+0xb4>
    c4f4:	10c02226 	beq	r2,r3,c580 <__fpcmp_parts_d+0xa8>
    c4f8:	00c00084 	movi	r3,2
    c4fc:	30c00526 	beq	r6,r3,c514 <__fpcmp_parts_d+0x3c>
    c500:	10c0071e 	bne	r2,r3,c520 <__fpcmp_parts_d+0x48>
    c504:	20800117 	ldw	r2,4(r4)
    c508:	1000091e 	bne	r2,zero,c530 <__fpcmp_parts_d+0x58>
    c50c:	00800044 	movi	r2,1
    c510:	f800283a 	ret
    c514:	10c01a1e 	bne	r2,r3,c580 <__fpcmp_parts_d+0xa8>
    c518:	0005883a 	mov	r2,zero
    c51c:	f800283a 	ret
    c520:	22000117 	ldw	r8,4(r4)
    c524:	28800117 	ldw	r2,4(r5)
    c528:	40800326 	beq	r8,r2,c538 <__fpcmp_parts_d+0x60>
    c52c:	403ff726 	beq	r8,zero,c50c <__fpcmp_parts_d+0x34>
    c530:	00bfffc4 	movi	r2,-1
    c534:	f800283a 	ret
    c538:	20c00217 	ldw	r3,8(r4)
    c53c:	28800217 	ldw	r2,8(r5)
    c540:	10fffa16 	blt	r2,r3,c52c <__fpcmp_parts_d+0x54>
    c544:	18800916 	blt	r3,r2,c56c <__fpcmp_parts_d+0x94>
    c548:	21c00417 	ldw	r7,16(r4)
    c54c:	28c00417 	ldw	r3,16(r5)
    c550:	21800317 	ldw	r6,12(r4)
    c554:	28800317 	ldw	r2,12(r5)
    c558:	19fff436 	bltu	r3,r7,c52c <__fpcmp_parts_d+0x54>
    c55c:	38c00526 	beq	r7,r3,c574 <__fpcmp_parts_d+0x9c>
    c560:	38c00236 	bltu	r7,r3,c56c <__fpcmp_parts_d+0x94>
    c564:	19ffec1e 	bne	r3,r7,c518 <__fpcmp_parts_d+0x40>
    c568:	30bfeb2e 	bgeu	r6,r2,c518 <__fpcmp_parts_d+0x40>
    c56c:	403fe71e 	bne	r8,zero,c50c <__fpcmp_parts_d+0x34>
    c570:	003fef06 	br	c530 <__fpcmp_parts_d+0x58>
    c574:	11bffa2e 	bgeu	r2,r6,c560 <__fpcmp_parts_d+0x88>
    c578:	403fe426 	beq	r8,zero,c50c <__fpcmp_parts_d+0x34>
    c57c:	003fec06 	br	c530 <__fpcmp_parts_d+0x58>
    c580:	28800117 	ldw	r2,4(r5)
    c584:	103fe11e 	bne	r2,zero,c50c <__fpcmp_parts_d+0x34>
    c588:	003fe906 	br	c530 <__fpcmp_parts_d+0x58>
    c58c:	11bfdd1e 	bne	r2,r6,c504 <__fpcmp_parts_d+0x2c>
    c590:	28c00117 	ldw	r3,4(r5)
    c594:	20800117 	ldw	r2,4(r4)
    c598:	1885c83a 	sub	r2,r3,r2
    c59c:	f800283a 	ret

0000c5a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c5a0:	defff804 	addi	sp,sp,-32
    c5a4:	dfc00715 	stw	ra,28(sp)
    c5a8:	df000615 	stw	fp,24(sp)
    c5ac:	df000604 	addi	fp,sp,24
    c5b0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c5b4:	e0bffc17 	ldw	r2,-16(fp)
    c5b8:	1004803a 	cmplt	r2,r2,zero
    c5bc:	1000081e 	bne	r2,zero,c5e0 <close+0x40>
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	10800324 	muli	r2,r2,12
    c5c8:	1007883a 	mov	r3,r2
    c5cc:	00800074 	movhi	r2,1
    c5d0:	1090ee04 	addi	r2,r2,17336
    c5d4:	1887883a 	add	r3,r3,r2
    c5d8:	e0ffff15 	stw	r3,-4(fp)
    c5dc:	00000106 	br	c5e4 <close+0x44>
    c5e0:	e03fff15 	stw	zero,-4(fp)
    c5e4:	e0bfff17 	ldw	r2,-4(fp)
    c5e8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    c5ec:	e0bffb17 	ldw	r2,-20(fp)
    c5f0:	1005003a 	cmpeq	r2,r2,zero
    c5f4:	10001d1e 	bne	r2,zero,c66c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c5f8:	e0bffb17 	ldw	r2,-20(fp)
    c5fc:	10800017 	ldw	r2,0(r2)
    c600:	10800417 	ldw	r2,16(r2)
    c604:	1005003a 	cmpeq	r2,r2,zero
    c608:	1000071e 	bne	r2,zero,c628 <close+0x88>
    c60c:	e0bffb17 	ldw	r2,-20(fp)
    c610:	10800017 	ldw	r2,0(r2)
    c614:	10800417 	ldw	r2,16(r2)
    c618:	e13ffb17 	ldw	r4,-20(fp)
    c61c:	103ee83a 	callr	r2
    c620:	e0bffe15 	stw	r2,-8(fp)
    c624:	00000106 	br	c62c <close+0x8c>
    c628:	e03ffe15 	stw	zero,-8(fp)
    c62c:	e0bffe17 	ldw	r2,-8(fp)
    c630:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c634:	e13ffc17 	ldw	r4,-16(fp)
    c638:	000d23c0 	call	d23c <alt_release_fd>
    if (rval < 0)
    c63c:	e0bffa17 	ldw	r2,-24(fp)
    c640:	1004403a 	cmpge	r2,r2,zero
    c644:	1000071e 	bne	r2,zero,c664 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    c648:	000c69c0 	call	c69c <alt_get_errno>
    c64c:	e0fffa17 	ldw	r3,-24(fp)
    c650:	00c7c83a 	sub	r3,zero,r3
    c654:	10c00015 	stw	r3,0(r2)
      return -1;
    c658:	00bfffc4 	movi	r2,-1
    c65c:	e0bffd15 	stw	r2,-12(fp)
    c660:	00000806 	br	c684 <close+0xe4>
    }
    return 0;
    c664:	e03ffd15 	stw	zero,-12(fp)
    c668:	00000606 	br	c684 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c66c:	000c69c0 	call	c69c <alt_get_errno>
    c670:	1007883a 	mov	r3,r2
    c674:	00801444 	movi	r2,81
    c678:	18800015 	stw	r2,0(r3)
    return -1;
    c67c:	00bfffc4 	movi	r2,-1
    c680:	e0bffd15 	stw	r2,-12(fp)
    c684:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    c688:	e037883a 	mov	sp,fp
    c68c:	dfc00117 	ldw	ra,4(sp)
    c690:	df000017 	ldw	fp,0(sp)
    c694:	dec00204 	addi	sp,sp,8
    c698:	f800283a 	ret

0000c69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c69c:	defffd04 	addi	sp,sp,-12
    c6a0:	dfc00215 	stw	ra,8(sp)
    c6a4:	df000115 	stw	fp,4(sp)
    c6a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c6ac:	00800074 	movhi	r2,1
    c6b0:	10966504 	addi	r2,r2,22932
    c6b4:	10800017 	ldw	r2,0(r2)
    c6b8:	1005003a 	cmpeq	r2,r2,zero
    c6bc:	1000061e 	bne	r2,zero,c6d8 <alt_get_errno+0x3c>
    c6c0:	00800074 	movhi	r2,1
    c6c4:	10966504 	addi	r2,r2,22932
    c6c8:	10800017 	ldw	r2,0(r2)
    c6cc:	103ee83a 	callr	r2
    c6d0:	e0bfff15 	stw	r2,-4(fp)
    c6d4:	00000306 	br	c6e4 <alt_get_errno+0x48>
    c6d8:	00800074 	movhi	r2,1
    c6dc:	109e5604 	addi	r2,r2,31064
    c6e0:	e0bfff15 	stw	r2,-4(fp)
    c6e4:	e0bfff17 	ldw	r2,-4(fp)
}
    c6e8:	e037883a 	mov	sp,fp
    c6ec:	dfc00117 	ldw	ra,4(sp)
    c6f0:	df000017 	ldw	fp,0(sp)
    c6f4:	dec00204 	addi	sp,sp,8
    c6f8:	f800283a 	ret

0000c6fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c6fc:	defffc04 	addi	sp,sp,-16
    c700:	df000315 	stw	fp,12(sp)
    c704:	df000304 	addi	fp,sp,12
    c708:	e13ffd15 	stw	r4,-12(fp)
    c70c:	e17ffe15 	stw	r5,-8(fp)
    c710:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c714:	e0bfff17 	ldw	r2,-4(fp)
}
    c718:	e037883a 	mov	sp,fp
    c71c:	df000017 	ldw	fp,0(sp)
    c720:	dec00104 	addi	sp,sp,4
    c724:	f800283a 	ret

0000c728 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    c728:	defff904 	addi	sp,sp,-28
    c72c:	dfc00615 	stw	ra,24(sp)
    c730:	df000515 	stw	fp,20(sp)
    c734:	df000504 	addi	fp,sp,20
    c738:	e13ffc15 	stw	r4,-16(fp)
    c73c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c740:	e0bffc17 	ldw	r2,-16(fp)
    c744:	1004803a 	cmplt	r2,r2,zero
    c748:	1000081e 	bne	r2,zero,c76c <fstat+0x44>
    c74c:	e0bffc17 	ldw	r2,-16(fp)
    c750:	10800324 	muli	r2,r2,12
    c754:	1007883a 	mov	r3,r2
    c758:	00800074 	movhi	r2,1
    c75c:	1090ee04 	addi	r2,r2,17336
    c760:	1887883a 	add	r3,r3,r2
    c764:	e0ffff15 	stw	r3,-4(fp)
    c768:	00000106 	br	c770 <fstat+0x48>
    c76c:	e03fff15 	stw	zero,-4(fp)
    c770:	e0bfff17 	ldw	r2,-4(fp)
    c774:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c778:	e0bffb17 	ldw	r2,-20(fp)
    c77c:	1005003a 	cmpeq	r2,r2,zero
    c780:	1000121e 	bne	r2,zero,c7cc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c784:	e0bffb17 	ldw	r2,-20(fp)
    c788:	10800017 	ldw	r2,0(r2)
    c78c:	10800817 	ldw	r2,32(r2)
    c790:	1005003a 	cmpeq	r2,r2,zero
    c794:	1000081e 	bne	r2,zero,c7b8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    c798:	e0bffb17 	ldw	r2,-20(fp)
    c79c:	10800017 	ldw	r2,0(r2)
    c7a0:	10800817 	ldw	r2,32(r2)
    c7a4:	e13ffb17 	ldw	r4,-20(fp)
    c7a8:	e17ffd17 	ldw	r5,-12(fp)
    c7ac:	103ee83a 	callr	r2
    c7b0:	e0bffe15 	stw	r2,-8(fp)
    c7b4:	00000b06 	br	c7e4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    c7b8:	e0fffd17 	ldw	r3,-12(fp)
    c7bc:	00880004 	movi	r2,8192
    c7c0:	18800115 	stw	r2,4(r3)
      return 0;
    c7c4:	e03ffe15 	stw	zero,-8(fp)
    c7c8:	00000606 	br	c7e4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c7cc:	000c7fc0 	call	c7fc <alt_get_errno>
    c7d0:	1007883a 	mov	r3,r2
    c7d4:	00801444 	movi	r2,81
    c7d8:	18800015 	stw	r2,0(r3)
    return -1;
    c7dc:	00bfffc4 	movi	r2,-1
    c7e0:	e0bffe15 	stw	r2,-8(fp)
    c7e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c7e8:	e037883a 	mov	sp,fp
    c7ec:	dfc00117 	ldw	ra,4(sp)
    c7f0:	df000017 	ldw	fp,0(sp)
    c7f4:	dec00204 	addi	sp,sp,8
    c7f8:	f800283a 	ret

0000c7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c7fc:	defffd04 	addi	sp,sp,-12
    c800:	dfc00215 	stw	ra,8(sp)
    c804:	df000115 	stw	fp,4(sp)
    c808:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c80c:	00800074 	movhi	r2,1
    c810:	10966504 	addi	r2,r2,22932
    c814:	10800017 	ldw	r2,0(r2)
    c818:	1005003a 	cmpeq	r2,r2,zero
    c81c:	1000061e 	bne	r2,zero,c838 <alt_get_errno+0x3c>
    c820:	00800074 	movhi	r2,1
    c824:	10966504 	addi	r2,r2,22932
    c828:	10800017 	ldw	r2,0(r2)
    c82c:	103ee83a 	callr	r2
    c830:	e0bfff15 	stw	r2,-4(fp)
    c834:	00000306 	br	c844 <alt_get_errno+0x48>
    c838:	00800074 	movhi	r2,1
    c83c:	109e5604 	addi	r2,r2,31064
    c840:	e0bfff15 	stw	r2,-4(fp)
    c844:	e0bfff17 	ldw	r2,-4(fp)
}
    c848:	e037883a 	mov	sp,fp
    c84c:	dfc00117 	ldw	ra,4(sp)
    c850:	df000017 	ldw	fp,0(sp)
    c854:	dec00204 	addi	sp,sp,8
    c858:	f800283a 	ret

0000c85c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c85c:	deffef04 	addi	sp,sp,-68
    c860:	df001015 	stw	fp,64(sp)
    c864:	df001004 	addi	fp,sp,64
    c868:	e13ffc15 	stw	r4,-16(fp)
    c86c:	e17ffd15 	stw	r5,-12(fp)
    c870:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    c874:	00bffa84 	movi	r2,-22
    c878:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c87c:	e0bffc17 	ldw	r2,-16(fp)
    c880:	10800828 	cmpgeui	r2,r2,32
    c884:	1000601e 	bne	r2,zero,ca08 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c888:	0005303a 	rdctl	r2,status
    c88c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c890:	e0fff917 	ldw	r3,-28(fp)
    c894:	00bfff84 	movi	r2,-2
    c898:	1884703a 	and	r2,r3,r2
    c89c:	1001703a 	wrctl	status,r2
  
  return context;
    c8a0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c8a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    c8a8:	e0bffc17 	ldw	r2,-16(fp)
    c8ac:	00c01f34 	movhi	r3,124
    c8b0:	18e2f104 	addi	r3,r3,-29756
    c8b4:	100490fa 	slli	r2,r2,3
    c8b8:	10c7883a 	add	r3,r2,r3
    c8bc:	e0bffe17 	ldw	r2,-8(fp)
    c8c0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    c8c4:	e0bffc17 	ldw	r2,-16(fp)
    c8c8:	00c01f34 	movhi	r3,124
    c8cc:	18e2f104 	addi	r3,r3,-29756
    c8d0:	100490fa 	slli	r2,r2,3
    c8d4:	10c5883a 	add	r2,r2,r3
    c8d8:	10c00104 	addi	r3,r2,4
    c8dc:	e0bffd17 	ldw	r2,-12(fp)
    c8e0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c8e4:	e0bffe17 	ldw	r2,-8(fp)
    c8e8:	1005003a 	cmpeq	r2,r2,zero
    c8ec:	1000201e 	bne	r2,zero,c970 <alt_irq_register+0x114>
    c8f0:	e0bffc17 	ldw	r2,-16(fp)
    c8f4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8f8:	0005303a 	rdctl	r2,status
    c8fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c900:	e0fff617 	ldw	r3,-40(fp)
    c904:	00bfff84 	movi	r2,-2
    c908:	1884703a 	and	r2,r3,r2
    c90c:	1001703a 	wrctl	status,r2
  
  return context;
    c910:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c914:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    c918:	e0fff717 	ldw	r3,-36(fp)
    c91c:	00800044 	movi	r2,1
    c920:	10c4983a 	sll	r2,r2,r3
    c924:	1007883a 	mov	r3,r2
    c928:	00800074 	movhi	r2,1
    c92c:	109e5704 	addi	r2,r2,31068
    c930:	10800017 	ldw	r2,0(r2)
    c934:	1886b03a 	or	r3,r3,r2
    c938:	00800074 	movhi	r2,1
    c93c:	109e5704 	addi	r2,r2,31068
    c940:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c944:	00800074 	movhi	r2,1
    c948:	109e5704 	addi	r2,r2,31068
    c94c:	10800017 	ldw	r2,0(r2)
    c950:	100170fa 	wrctl	ienable,r2
    c954:	e0bff817 	ldw	r2,-32(fp)
    c958:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c95c:	e0bff517 	ldw	r2,-44(fp)
    c960:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c964:	0005883a 	mov	r2,zero
    c968:	e0bfff15 	stw	r2,-4(fp)
    c96c:	00002006 	br	c9f0 <alt_irq_register+0x194>
    c970:	e0bffc17 	ldw	r2,-16(fp)
    c974:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c978:	0005303a 	rdctl	r2,status
    c97c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c980:	e0fff217 	ldw	r3,-56(fp)
    c984:	00bfff84 	movi	r2,-2
    c988:	1884703a 	and	r2,r3,r2
    c98c:	1001703a 	wrctl	status,r2
  
  return context;
    c990:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c994:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    c998:	e0fff317 	ldw	r3,-52(fp)
    c99c:	00800044 	movi	r2,1
    c9a0:	10c4983a 	sll	r2,r2,r3
    c9a4:	0084303a 	nor	r2,zero,r2
    c9a8:	1007883a 	mov	r3,r2
    c9ac:	00800074 	movhi	r2,1
    c9b0:	109e5704 	addi	r2,r2,31068
    c9b4:	10800017 	ldw	r2,0(r2)
    c9b8:	1886703a 	and	r3,r3,r2
    c9bc:	00800074 	movhi	r2,1
    c9c0:	109e5704 	addi	r2,r2,31068
    c9c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c9c8:	00800074 	movhi	r2,1
    c9cc:	109e5704 	addi	r2,r2,31068
    c9d0:	10800017 	ldw	r2,0(r2)
    c9d4:	100170fa 	wrctl	ienable,r2
    c9d8:	e0bff417 	ldw	r2,-48(fp)
    c9dc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9e0:	e0bff117 	ldw	r2,-60(fp)
    c9e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	e0bfff15 	stw	r2,-4(fp)
    c9f0:	e0bfff17 	ldw	r2,-4(fp)
    c9f4:	e0bffb15 	stw	r2,-20(fp)
    c9f8:	e0bffa17 	ldw	r2,-24(fp)
    c9fc:	e0bff015 	stw	r2,-64(fp)
    ca00:	e0bff017 	ldw	r2,-64(fp)
    ca04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ca08:	e0bffb17 	ldw	r2,-20(fp)
}
    ca0c:	e037883a 	mov	sp,fp
    ca10:	df000017 	ldw	fp,0(sp)
    ca14:	dec00104 	addi	sp,sp,4
    ca18:	f800283a 	ret

0000ca1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ca1c:	deffeb04 	addi	sp,sp,-84
    ca20:	dfc01415 	stw	ra,80(sp)
    ca24:	df001315 	stw	fp,76(sp)
    ca28:	df001304 	addi	fp,sp,76
    ca2c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ca30:	e0bffd17 	ldw	r2,-12(fp)
    ca34:	1004803a 	cmplt	r2,r2,zero
    ca38:	1000081e 	bne	r2,zero,ca5c <isatty+0x40>
    ca3c:	e0bffd17 	ldw	r2,-12(fp)
    ca40:	10800324 	muli	r2,r2,12
    ca44:	1007883a 	mov	r3,r2
    ca48:	00800074 	movhi	r2,1
    ca4c:	1090ee04 	addi	r2,r2,17336
    ca50:	1887883a 	add	r3,r3,r2
    ca54:	e0ffff15 	stw	r3,-4(fp)
    ca58:	00000106 	br	ca60 <isatty+0x44>
    ca5c:	e03fff15 	stw	zero,-4(fp)
    ca60:	e0bfff17 	ldw	r2,-4(fp)
    ca64:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    ca68:	e0bfed17 	ldw	r2,-76(fp)
    ca6c:	1005003a 	cmpeq	r2,r2,zero
    ca70:	10000f1e 	bne	r2,zero,cab0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ca74:	e0bfed17 	ldw	r2,-76(fp)
    ca78:	10800017 	ldw	r2,0(r2)
    ca7c:	10800817 	ldw	r2,32(r2)
    ca80:	1004c03a 	cmpne	r2,r2,zero
    ca84:	1000031e 	bne	r2,zero,ca94 <isatty+0x78>
    {
      return 1;
    ca88:	00800044 	movi	r2,1
    ca8c:	e0bffe15 	stw	r2,-8(fp)
    ca90:	00000c06 	br	cac4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ca94:	e17fee04 	addi	r5,fp,-72
    ca98:	e13ffd17 	ldw	r4,-12(fp)
    ca9c:	000c7280 	call	c728 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    caa0:	e0bfef17 	ldw	r2,-68(fp)
    caa4:	10880020 	cmpeqi	r2,r2,8192
    caa8:	e0bffe15 	stw	r2,-8(fp)
    caac:	00000506 	br	cac4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cab0:	000cadc0 	call	cadc <alt_get_errno>
    cab4:	1007883a 	mov	r3,r2
    cab8:	00801444 	movi	r2,81
    cabc:	18800015 	stw	r2,0(r3)
    return 0;
    cac0:	e03ffe15 	stw	zero,-8(fp)
    cac4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    cac8:	e037883a 	mov	sp,fp
    cacc:	dfc00117 	ldw	ra,4(sp)
    cad0:	df000017 	ldw	fp,0(sp)
    cad4:	dec00204 	addi	sp,sp,8
    cad8:	f800283a 	ret

0000cadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cadc:	defffd04 	addi	sp,sp,-12
    cae0:	dfc00215 	stw	ra,8(sp)
    cae4:	df000115 	stw	fp,4(sp)
    cae8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    caec:	00800074 	movhi	r2,1
    caf0:	10966504 	addi	r2,r2,22932
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	1005003a 	cmpeq	r2,r2,zero
    cafc:	1000061e 	bne	r2,zero,cb18 <alt_get_errno+0x3c>
    cb00:	00800074 	movhi	r2,1
    cb04:	10966504 	addi	r2,r2,22932
    cb08:	10800017 	ldw	r2,0(r2)
    cb0c:	103ee83a 	callr	r2
    cb10:	e0bfff15 	stw	r2,-4(fp)
    cb14:	00000306 	br	cb24 <alt_get_errno+0x48>
    cb18:	00800074 	movhi	r2,1
    cb1c:	109e5604 	addi	r2,r2,31064
    cb20:	e0bfff15 	stw	r2,-4(fp)
    cb24:	e0bfff17 	ldw	r2,-4(fp)
}
    cb28:	e037883a 	mov	sp,fp
    cb2c:	dfc00117 	ldw	ra,4(sp)
    cb30:	df000017 	ldw	fp,0(sp)
    cb34:	dec00204 	addi	sp,sp,8
    cb38:	f800283a 	ret

0000cb3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    cb3c:	defffe04 	addi	sp,sp,-8
    cb40:	dfc00115 	stw	ra,4(sp)
    cb44:	df000015 	stw	fp,0(sp)
    cb48:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    cb4c:	01000074 	movhi	r4,1
    cb50:	21166a04 	addi	r4,r4,22952
    cb54:	01400074 	movhi	r5,1
    cb58:	294e9f04 	addi	r5,r5,14972
    cb5c:	01800074 	movhi	r6,1
    cb60:	31966a04 	addi	r6,r6,22952
    cb64:	000cbbc0 	call	cbbc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cb68:	01000034 	movhi	r4,0
    cb6c:	21000804 	addi	r4,r4,32
    cb70:	01400034 	movhi	r5,0
    cb74:	29400804 	addi	r5,r5,32
    cb78:	01800034 	movhi	r6,0
    cb7c:	31806e04 	addi	r6,r6,440
    cb80:	000cbbc0 	call	cbbc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cb84:	01000074 	movhi	r4,1
    cb88:	210c7804 	addi	r4,r4,12768
    cb8c:	01400074 	movhi	r5,1
    cb90:	294c7804 	addi	r5,r5,12768
    cb94:	01800074 	movhi	r6,1
    cb98:	318e9f04 	addi	r6,r6,14972
    cb9c:	000cbbc0 	call	cbbc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cba0:	0011e580 	call	11e58 <alt_dcache_flush_all>
  alt_icache_flush_all();
    cba4:	00120e40 	call	120e4 <alt_icache_flush_all>
}
    cba8:	e037883a 	mov	sp,fp
    cbac:	dfc00117 	ldw	ra,4(sp)
    cbb0:	df000017 	ldw	fp,0(sp)
    cbb4:	dec00204 	addi	sp,sp,8
    cbb8:	f800283a 	ret

0000cbbc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cbbc:	defffc04 	addi	sp,sp,-16
    cbc0:	df000315 	stw	fp,12(sp)
    cbc4:	df000304 	addi	fp,sp,12
    cbc8:	e13ffd15 	stw	r4,-12(fp)
    cbcc:	e17ffe15 	stw	r5,-8(fp)
    cbd0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cbd4:	e0fffe17 	ldw	r3,-8(fp)
    cbd8:	e0bffd17 	ldw	r2,-12(fp)
    cbdc:	18800e26 	beq	r3,r2,cc18 <alt_load_section+0x5c>
  {
    while( to != end )
    cbe0:	00000a06 	br	cc0c <alt_load_section+0x50>
    {
      *to++ = *from++;
    cbe4:	e0bffd17 	ldw	r2,-12(fp)
    cbe8:	10c00017 	ldw	r3,0(r2)
    cbec:	e0bffe17 	ldw	r2,-8(fp)
    cbf0:	10c00015 	stw	r3,0(r2)
    cbf4:	e0bffe17 	ldw	r2,-8(fp)
    cbf8:	10800104 	addi	r2,r2,4
    cbfc:	e0bffe15 	stw	r2,-8(fp)
    cc00:	e0bffd17 	ldw	r2,-12(fp)
    cc04:	10800104 	addi	r2,r2,4
    cc08:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    cc0c:	e0fffe17 	ldw	r3,-8(fp)
    cc10:	e0bfff17 	ldw	r2,-4(fp)
    cc14:	18bff31e 	bne	r3,r2,cbe4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    cc18:	e037883a 	mov	sp,fp
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00104 	addi	sp,sp,4
    cc24:	f800283a 	ret

0000cc28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cc28:	defff804 	addi	sp,sp,-32
    cc2c:	dfc00715 	stw	ra,28(sp)
    cc30:	df000615 	stw	fp,24(sp)
    cc34:	df000604 	addi	fp,sp,24
    cc38:	e13ffc15 	stw	r4,-16(fp)
    cc3c:	e17ffd15 	stw	r5,-12(fp)
    cc40:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cc44:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cc48:	e0bffc17 	ldw	r2,-16(fp)
    cc4c:	1004803a 	cmplt	r2,r2,zero
    cc50:	1000081e 	bne	r2,zero,cc74 <lseek+0x4c>
    cc54:	e0bffc17 	ldw	r2,-16(fp)
    cc58:	10800324 	muli	r2,r2,12
    cc5c:	1007883a 	mov	r3,r2
    cc60:	00800074 	movhi	r2,1
    cc64:	1090ee04 	addi	r2,r2,17336
    cc68:	1887883a 	add	r3,r3,r2
    cc6c:	e0ffff15 	stw	r3,-4(fp)
    cc70:	00000106 	br	cc78 <lseek+0x50>
    cc74:	e03fff15 	stw	zero,-4(fp)
    cc78:	e0bfff17 	ldw	r2,-4(fp)
    cc7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    cc80:	e0bffb17 	ldw	r2,-20(fp)
    cc84:	1005003a 	cmpeq	r2,r2,zero
    cc88:	1000111e 	bne	r2,zero,ccd0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    cc8c:	e0bffb17 	ldw	r2,-20(fp)
    cc90:	10800017 	ldw	r2,0(r2)
    cc94:	10800717 	ldw	r2,28(r2)
    cc98:	1005003a 	cmpeq	r2,r2,zero
    cc9c:	1000091e 	bne	r2,zero,ccc4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    cca0:	e0bffb17 	ldw	r2,-20(fp)
    cca4:	10800017 	ldw	r2,0(r2)
    cca8:	10800717 	ldw	r2,28(r2)
    ccac:	e13ffb17 	ldw	r4,-20(fp)
    ccb0:	e17ffd17 	ldw	r5,-12(fp)
    ccb4:	e1bffe17 	ldw	r6,-8(fp)
    ccb8:	103ee83a 	callr	r2
    ccbc:	e0bffa15 	stw	r2,-24(fp)
    ccc0:	00000506 	br	ccd8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ccc4:	00bfde84 	movi	r2,-134
    ccc8:	e0bffa15 	stw	r2,-24(fp)
    cccc:	00000206 	br	ccd8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ccd0:	00bfebc4 	movi	r2,-81
    ccd4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ccd8:	e0bffa17 	ldw	r2,-24(fp)
    ccdc:	1004403a 	cmpge	r2,r2,zero
    cce0:	1000071e 	bne	r2,zero,cd00 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    cce4:	000cd180 	call	cd18 <alt_get_errno>
    cce8:	1007883a 	mov	r3,r2
    ccec:	e0bffa17 	ldw	r2,-24(fp)
    ccf0:	0085c83a 	sub	r2,zero,r2
    ccf4:	18800015 	stw	r2,0(r3)
    rc = -1;
    ccf8:	00bfffc4 	movi	r2,-1
    ccfc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    cd00:	e0bffa17 	ldw	r2,-24(fp)
}
    cd04:	e037883a 	mov	sp,fp
    cd08:	dfc00117 	ldw	ra,4(sp)
    cd0c:	df000017 	ldw	fp,0(sp)
    cd10:	dec00204 	addi	sp,sp,8
    cd14:	f800283a 	ret

0000cd18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd18:	defffd04 	addi	sp,sp,-12
    cd1c:	dfc00215 	stw	ra,8(sp)
    cd20:	df000115 	stw	fp,4(sp)
    cd24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cd28:	00800074 	movhi	r2,1
    cd2c:	10966504 	addi	r2,r2,22932
    cd30:	10800017 	ldw	r2,0(r2)
    cd34:	1005003a 	cmpeq	r2,r2,zero
    cd38:	1000061e 	bne	r2,zero,cd54 <alt_get_errno+0x3c>
    cd3c:	00800074 	movhi	r2,1
    cd40:	10966504 	addi	r2,r2,22932
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	103ee83a 	callr	r2
    cd4c:	e0bfff15 	stw	r2,-4(fp)
    cd50:	00000306 	br	cd60 <alt_get_errno+0x48>
    cd54:	00800074 	movhi	r2,1
    cd58:	109e5604 	addi	r2,r2,31064
    cd5c:	e0bfff15 	stw	r2,-4(fp)
    cd60:	e0bfff17 	ldw	r2,-4(fp)
}
    cd64:	e037883a 	mov	sp,fp
    cd68:	dfc00117 	ldw	ra,4(sp)
    cd6c:	df000017 	ldw	fp,0(sp)
    cd70:	dec00204 	addi	sp,sp,8
    cd74:	f800283a 	ret

0000cd78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    cd78:	defffd04 	addi	sp,sp,-12
    cd7c:	dfc00215 	stw	ra,8(sp)
    cd80:	df000115 	stw	fp,4(sp)
    cd84:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cd88:	0009883a 	mov	r4,zero
    cd8c:	000d4d80 	call	d4d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cd90:	000d50c0 	call	d50c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cd94:	01000074 	movhi	r4,1
    cd98:	210e3504 	addi	r4,r4,14548
    cd9c:	01400074 	movhi	r5,1
    cda0:	294e3504 	addi	r5,r5,14548
    cda4:	01800074 	movhi	r6,1
    cda8:	318e3504 	addi	r6,r6,14548
    cdac:	00121d80 	call	121d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    cdb0:	0011f880 	call	11f88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    cdb4:	01000074 	movhi	r4,1
    cdb8:	2107fb04 	addi	r4,r4,8172
    cdbc:	0012a9c0 	call	12a9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    cdc0:	d1280517 	ldw	r4,-24556(gp)
    cdc4:	d1680617 	ldw	r5,-24552(gp)
    cdc8:	d1a80717 	ldw	r6,-24548(gp)
    cdcc:	00008900 	call	890 <main>
    cdd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    cdd4:	01000044 	movi	r4,1
    cdd8:	000c5a00 	call	c5a0 <close>
  exit (result);
    cddc:	e13fff17 	ldw	r4,-4(fp)
    cde0:	0012ab00 	call	12ab0 <exit>

0000cde4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    cde4:	defffe04 	addi	sp,sp,-8
    cde8:	df000115 	stw	fp,4(sp)
    cdec:	df000104 	addi	fp,sp,4
    cdf0:	e13fff15 	stw	r4,-4(fp)
}
    cdf4:	e037883a 	mov	sp,fp
    cdf8:	df000017 	ldw	fp,0(sp)
    cdfc:	dec00104 	addi	sp,sp,4
    ce00:	f800283a 	ret

0000ce04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ce04:	defffe04 	addi	sp,sp,-8
    ce08:	df000115 	stw	fp,4(sp)
    ce0c:	df000104 	addi	fp,sp,4
    ce10:	e13fff15 	stw	r4,-4(fp)
}
    ce14:	e037883a 	mov	sp,fp
    ce18:	df000017 	ldw	fp,0(sp)
    ce1c:	dec00104 	addi	sp,sp,4
    ce20:	f800283a 	ret

0000ce24 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    ce24:	defff204 	addi	sp,sp,-56
    ce28:	dfc00a15 	stw	ra,40(sp)
    ce2c:	df000915 	stw	fp,36(sp)
    ce30:	df000904 	addi	fp,sp,36
    ce34:	e1400215 	stw	r5,8(fp)
    ce38:	e1800315 	stw	r6,12(fp)
    ce3c:	e1c00415 	stw	r7,16(fp)
    ce40:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    ce44:	e0800204 	addi	r2,fp,8
    ce48:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    ce4c:	e0bfff17 	ldw	r2,-4(fp)
    ce50:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    ce54:	00007806 	br	d038 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    ce58:	e0bffc07 	ldb	r2,-16(fp)
    ce5c:	10800960 	cmpeqi	r2,r2,37
    ce60:	1000031e 	bne	r2,zero,ce70 <alt_printf+0x4c>
        {
            alt_putchar(c);
    ce64:	e13ffc07 	ldb	r4,-16(fp)
    ce68:	000d07c0 	call	d07c <alt_putchar>
    ce6c:	00007206 	br	d038 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    ce70:	e0bffd17 	ldw	r2,-12(fp)
    ce74:	10800003 	ldbu	r2,0(r2)
    ce78:	e0bffc05 	stb	r2,-16(fp)
    ce7c:	e0bffc07 	ldb	r2,-16(fp)
    ce80:	1004c03a 	cmpne	r2,r2,zero
    ce84:	1007883a 	mov	r3,r2
    ce88:	e0bffd17 	ldw	r2,-12(fp)
    ce8c:	10800044 	addi	r2,r2,1
    ce90:	e0bffd15 	stw	r2,-12(fp)
    ce94:	18803fcc 	andi	r2,r3,255
    ce98:	1005003a 	cmpeq	r2,r2,zero
    ce9c:	1000721e 	bne	r2,zero,d068 <alt_printf+0x244>
            {
                if (c == '%')
    cea0:	e0bffc07 	ldb	r2,-16(fp)
    cea4:	10800958 	cmpnei	r2,r2,37
    cea8:	1000031e 	bne	r2,zero,ceb8 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    ceac:	e13ffc07 	ldb	r4,-16(fp)
    ceb0:	000d07c0 	call	d07c <alt_putchar>
    ceb4:	00006006 	br	d038 <alt_printf+0x214>
                } 
                else if (c == 'c')
    ceb8:	e0bffc07 	ldb	r2,-16(fp)
    cebc:	108018d8 	cmpnei	r2,r2,99
    cec0:	1000091e 	bne	r2,zero,cee8 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    cec4:	e0fffe17 	ldw	r3,-8(fp)
    cec8:	18800104 	addi	r2,r3,4
    cecc:	e0bffe15 	stw	r2,-8(fp)
    ced0:	1805883a 	mov	r2,r3
    ced4:	10800017 	ldw	r2,0(r2)
    ced8:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    cedc:	e13ffb17 	ldw	r4,-20(fp)
    cee0:	000d07c0 	call	d07c <alt_putchar>
    cee4:	00005406 	br	d038 <alt_printf+0x214>
                }
                else if (c == 'x')
    cee8:	e0bffc07 	ldb	r2,-16(fp)
    ceec:	10801e18 	cmpnei	r2,r2,120
    cef0:	1000371e 	bne	r2,zero,cfd0 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    cef4:	e0fffe17 	ldw	r3,-8(fp)
    cef8:	18800104 	addi	r2,r3,4
    cefc:	e0bffe15 	stw	r2,-8(fp)
    cf00:	1805883a 	mov	r2,r3
    cf04:	10800017 	ldw	r2,0(r2)
    cf08:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    cf0c:	e0bffa17 	ldw	r2,-24(fp)
    cf10:	1004c03a 	cmpne	r2,r2,zero
    cf14:	1000031e 	bne	r2,zero,cf24 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    cf18:	01000c04 	movi	r4,48
    cf1c:	000d07c0 	call	d07c <alt_putchar>
                        continue;
    cf20:	00004506 	br	d038 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    cf24:	00800704 	movi	r2,28
    cf28:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    cf2c:	00000306 	br	cf3c <alt_printf+0x118>
                        digit_shift -= 4;
    cf30:	e0bff817 	ldw	r2,-32(fp)
    cf34:	10bfff04 	addi	r2,r2,-4
    cf38:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    cf3c:	00c003c4 	movi	r3,15
    cf40:	e0bff817 	ldw	r2,-32(fp)
    cf44:	1884983a 	sll	r2,r3,r2
    cf48:	1007883a 	mov	r3,r2
    cf4c:	e0bffa17 	ldw	r2,-24(fp)
    cf50:	1884703a 	and	r2,r3,r2
    cf54:	1005003a 	cmpeq	r2,r2,zero
    cf58:	103ff51e 	bne	r2,zero,cf30 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    cf5c:	00001806 	br	cfc0 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    cf60:	00c003c4 	movi	r3,15
    cf64:	e0bff817 	ldw	r2,-32(fp)
    cf68:	1884983a 	sll	r2,r3,r2
    cf6c:	1007883a 	mov	r3,r2
    cf70:	e0bffa17 	ldw	r2,-24(fp)
    cf74:	1886703a 	and	r3,r3,r2
    cf78:	e0bff817 	ldw	r2,-32(fp)
    cf7c:	1884d83a 	srl	r2,r3,r2
    cf80:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    cf84:	e0bff917 	ldw	r2,-28(fp)
    cf88:	108002a8 	cmpgeui	r2,r2,10
    cf8c:	1000041e 	bne	r2,zero,cfa0 <alt_printf+0x17c>
                            c = '0' + digit;
    cf90:	e0bff917 	ldw	r2,-28(fp)
    cf94:	10800c04 	addi	r2,r2,48
    cf98:	e0bffc05 	stb	r2,-16(fp)
    cf9c:	00000306 	br	cfac <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    cfa0:	e0bff917 	ldw	r2,-28(fp)
    cfa4:	108015c4 	addi	r2,r2,87
    cfa8:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    cfac:	e13ffc07 	ldb	r4,-16(fp)
    cfb0:	000d07c0 	call	d07c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    cfb4:	e0bff817 	ldw	r2,-32(fp)
    cfb8:	10bfff04 	addi	r2,r2,-4
    cfbc:	e0bff815 	stw	r2,-32(fp)
    cfc0:	e0bff817 	ldw	r2,-32(fp)
    cfc4:	1004403a 	cmpge	r2,r2,zero
    cfc8:	103fe51e 	bne	r2,zero,cf60 <alt_printf+0x13c>
    cfcc:	00001a06 	br	d038 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    cfd0:	e0bffc07 	ldb	r2,-16(fp)
    cfd4:	10801cd8 	cmpnei	r2,r2,115
    cfd8:	1000171e 	bne	r2,zero,d038 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    cfdc:	e0fffe17 	ldw	r3,-8(fp)
    cfe0:	18800104 	addi	r2,r3,4
    cfe4:	e0bffe15 	stw	r2,-8(fp)
    cfe8:	1805883a 	mov	r2,r3
    cfec:	10800017 	ldw	r2,0(r2)
    cff0:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    cff4:	00000906 	br	d01c <alt_printf+0x1f8>
                      alt_putchar(*s++);
    cff8:	e0bff717 	ldw	r2,-36(fp)
    cffc:	10800003 	ldbu	r2,0(r2)
    d000:	11003fcc 	andi	r4,r2,255
    d004:	2100201c 	xori	r4,r4,128
    d008:	213fe004 	addi	r4,r4,-128
    d00c:	e0bff717 	ldw	r2,-36(fp)
    d010:	10800044 	addi	r2,r2,1
    d014:	e0bff715 	stw	r2,-36(fp)
    d018:	000d07c0 	call	d07c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    d01c:	e0bff717 	ldw	r2,-36(fp)
    d020:	10800003 	ldbu	r2,0(r2)
    d024:	10803fcc 	andi	r2,r2,255
    d028:	1080201c 	xori	r2,r2,128
    d02c:	10bfe004 	addi	r2,r2,-128
    d030:	1004c03a 	cmpne	r2,r2,zero
    d034:	103ff01e 	bne	r2,zero,cff8 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    d038:	e0bffd17 	ldw	r2,-12(fp)
    d03c:	10800003 	ldbu	r2,0(r2)
    d040:	e0bffc05 	stb	r2,-16(fp)
    d044:	e0bffc07 	ldb	r2,-16(fp)
    d048:	1004c03a 	cmpne	r2,r2,zero
    d04c:	1007883a 	mov	r3,r2
    d050:	e0bffd17 	ldw	r2,-12(fp)
    d054:	10800044 	addi	r2,r2,1
    d058:	e0bffd15 	stw	r2,-12(fp)
    d05c:	18803fcc 	andi	r2,r3,255
    d060:	1004c03a 	cmpne	r2,r2,zero
    d064:	103f7c1e 	bne	r2,zero,ce58 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    d068:	e037883a 	mov	sp,fp
    d06c:	dfc00117 	ldw	ra,4(sp)
    d070:	df000017 	ldw	fp,0(sp)
    d074:	dec00504 	addi	sp,sp,20
    d078:	f800283a 	ret

0000d07c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    d07c:	defffd04 	addi	sp,sp,-12
    d080:	dfc00215 	stw	ra,8(sp)
    d084:	df000115 	stw	fp,4(sp)
    d088:	df000104 	addi	fp,sp,4
    d08c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    d090:	00800074 	movhi	r2,1
    d094:	10965a04 	addi	r2,r2,22888
    d098:	10800017 	ldw	r2,0(r2)
    d09c:	11400217 	ldw	r5,8(r2)
    d0a0:	e13fff17 	ldw	r4,-4(fp)
    d0a4:	0012b5c0 	call	12b5c <putc>
#endif
}
    d0a8:	e037883a 	mov	sp,fp
    d0ac:	dfc00117 	ldw	ra,4(sp)
    d0b0:	df000017 	ldw	fp,0(sp)
    d0b4:	dec00204 	addi	sp,sp,8
    d0b8:	f800283a 	ret

0000d0bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d0bc:	defff704 	addi	sp,sp,-36
    d0c0:	dfc00815 	stw	ra,32(sp)
    d0c4:	df000715 	stw	fp,28(sp)
    d0c8:	df000704 	addi	fp,sp,28
    d0cc:	e13ffb15 	stw	r4,-20(fp)
    d0d0:	e17ffc15 	stw	r5,-16(fp)
    d0d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d0d8:	e0bffb17 	ldw	r2,-20(fp)
    d0dc:	1004803a 	cmplt	r2,r2,zero
    d0e0:	1000081e 	bne	r2,zero,d104 <read+0x48>
    d0e4:	e0bffb17 	ldw	r2,-20(fp)
    d0e8:	10800324 	muli	r2,r2,12
    d0ec:	1007883a 	mov	r3,r2
    d0f0:	00800074 	movhi	r2,1
    d0f4:	1090ee04 	addi	r2,r2,17336
    d0f8:	1887883a 	add	r3,r3,r2
    d0fc:	e0ffff15 	stw	r3,-4(fp)
    d100:	00000106 	br	d108 <read+0x4c>
    d104:	e03fff15 	stw	zero,-4(fp)
    d108:	e0bfff17 	ldw	r2,-4(fp)
    d10c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    d110:	e0bffa17 	ldw	r2,-24(fp)
    d114:	1005003a 	cmpeq	r2,r2,zero
    d118:	1000241e 	bne	r2,zero,d1ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d11c:	e0bffa17 	ldw	r2,-24(fp)
    d120:	10800217 	ldw	r2,8(r2)
    d124:	108000cc 	andi	r2,r2,3
    d128:	10800060 	cmpeqi	r2,r2,1
    d12c:	10001a1e 	bne	r2,zero,d198 <read+0xdc>
    d130:	e0bffa17 	ldw	r2,-24(fp)
    d134:	10800017 	ldw	r2,0(r2)
    d138:	10800517 	ldw	r2,20(r2)
    d13c:	1005003a 	cmpeq	r2,r2,zero
    d140:	1000151e 	bne	r2,zero,d198 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d144:	e0bffa17 	ldw	r2,-24(fp)
    d148:	10800017 	ldw	r2,0(r2)
    d14c:	10800517 	ldw	r2,20(r2)
    d150:	e17ffc17 	ldw	r5,-16(fp)
    d154:	e1bffd17 	ldw	r6,-12(fp)
    d158:	e13ffa17 	ldw	r4,-24(fp)
    d15c:	103ee83a 	callr	r2
    d160:	e0bff915 	stw	r2,-28(fp)
    d164:	e0bff917 	ldw	r2,-28(fp)
    d168:	1004403a 	cmpge	r2,r2,zero
    d16c:	1000071e 	bne	r2,zero,d18c <read+0xd0>
        {
          ALT_ERRNO = -rval;
    d170:	000d1dc0 	call	d1dc <alt_get_errno>
    d174:	e0fff917 	ldw	r3,-28(fp)
    d178:	00c7c83a 	sub	r3,zero,r3
    d17c:	10c00015 	stw	r3,0(r2)
          return -1;
    d180:	00bfffc4 	movi	r2,-1
    d184:	e0bffe15 	stw	r2,-8(fp)
    d188:	00000e06 	br	d1c4 <read+0x108>
        }
        return rval;
    d18c:	e0bff917 	ldw	r2,-28(fp)
    d190:	e0bffe15 	stw	r2,-8(fp)
    d194:	00000b06 	br	d1c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d198:	000d1dc0 	call	d1dc <alt_get_errno>
    d19c:	1007883a 	mov	r3,r2
    d1a0:	00800344 	movi	r2,13
    d1a4:	18800015 	stw	r2,0(r3)
    d1a8:	00000406 	br	d1bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d1ac:	000d1dc0 	call	d1dc <alt_get_errno>
    d1b0:	1007883a 	mov	r3,r2
    d1b4:	00801444 	movi	r2,81
    d1b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d1bc:	00bfffc4 	movi	r2,-1
    d1c0:	e0bffe15 	stw	r2,-8(fp)
    d1c4:	e0bffe17 	ldw	r2,-8(fp)
}
    d1c8:	e037883a 	mov	sp,fp
    d1cc:	dfc00117 	ldw	ra,4(sp)
    d1d0:	df000017 	ldw	fp,0(sp)
    d1d4:	dec00204 	addi	sp,sp,8
    d1d8:	f800283a 	ret

0000d1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1dc:	defffd04 	addi	sp,sp,-12
    d1e0:	dfc00215 	stw	ra,8(sp)
    d1e4:	df000115 	stw	fp,4(sp)
    d1e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d1ec:	00800074 	movhi	r2,1
    d1f0:	10966504 	addi	r2,r2,22932
    d1f4:	10800017 	ldw	r2,0(r2)
    d1f8:	1005003a 	cmpeq	r2,r2,zero
    d1fc:	1000061e 	bne	r2,zero,d218 <alt_get_errno+0x3c>
    d200:	00800074 	movhi	r2,1
    d204:	10966504 	addi	r2,r2,22932
    d208:	10800017 	ldw	r2,0(r2)
    d20c:	103ee83a 	callr	r2
    d210:	e0bfff15 	stw	r2,-4(fp)
    d214:	00000306 	br	d224 <alt_get_errno+0x48>
    d218:	00800074 	movhi	r2,1
    d21c:	109e5604 	addi	r2,r2,31064
    d220:	e0bfff15 	stw	r2,-4(fp)
    d224:	e0bfff17 	ldw	r2,-4(fp)
}
    d228:	e037883a 	mov	sp,fp
    d22c:	dfc00117 	ldw	ra,4(sp)
    d230:	df000017 	ldw	fp,0(sp)
    d234:	dec00204 	addi	sp,sp,8
    d238:	f800283a 	ret

0000d23c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d23c:	defffe04 	addi	sp,sp,-8
    d240:	df000115 	stw	fp,4(sp)
    d244:	df000104 	addi	fp,sp,4
    d248:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d24c:	e0bfff17 	ldw	r2,-4(fp)
    d250:	108000d0 	cmplti	r2,r2,3
    d254:	10000d1e 	bne	r2,zero,d28c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d258:	e0bfff17 	ldw	r2,-4(fp)
    d25c:	00c00074 	movhi	r3,1
    d260:	18d0ee04 	addi	r3,r3,17336
    d264:	10800324 	muli	r2,r2,12
    d268:	10c5883a 	add	r2,r2,r3
    d26c:	10800204 	addi	r2,r2,8
    d270:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d274:	e0bfff17 	ldw	r2,-4(fp)
    d278:	00c00074 	movhi	r3,1
    d27c:	18d0ee04 	addi	r3,r3,17336
    d280:	10800324 	muli	r2,r2,12
    d284:	10c5883a 	add	r2,r2,r3
    d288:	10000015 	stw	zero,0(r2)
  }
}
    d28c:	e037883a 	mov	sp,fp
    d290:	df000017 	ldw	fp,0(sp)
    d294:	dec00104 	addi	sp,sp,4
    d298:	f800283a 	ret

0000d29c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d29c:	defff804 	addi	sp,sp,-32
    d2a0:	df000715 	stw	fp,28(sp)
    d2a4:	df000704 	addi	fp,sp,28
    d2a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d2ac:	0005303a 	rdctl	r2,status
    d2b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d2b4:	e0fffb17 	ldw	r3,-20(fp)
    d2b8:	00bfff84 	movi	r2,-2
    d2bc:	1884703a 	and	r2,r3,r2
    d2c0:	1001703a 	wrctl	status,r2
  
  return context;
    d2c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d2c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d2cc:	d0a01417 	ldw	r2,-32688(gp)
    d2d0:	10c000c4 	addi	r3,r2,3
    d2d4:	00bfff04 	movi	r2,-4
    d2d8:	1884703a 	and	r2,r3,r2
    d2dc:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d2e0:	d0e01417 	ldw	r3,-32688(gp)
    d2e4:	e0bffe17 	ldw	r2,-8(fp)
    d2e8:	1887883a 	add	r3,r3,r2
    d2ec:	00802034 	movhi	r2,128
    d2f0:	10800004 	addi	r2,r2,0
    d2f4:	10c0072e 	bgeu	r2,r3,d314 <sbrk+0x78>
    d2f8:	e0bffd17 	ldw	r2,-12(fp)
    d2fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d300:	e0bffa17 	ldw	r2,-24(fp)
    d304:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d308:	00bfffc4 	movi	r2,-1
    d30c:	e0bfff15 	stw	r2,-4(fp)
    d310:	00000c06 	br	d344 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    d314:	d0a01417 	ldw	r2,-32688(gp)
    d318:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    d31c:	d0e01417 	ldw	r3,-32688(gp)
    d320:	e0bffe17 	ldw	r2,-8(fp)
    d324:	1885883a 	add	r2,r3,r2
    d328:	d0a01415 	stw	r2,-32688(gp)
    d32c:	e0bffd17 	ldw	r2,-12(fp)
    d330:	e0bff915 	stw	r2,-28(fp)
    d334:	e0bff917 	ldw	r2,-28(fp)
    d338:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d33c:	e0bffc17 	ldw	r2,-16(fp)
    d340:	e0bfff15 	stw	r2,-4(fp)
    d344:	e0bfff17 	ldw	r2,-4(fp)
} 
    d348:	e037883a 	mov	sp,fp
    d34c:	df000017 	ldw	fp,0(sp)
    d350:	dec00104 	addi	sp,sp,4
    d354:	f800283a 	ret

0000d358 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d358:	defff704 	addi	sp,sp,-36
    d35c:	dfc00815 	stw	ra,32(sp)
    d360:	df000715 	stw	fp,28(sp)
    d364:	df000704 	addi	fp,sp,28
    d368:	e13ffb15 	stw	r4,-20(fp)
    d36c:	e17ffc15 	stw	r5,-16(fp)
    d370:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d374:	e0bffb17 	ldw	r2,-20(fp)
    d378:	1004803a 	cmplt	r2,r2,zero
    d37c:	1000081e 	bne	r2,zero,d3a0 <write+0x48>
    d380:	e0bffb17 	ldw	r2,-20(fp)
    d384:	10800324 	muli	r2,r2,12
    d388:	1007883a 	mov	r3,r2
    d38c:	00800074 	movhi	r2,1
    d390:	1090ee04 	addi	r2,r2,17336
    d394:	1887883a 	add	r3,r3,r2
    d398:	e0ffff15 	stw	r3,-4(fp)
    d39c:	00000106 	br	d3a4 <write+0x4c>
    d3a0:	e03fff15 	stw	zero,-4(fp)
    d3a4:	e0bfff17 	ldw	r2,-4(fp)
    d3a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    d3ac:	e0bffa17 	ldw	r2,-24(fp)
    d3b0:	1005003a 	cmpeq	r2,r2,zero
    d3b4:	1000241e 	bne	r2,zero,d448 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d3b8:	e0bffa17 	ldw	r2,-24(fp)
    d3bc:	10800217 	ldw	r2,8(r2)
    d3c0:	108000cc 	andi	r2,r2,3
    d3c4:	1005003a 	cmpeq	r2,r2,zero
    d3c8:	10001a1e 	bne	r2,zero,d434 <write+0xdc>
    d3cc:	e0bffa17 	ldw	r2,-24(fp)
    d3d0:	10800017 	ldw	r2,0(r2)
    d3d4:	10800617 	ldw	r2,24(r2)
    d3d8:	1005003a 	cmpeq	r2,r2,zero
    d3dc:	1000151e 	bne	r2,zero,d434 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d3e0:	e0bffa17 	ldw	r2,-24(fp)
    d3e4:	10800017 	ldw	r2,0(r2)
    d3e8:	10800617 	ldw	r2,24(r2)
    d3ec:	e17ffc17 	ldw	r5,-16(fp)
    d3f0:	e1bffd17 	ldw	r6,-12(fp)
    d3f4:	e13ffa17 	ldw	r4,-24(fp)
    d3f8:	103ee83a 	callr	r2
    d3fc:	e0bff915 	stw	r2,-28(fp)
    d400:	e0bff917 	ldw	r2,-28(fp)
    d404:	1004403a 	cmpge	r2,r2,zero
    d408:	1000071e 	bne	r2,zero,d428 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    d40c:	000d4780 	call	d478 <alt_get_errno>
    d410:	e0fff917 	ldw	r3,-28(fp)
    d414:	00c7c83a 	sub	r3,zero,r3
    d418:	10c00015 	stw	r3,0(r2)
        return -1;
    d41c:	00bfffc4 	movi	r2,-1
    d420:	e0bffe15 	stw	r2,-8(fp)
    d424:	00000e06 	br	d460 <write+0x108>
      }
      return rval;
    d428:	e0bff917 	ldw	r2,-28(fp)
    d42c:	e0bffe15 	stw	r2,-8(fp)
    d430:	00000b06 	br	d460 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d434:	000d4780 	call	d478 <alt_get_errno>
    d438:	1007883a 	mov	r3,r2
    d43c:	00800344 	movi	r2,13
    d440:	18800015 	stw	r2,0(r3)
    d444:	00000406 	br	d458 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d448:	000d4780 	call	d478 <alt_get_errno>
    d44c:	1007883a 	mov	r3,r2
    d450:	00801444 	movi	r2,81
    d454:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d458:	00bfffc4 	movi	r2,-1
    d45c:	e0bffe15 	stw	r2,-8(fp)
    d460:	e0bffe17 	ldw	r2,-8(fp)
}
    d464:	e037883a 	mov	sp,fp
    d468:	dfc00117 	ldw	ra,4(sp)
    d46c:	df000017 	ldw	fp,0(sp)
    d470:	dec00204 	addi	sp,sp,8
    d474:	f800283a 	ret

0000d478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d478:	defffd04 	addi	sp,sp,-12
    d47c:	dfc00215 	stw	ra,8(sp)
    d480:	df000115 	stw	fp,4(sp)
    d484:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d488:	00800074 	movhi	r2,1
    d48c:	10966504 	addi	r2,r2,22932
    d490:	10800017 	ldw	r2,0(r2)
    d494:	1005003a 	cmpeq	r2,r2,zero
    d498:	1000061e 	bne	r2,zero,d4b4 <alt_get_errno+0x3c>
    d49c:	00800074 	movhi	r2,1
    d4a0:	10966504 	addi	r2,r2,22932
    d4a4:	10800017 	ldw	r2,0(r2)
    d4a8:	103ee83a 	callr	r2
    d4ac:	e0bfff15 	stw	r2,-4(fp)
    d4b0:	00000306 	br	d4c0 <alt_get_errno+0x48>
    d4b4:	00800074 	movhi	r2,1
    d4b8:	109e5604 	addi	r2,r2,31064
    d4bc:	e0bfff15 	stw	r2,-4(fp)
    d4c0:	e0bfff17 	ldw	r2,-4(fp)
}
    d4c4:	e037883a 	mov	sp,fp
    d4c8:	dfc00117 	ldw	ra,4(sp)
    d4cc:	df000017 	ldw	fp,0(sp)
    d4d0:	dec00204 	addi	sp,sp,8
    d4d4:	f800283a 	ret

0000d4d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d4d8:	defffd04 	addi	sp,sp,-12
    d4dc:	dfc00215 	stw	ra,8(sp)
    d4e0:	df000115 	stw	fp,4(sp)
    d4e4:	df000104 	addi	fp,sp,4
    d4e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    d4ec:	00126e80 	call	126e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d4f0:	00800044 	movi	r2,1
    d4f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d4f8:	e037883a 	mov	sp,fp
    d4fc:	dfc00117 	ldw	ra,4(sp)
    d500:	df000017 	ldw	fp,0(sp)
    d504:	dec00204 	addi	sp,sp,8
    d508:	f800283a 	ret

0000d50c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d50c:	defffd04 	addi	sp,sp,-12
    d510:	dfc00215 	stw	ra,8(sp)
    d514:	df000115 	stw	fp,4(sp)
    d518:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d51c:	00c00074 	movhi	r3,1
    d520:	18de5b04 	addi	r3,r3,31084
    d524:	00840034 	movhi	r2,4096
    d528:	10880004 	addi	r2,r2,8192
    d52c:	18800015 	stw	r2,0(r3)
    d530:	00c00074 	movhi	r3,1
    d534:	18de5c04 	addi	r3,r3,31088
    d538:	0080bef4 	movhi	r2,763
    d53c:	10bc2004 	addi	r2,r2,-3968
    d540:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d544:	01000074 	movhi	r4,1
    d548:	21115804 	addi	r4,r4,17760
    d54c:	000b883a 	mov	r5,zero
    d550:	01800204 	movi	r6,8
    d554:	000da9c0 	call	da9c <altera_avalon_jtag_uart_init>
    d558:	01000074 	movhi	r4,1
    d55c:	21114e04 	addi	r4,r4,17720
    d560:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    d564:	01000074 	movhi	r4,1
    d568:	21156604 	addi	r4,r4,21912
    d56c:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    d570:	01000074 	movhi	r4,1
    d574:	21157204 	addi	r4,r4,21960
    d578:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d57c:	01000074 	movhi	r4,1
    d580:	21157e04 	addi	r4,r4,22008
    d584:	000ee200 	call	ee20 <alt_up_character_lcd_init>
    d588:	01000074 	movhi	r4,1
    d58c:	21157e04 	addi	r4,r4,22008
    d590:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    d594:	01000074 	movhi	r4,1
    d598:	21158904 	addi	r4,r4,22052
    d59c:	000f2a00 	call	f2a0 <alt_up_ethernet_init>
    d5a0:	01000074 	movhi	r4,1
    d5a4:	21158904 	addi	r4,r4,22052
    d5a8:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    d5ac:	01000074 	movhi	r4,1
    d5b0:	21159804 	addi	r4,r4,22112
    d5b4:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    d5b8:	01000074 	movhi	r4,1
    d5bc:	2115a304 	addi	r4,r4,22156
    d5c0:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    d5c4:	01000074 	movhi	r4,1
    d5c8:	2115ae04 	addi	r4,r4,22200
    d5cc:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    d5d0:	01000074 	movhi	r4,1
    d5d4:	2115b904 	addi	r4,r4,22244
    d5d8:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    d5dc:	01000074 	movhi	r4,1
    d5e0:	2115c404 	addi	r4,r4,22288
    d5e4:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    d5e8:	01000074 	movhi	r4,1
    d5ec:	2115cf04 	addi	r4,r4,22332
    d5f0:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    d5f4:	01000074 	movhi	r4,1
    d5f8:	2115da04 	addi	r4,r4,22376
    d5fc:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    d600:	01000074 	movhi	r4,1
    d604:	2115e504 	addi	r4,r4,22420
    d608:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    d60c:	01000074 	movhi	r4,1
    d610:	2115f004 	addi	r4,r4,22464
    d614:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    d618:	01000074 	movhi	r4,1
    d61c:	2115fb04 	addi	r4,r4,22508
    d620:	000fb280 	call	fb28 <alt_up_ps2_init>
    d624:	01000074 	movhi	r4,1
    d628:	2115fb04 	addi	r4,r4,22508
    d62c:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    d630:	01000074 	movhi	r4,1
    d634:	21160904 	addi	r4,r4,22564
    d638:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    d63c:	01000074 	movhi	r4,1
    d640:	21161404 	addi	r4,r4,22608
    d644:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    d648:	00800074 	movhi	r2,1
    d64c:	10962104 	addi	r2,r2,22660
    d650:	10800a17 	ldw	r2,40(r2)
    d654:	10800104 	addi	r2,r2,4
    d658:	10800017 	ldw	r2,0(r2)
    d65c:	10ffffcc 	andi	r3,r2,65535
    d660:	00800074 	movhi	r2,1
    d664:	10962104 	addi	r2,r2,22660
    d668:	10c00c15 	stw	r3,48(r2)
    d66c:	00800074 	movhi	r2,1
    d670:	10962104 	addi	r2,r2,22660
    d674:	10800a17 	ldw	r2,40(r2)
    d678:	10800104 	addi	r2,r2,4
    d67c:	10800017 	ldw	r2,0(r2)
    d680:	1005d43a 	srai	r2,r2,16
    d684:	10ffffcc 	andi	r3,r2,65535
    d688:	00800074 	movhi	r2,1
    d68c:	10962104 	addi	r2,r2,22660
    d690:	10c00d15 	stw	r3,52(r2)
    d694:	00800074 	movhi	r2,1
    d698:	10962104 	addi	r2,r2,22660
    d69c:	10800c17 	ldw	r2,48(r2)
    d6a0:	10801068 	cmpgeui	r2,r2,65
    d6a4:	1000081e 	bne	r2,zero,d6c8 <alt_sys_init+0x1bc>
    d6a8:	00c00074 	movhi	r3,1
    d6ac:	18d62104 	addi	r3,r3,22660
    d6b0:	00800fc4 	movi	r2,63
    d6b4:	18800f15 	stw	r2,60(r3)
    d6b8:	00c00074 	movhi	r3,1
    d6bc:	18d62104 	addi	r3,r3,22660
    d6c0:	00800184 	movi	r2,6
    d6c4:	18801015 	stw	r2,64(r3)
    d6c8:	00800074 	movhi	r2,1
    d6cc:	10962104 	addi	r2,r2,22660
    d6d0:	10800d17 	ldw	r2,52(r2)
    d6d4:	10800868 	cmpgeui	r2,r2,33
    d6d8:	1000041e 	bne	r2,zero,d6ec <alt_sys_init+0x1e0>
    d6dc:	00c00074 	movhi	r3,1
    d6e0:	18d62104 	addi	r3,r3,22660
    d6e4:	008007c4 	movi	r2,31
    d6e8:	18801115 	stw	r2,68(r3)
    d6ec:	01000074 	movhi	r4,1
    d6f0:	21162104 	addi	r4,r4,22660
    d6f4:	00104940 	call	10494 <alt_up_char_buffer_init>
    d6f8:	01000074 	movhi	r4,1
    d6fc:	21162104 	addi	r4,r4,22660
    d700:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    d704:	00800074 	movhi	r2,1
    d708:	10963304 	addi	r2,r2,22732
    d70c:	10800a17 	ldw	r2,40(r2)
    d710:	10800017 	ldw	r2,0(r2)
    d714:	1007883a 	mov	r3,r2
    d718:	00800074 	movhi	r2,1
    d71c:	10963304 	addi	r2,r2,22732
    d720:	10c00b15 	stw	r3,44(r2)
    d724:	00800074 	movhi	r2,1
    d728:	10963304 	addi	r2,r2,22732
    d72c:	10800a17 	ldw	r2,40(r2)
    d730:	10800104 	addi	r2,r2,4
    d734:	10800017 	ldw	r2,0(r2)
    d738:	1007883a 	mov	r3,r2
    d73c:	00800074 	movhi	r2,1
    d740:	10963304 	addi	r2,r2,22732
    d744:	10c00c15 	stw	r3,48(r2)
    d748:	00800074 	movhi	r2,1
    d74c:	10963304 	addi	r2,r2,22732
    d750:	10800a17 	ldw	r2,40(r2)
    d754:	10800204 	addi	r2,r2,8
    d758:	10800017 	ldw	r2,0(r2)
    d75c:	10ffffcc 	andi	r3,r2,65535
    d760:	00800074 	movhi	r2,1
    d764:	10963304 	addi	r2,r2,22732
    d768:	10c00f15 	stw	r3,60(r2)
    d76c:	00800074 	movhi	r2,1
    d770:	10963304 	addi	r2,r2,22732
    d774:	10800a17 	ldw	r2,40(r2)
    d778:	10800204 	addi	r2,r2,8
    d77c:	10800017 	ldw	r2,0(r2)
    d780:	1005d43a 	srai	r2,r2,16
    d784:	10ffffcc 	andi	r3,r2,65535
    d788:	00800074 	movhi	r2,1
    d78c:	10963304 	addi	r2,r2,22732
    d790:	10c01015 	stw	r3,64(r2)
    d794:	00800074 	movhi	r2,1
    d798:	10963304 	addi	r2,r2,22732
    d79c:	10800a17 	ldw	r2,40(r2)
    d7a0:	10800304 	addi	r2,r2,12
    d7a4:	10800017 	ldw	r2,0(r2)
    d7a8:	1005d07a 	srai	r2,r2,1
    d7ac:	10c0004c 	andi	r3,r2,1
    d7b0:	00800074 	movhi	r2,1
    d7b4:	10963304 	addi	r2,r2,22732
    d7b8:	10c00d15 	stw	r3,52(r2)
    d7bc:	00800074 	movhi	r2,1
    d7c0:	10963304 	addi	r2,r2,22732
    d7c4:	10800a17 	ldw	r2,40(r2)
    d7c8:	10800304 	addi	r2,r2,12
    d7cc:	10800017 	ldw	r2,0(r2)
    d7d0:	1005d13a 	srai	r2,r2,4
    d7d4:	10c003cc 	andi	r3,r2,15
    d7d8:	00800074 	movhi	r2,1
    d7dc:	10963304 	addi	r2,r2,22732
    d7e0:	10c00e15 	stw	r3,56(r2)
    d7e4:	00800074 	movhi	r2,1
    d7e8:	10963304 	addi	r2,r2,22732
    d7ec:	10800a17 	ldw	r2,40(r2)
    d7f0:	10800304 	addi	r2,r2,12
    d7f4:	10800017 	ldw	r2,0(r2)
    d7f8:	1005d43a 	srai	r2,r2,16
    d7fc:	1007883a 	mov	r3,r2
    d800:	00bfffc4 	movi	r2,-1
    d804:	1884703a 	and	r2,r3,r2
    d808:	e0bfff45 	stb	r2,-3(fp)
    d80c:	00800074 	movhi	r2,1
    d810:	10963304 	addi	r2,r2,22732
    d814:	10800a17 	ldw	r2,40(r2)
    d818:	10800304 	addi	r2,r2,12
    d81c:	10800017 	ldw	r2,0(r2)
    d820:	1005d63a 	srai	r2,r2,24
    d824:	1007883a 	mov	r3,r2
    d828:	00bfffc4 	movi	r2,-1
    d82c:	1884703a 	and	r2,r3,r2
    d830:	e0bfff05 	stb	r2,-4(fp)
    d834:	00800074 	movhi	r2,1
    d838:	10963304 	addi	r2,r2,22732
    d83c:	10800e17 	ldw	r2,56(r2)
    d840:	10800058 	cmpnei	r2,r2,1
    d844:	1000041e 	bne	r2,zero,d858 <alt_sys_init+0x34c>
    d848:	00800074 	movhi	r2,1
    d84c:	10963304 	addi	r2,r2,22732
    d850:	10001115 	stw	zero,68(r2)
    d854:	00000e06 	br	d890 <alt_sys_init+0x384>
    d858:	00800074 	movhi	r2,1
    d85c:	10963304 	addi	r2,r2,22732
    d860:	10800e17 	ldw	r2,56(r2)
    d864:	10800098 	cmpnei	r2,r2,2
    d868:	1000051e 	bne	r2,zero,d880 <alt_sys_init+0x374>
    d86c:	00c00074 	movhi	r3,1
    d870:	18d63304 	addi	r3,r3,22732
    d874:	00800044 	movi	r2,1
    d878:	18801115 	stw	r2,68(r3)
    d87c:	00000406 	br	d890 <alt_sys_init+0x384>
    d880:	00c00074 	movhi	r3,1
    d884:	18d63304 	addi	r3,r3,22732
    d888:	00800084 	movi	r2,2
    d88c:	18801115 	stw	r2,68(r3)
    d890:	e0ffff43 	ldbu	r3,-3(fp)
    d894:	00800804 	movi	r2,32
    d898:	10c7c83a 	sub	r3,r2,r3
    d89c:	00bfffc4 	movi	r2,-1
    d8a0:	10c6d83a 	srl	r3,r2,r3
    d8a4:	00800074 	movhi	r2,1
    d8a8:	10963304 	addi	r2,r2,22732
    d8ac:	10c01215 	stw	r3,72(r2)
    d8b0:	e0ffff43 	ldbu	r3,-3(fp)
    d8b4:	00800074 	movhi	r2,1
    d8b8:	10963304 	addi	r2,r2,22732
    d8bc:	10801117 	ldw	r2,68(r2)
    d8c0:	1887883a 	add	r3,r3,r2
    d8c4:	00800074 	movhi	r2,1
    d8c8:	10963304 	addi	r2,r2,22732
    d8cc:	10c01315 	stw	r3,76(r2)
    d8d0:	e0ffff03 	ldbu	r3,-4(fp)
    d8d4:	00800804 	movi	r2,32
    d8d8:	10c7c83a 	sub	r3,r2,r3
    d8dc:	00bfffc4 	movi	r2,-1
    d8e0:	10c6d83a 	srl	r3,r2,r3
    d8e4:	00800074 	movhi	r2,1
    d8e8:	10963304 	addi	r2,r2,22732
    d8ec:	10c01415 	stw	r3,80(r2)
    d8f0:	01000074 	movhi	r4,1
    d8f4:	21163304 	addi	r4,r4,22732
    d8f8:	000d91c0 	call	d91c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    d8fc:	01000074 	movhi	r4,1
    d900:	21164804 	addi	r4,r4,22816
    d904:	000d91c0 	call	d91c <alt_dev_reg>
}
    d908:	e037883a 	mov	sp,fp
    d90c:	dfc00117 	ldw	ra,4(sp)
    d910:	df000017 	ldw	fp,0(sp)
    d914:	dec00204 	addi	sp,sp,8
    d918:	f800283a 	ret

0000d91c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d91c:	defffd04 	addi	sp,sp,-12
    d920:	dfc00215 	stw	ra,8(sp)
    d924:	df000115 	stw	fp,4(sp)
    d928:	df000104 	addi	fp,sp,4
    d92c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d930:	e13fff17 	ldw	r4,-4(fp)
    d934:	01400074 	movhi	r5,1
    d938:	29566204 	addi	r5,r5,22920
    d93c:	0011e740 	call	11e74 <alt_dev_llist_insert>
}
    d940:	e037883a 	mov	sp,fp
    d944:	dfc00117 	ldw	ra,4(sp)
    d948:	df000017 	ldw	fp,0(sp)
    d94c:	dec00204 	addi	sp,sp,8
    d950:	f800283a 	ret

0000d954 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d954:	defffa04 	addi	sp,sp,-24
    d958:	dfc00515 	stw	ra,20(sp)
    d95c:	df000415 	stw	fp,16(sp)
    d960:	df000404 	addi	fp,sp,16
    d964:	e13ffd15 	stw	r4,-12(fp)
    d968:	e17ffe15 	stw	r5,-8(fp)
    d96c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d970:	e0bffd17 	ldw	r2,-12(fp)
    d974:	10800017 	ldw	r2,0(r2)
    d978:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d97c:	e0bffc17 	ldw	r2,-16(fp)
    d980:	11000a04 	addi	r4,r2,40
    d984:	e0bffd17 	ldw	r2,-12(fp)
    d988:	11c00217 	ldw	r7,8(r2)
    d98c:	e17ffe17 	ldw	r5,-8(fp)
    d990:	e1bfff17 	ldw	r6,-4(fp)
    d994:	000df980 	call	df98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d998:	e037883a 	mov	sp,fp
    d99c:	dfc00117 	ldw	ra,4(sp)
    d9a0:	df000017 	ldw	fp,0(sp)
    d9a4:	dec00204 	addi	sp,sp,8
    d9a8:	f800283a 	ret

0000d9ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d9ac:	defffa04 	addi	sp,sp,-24
    d9b0:	dfc00515 	stw	ra,20(sp)
    d9b4:	df000415 	stw	fp,16(sp)
    d9b8:	df000404 	addi	fp,sp,16
    d9bc:	e13ffd15 	stw	r4,-12(fp)
    d9c0:	e17ffe15 	stw	r5,-8(fp)
    d9c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d9c8:	e0bffd17 	ldw	r2,-12(fp)
    d9cc:	10800017 	ldw	r2,0(r2)
    d9d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d9d4:	e0bffc17 	ldw	r2,-16(fp)
    d9d8:	11000a04 	addi	r4,r2,40
    d9dc:	e0bffd17 	ldw	r2,-12(fp)
    d9e0:	11c00217 	ldw	r7,8(r2)
    d9e4:	e17ffe17 	ldw	r5,-8(fp)
    d9e8:	e1bfff17 	ldw	r6,-4(fp)
    d9ec:	000e1bc0 	call	e1bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	dfc00117 	ldw	ra,4(sp)
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00204 	addi	sp,sp,8
    da00:	f800283a 	ret

0000da04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    da04:	defffc04 	addi	sp,sp,-16
    da08:	dfc00315 	stw	ra,12(sp)
    da0c:	df000215 	stw	fp,8(sp)
    da10:	df000204 	addi	fp,sp,8
    da14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    da18:	e0bfff17 	ldw	r2,-4(fp)
    da1c:	10800017 	ldw	r2,0(r2)
    da20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    da24:	e0bffe17 	ldw	r2,-8(fp)
    da28:	11000a04 	addi	r4,r2,40
    da2c:	e0bfff17 	ldw	r2,-4(fp)
    da30:	11400217 	ldw	r5,8(r2)
    da34:	000de300 	call	de30 <altera_avalon_jtag_uart_close>
}
    da38:	e037883a 	mov	sp,fp
    da3c:	dfc00117 	ldw	ra,4(sp)
    da40:	df000017 	ldw	fp,0(sp)
    da44:	dec00204 	addi	sp,sp,8
    da48:	f800283a 	ret

0000da4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    da4c:	defffa04 	addi	sp,sp,-24
    da50:	dfc00515 	stw	ra,20(sp)
    da54:	df000415 	stw	fp,16(sp)
    da58:	df000404 	addi	fp,sp,16
    da5c:	e13ffd15 	stw	r4,-12(fp)
    da60:	e17ffe15 	stw	r5,-8(fp)
    da64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    da68:	e0bffd17 	ldw	r2,-12(fp)
    da6c:	10800017 	ldw	r2,0(r2)
    da70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    da74:	e0bffc17 	ldw	r2,-16(fp)
    da78:	11000a04 	addi	r4,r2,40
    da7c:	e17ffe17 	ldw	r5,-8(fp)
    da80:	e1bfff17 	ldw	r6,-4(fp)
    da84:	000dea40 	call	dea4 <altera_avalon_jtag_uart_ioctl>
}
    da88:	e037883a 	mov	sp,fp
    da8c:	dfc00117 	ldw	ra,4(sp)
    da90:	df000017 	ldw	fp,0(sp)
    da94:	dec00204 	addi	sp,sp,8
    da98:	f800283a 	ret

0000da9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    da9c:	defffb04 	addi	sp,sp,-20
    daa0:	dfc00415 	stw	ra,16(sp)
    daa4:	df000315 	stw	fp,12(sp)
    daa8:	df000304 	addi	fp,sp,12
    daac:	e13ffd15 	stw	r4,-12(fp)
    dab0:	e17ffe15 	stw	r5,-8(fp)
    dab4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dab8:	e0fffd17 	ldw	r3,-12(fp)
    dabc:	00800044 	movi	r2,1
    dac0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    dac4:	e0bffd17 	ldw	r2,-12(fp)
    dac8:	10800017 	ldw	r2,0(r2)
    dacc:	11000104 	addi	r4,r2,4
    dad0:	e0bffd17 	ldw	r2,-12(fp)
    dad4:	10800817 	ldw	r2,32(r2)
    dad8:	1007883a 	mov	r3,r2
    dadc:	2005883a 	mov	r2,r4
    dae0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    dae4:	e13fff17 	ldw	r4,-4(fp)
    dae8:	e17ffd17 	ldw	r5,-12(fp)
    daec:	01800074 	movhi	r6,1
    daf0:	31b6d504 	addi	r6,r6,-9388
    daf4:	000c85c0 	call	c85c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    daf8:	e0bffd17 	ldw	r2,-12(fp)
    dafc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    db00:	e0bffd17 	ldw	r2,-12(fp)
    db04:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    db08:	00800074 	movhi	r2,1
    db0c:	109e5d04 	addi	r2,r2,31092
    db10:	10800017 	ldw	r2,0(r2)
    db14:	100b883a 	mov	r5,r2
    db18:	01800074 	movhi	r6,1
    db1c:	31b76004 	addi	r6,r6,-8832
    db20:	e1fffd17 	ldw	r7,-12(fp)
    db24:	0011d040 	call	11d04 <alt_alarm_start>
    db28:	1004403a 	cmpge	r2,r2,zero
    db2c:	1000041e 	bne	r2,zero,db40 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    db30:	e0fffd17 	ldw	r3,-12(fp)
    db34:	00a00034 	movhi	r2,32768
    db38:	10bfffc4 	addi	r2,r2,-1
    db3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    db40:	e037883a 	mov	sp,fp
    db44:	dfc00117 	ldw	ra,4(sp)
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00204 	addi	sp,sp,8
    db50:	f800283a 	ret

0000db54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    db54:	defff704 	addi	sp,sp,-36
    db58:	df000815 	stw	fp,32(sp)
    db5c:	df000804 	addi	fp,sp,32
    db60:	e13ffe15 	stw	r4,-8(fp)
    db64:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    db68:	e0bffe17 	ldw	r2,-8(fp)
    db6c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    db70:	e0bffd17 	ldw	r2,-12(fp)
    db74:	10800017 	ldw	r2,0(r2)
    db78:	e0bffc15 	stw	r2,-16(fp)
    db7c:	00000006 	br	db80 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db80:	e0bffc17 	ldw	r2,-16(fp)
    db84:	10800104 	addi	r2,r2,4
    db88:	10800037 	ldwio	r2,0(r2)
    db8c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    db90:	e0bffb17 	ldw	r2,-20(fp)
    db94:	1080c00c 	andi	r2,r2,768
    db98:	1005003a 	cmpeq	r2,r2,zero
    db9c:	1000741e 	bne	r2,zero,dd70 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dba0:	e0bffb17 	ldw	r2,-20(fp)
    dba4:	1080400c 	andi	r2,r2,256
    dba8:	1005003a 	cmpeq	r2,r2,zero
    dbac:	1000351e 	bne	r2,zero,dc84 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dbb0:	00800074 	movhi	r2,1
    dbb4:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dbb8:	e0bffd17 	ldw	r2,-12(fp)
    dbbc:	10800a17 	ldw	r2,40(r2)
    dbc0:	10800044 	addi	r2,r2,1
    dbc4:	1081ffcc 	andi	r2,r2,2047
    dbc8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    dbcc:	e0bffd17 	ldw	r2,-12(fp)
    dbd0:	10c00b17 	ldw	r3,44(r2)
    dbd4:	e0bff917 	ldw	r2,-28(fp)
    dbd8:	18801626 	beq	r3,r2,dc34 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    dbdc:	e0bffc17 	ldw	r2,-16(fp)
    dbe0:	10800037 	ldwio	r2,0(r2)
    dbe4:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    dbe8:	e0bffa17 	ldw	r2,-24(fp)
    dbec:	10a0000c 	andi	r2,r2,32768
    dbf0:	1005003a 	cmpeq	r2,r2,zero
    dbf4:	10000f1e 	bne	r2,zero,dc34 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    dbf8:	e0bffd17 	ldw	r2,-12(fp)
    dbfc:	10c00a17 	ldw	r3,40(r2)
    dc00:	e0bffa17 	ldw	r2,-24(fp)
    dc04:	1009883a 	mov	r4,r2
    dc08:	e0bffd17 	ldw	r2,-12(fp)
    dc0c:	1885883a 	add	r2,r3,r2
    dc10:	10800e04 	addi	r2,r2,56
    dc14:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc18:	e0bffd17 	ldw	r2,-12(fp)
    dc1c:	10800a17 	ldw	r2,40(r2)
    dc20:	10800044 	addi	r2,r2,1
    dc24:	10c1ffcc 	andi	r3,r2,2047
    dc28:	e0bffd17 	ldw	r2,-12(fp)
    dc2c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    dc30:	003fe106 	br	dbb8 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    dc34:	e0bffa17 	ldw	r2,-24(fp)
    dc38:	10bfffec 	andhi	r2,r2,65535
    dc3c:	1005003a 	cmpeq	r2,r2,zero
    dc40:	1000101e 	bne	r2,zero,dc84 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dc44:	e0bffd17 	ldw	r2,-12(fp)
    dc48:	10c00817 	ldw	r3,32(r2)
    dc4c:	00bfff84 	movi	r2,-2
    dc50:	1886703a 	and	r3,r3,r2
    dc54:	e0bffd17 	ldw	r2,-12(fp)
    dc58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dc5c:	e0bffc17 	ldw	r2,-16(fp)
    dc60:	11000104 	addi	r4,r2,4
    dc64:	e0bffd17 	ldw	r2,-12(fp)
    dc68:	10800817 	ldw	r2,32(r2)
    dc6c:	1007883a 	mov	r3,r2
    dc70:	2005883a 	mov	r2,r4
    dc74:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dc78:	e0bffc17 	ldw	r2,-16(fp)
    dc7c:	10800104 	addi	r2,r2,4
    dc80:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dc84:	e0bffb17 	ldw	r2,-20(fp)
    dc88:	1080800c 	andi	r2,r2,512
    dc8c:	1005003a 	cmpeq	r2,r2,zero
    dc90:	103fbb1e 	bne	r2,zero,db80 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dc94:	e0bffb17 	ldw	r2,-20(fp)
    dc98:	10bfffec 	andhi	r2,r2,65535
    dc9c:	1004d43a 	srli	r2,r2,16
    dca0:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dca4:	00001506 	br	dcfc <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dca8:	e13ffc17 	ldw	r4,-16(fp)
    dcac:	e0bffd17 	ldw	r2,-12(fp)
    dcb0:	10c00d17 	ldw	r3,52(r2)
    dcb4:	e0bffd17 	ldw	r2,-12(fp)
    dcb8:	1885883a 	add	r2,r3,r2
    dcbc:	10820e04 	addi	r2,r2,2104
    dcc0:	10800003 	ldbu	r2,0(r2)
    dcc4:	10c03fcc 	andi	r3,r2,255
    dcc8:	18c0201c 	xori	r3,r3,128
    dccc:	18ffe004 	addi	r3,r3,-128
    dcd0:	2005883a 	mov	r2,r4
    dcd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dcd8:	e0bffd17 	ldw	r2,-12(fp)
    dcdc:	10800d17 	ldw	r2,52(r2)
    dce0:	10800044 	addi	r2,r2,1
    dce4:	10c1ffcc 	andi	r3,r2,2047
    dce8:	e0bffd17 	ldw	r2,-12(fp)
    dcec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dcf0:	e0bff817 	ldw	r2,-32(fp)
    dcf4:	10bfffc4 	addi	r2,r2,-1
    dcf8:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dcfc:	e0bff817 	ldw	r2,-32(fp)
    dd00:	1005003a 	cmpeq	r2,r2,zero
    dd04:	1000051e 	bne	r2,zero,dd1c <altera_avalon_jtag_uart_irq+0x1c8>
    dd08:	e0bffd17 	ldw	r2,-12(fp)
    dd0c:	10c00d17 	ldw	r3,52(r2)
    dd10:	e0bffd17 	ldw	r2,-12(fp)
    dd14:	10800c17 	ldw	r2,48(r2)
    dd18:	18bfe31e 	bne	r3,r2,dca8 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dd1c:	e0bff817 	ldw	r2,-32(fp)
    dd20:	1005003a 	cmpeq	r2,r2,zero
    dd24:	103f961e 	bne	r2,zero,db80 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dd28:	e0bffd17 	ldw	r2,-12(fp)
    dd2c:	10c00817 	ldw	r3,32(r2)
    dd30:	00bfff44 	movi	r2,-3
    dd34:	1886703a 	and	r3,r3,r2
    dd38:	e0bffd17 	ldw	r2,-12(fp)
    dd3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dd40:	e0bffd17 	ldw	r2,-12(fp)
    dd44:	10800017 	ldw	r2,0(r2)
    dd48:	11000104 	addi	r4,r2,4
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10800817 	ldw	r2,32(r2)
    dd54:	1007883a 	mov	r3,r2
    dd58:	2005883a 	mov	r2,r4
    dd5c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dd60:	e0bffc17 	ldw	r2,-16(fp)
    dd64:	10800104 	addi	r2,r2,4
    dd68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dd6c:	003f8406 	br	db80 <altera_avalon_jtag_uart_irq+0x2c>
}
    dd70:	e037883a 	mov	sp,fp
    dd74:	df000017 	ldw	fp,0(sp)
    dd78:	dec00104 	addi	sp,sp,4
    dd7c:	f800283a 	ret

0000dd80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    dd80:	defffc04 	addi	sp,sp,-16
    dd84:	df000315 	stw	fp,12(sp)
    dd88:	df000304 	addi	fp,sp,12
    dd8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dd90:	e0bfff17 	ldw	r2,-4(fp)
    dd94:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dd98:	e0bffe17 	ldw	r2,-8(fp)
    dd9c:	10800017 	ldw	r2,0(r2)
    dda0:	10800104 	addi	r2,r2,4
    dda4:	10800037 	ldwio	r2,0(r2)
    dda8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ddac:	e0bffd17 	ldw	r2,-12(fp)
    ddb0:	1081000c 	andi	r2,r2,1024
    ddb4:	1005003a 	cmpeq	r2,r2,zero
    ddb8:	10000c1e 	bne	r2,zero,ddec <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ddbc:	e0bffe17 	ldw	r2,-8(fp)
    ddc0:	10800017 	ldw	r2,0(r2)
    ddc4:	11000104 	addi	r4,r2,4
    ddc8:	e0bffe17 	ldw	r2,-8(fp)
    ddcc:	10800817 	ldw	r2,32(r2)
    ddd0:	10810014 	ori	r2,r2,1024
    ddd4:	1007883a 	mov	r3,r2
    ddd8:	2005883a 	mov	r2,r4
    dddc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    dde0:	e0bffe17 	ldw	r2,-8(fp)
    dde4:	10000915 	stw	zero,36(r2)
    dde8:	00000a06 	br	de14 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ddec:	e0bffe17 	ldw	r2,-8(fp)
    ddf0:	10c00917 	ldw	r3,36(r2)
    ddf4:	00a00034 	movhi	r2,32768
    ddf8:	10bfff04 	addi	r2,r2,-4
    ddfc:	10c00536 	bltu	r2,r3,de14 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    de00:	e0bffe17 	ldw	r2,-8(fp)
    de04:	10800917 	ldw	r2,36(r2)
    de08:	10c00044 	addi	r3,r2,1
    de0c:	e0bffe17 	ldw	r2,-8(fp)
    de10:	10c00915 	stw	r3,36(r2)
    de14:	00800074 	movhi	r2,1
    de18:	109e5d04 	addi	r2,r2,31092
    de1c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    de20:	e037883a 	mov	sp,fp
    de24:	df000017 	ldw	fp,0(sp)
    de28:	dec00104 	addi	sp,sp,4
    de2c:	f800283a 	ret

0000de30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    de30:	defffc04 	addi	sp,sp,-16
    de34:	df000315 	stw	fp,12(sp)
    de38:	df000304 	addi	fp,sp,12
    de3c:	e13ffd15 	stw	r4,-12(fp)
    de40:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    de44:	00000706 	br	de64 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	1090000c 	andi	r2,r2,16384
    de50:	1005003a 	cmpeq	r2,r2,zero
    de54:	1000031e 	bne	r2,zero,de64 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    de58:	00bffd44 	movi	r2,-11
    de5c:	e0bfff15 	stw	r2,-4(fp)
    de60:	00000b06 	br	de90 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    de64:	e0bffd17 	ldw	r2,-12(fp)
    de68:	10c00d17 	ldw	r3,52(r2)
    de6c:	e0bffd17 	ldw	r2,-12(fp)
    de70:	10800c17 	ldw	r2,48(r2)
    de74:	18800526 	beq	r3,r2,de8c <altera_avalon_jtag_uart_close+0x5c>
    de78:	e0bffd17 	ldw	r2,-12(fp)
    de7c:	10c00917 	ldw	r3,36(r2)
    de80:	e0bffd17 	ldw	r2,-12(fp)
    de84:	10800117 	ldw	r2,4(r2)
    de88:	18bfef36 	bltu	r3,r2,de48 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    de8c:	e03fff15 	stw	zero,-4(fp)
    de90:	e0bfff17 	ldw	r2,-4(fp)
}
    de94:	e037883a 	mov	sp,fp
    de98:	df000017 	ldw	fp,0(sp)
    de9c:	dec00104 	addi	sp,sp,4
    dea0:	f800283a 	ret

0000dea4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dea4:	defff804 	addi	sp,sp,-32
    dea8:	df000715 	stw	fp,28(sp)
    deac:	df000704 	addi	fp,sp,28
    deb0:	e13ffb15 	stw	r4,-20(fp)
    deb4:	e17ffc15 	stw	r5,-16(fp)
    deb8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    debc:	00bff9c4 	movi	r2,-25
    dec0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    dec4:	e0bffc17 	ldw	r2,-16(fp)
    dec8:	e0bfff15 	stw	r2,-4(fp)
    decc:	e0ffff17 	ldw	r3,-4(fp)
    ded0:	189a8060 	cmpeqi	r2,r3,27137
    ded4:	1000041e 	bne	r2,zero,dee8 <altera_avalon_jtag_uart_ioctl+0x44>
    ded8:	e0ffff17 	ldw	r3,-4(fp)
    dedc:	189a80a0 	cmpeqi	r2,r3,27138
    dee0:	10001b1e 	bne	r2,zero,df50 <altera_avalon_jtag_uart_ioctl+0xac>
    dee4:	00002706 	br	df84 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dee8:	e0bffb17 	ldw	r2,-20(fp)
    deec:	10c00117 	ldw	r3,4(r2)
    def0:	00a00034 	movhi	r2,32768
    def4:	10bfffc4 	addi	r2,r2,-1
    def8:	18802226 	beq	r3,r2,df84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    defc:	e0bffd17 	ldw	r2,-12(fp)
    df00:	10800017 	ldw	r2,0(r2)
    df04:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    df08:	e0bff917 	ldw	r2,-28(fp)
    df0c:	10800090 	cmplti	r2,r2,2
    df10:	1000071e 	bne	r2,zero,df30 <altera_avalon_jtag_uart_ioctl+0x8c>
    df14:	e0fff917 	ldw	r3,-28(fp)
    df18:	00a00034 	movhi	r2,32768
    df1c:	10bfffc4 	addi	r2,r2,-1
    df20:	18800326 	beq	r3,r2,df30 <altera_avalon_jtag_uart_ioctl+0x8c>
    df24:	e0bff917 	ldw	r2,-28(fp)
    df28:	e0bffe15 	stw	r2,-8(fp)
    df2c:	00000306 	br	df3c <altera_avalon_jtag_uart_ioctl+0x98>
    df30:	00e00034 	movhi	r3,32768
    df34:	18ffff84 	addi	r3,r3,-2
    df38:	e0fffe15 	stw	r3,-8(fp)
    df3c:	e0bffb17 	ldw	r2,-20(fp)
    df40:	e0fffe17 	ldw	r3,-8(fp)
    df44:	10c00115 	stw	r3,4(r2)
      rc = 0;
    df48:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    df4c:	00000d06 	br	df84 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    df50:	e0bffb17 	ldw	r2,-20(fp)
    df54:	10c00117 	ldw	r3,4(r2)
    df58:	00a00034 	movhi	r2,32768
    df5c:	10bfffc4 	addi	r2,r2,-1
    df60:	18800826 	beq	r3,r2,df84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    df64:	e13ffd17 	ldw	r4,-12(fp)
    df68:	e0bffb17 	ldw	r2,-20(fp)
    df6c:	10c00917 	ldw	r3,36(r2)
    df70:	e0bffb17 	ldw	r2,-20(fp)
    df74:	10800117 	ldw	r2,4(r2)
    df78:	1885803a 	cmpltu	r2,r3,r2
    df7c:	20800015 	stw	r2,0(r4)
      rc = 0;
    df80:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    df84:	e0bffa17 	ldw	r2,-24(fp)
}
    df88:	e037883a 	mov	sp,fp
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00104 	addi	sp,sp,4
    df94:	f800283a 	ret

0000df98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    df98:	defff204 	addi	sp,sp,-56
    df9c:	dfc00d15 	stw	ra,52(sp)
    dfa0:	df000c15 	stw	fp,48(sp)
    dfa4:	df000c04 	addi	fp,sp,48
    dfa8:	e13ffb15 	stw	r4,-20(fp)
    dfac:	e17ffc15 	stw	r5,-16(fp)
    dfb0:	e1bffd15 	stw	r6,-12(fp)
    dfb4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    dfb8:	e0bffc17 	ldw	r2,-16(fp)
    dfbc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dfc0:	00004806 	br	e0e4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dfc4:	e0bffb17 	ldw	r2,-20(fp)
    dfc8:	10800a17 	ldw	r2,40(r2)
    dfcc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dfd0:	e0bffb17 	ldw	r2,-20(fp)
    dfd4:	10800b17 	ldw	r2,44(r2)
    dfd8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    dfdc:	e0fff717 	ldw	r3,-36(fp)
    dfe0:	e0bff617 	ldw	r2,-40(fp)
    dfe4:	18800536 	bltu	r3,r2,dffc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dfe8:	e0bff717 	ldw	r2,-36(fp)
    dfec:	e0fff617 	ldw	r3,-40(fp)
    dff0:	10c5c83a 	sub	r2,r2,r3
    dff4:	e0bff815 	stw	r2,-32(fp)
    dff8:	00000406 	br	e00c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    dffc:	00820004 	movi	r2,2048
    e000:	e0fff617 	ldw	r3,-40(fp)
    e004:	10c5c83a 	sub	r2,r2,r3
    e008:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    e00c:	e0bff817 	ldw	r2,-32(fp)
    e010:	1005003a 	cmpeq	r2,r2,zero
    e014:	10001f1e 	bne	r2,zero,e094 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    e018:	e0fffd17 	ldw	r3,-12(fp)
    e01c:	e0bff817 	ldw	r2,-32(fp)
    e020:	1880022e 	bgeu	r3,r2,e02c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    e024:	e0bffd17 	ldw	r2,-12(fp)
    e028:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e02c:	e0bffb17 	ldw	r2,-20(fp)
    e030:	10c00e04 	addi	r3,r2,56
    e034:	e0bff617 	ldw	r2,-40(fp)
    e038:	1887883a 	add	r3,r3,r2
    e03c:	e0bffa17 	ldw	r2,-24(fp)
    e040:	1009883a 	mov	r4,r2
    e044:	180b883a 	mov	r5,r3
    e048:	e1bff817 	ldw	r6,-32(fp)
    e04c:	00032a40 	call	32a4 <memcpy>
      ptr   += n;
    e050:	e0fff817 	ldw	r3,-32(fp)
    e054:	e0bffa17 	ldw	r2,-24(fp)
    e058:	10c5883a 	add	r2,r2,r3
    e05c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    e060:	e0fffd17 	ldw	r3,-12(fp)
    e064:	e0bff817 	ldw	r2,-32(fp)
    e068:	1885c83a 	sub	r2,r3,r2
    e06c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e070:	e0fff617 	ldw	r3,-40(fp)
    e074:	e0bff817 	ldw	r2,-32(fp)
    e078:	1885883a 	add	r2,r3,r2
    e07c:	10c1ffcc 	andi	r3,r2,2047
    e080:	e0bffb17 	ldw	r2,-20(fp)
    e084:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e088:	e0bffd17 	ldw	r2,-12(fp)
    e08c:	10800048 	cmpgei	r2,r2,1
    e090:	103fcc1e 	bne	r2,zero,dfc4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    e094:	e0fffa17 	ldw	r3,-24(fp)
    e098:	e0bffc17 	ldw	r2,-16(fp)
    e09c:	1880141e 	bne	r3,r2,e0f0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e0a0:	e0bffe17 	ldw	r2,-8(fp)
    e0a4:	1090000c 	andi	r2,r2,16384
    e0a8:	1004c03a 	cmpne	r2,r2,zero
    e0ac:	1000101e 	bne	r2,zero,e0f0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e0b0:	e0bffb17 	ldw	r2,-20(fp)
    e0b4:	10c00a17 	ldw	r3,40(r2)
    e0b8:	e0bff717 	ldw	r2,-36(fp)
    e0bc:	1880051e 	bne	r3,r2,e0d4 <altera_avalon_jtag_uart_read+0x13c>
    e0c0:	e0bffb17 	ldw	r2,-20(fp)
    e0c4:	10c00917 	ldw	r3,36(r2)
    e0c8:	e0bffb17 	ldw	r2,-20(fp)
    e0cc:	10800117 	ldw	r2,4(r2)
    e0d0:	18bff736 	bltu	r3,r2,e0b0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e0d4:	e0bffb17 	ldw	r2,-20(fp)
    e0d8:	10c00a17 	ldw	r3,40(r2)
    e0dc:	e0bff717 	ldw	r2,-36(fp)
    e0e0:	18800326 	beq	r3,r2,e0f0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e0e4:	e0bffd17 	ldw	r2,-12(fp)
    e0e8:	10800048 	cmpgei	r2,r2,1
    e0ec:	103fb51e 	bne	r2,zero,dfc4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e0f0:	e0fffa17 	ldw	r3,-24(fp)
    e0f4:	e0bffc17 	ldw	r2,-16(fp)
    e0f8:	18801926 	beq	r3,r2,e160 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0fc:	0005303a 	rdctl	r2,status
    e100:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e104:	e0fff517 	ldw	r3,-44(fp)
    e108:	00bfff84 	movi	r2,-2
    e10c:	1884703a 	and	r2,r3,r2
    e110:	1001703a 	wrctl	status,r2
  
  return context;
    e114:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e118:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e11c:	e0bffb17 	ldw	r2,-20(fp)
    e120:	10800817 	ldw	r2,32(r2)
    e124:	10c00054 	ori	r3,r2,1
    e128:	e0bffb17 	ldw	r2,-20(fp)
    e12c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e130:	e0bffb17 	ldw	r2,-20(fp)
    e134:	10800017 	ldw	r2,0(r2)
    e138:	11000104 	addi	r4,r2,4
    e13c:	e0bffb17 	ldw	r2,-20(fp)
    e140:	10800817 	ldw	r2,32(r2)
    e144:	1007883a 	mov	r3,r2
    e148:	2005883a 	mov	r2,r4
    e14c:	10c00035 	stwio	r3,0(r2)
    e150:	e0bff917 	ldw	r2,-28(fp)
    e154:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e158:	e0bff417 	ldw	r2,-48(fp)
    e15c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e160:	e0fffa17 	ldw	r3,-24(fp)
    e164:	e0bffc17 	ldw	r2,-16(fp)
    e168:	18800526 	beq	r3,r2,e180 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    e16c:	e0fffa17 	ldw	r3,-24(fp)
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	1887c83a 	sub	r3,r3,r2
    e178:	e0ffff15 	stw	r3,-4(fp)
    e17c:	00000906 	br	e1a4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    e180:	e0bffe17 	ldw	r2,-8(fp)
    e184:	1090000c 	andi	r2,r2,16384
    e188:	1005003a 	cmpeq	r2,r2,zero
    e18c:	1000031e 	bne	r2,zero,e19c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e190:	00bffd44 	movi	r2,-11
    e194:	e0bfff15 	stw	r2,-4(fp)
    e198:	00000206 	br	e1a4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    e19c:	00bffec4 	movi	r2,-5
    e1a0:	e0bfff15 	stw	r2,-4(fp)
    e1a4:	e0bfff17 	ldw	r2,-4(fp)
}
    e1a8:	e037883a 	mov	sp,fp
    e1ac:	dfc00117 	ldw	ra,4(sp)
    e1b0:	df000017 	ldw	fp,0(sp)
    e1b4:	dec00204 	addi	sp,sp,8
    e1b8:	f800283a 	ret

0000e1bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e1bc:	defff204 	addi	sp,sp,-56
    e1c0:	dfc00d15 	stw	ra,52(sp)
    e1c4:	df000c15 	stw	fp,48(sp)
    e1c8:	df000c04 	addi	fp,sp,48
    e1cc:	e13ffb15 	stw	r4,-20(fp)
    e1d0:	e17ffc15 	stw	r5,-16(fp)
    e1d4:	e1bffd15 	stw	r6,-12(fp)
    e1d8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e1dc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e1e0:	e0bffc17 	ldw	r2,-16(fp)
    e1e4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e1e8:	00003a06 	br	e2d4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e1ec:	e0bffb17 	ldw	r2,-20(fp)
    e1f0:	10800c17 	ldw	r2,48(r2)
    e1f4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    e1f8:	e0bffb17 	ldw	r2,-20(fp)
    e1fc:	10800d17 	ldw	r2,52(r2)
    e200:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    e204:	e0fffa17 	ldw	r3,-24(fp)
    e208:	e0bff917 	ldw	r2,-28(fp)
    e20c:	1880062e 	bgeu	r3,r2,e228 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e210:	e0fff917 	ldw	r3,-28(fp)
    e214:	e0bffa17 	ldw	r2,-24(fp)
    e218:	1885c83a 	sub	r2,r3,r2
    e21c:	10bfffc4 	addi	r2,r2,-1
    e220:	e0bff815 	stw	r2,-32(fp)
    e224:	00000c06 	br	e258 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    e228:	e0bff917 	ldw	r2,-28(fp)
    e22c:	1005003a 	cmpeq	r2,r2,zero
    e230:	1000051e 	bne	r2,zero,e248 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e234:	00820004 	movi	r2,2048
    e238:	e0fffa17 	ldw	r3,-24(fp)
    e23c:	10c5c83a 	sub	r2,r2,r3
    e240:	e0bff815 	stw	r2,-32(fp)
    e244:	00000406 	br	e258 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e248:	0081ffc4 	movi	r2,2047
    e24c:	e0fffa17 	ldw	r3,-24(fp)
    e250:	10c5c83a 	sub	r2,r2,r3
    e254:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    e258:	e0bff817 	ldw	r2,-32(fp)
    e25c:	1005003a 	cmpeq	r2,r2,zero
    e260:	10001f1e 	bne	r2,zero,e2e0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    e264:	e0fffd17 	ldw	r3,-12(fp)
    e268:	e0bff817 	ldw	r2,-32(fp)
    e26c:	1880022e 	bgeu	r3,r2,e278 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    e270:	e0bffd17 	ldw	r2,-12(fp)
    e274:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e278:	e0bffb17 	ldw	r2,-20(fp)
    e27c:	10c20e04 	addi	r3,r2,2104
    e280:	e0bffa17 	ldw	r2,-24(fp)
    e284:	1885883a 	add	r2,r3,r2
    e288:	e0fffc17 	ldw	r3,-16(fp)
    e28c:	1009883a 	mov	r4,r2
    e290:	180b883a 	mov	r5,r3
    e294:	e1bff817 	ldw	r6,-32(fp)
    e298:	00032a40 	call	32a4 <memcpy>
      ptr   += n;
    e29c:	e0fff817 	ldw	r3,-32(fp)
    e2a0:	e0bffc17 	ldw	r2,-16(fp)
    e2a4:	10c5883a 	add	r2,r2,r3
    e2a8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    e2ac:	e0fffd17 	ldw	r3,-12(fp)
    e2b0:	e0bff817 	ldw	r2,-32(fp)
    e2b4:	1885c83a 	sub	r2,r3,r2
    e2b8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e2bc:	e0fffa17 	ldw	r3,-24(fp)
    e2c0:	e0bff817 	ldw	r2,-32(fp)
    e2c4:	1885883a 	add	r2,r3,r2
    e2c8:	10c1ffcc 	andi	r3,r2,2047
    e2cc:	e0bffb17 	ldw	r2,-20(fp)
    e2d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e2d4:	e0bffd17 	ldw	r2,-12(fp)
    e2d8:	10800048 	cmpgei	r2,r2,1
    e2dc:	103fc31e 	bne	r2,zero,e1ec <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2e0:	0005303a 	rdctl	r2,status
    e2e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2e8:	e0fff517 	ldw	r3,-44(fp)
    e2ec:	00bfff84 	movi	r2,-2
    e2f0:	1884703a 	and	r2,r3,r2
    e2f4:	1001703a 	wrctl	status,r2
  
  return context;
    e2f8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e2fc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e300:	e0bffb17 	ldw	r2,-20(fp)
    e304:	10800817 	ldw	r2,32(r2)
    e308:	10c00094 	ori	r3,r2,2
    e30c:	e0bffb17 	ldw	r2,-20(fp)
    e310:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e314:	e0bffb17 	ldw	r2,-20(fp)
    e318:	10800017 	ldw	r2,0(r2)
    e31c:	11000104 	addi	r4,r2,4
    e320:	e0bffb17 	ldw	r2,-20(fp)
    e324:	10800817 	ldw	r2,32(r2)
    e328:	1007883a 	mov	r3,r2
    e32c:	2005883a 	mov	r2,r4
    e330:	10c00035 	stwio	r3,0(r2)
    e334:	e0bff717 	ldw	r2,-36(fp)
    e338:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e33c:	e0bff417 	ldw	r2,-48(fp)
    e340:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e344:	e0bffd17 	ldw	r2,-12(fp)
    e348:	10800050 	cmplti	r2,r2,1
    e34c:	1000111e 	bne	r2,zero,e394 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    e350:	e0bffe17 	ldw	r2,-8(fp)
    e354:	1090000c 	andi	r2,r2,16384
    e358:	1004c03a 	cmpne	r2,r2,zero
    e35c:	1000101e 	bne	r2,zero,e3a0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e360:	e0bffb17 	ldw	r2,-20(fp)
    e364:	10c00d17 	ldw	r3,52(r2)
    e368:	e0bff917 	ldw	r2,-28(fp)
    e36c:	1880051e 	bne	r3,r2,e384 <altera_avalon_jtag_uart_write+0x1c8>
    e370:	e0bffb17 	ldw	r2,-20(fp)
    e374:	10c00917 	ldw	r3,36(r2)
    e378:	e0bffb17 	ldw	r2,-20(fp)
    e37c:	10800117 	ldw	r2,4(r2)
    e380:	18bff736 	bltu	r3,r2,e360 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    e384:	e0bffb17 	ldw	r2,-20(fp)
    e388:	10c00d17 	ldw	r3,52(r2)
    e38c:	e0bff917 	ldw	r2,-28(fp)
    e390:	18800326 	beq	r3,r2,e3a0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    e394:	e0bffd17 	ldw	r2,-12(fp)
    e398:	10800048 	cmpgei	r2,r2,1
    e39c:	103fcd1e 	bne	r2,zero,e2d4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e3a0:	e0fffc17 	ldw	r3,-16(fp)
    e3a4:	e0bff617 	ldw	r2,-40(fp)
    e3a8:	18800526 	beq	r3,r2,e3c0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    e3ac:	e0fffc17 	ldw	r3,-16(fp)
    e3b0:	e0bff617 	ldw	r2,-40(fp)
    e3b4:	1887c83a 	sub	r3,r3,r2
    e3b8:	e0ffff15 	stw	r3,-4(fp)
    e3bc:	00000906 	br	e3e4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    e3c0:	e0bffe17 	ldw	r2,-8(fp)
    e3c4:	1090000c 	andi	r2,r2,16384
    e3c8:	1005003a 	cmpeq	r2,r2,zero
    e3cc:	1000031e 	bne	r2,zero,e3dc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    e3d0:	00bffd44 	movi	r2,-11
    e3d4:	e0bfff15 	stw	r2,-4(fp)
    e3d8:	00000206 	br	e3e4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e3dc:	00bffec4 	movi	r2,-5
    e3e0:	e0bfff15 	stw	r2,-4(fp)
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
}
    e3e8:	e037883a 	mov	sp,fp
    e3ec:	dfc00117 	ldw	ra,4(sp)
    e3f0:	df000017 	ldw	fp,0(sp)
    e3f4:	dec00204 	addi	sp,sp,8
    e3f8:	f800283a 	ret

0000e3fc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    e3fc:	defffd04 	addi	sp,sp,-12
    e400:	df000215 	stw	fp,8(sp)
    e404:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
    e408:	00800074 	movhi	r2,1
    e40c:	109e5b04 	addi	r2,r2,31084
    e410:	10800017 	ldw	r2,0(r2)
    e414:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    e418:	00800074 	movhi	r2,1
    e41c:	109e5c04 	addi	r2,r2,31088
    e420:	10800017 	ldw	r2,0(r2)
    e424:	1004c03a 	cmpne	r2,r2,zero
    e428:	1000031e 	bne	r2,zero,e438 <alt_timestamp_start+0x3c>
  {
    return -1;
    e42c:	00bfffc4 	movi	r2,-1
    e430:	e0bfff15 	stw	r2,-4(fp)
    e434:	00001506 	br	e48c <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    e438:	e0bffe17 	ldw	r2,-8(fp)
    e43c:	10800104 	addi	r2,r2,4
    e440:	1007883a 	mov	r3,r2
    e444:	00800204 	movi	r2,8
    e448:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    e44c:	e0bffe17 	ldw	r2,-8(fp)
    e450:	10800204 	addi	r2,r2,8
    e454:	1007883a 	mov	r3,r2
    e458:	00bfffd4 	movui	r2,65535
    e45c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    e460:	e0bffe17 	ldw	r2,-8(fp)
    e464:	10800304 	addi	r2,r2,12
    e468:	1007883a 	mov	r3,r2
    e46c:	00bfffd4 	movui	r2,65535
    e470:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    e474:	e0bffe17 	ldw	r2,-8(fp)
    e478:	10800104 	addi	r2,r2,4
    e47c:	1007883a 	mov	r3,r2
    e480:	00800104 	movi	r2,4
    e484:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    e488:	e03fff15 	stw	zero,-4(fp)
    e48c:	e0bfff17 	ldw	r2,-4(fp)
}
    e490:	e037883a 	mov	sp,fp
    e494:	df000017 	ldw	fp,0(sp)
    e498:	dec00104 	addi	sp,sp,4
    e49c:	f800283a 	ret

0000e4a0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    e4a0:	defffb04 	addi	sp,sp,-20
    e4a4:	df000415 	stw	fp,16(sp)
    e4a8:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
    e4ac:	00800074 	movhi	r2,1
    e4b0:	109e5b04 	addi	r2,r2,31084
    e4b4:	10800017 	ldw	r2,0(r2)
    e4b8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    e4bc:	00800074 	movhi	r2,1
    e4c0:	109e5c04 	addi	r2,r2,31088
    e4c4:	10800017 	ldw	r2,0(r2)
    e4c8:	1004c03a 	cmpne	r2,r2,zero
    e4cc:	1000031e 	bne	r2,zero,e4dc <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    e4d0:	00bfffc4 	movi	r2,-1
    e4d4:	e0bfff15 	stw	r2,-4(fp)
    e4d8:	00001306 	br	e528 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    e4dc:	e0bffe17 	ldw	r2,-8(fp)
    e4e0:	10800404 	addi	r2,r2,16
    e4e4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    e4e8:	e0bffe17 	ldw	r2,-8(fp)
    e4ec:	10800404 	addi	r2,r2,16
    e4f0:	10800037 	ldwio	r2,0(r2)
    e4f4:	10bfffcc 	andi	r2,r2,65535
    e4f8:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    e4fc:	e0bffe17 	ldw	r2,-8(fp)
    e500:	10800504 	addi	r2,r2,20
    e504:	10800037 	ldwio	r2,0(r2)
    e508:	10bfffcc 	andi	r2,r2,65535
    e50c:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    e510:	e0bffc17 	ldw	r2,-16(fp)
    e514:	1006943a 	slli	r3,r2,16
    e518:	e0bffd17 	ldw	r2,-12(fp)
    e51c:	1884b03a 	or	r2,r3,r2
    e520:	0084303a 	nor	r2,zero,r2
    e524:	e0bfff15 	stw	r2,-4(fp)
    e528:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
    e52c:	e037883a 	mov	sp,fp
    e530:	df000017 	ldw	fp,0(sp)
    e534:	dec00104 	addi	sp,sp,4
    e538:	f800283a 	ret

0000e53c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    e53c:	deffff04 	addi	sp,sp,-4
    e540:	df000015 	stw	fp,0(sp)
    e544:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    e548:	00800074 	movhi	r2,1
    e54c:	109e5c04 	addi	r2,r2,31088
    e550:	10800017 	ldw	r2,0(r2)
}
    e554:	e037883a 	mov	sp,fp
    e558:	df000017 	ldw	fp,0(sp)
    e55c:	dec00104 	addi	sp,sp,4
    e560:	f800283a 	ret

0000e564 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    e564:	defffc04 	addi	sp,sp,-16
    e568:	dfc00315 	stw	ra,12(sp)
    e56c:	df000215 	stw	fp,8(sp)
    e570:	df000204 	addi	fp,sp,8
    e574:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    e578:	e13fff17 	ldw	r4,-4(fp)
    e57c:	01400074 	movhi	r5,1
    e580:	29566204 	addi	r5,r5,22920
    e584:	00120500 	call	12050 <alt_find_dev>
    e588:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    e58c:	e0bffe17 	ldw	r2,-8(fp)
}
    e590:	e037883a 	mov	sp,fp
    e594:	dfc00117 	ldw	ra,4(sp)
    e598:	df000017 	ldw	fp,0(sp)
    e59c:	dec00204 	addi	sp,sp,8
    e5a0:	f800283a 	ret

0000e5a4 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    e5a4:	defffd04 	addi	sp,sp,-12
    e5a8:	df000215 	stw	fp,8(sp)
    e5ac:	df000204 	addi	fp,sp,8
    e5b0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e5b4:	e0bfff17 	ldw	r2,-4(fp)
    e5b8:	10800a17 	ldw	r2,40(r2)
    e5bc:	10800037 	ldwio	r2,0(r2)
    e5c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    e5c4:	e0bffe17 	ldw	r2,-8(fp)
    e5c8:	10800054 	ori	r2,r2,1
    e5cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e5d0:	e0bfff17 	ldw	r2,-4(fp)
    e5d4:	10800a17 	ldw	r2,40(r2)
    e5d8:	e0fffe17 	ldw	r3,-8(fp)
    e5dc:	10c00035 	stwio	r3,0(r2)
}
    e5e0:	e037883a 	mov	sp,fp
    e5e4:	df000017 	ldw	fp,0(sp)
    e5e8:	dec00104 	addi	sp,sp,4
    e5ec:	f800283a 	ret

0000e5f0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    e5f0:	defffd04 	addi	sp,sp,-12
    e5f4:	df000215 	stw	fp,8(sp)
    e5f8:	df000204 	addi	fp,sp,8
    e5fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e600:	e0bfff17 	ldw	r2,-4(fp)
    e604:	10800a17 	ldw	r2,40(r2)
    e608:	10800037 	ldwio	r2,0(r2)
    e60c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    e610:	e0fffe17 	ldw	r3,-8(fp)
    e614:	00bfff84 	movi	r2,-2
    e618:	1884703a 	and	r2,r3,r2
    e61c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e620:	e0bfff17 	ldw	r2,-4(fp)
    e624:	10800a17 	ldw	r2,40(r2)
    e628:	e0fffe17 	ldw	r3,-8(fp)
    e62c:	10c00035 	stwio	r3,0(r2)
}
    e630:	e037883a 	mov	sp,fp
    e634:	df000017 	ldw	fp,0(sp)
    e638:	dec00104 	addi	sp,sp,4
    e63c:	f800283a 	ret

0000e640 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    e640:	defffd04 	addi	sp,sp,-12
    e644:	df000215 	stw	fp,8(sp)
    e648:	df000204 	addi	fp,sp,8
    e64c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e650:	e0bfff17 	ldw	r2,-4(fp)
    e654:	10800a17 	ldw	r2,40(r2)
    e658:	10800037 	ldwio	r2,0(r2)
    e65c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	10800094 	ori	r2,r2,2
    e668:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e66c:	e0bfff17 	ldw	r2,-4(fp)
    e670:	10800a17 	ldw	r2,40(r2)
    e674:	e0fffe17 	ldw	r3,-8(fp)
    e678:	10c00035 	stwio	r3,0(r2)
}
    e67c:	e037883a 	mov	sp,fp
    e680:	df000017 	ldw	fp,0(sp)
    e684:	dec00104 	addi	sp,sp,4
    e688:	f800283a 	ret

0000e68c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    e68c:	defffd04 	addi	sp,sp,-12
    e690:	df000215 	stw	fp,8(sp)
    e694:	df000204 	addi	fp,sp,8
    e698:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e69c:	e0bfff17 	ldw	r2,-4(fp)
    e6a0:	10800a17 	ldw	r2,40(r2)
    e6a4:	10800037 	ldwio	r2,0(r2)
    e6a8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    e6ac:	e0fffe17 	ldw	r3,-8(fp)
    e6b0:	00bfff44 	movi	r2,-3
    e6b4:	1884703a 	and	r2,r3,r2
    e6b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e6bc:	e0bfff17 	ldw	r2,-4(fp)
    e6c0:	10800a17 	ldw	r2,40(r2)
    e6c4:	e0fffe17 	ldw	r3,-8(fp)
    e6c8:	10c00035 	stwio	r3,0(r2)
}
    e6cc:	e037883a 	mov	sp,fp
    e6d0:	df000017 	ldw	fp,0(sp)
    e6d4:	dec00104 	addi	sp,sp,4
    e6d8:	f800283a 	ret

0000e6dc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    e6dc:	defffd04 	addi	sp,sp,-12
    e6e0:	df000215 	stw	fp,8(sp)
    e6e4:	df000204 	addi	fp,sp,8
    e6e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e6ec:	e0bfff17 	ldw	r2,-4(fp)
    e6f0:	10800a17 	ldw	r2,40(r2)
    e6f4:	10800037 	ldwio	r2,0(r2)
    e6f8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    e6fc:	e0bffe17 	ldw	r2,-8(fp)
    e700:	1080400c 	andi	r2,r2,256
    e704:	1004c03a 	cmpne	r2,r2,zero
}
    e708:	e037883a 	mov	sp,fp
    e70c:	df000017 	ldw	fp,0(sp)
    e710:	dec00104 	addi	sp,sp,4
    e714:	f800283a 	ret

0000e718 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    e718:	defffd04 	addi	sp,sp,-12
    e71c:	df000215 	stw	fp,8(sp)
    e720:	df000204 	addi	fp,sp,8
    e724:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e728:	e0bfff17 	ldw	r2,-4(fp)
    e72c:	10800a17 	ldw	r2,40(r2)
    e730:	10800037 	ldwio	r2,0(r2)
    e734:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    e738:	e0bffe17 	ldw	r2,-8(fp)
    e73c:	1080800c 	andi	r2,r2,512
    e740:	1004c03a 	cmpne	r2,r2,zero
}
    e744:	e037883a 	mov	sp,fp
    e748:	df000017 	ldw	fp,0(sp)
    e74c:	dec00104 	addi	sp,sp,4
    e750:	f800283a 	ret

0000e754 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    e754:	defffd04 	addi	sp,sp,-12
    e758:	df000215 	stw	fp,8(sp)
    e75c:	df000204 	addi	fp,sp,8
    e760:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    e764:	e0bfff17 	ldw	r2,-4(fp)
    e768:	10800a17 	ldw	r2,40(r2)
    e76c:	10800037 	ldwio	r2,0(r2)
    e770:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    e774:	e0bffe17 	ldw	r2,-8(fp)
    e778:	10800114 	ori	r2,r2,4
    e77c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	10800214 	ori	r2,r2,8
    e788:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e78c:	e0bfff17 	ldw	r2,-4(fp)
    e790:	10800a17 	ldw	r2,40(r2)
    e794:	e0fffe17 	ldw	r3,-8(fp)
    e798:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    e79c:	e0fffe17 	ldw	r3,-8(fp)
    e7a0:	00bffec4 	movi	r2,-5
    e7a4:	1884703a 	and	r2,r3,r2
    e7a8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    e7ac:	e0fffe17 	ldw	r3,-8(fp)
    e7b0:	00bffdc4 	movi	r2,-9
    e7b4:	1884703a 	and	r2,r3,r2
    e7b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	10800a17 	ldw	r2,40(r2)
    e7c4:	e0fffe17 	ldw	r3,-8(fp)
    e7c8:	10c00035 	stwio	r3,0(r2)
}
    e7cc:	e037883a 	mov	sp,fp
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00104 	addi	sp,sp,4
    e7d8:	f800283a 	ret

0000e7dc <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    e7dc:	defffb04 	addi	sp,sp,-20
    e7e0:	df000415 	stw	fp,16(sp)
    e7e4:	df000404 	addi	fp,sp,16
    e7e8:	e13ffd15 	stw	r4,-12(fp)
    e7ec:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	10800a17 	ldw	r2,40(r2)
    e7f8:	10800104 	addi	r2,r2,4
    e7fc:	10800037 	ldwio	r2,0(r2)
    e800:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    e804:	e0bffe17 	ldw	r2,-8(fp)
    e808:	1004c03a 	cmpne	r2,r2,zero
    e80c:	1000051e 	bne	r2,zero,e824 <alt_up_audio_read_fifo_avail+0x48>
    e810:	e0bffc17 	ldw	r2,-16(fp)
    e814:	10bfc00c 	andi	r2,r2,65280
    e818:	1004d23a 	srli	r2,r2,8
    e81c:	e0bfff15 	stw	r2,-4(fp)
    e820:	00000306 	br	e830 <alt_up_audio_read_fifo_avail+0x54>
    e824:	e0bffc17 	ldw	r2,-16(fp)
    e828:	10803fcc 	andi	r2,r2,255
    e82c:	e0bfff15 	stw	r2,-4(fp)
    e830:	e0bfff17 	ldw	r2,-4(fp)
    e834:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    e838:	e0bffc17 	ldw	r2,-16(fp)
}
    e83c:	e037883a 	mov	sp,fp
    e840:	df000017 	ldw	fp,0(sp)
    e844:	dec00104 	addi	sp,sp,4
    e848:	f800283a 	ret

0000e84c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    e84c:	defff904 	addi	sp,sp,-28
    e850:	dfc00615 	stw	ra,24(sp)
    e854:	df000515 	stw	fp,20(sp)
    e858:	df000504 	addi	fp,sp,20
    e85c:	e13ffc15 	stw	r4,-16(fp)
    e860:	e17ffd15 	stw	r5,-12(fp)
    e864:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    e868:	e13ffc17 	ldw	r4,-16(fp)
    e86c:	01400044 	movi	r5,1
    e870:	000e7dc0 	call	e7dc <alt_up_audio_read_fifo_avail>
    e874:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    e878:	e0bffb17 	ldw	r2,-20(fp)
    e87c:	10801868 	cmpgeui	r2,r2,97
    e880:	1000021e 	bne	r2,zero,e88c <alt_up_audio_record_r+0x40>
		return 0;
    e884:	e03fff15 	stw	zero,-4(fp)
    e888:	00000606 	br	e8a4 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    e88c:	e13ffc17 	ldw	r4,-16(fp)
    e890:	e17ffd17 	ldw	r5,-12(fp)
    e894:	e1bffe17 	ldw	r6,-8(fp)
    e898:	01c00044 	movi	r7,1
    e89c:	000ea800 	call	ea80 <alt_up_audio_read_fifo>
    e8a0:	e0bfff15 	stw	r2,-4(fp)
    e8a4:	e0bfff17 	ldw	r2,-4(fp)
}
    e8a8:	e037883a 	mov	sp,fp
    e8ac:	dfc00117 	ldw	ra,4(sp)
    e8b0:	df000017 	ldw	fp,0(sp)
    e8b4:	dec00204 	addi	sp,sp,8
    e8b8:	f800283a 	ret

0000e8bc <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    e8bc:	defff904 	addi	sp,sp,-28
    e8c0:	dfc00615 	stw	ra,24(sp)
    e8c4:	df000515 	stw	fp,20(sp)
    e8c8:	df000504 	addi	fp,sp,20
    e8cc:	e13ffc15 	stw	r4,-16(fp)
    e8d0:	e17ffd15 	stw	r5,-12(fp)
    e8d4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    e8d8:	e13ffc17 	ldw	r4,-16(fp)
    e8dc:	000b883a 	mov	r5,zero
    e8e0:	000e7dc0 	call	e7dc <alt_up_audio_read_fifo_avail>
    e8e4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    e8e8:	e0bffb17 	ldw	r2,-20(fp)
    e8ec:	10801868 	cmpgeui	r2,r2,97
    e8f0:	1000021e 	bne	r2,zero,e8fc <alt_up_audio_record_l+0x40>
		return 0;
    e8f4:	e03fff15 	stw	zero,-4(fp)
    e8f8:	00000606 	br	e914 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    e8fc:	e13ffc17 	ldw	r4,-16(fp)
    e900:	e17ffd17 	ldw	r5,-12(fp)
    e904:	e1bffe17 	ldw	r6,-8(fp)
    e908:	000f883a 	mov	r7,zero
    e90c:	000ea800 	call	ea80 <alt_up_audio_read_fifo>
    e910:	e0bfff15 	stw	r2,-4(fp)
    e914:	e0bfff17 	ldw	r2,-4(fp)
}
    e918:	e037883a 	mov	sp,fp
    e91c:	dfc00117 	ldw	ra,4(sp)
    e920:	df000017 	ldw	fp,0(sp)
    e924:	dec00204 	addi	sp,sp,8
    e928:	f800283a 	ret

0000e92c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    e92c:	defffb04 	addi	sp,sp,-20
    e930:	df000415 	stw	fp,16(sp)
    e934:	df000404 	addi	fp,sp,16
    e938:	e13ffd15 	stw	r4,-12(fp)
    e93c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    e940:	e0bffd17 	ldw	r2,-12(fp)
    e944:	10800a17 	ldw	r2,40(r2)
    e948:	10800104 	addi	r2,r2,4
    e94c:	10800037 	ldwio	r2,0(r2)
    e950:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    e954:	e0bffe17 	ldw	r2,-8(fp)
    e958:	1004c03a 	cmpne	r2,r2,zero
    e95c:	1000051e 	bne	r2,zero,e974 <alt_up_audio_write_fifo_space+0x48>
    e960:	e0bffc17 	ldw	r2,-16(fp)
    e964:	10bfc02c 	andhi	r2,r2,65280
    e968:	1004d63a 	srli	r2,r2,24
    e96c:	e0bfff15 	stw	r2,-4(fp)
    e970:	00000406 	br	e984 <alt_up_audio_write_fifo_space+0x58>
    e974:	e0bffc17 	ldw	r2,-16(fp)
    e978:	10803fec 	andhi	r2,r2,255
    e97c:	1004d43a 	srli	r2,r2,16
    e980:	e0bfff15 	stw	r2,-4(fp)
    e984:	e0bfff17 	ldw	r2,-4(fp)
    e988:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    e98c:	e0bffc17 	ldw	r2,-16(fp)
}
    e990:	e037883a 	mov	sp,fp
    e994:	df000017 	ldw	fp,0(sp)
    e998:	dec00104 	addi	sp,sp,4
    e99c:	f800283a 	ret

0000e9a0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    e9a0:	defff904 	addi	sp,sp,-28
    e9a4:	dfc00615 	stw	ra,24(sp)
    e9a8:	df000515 	stw	fp,20(sp)
    e9ac:	df000504 	addi	fp,sp,20
    e9b0:	e13ffc15 	stw	r4,-16(fp)
    e9b4:	e17ffd15 	stw	r5,-12(fp)
    e9b8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    e9bc:	e13ffc17 	ldw	r4,-16(fp)
    e9c0:	01400044 	movi	r5,1
    e9c4:	000e92c0 	call	e92c <alt_up_audio_write_fifo_space>
    e9c8:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    e9cc:	e0bffb17 	ldw	r2,-20(fp)
    e9d0:	10801868 	cmpgeui	r2,r2,97
    e9d4:	1000021e 	bne	r2,zero,e9e0 <alt_up_audio_play_r+0x40>
		return 0;
    e9d8:	e03fff15 	stw	zero,-4(fp)
    e9dc:	00000606 	br	e9f8 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    e9e0:	e13ffc17 	ldw	r4,-16(fp)
    e9e4:	e17ffd17 	ldw	r5,-12(fp)
    e9e8:	e1bffe17 	ldw	r6,-8(fp)
    e9ec:	01c00044 	movi	r7,1
    e9f0:	000eb840 	call	eb84 <alt_up_audio_write_fifo>
    e9f4:	e0bfff15 	stw	r2,-4(fp)
    e9f8:	e0bfff17 	ldw	r2,-4(fp)
}
    e9fc:	e037883a 	mov	sp,fp
    ea00:	dfc00117 	ldw	ra,4(sp)
    ea04:	df000017 	ldw	fp,0(sp)
    ea08:	dec00204 	addi	sp,sp,8
    ea0c:	f800283a 	ret

0000ea10 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    ea10:	defff904 	addi	sp,sp,-28
    ea14:	dfc00615 	stw	ra,24(sp)
    ea18:	df000515 	stw	fp,20(sp)
    ea1c:	df000504 	addi	fp,sp,20
    ea20:	e13ffc15 	stw	r4,-16(fp)
    ea24:	e17ffd15 	stw	r5,-12(fp)
    ea28:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    ea2c:	e13ffc17 	ldw	r4,-16(fp)
    ea30:	000b883a 	mov	r5,zero
    ea34:	000e92c0 	call	e92c <alt_up_audio_write_fifo_space>
    ea38:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    ea3c:	e0bffb17 	ldw	r2,-20(fp)
    ea40:	10801868 	cmpgeui	r2,r2,97
    ea44:	1000021e 	bne	r2,zero,ea50 <alt_up_audio_play_l+0x40>
		return 0;
    ea48:	e03fff15 	stw	zero,-4(fp)
    ea4c:	00000606 	br	ea68 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    ea50:	e13ffc17 	ldw	r4,-16(fp)
    ea54:	e17ffd17 	ldw	r5,-12(fp)
    ea58:	e1bffe17 	ldw	r6,-8(fp)
    ea5c:	000f883a 	mov	r7,zero
    ea60:	000eb840 	call	eb84 <alt_up_audio_write_fifo>
    ea64:	e0bfff15 	stw	r2,-4(fp)
    ea68:	e0bfff17 	ldw	r2,-4(fp)
}
    ea6c:	e037883a 	mov	sp,fp
    ea70:	dfc00117 	ldw	ra,4(sp)
    ea74:	df000017 	ldw	fp,0(sp)
    ea78:	dec00204 	addi	sp,sp,8
    ea7c:	f800283a 	ret

0000ea80 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    ea80:	defff604 	addi	sp,sp,-40
    ea84:	df000915 	stw	fp,36(sp)
    ea88:	df000904 	addi	fp,sp,36
    ea8c:	e13ff915 	stw	r4,-28(fp)
    ea90:	e17ffa15 	stw	r5,-24(fp)
    ea94:	e1bffb15 	stw	r6,-20(fp)
    ea98:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    ea9c:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    eaa0:	00003006 	br	eb64 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    eaa4:	e0bff917 	ldw	r2,-28(fp)
    eaa8:	10800a17 	ldw	r2,40(r2)
    eaac:	10800104 	addi	r2,r2,4
    eab0:	10800037 	ldwio	r2,0(r2)
    eab4:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    eab8:	e0bffc17 	ldw	r2,-16(fp)
    eabc:	1004c03a 	cmpne	r2,r2,zero
    eac0:	1000051e 	bne	r2,zero,ead8 <alt_up_audio_read_fifo+0x58>
    eac4:	e0bff817 	ldw	r2,-32(fp)
    eac8:	10bfc00c 	andi	r2,r2,65280
    eacc:	1004d23a 	srli	r2,r2,8
    ead0:	e0bfff15 	stw	r2,-4(fp)
    ead4:	00000306 	br	eae4 <alt_up_audio_read_fifo+0x64>
    ead8:	e0bff817 	ldw	r2,-32(fp)
    eadc:	10803fcc 	andi	r2,r2,255
    eae0:	e0bfff15 	stw	r2,-4(fp)
    eae4:	e0bfff17 	ldw	r2,-4(fp)
    eae8:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    eaec:	e0bff817 	ldw	r2,-32(fp)
    eaf0:	1005003a 	cmpeq	r2,r2,zero
    eaf4:	10001e1e 	bne	r2,zero,eb70 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    eaf8:	e0bff717 	ldw	r2,-36(fp)
    eafc:	1085883a 	add	r2,r2,r2
    eb00:	1085883a 	add	r2,r2,r2
    eb04:	1007883a 	mov	r3,r2
    eb08:	e0bffa17 	ldw	r2,-24(fp)
    eb0c:	1887883a 	add	r3,r3,r2
    eb10:	e0fffe15 	stw	r3,-8(fp)
    eb14:	e0bffc17 	ldw	r2,-16(fp)
    eb18:	1004c03a 	cmpne	r2,r2,zero
    eb1c:	1000061e 	bne	r2,zero,eb38 <alt_up_audio_read_fifo+0xb8>
    eb20:	e0bff917 	ldw	r2,-28(fp)
    eb24:	10800a17 	ldw	r2,40(r2)
    eb28:	10800204 	addi	r2,r2,8
    eb2c:	10800037 	ldwio	r2,0(r2)
    eb30:	e0bffd15 	stw	r2,-12(fp)
    eb34:	00000506 	br	eb4c <alt_up_audio_read_fifo+0xcc>
    eb38:	e0bff917 	ldw	r2,-28(fp)
    eb3c:	10800a17 	ldw	r2,40(r2)
    eb40:	10800304 	addi	r2,r2,12
    eb44:	10800037 	ldwio	r2,0(r2)
    eb48:	e0bffd15 	stw	r2,-12(fp)
    eb4c:	e0fffd17 	ldw	r3,-12(fp)
    eb50:	e0bffe17 	ldw	r2,-8(fp)
    eb54:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    eb58:	e0bff717 	ldw	r2,-36(fp)
    eb5c:	10800044 	addi	r2,r2,1
    eb60:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    eb64:	e0fff717 	ldw	r3,-36(fp)
    eb68:	e0bffb17 	ldw	r2,-20(fp)
    eb6c:	18bfcd16 	blt	r3,r2,eaa4 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    eb70:	e0bff717 	ldw	r2,-36(fp)
}
    eb74:	e037883a 	mov	sp,fp
    eb78:	df000017 	ldw	fp,0(sp)
    eb7c:	dec00104 	addi	sp,sp,4
    eb80:	f800283a 	ret

0000eb84 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    eb84:	defff804 	addi	sp,sp,-32
    eb88:	df000715 	stw	fp,28(sp)
    eb8c:	df000704 	addi	fp,sp,28
    eb90:	e13ffb15 	stw	r4,-20(fp)
    eb94:	e17ffc15 	stw	r5,-16(fp)
    eb98:	e1bffd15 	stw	r6,-12(fp)
    eb9c:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    eba0:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    eba4:	00003a06 	br	ec90 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    eba8:	e0bffb17 	ldw	r2,-20(fp)
    ebac:	10800a17 	ldw	r2,40(r2)
    ebb0:	10800104 	addi	r2,r2,4
    ebb4:	10800037 	ldwio	r2,0(r2)
    ebb8:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    ebbc:	e0bffe17 	ldw	r2,-8(fp)
    ebc0:	1004c03a 	cmpne	r2,r2,zero
    ebc4:	1000051e 	bne	r2,zero,ebdc <alt_up_audio_write_fifo+0x58>
    ebc8:	e0bffa17 	ldw	r2,-24(fp)
    ebcc:	10bfc02c 	andhi	r2,r2,65280
    ebd0:	1004d63a 	srli	r2,r2,24
    ebd4:	e0bfff15 	stw	r2,-4(fp)
    ebd8:	00000406 	br	ebec <alt_up_audio_write_fifo+0x68>
    ebdc:	e0bffa17 	ldw	r2,-24(fp)
    ebe0:	10803fec 	andhi	r2,r2,255
    ebe4:	1004d43a 	srli	r2,r2,16
    ebe8:	e0bfff15 	stw	r2,-4(fp)
    ebec:	e0bfff17 	ldw	r2,-4(fp)
    ebf0:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    ebf4:	e0bffa17 	ldw	r2,-24(fp)
    ebf8:	1005003a 	cmpeq	r2,r2,zero
    ebfc:	1000271e 	bne	r2,zero,ec9c <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    ec00:	e0bffe17 	ldw	r2,-8(fp)
    ec04:	1004c03a 	cmpne	r2,r2,zero
    ec08:	1000111e 	bne	r2,zero,ec50 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    ec0c:	e0bffb17 	ldw	r2,-20(fp)
    ec10:	10800a17 	ldw	r2,40(r2)
    ec14:	11000204 	addi	r4,r2,8
    ec18:	e0bff917 	ldw	r2,-28(fp)
    ec1c:	1085883a 	add	r2,r2,r2
    ec20:	1085883a 	add	r2,r2,r2
    ec24:	1007883a 	mov	r3,r2
    ec28:	e0bffc17 	ldw	r2,-16(fp)
    ec2c:	1885883a 	add	r2,r3,r2
    ec30:	10800017 	ldw	r2,0(r2)
    ec34:	1007883a 	mov	r3,r2
    ec38:	e0bff917 	ldw	r2,-28(fp)
    ec3c:	10800044 	addi	r2,r2,1
    ec40:	e0bff915 	stw	r2,-28(fp)
    ec44:	2005883a 	mov	r2,r4
    ec48:	10c00035 	stwio	r3,0(r2)
    ec4c:	00001006 	br	ec90 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    ec50:	e0bffb17 	ldw	r2,-20(fp)
    ec54:	10800a17 	ldw	r2,40(r2)
    ec58:	11000304 	addi	r4,r2,12
    ec5c:	e0bff917 	ldw	r2,-28(fp)
    ec60:	1085883a 	add	r2,r2,r2
    ec64:	1085883a 	add	r2,r2,r2
    ec68:	1007883a 	mov	r3,r2
    ec6c:	e0bffc17 	ldw	r2,-16(fp)
    ec70:	1885883a 	add	r2,r3,r2
    ec74:	10800017 	ldw	r2,0(r2)
    ec78:	1007883a 	mov	r3,r2
    ec7c:	e0bff917 	ldw	r2,-28(fp)
    ec80:	10800044 	addi	r2,r2,1
    ec84:	e0bff915 	stw	r2,-28(fp)
    ec88:	2005883a 	mov	r2,r4
    ec8c:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    ec90:	e0fff917 	ldw	r3,-28(fp)
    ec94:	e0bffd17 	ldw	r2,-12(fp)
    ec98:	18bfc316 	blt	r3,r2,eba8 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    ec9c:	e0bff917 	ldw	r2,-28(fp)
}
    eca0:	e037883a 	mov	sp,fp
    eca4:	df000017 	ldw	fp,0(sp)
    eca8:	dec00104 	addi	sp,sp,4
    ecac:	f800283a 	ret

0000ecb0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    ecb0:	defffc04 	addi	sp,sp,-16
    ecb4:	df000315 	stw	fp,12(sp)
    ecb8:	df000304 	addi	fp,sp,12
    ecbc:	e13ffd15 	stw	r4,-12(fp)
    ecc0:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    ecc4:	e0bffe17 	ldw	r2,-8(fp)
    ecc8:	1004c03a 	cmpne	r2,r2,zero
    eccc:	1000061e 	bne	r2,zero,ece8 <alt_up_audio_read_fifo_head+0x38>
    ecd0:	e0bffd17 	ldw	r2,-12(fp)
    ecd4:	10800a17 	ldw	r2,40(r2)
    ecd8:	10800204 	addi	r2,r2,8
    ecdc:	10800037 	ldwio	r2,0(r2)
    ece0:	e0bfff15 	stw	r2,-4(fp)
    ece4:	00000506 	br	ecfc <alt_up_audio_read_fifo_head+0x4c>
    ece8:	e0bffd17 	ldw	r2,-12(fp)
    ecec:	10800a17 	ldw	r2,40(r2)
    ecf0:	10800304 	addi	r2,r2,12
    ecf4:	10800037 	ldwio	r2,0(r2)
    ecf8:	e0bfff15 	stw	r2,-4(fp)
    ecfc:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    ed00:	e037883a 	mov	sp,fp
    ed04:	df000017 	ldw	fp,0(sp)
    ed08:	dec00104 	addi	sp,sp,4
    ed0c:	f800283a 	ret

0000ed10 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    ed10:	defffc04 	addi	sp,sp,-16
    ed14:	df000315 	stw	fp,12(sp)
    ed18:	df000304 	addi	fp,sp,12
    ed1c:	e13ffd15 	stw	r4,-12(fp)
    ed20:	e17ffe15 	stw	r5,-8(fp)
    ed24:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    ed28:	e0bfff17 	ldw	r2,-4(fp)
    ed2c:	1004c03a 	cmpne	r2,r2,zero
    ed30:	1000061e 	bne	r2,zero,ed4c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    ed34:	e0bffd17 	ldw	r2,-12(fp)
    ed38:	10800a17 	ldw	r2,40(r2)
    ed3c:	10800204 	addi	r2,r2,8
    ed40:	e0fffe17 	ldw	r3,-8(fp)
    ed44:	10c00035 	stwio	r3,0(r2)
    ed48:	00000506 	br	ed60 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    ed4c:	e0bffd17 	ldw	r2,-12(fp)
    ed50:	10800a17 	ldw	r2,40(r2)
    ed54:	10800304 	addi	r2,r2,12
    ed58:	e0fffe17 	ldw	r3,-8(fp)
    ed5c:	10c00035 	stwio	r3,0(r2)
}
    ed60:	e037883a 	mov	sp,fp
    ed64:	df000017 	ldw	fp,0(sp)
    ed68:	dec00104 	addi	sp,sp,4
    ed6c:	f800283a 	ret

0000ed70 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    ed70:	defffc04 	addi	sp,sp,-16
    ed74:	df000315 	stw	fp,12(sp)
    ed78:	df000304 	addi	fp,sp,12
    ed7c:	e13ffe15 	stw	r4,-8(fp)
    ed80:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    ed84:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    ed88:	e0bfff17 	ldw	r2,-4(fp)
    ed8c:	1004c03a 	cmpne	r2,r2,zero
    ed90:	1000061e 	bne	r2,zero,edac <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    ed94:	e0bffe17 	ldw	r2,-8(fp)
    ed98:	1007883a 	mov	r3,r2
    ed9c:	e0bffd03 	ldbu	r2,-12(fp)
    eda0:	10c4b03a 	or	r2,r2,r3
    eda4:	e0bffd05 	stb	r2,-12(fp)
    eda8:	00000806 	br	edcc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    edac:	e0bffe17 	ldw	r2,-8(fp)
    edb0:	1007883a 	mov	r3,r2
    edb4:	e0bffd03 	ldbu	r2,-12(fp)
    edb8:	10c4b03a 	or	r2,r2,r3
    edbc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    edc0:	e0bffd03 	ldbu	r2,-12(fp)
    edc4:	10801014 	ori	r2,r2,64
    edc8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    edcc:	e0fffd03 	ldbu	r3,-12(fp)
    edd0:	00bfe004 	movi	r2,-128
    edd4:	1884b03a 	or	r2,r3,r2
    edd8:	10803fcc 	andi	r2,r2,255
}
    eddc:	e037883a 	mov	sp,fp
    ede0:	df000017 	ldw	fp,0(sp)
    ede4:	dec00104 	addi	sp,sp,4
    ede8:	f800283a 	ret

0000edec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    edec:	defffd04 	addi	sp,sp,-12
    edf0:	df000215 	stw	fp,8(sp)
    edf4:	df000204 	addi	fp,sp,8
    edf8:	e13ffe15 	stw	r4,-8(fp)
    edfc:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    ee00:	e0bffe17 	ldw	r2,-8(fp)
    ee04:	10800a17 	ldw	r2,40(r2)
    ee08:	e0ffff03 	ldbu	r3,-4(fp)
    ee0c:	10c00025 	stbio	r3,0(r2)
}
    ee10:	e037883a 	mov	sp,fp
    ee14:	df000017 	ldw	fp,0(sp)
    ee18:	dec00104 	addi	sp,sp,4
    ee1c:	f800283a 	ret

0000ee20 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    ee20:	defffe04 	addi	sp,sp,-8
    ee24:	df000115 	stw	fp,4(sp)
    ee28:	df000104 	addi	fp,sp,4
    ee2c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    ee30:	e0bfff17 	ldw	r2,-4(fp)
    ee34:	10800a17 	ldw	r2,40(r2)
    ee38:	1007883a 	mov	r3,r2
    ee3c:	00800044 	movi	r2,1
    ee40:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    ee44:	e037883a 	mov	sp,fp
    ee48:	df000017 	ldw	fp,0(sp)
    ee4c:	dec00104 	addi	sp,sp,4
    ee50:	f800283a 	ret

0000ee54 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    ee54:	defffc04 	addi	sp,sp,-16
    ee58:	dfc00315 	stw	ra,12(sp)
    ee5c:	df000215 	stw	fp,8(sp)
    ee60:	df000204 	addi	fp,sp,8
    ee64:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    ee68:	e13fff17 	ldw	r4,-4(fp)
    ee6c:	01400074 	movhi	r5,1
    ee70:	29566204 	addi	r5,r5,22920
    ee74:	00120500 	call	12050 <alt_find_dev>
    ee78:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ee7c:	e0bffe17 	ldw	r2,-8(fp)
}
    ee80:	e037883a 	mov	sp,fp
    ee84:	dfc00117 	ldw	ra,4(sp)
    ee88:	df000017 	ldw	fp,0(sp)
    ee8c:	dec00204 	addi	sp,sp,8
    ee90:	f800283a 	ret

0000ee94 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    ee94:	defffb04 	addi	sp,sp,-20
    ee98:	df000415 	stw	fp,16(sp)
    ee9c:	df000404 	addi	fp,sp,16
    eea0:	e13ffd15 	stw	r4,-12(fp)
    eea4:	e17ffe15 	stw	r5,-8(fp)
    eea8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    eeac:	e03ffc15 	stw	zero,-16(fp)
    eeb0:	00000f06 	br	eef0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    eeb4:	e0bffd17 	ldw	r2,-12(fp)
    eeb8:	10800a17 	ldw	r2,40(r2)
    eebc:	11000044 	addi	r4,r2,1
    eec0:	e0fffc17 	ldw	r3,-16(fp)
    eec4:	e0bffe17 	ldw	r2,-8(fp)
    eec8:	1885883a 	add	r2,r3,r2
    eecc:	10800003 	ldbu	r2,0(r2)
    eed0:	10c03fcc 	andi	r3,r2,255
    eed4:	18c0201c 	xori	r3,r3,128
    eed8:	18ffe004 	addi	r3,r3,-128
    eedc:	2005883a 	mov	r2,r4
    eee0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    eee4:	e0bffc17 	ldw	r2,-16(fp)
    eee8:	10800044 	addi	r2,r2,1
    eeec:	e0bffc15 	stw	r2,-16(fp)
    eef0:	e0fffc17 	ldw	r3,-16(fp)
    eef4:	e0bfff17 	ldw	r2,-4(fp)
    eef8:	18bfee36 	bltu	r3,r2,eeb4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    eefc:	e037883a 	mov	sp,fp
    ef00:	df000017 	ldw	fp,0(sp)
    ef04:	dec00104 	addi	sp,sp,4
    ef08:	f800283a 	ret

0000ef0c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    ef0c:	defffd04 	addi	sp,sp,-12
    ef10:	df000215 	stw	fp,8(sp)
    ef14:	df000204 	addi	fp,sp,8
    ef18:	e13ffe15 	stw	r4,-8(fp)
    ef1c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    ef20:	00000d06 	br	ef58 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    ef24:	e0bffe17 	ldw	r2,-8(fp)
    ef28:	10800a17 	ldw	r2,40(r2)
    ef2c:	11000044 	addi	r4,r2,1
    ef30:	e0bfff17 	ldw	r2,-4(fp)
    ef34:	10800003 	ldbu	r2,0(r2)
    ef38:	10c03fcc 	andi	r3,r2,255
    ef3c:	18c0201c 	xori	r3,r3,128
    ef40:	18ffe004 	addi	r3,r3,-128
    ef44:	2005883a 	mov	r2,r4
    ef48:	10c00025 	stbio	r3,0(r2)
		++ptr;
    ef4c:	e0bfff17 	ldw	r2,-4(fp)
    ef50:	10800044 	addi	r2,r2,1
    ef54:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    ef58:	e0bfff17 	ldw	r2,-4(fp)
    ef5c:	10800003 	ldbu	r2,0(r2)
    ef60:	10803fcc 	andi	r2,r2,255
    ef64:	1080201c 	xori	r2,r2,128
    ef68:	10bfe004 	addi	r2,r2,-128
    ef6c:	1004c03a 	cmpne	r2,r2,zero
    ef70:	103fec1e 	bne	r2,zero,ef24 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    ef74:	e037883a 	mov	sp,fp
    ef78:	df000017 	ldw	fp,0(sp)
    ef7c:	dec00104 	addi	sp,sp,4
    ef80:	f800283a 	ret

0000ef84 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    ef84:	defffb04 	addi	sp,sp,-20
    ef88:	dfc00415 	stw	ra,16(sp)
    ef8c:	df000315 	stw	fp,12(sp)
    ef90:	df000304 	addi	fp,sp,12
    ef94:	e13ffd15 	stw	r4,-12(fp)
    ef98:	e17ffe15 	stw	r5,-8(fp)
    ef9c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    efa0:	e0bffd17 	ldw	r2,-12(fp)
    efa4:	10800017 	ldw	r2,0(r2)
    efa8:	1009883a 	mov	r4,r2
    efac:	e1bfff17 	ldw	r6,-4(fp)
    efb0:	e17ffe17 	ldw	r5,-8(fp)
    efb4:	000ee940 	call	ee94 <alt_up_character_lcd_write>
	return 0;
    efb8:	0005883a 	mov	r2,zero
}
    efbc:	e037883a 	mov	sp,fp
    efc0:	dfc00117 	ldw	ra,4(sp)
    efc4:	df000017 	ldw	fp,0(sp)
    efc8:	dec00204 	addi	sp,sp,8
    efcc:	f800283a 	ret

0000efd0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    efd0:	defff904 	addi	sp,sp,-28
    efd4:	dfc00615 	stw	ra,24(sp)
    efd8:	df000515 	stw	fp,20(sp)
    efdc:	df000504 	addi	fp,sp,20
    efe0:	e13ffc15 	stw	r4,-16(fp)
    efe4:	e17ffd15 	stw	r5,-12(fp)
    efe8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    efec:	e0bffd17 	ldw	r2,-12(fp)
    eff0:	10800a28 	cmpgeui	r2,r2,40
    eff4:	1000031e 	bne	r2,zero,f004 <alt_up_character_lcd_set_cursor_pos+0x34>
    eff8:	e0bffe17 	ldw	r2,-8(fp)
    effc:	108000b0 	cmpltui	r2,r2,2
    f000:	1000031e 	bne	r2,zero,f010 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    f004:	00bfffc4 	movi	r2,-1
    f008:	e0bfff15 	stw	r2,-4(fp)
    f00c:	00000806 	br	f030 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f010:	e13ffd17 	ldw	r4,-12(fp)
    f014:	e17ffe17 	ldw	r5,-8(fp)
    f018:	000ed700 	call	ed70 <get_DDRAM_addr>
    f01c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    f020:	e17ffb03 	ldbu	r5,-20(fp)
    f024:	e13ffc17 	ldw	r4,-16(fp)
    f028:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
	return 0;
    f02c:	e03fff15 	stw	zero,-4(fp)
    f030:	e0bfff17 	ldw	r2,-4(fp)
}
    f034:	e037883a 	mov	sp,fp
    f038:	dfc00117 	ldw	ra,4(sp)
    f03c:	df000017 	ldw	fp,0(sp)
    f040:	dec00204 	addi	sp,sp,8
    f044:	f800283a 	ret

0000f048 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f048:	defff904 	addi	sp,sp,-28
    f04c:	dfc00615 	stw	ra,24(sp)
    f050:	df000515 	stw	fp,20(sp)
    f054:	df000504 	addi	fp,sp,20
    f058:	e13ffc15 	stw	r4,-16(fp)
    f05c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f060:	e0bffd17 	ldw	r2,-12(fp)
    f064:	1005003a 	cmpeq	r2,r2,zero
    f068:	10001e1e 	bne	r2,zero,f0e4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    f06c:	e0bffd17 	ldw	r2,-12(fp)
    f070:	10800050 	cmplti	r2,r2,1
    f074:	1000031e 	bne	r2,zero,f084 <alt_up_character_lcd_shift_cursor+0x3c>
    f078:	00800504 	movi	r2,20
    f07c:	e0bfff05 	stb	r2,-4(fp)
    f080:	00000206 	br	f08c <alt_up_character_lcd_shift_cursor+0x44>
    f084:	00c00404 	movi	r3,16
    f088:	e0ffff05 	stb	r3,-4(fp)
    f08c:	e0bfff03 	ldbu	r2,-4(fp)
    f090:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    f094:	e0fffd17 	ldw	r3,-12(fp)
    f098:	e0fffe15 	stw	r3,-8(fp)
    f09c:	e0fffe17 	ldw	r3,-8(fp)
    f0a0:	1804403a 	cmpge	r2,r3,zero
    f0a4:	1000031e 	bne	r2,zero,f0b4 <alt_up_character_lcd_shift_cursor+0x6c>
    f0a8:	e0bffe17 	ldw	r2,-8(fp)
    f0ac:	0085c83a 	sub	r2,zero,r2
    f0b0:	e0bffe15 	stw	r2,-8(fp)
    f0b4:	e0fffe17 	ldw	r3,-8(fp)
    f0b8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    f0bc:	00000306 	br	f0cc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f0c0:	e17ffb43 	ldbu	r5,-19(fp)
    f0c4:	e13ffc17 	ldw	r4,-16(fp)
    f0c8:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f0cc:	e0bffb03 	ldbu	r2,-20(fp)
    f0d0:	10bfffc4 	addi	r2,r2,-1
    f0d4:	e0bffb05 	stb	r2,-20(fp)
    f0d8:	e0bffb03 	ldbu	r2,-20(fp)
    f0dc:	10803fd8 	cmpnei	r2,r2,255
    f0e0:	103ff71e 	bne	r2,zero,f0c0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    f0e4:	e037883a 	mov	sp,fp
    f0e8:	dfc00117 	ldw	ra,4(sp)
    f0ec:	df000017 	ldw	fp,0(sp)
    f0f0:	dec00204 	addi	sp,sp,8
    f0f4:	f800283a 	ret

0000f0f8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f0f8:	defff904 	addi	sp,sp,-28
    f0fc:	dfc00615 	stw	ra,24(sp)
    f100:	df000515 	stw	fp,20(sp)
    f104:	df000504 	addi	fp,sp,20
    f108:	e13ffc15 	stw	r4,-16(fp)
    f10c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f110:	e0bffd17 	ldw	r2,-12(fp)
    f114:	1005003a 	cmpeq	r2,r2,zero
    f118:	10001e1e 	bne	r2,zero,f194 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    f11c:	e0bffd17 	ldw	r2,-12(fp)
    f120:	10800050 	cmplti	r2,r2,1
    f124:	1000031e 	bne	r2,zero,f134 <alt_up_character_lcd_shift_display+0x3c>
    f128:	00800704 	movi	r2,28
    f12c:	e0bfff05 	stb	r2,-4(fp)
    f130:	00000206 	br	f13c <alt_up_character_lcd_shift_display+0x44>
    f134:	00c00604 	movi	r3,24
    f138:	e0ffff05 	stb	r3,-4(fp)
    f13c:	e0bfff03 	ldbu	r2,-4(fp)
    f140:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    f144:	e0fffd17 	ldw	r3,-12(fp)
    f148:	e0fffe15 	stw	r3,-8(fp)
    f14c:	e0fffe17 	ldw	r3,-8(fp)
    f150:	1804403a 	cmpge	r2,r3,zero
    f154:	1000031e 	bne	r2,zero,f164 <alt_up_character_lcd_shift_display+0x6c>
    f158:	e0bffe17 	ldw	r2,-8(fp)
    f15c:	0085c83a 	sub	r2,zero,r2
    f160:	e0bffe15 	stw	r2,-8(fp)
    f164:	e0fffe17 	ldw	r3,-8(fp)
    f168:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    f16c:	00000306 	br	f17c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f170:	e17ffb43 	ldbu	r5,-19(fp)
    f174:	e13ffc17 	ldw	r4,-16(fp)
    f178:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f17c:	e0bffb03 	ldbu	r2,-20(fp)
    f180:	10bfffc4 	addi	r2,r2,-1
    f184:	e0bffb05 	stb	r2,-20(fp)
    f188:	e0bffb03 	ldbu	r2,-20(fp)
    f18c:	10803fd8 	cmpnei	r2,r2,255
    f190:	103ff71e 	bne	r2,zero,f170 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    f194:	e037883a 	mov	sp,fp
    f198:	dfc00117 	ldw	ra,4(sp)
    f19c:	df000017 	ldw	fp,0(sp)
    f1a0:	dec00204 	addi	sp,sp,8
    f1a4:	f800283a 	ret

0000f1a8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    f1a8:	defff904 	addi	sp,sp,-28
    f1ac:	dfc00615 	stw	ra,24(sp)
    f1b0:	df000515 	stw	fp,20(sp)
    f1b4:	df000504 	addi	fp,sp,20
    f1b8:	e13ffc15 	stw	r4,-16(fp)
    f1bc:	e17ffd15 	stw	r5,-12(fp)
    f1c0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    f1c4:	e0bffd17 	ldw	r2,-12(fp)
    f1c8:	10800a28 	cmpgeui	r2,r2,40
    f1cc:	1000031e 	bne	r2,zero,f1dc <alt_up_character_lcd_erase_pos+0x34>
    f1d0:	e0bffe17 	ldw	r2,-8(fp)
    f1d4:	108000b0 	cmpltui	r2,r2,2
    f1d8:	1000031e 	bne	r2,zero,f1e8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    f1dc:	00bfffc4 	movi	r2,-1
    f1e0:	e0bfff15 	stw	r2,-4(fp)
    f1e4:	00000e06 	br	f220 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f1e8:	e13ffd17 	ldw	r4,-12(fp)
    f1ec:	e17ffe17 	ldw	r5,-8(fp)
    f1f0:	000ed700 	call	ed70 <get_DDRAM_addr>
    f1f4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    f1f8:	e17ffb03 	ldbu	r5,-20(fp)
    f1fc:	e13ffc17 	ldw	r4,-16(fp)
    f200:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    f204:	e0bffc17 	ldw	r2,-16(fp)
    f208:	10800a17 	ldw	r2,40(r2)
    f20c:	10800044 	addi	r2,r2,1
    f210:	1007883a 	mov	r3,r2
    f214:	00800084 	movi	r2,2
    f218:	18800025 	stbio	r2,0(r3)
	return 0;
    f21c:	e03fff15 	stw	zero,-4(fp)
    f220:	e0bfff17 	ldw	r2,-4(fp)
}
    f224:	e037883a 	mov	sp,fp
    f228:	dfc00117 	ldw	ra,4(sp)
    f22c:	df000017 	ldw	fp,0(sp)
    f230:	dec00204 	addi	sp,sp,8
    f234:	f800283a 	ret

0000f238 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    f238:	defffd04 	addi	sp,sp,-12
    f23c:	dfc00215 	stw	ra,8(sp)
    f240:	df000115 	stw	fp,4(sp)
    f244:	df000104 	addi	fp,sp,4
    f248:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    f24c:	e13fff17 	ldw	r4,-4(fp)
    f250:	01400304 	movi	r5,12
    f254:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
}
    f258:	e037883a 	mov	sp,fp
    f25c:	dfc00117 	ldw	ra,4(sp)
    f260:	df000017 	ldw	fp,0(sp)
    f264:	dec00204 	addi	sp,sp,8
    f268:	f800283a 	ret

0000f26c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    f26c:	defffd04 	addi	sp,sp,-12
    f270:	dfc00215 	stw	ra,8(sp)
    f274:	df000115 	stw	fp,4(sp)
    f278:	df000104 	addi	fp,sp,4
    f27c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    f280:	e13fff17 	ldw	r4,-4(fp)
    f284:	014003c4 	movi	r5,15
    f288:	000edec0 	call	edec <alt_up_character_lcd_send_cmd>
}
    f28c:	e037883a 	mov	sp,fp
    f290:	dfc00117 	ldw	ra,4(sp)
    f294:	df000017 	ldw	fp,0(sp)
    f298:	dec00204 	addi	sp,sp,8
    f29c:	f800283a 	ret

0000f2a0 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    f2a0:	defffb04 	addi	sp,sp,-20
    f2a4:	dfc00415 	stw	ra,16(sp)
    f2a8:	df000315 	stw	fp,12(sp)
    f2ac:	df000304 	addi	fp,sp,12
    f2b0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    f2b4:	e0bfff17 	ldw	r2,-4(fp)
    f2b8:	10800a17 	ldw	r2,40(r2)
    f2bc:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    f2c0:	e13ffe17 	ldw	r4,-8(fp)
    f2c4:	014007c4 	movi	r5,31
    f2c8:	000d883a 	mov	r6,zero
    f2cc:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    f2d0:	e13ffe17 	ldw	r4,-8(fp)
    f2d4:	000b883a 	mov	r5,zero
    f2d8:	01800044 	movi	r6,1
    f2dc:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	usleep(10);
    f2e0:	01000284 	movi	r4,10
    f2e4:	00126b80 	call	126b8 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    f2e8:	e13ffe17 	ldw	r4,-8(fp)
    f2ec:	000b883a 	mov	r5,zero
    f2f0:	000d883a 	mov	r6,zero
    f2f4:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	usleep(1);
    f2f8:	01000044 	movi	r4,1
    f2fc:	00126b80 	call	126b8 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    f300:	e03ffd15 	stw	zero,-12(fp)
    f304:	00000e06 	br	f340 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    f308:	e0bffd17 	ldw	r2,-12(fp)
    f30c:	10800404 	addi	r2,r2,16
    f310:	100b883a 	mov	r5,r2
    f314:	e0fffd17 	ldw	r3,-12(fp)
    f318:	e0bfff17 	ldw	r2,-4(fp)
    f31c:	1885883a 	add	r2,r3,r2
    f320:	10800d04 	addi	r2,r2,52
    f324:	10800003 	ldbu	r2,0(r2)
    f328:	11803fcc 	andi	r6,r2,255
    f32c:	e13ffe17 	ldw	r4,-8(fp)
    f330:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    f334:	e0bffd17 	ldw	r2,-12(fp)
    f338:	10800044 	addi	r2,r2,1
    f33c:	e0bffd15 	stw	r2,-12(fp)
    f340:	e0bffd17 	ldw	r2,-12(fp)
    f344:	10800190 	cmplti	r2,r2,6
    f348:	103fef1e 	bne	r2,zero,f308 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    f34c:	e13ffe17 	ldw	r4,-8(fp)
    f350:	01403f84 	movi	r5,254
    f354:	01800fc4 	movi	r6,63
    f358:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    f35c:	e13ffe17 	ldw	r4,-8(fp)
    f360:	01400044 	movi	r5,1
    f364:	01800b04 	movi	r6,44
    f368:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    f36c:	e13ffe17 	ldw	r4,-8(fp)
    f370:	01403fc4 	movi	r5,255
    f374:	01802004 	movi	r6,128
    f378:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    f37c:	e13ffe17 	ldw	r4,-8(fp)
    f380:	01400144 	movi	r5,5
    f384:	01800e44 	movi	r6,57
    f388:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    f38c:	e13ffe17 	ldw	r4,-8(fp)
    f390:	01400c04 	movi	r5,48
    f394:	018000c4 	movi	r6,3
    f398:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	return;
}
    f39c:	e037883a 	mov	sp,fp
    f3a0:	dfc00117 	ldw	ra,4(sp)
    f3a4:	df000017 	ldw	fp,0(sp)
    f3a8:	dec00204 	addi	sp,sp,8
    f3ac:	f800283a 	ret

0000f3b0 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    f3b0:	defffc04 	addi	sp,sp,-16
    f3b4:	dfc00315 	stw	ra,12(sp)
    f3b8:	df000215 	stw	fp,8(sp)
    f3bc:	df000204 	addi	fp,sp,8
    f3c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    f3c4:	e13fff17 	ldw	r4,-4(fp)
    f3c8:	01400074 	movhi	r5,1
    f3cc:	29566204 	addi	r5,r5,22920
    f3d0:	00120500 	call	12050 <alt_find_dev>
    f3d4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f3d8:	e0bffe17 	ldw	r2,-8(fp)
}
    f3dc:	e037883a 	mov	sp,fp
    f3e0:	dfc00117 	ldw	ra,4(sp)
    f3e4:	df000017 	ldw	fp,0(sp)
    f3e8:	dec00204 	addi	sp,sp,8
    f3ec:	f800283a 	ret

0000f3f0 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    f3f0:	defffd04 	addi	sp,sp,-12
    f3f4:	df000215 	stw	fp,8(sp)
    f3f8:	df000204 	addi	fp,sp,8
    f3fc:	e13ffe15 	stw	r4,-8(fp)
    f400:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    f404:	e0bffe17 	ldw	r2,-8(fp)
    f408:	e0ffff17 	ldw	r3,-4(fp)
    f40c:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    f410:	e0bffe17 	ldw	r2,-8(fp)
    f414:	10800104 	addi	r2,r2,4
    f418:	10800037 	ldwio	r2,0(r2)
}
    f41c:	e037883a 	mov	sp,fp
    f420:	df000017 	ldw	fp,0(sp)
    f424:	dec00104 	addi	sp,sp,4
    f428:	f800283a 	ret

0000f42c <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    f42c:	defffc04 	addi	sp,sp,-16
    f430:	df000315 	stw	fp,12(sp)
    f434:	df000304 	addi	fp,sp,12
    f438:	e13ffd15 	stw	r4,-12(fp)
    f43c:	e17ffe15 	stw	r5,-8(fp)
    f440:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    f444:	e0bffd17 	ldw	r2,-12(fp)
    f448:	e0fffe17 	ldw	r3,-8(fp)
    f44c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    f450:	e0bffd17 	ldw	r2,-12(fp)
    f454:	10800104 	addi	r2,r2,4
    f458:	e0ffff17 	ldw	r3,-4(fp)
    f45c:	10c00035 	stwio	r3,0(r2)
}
    f460:	e037883a 	mov	sp,fp
    f464:	df000017 	ldw	fp,0(sp)
    f468:	dec00104 	addi	sp,sp,4
    f46c:	f800283a 	ret

0000f470 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    f470:	defffa04 	addi	sp,sp,-24
    f474:	dfc00515 	stw	ra,20(sp)
    f478:	df000415 	stw	fp,16(sp)
    f47c:	df000404 	addi	fp,sp,16
    f480:	e13ffe15 	stw	r4,-8(fp)
    f484:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    f488:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    f48c:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    f490:	e0bfff17 	ldw	r2,-4(fp)
    f494:	11801014 	ori	r6,r2,64
    f498:	e13ffe17 	ldw	r4,-8(fp)
    f49c:	01400304 	movi	r5,12
    f4a0:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    f4a4:	e13ffe17 	ldw	r4,-8(fp)
    f4a8:	014002c4 	movi	r5,11
    f4ac:	01800304 	movi	r6,12
    f4b0:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    f4b4:	01000044 	movi	r4,1
    f4b8:	00126b80 	call	126b8 <usleep>
		timeout++;
    f4bc:	e0bffc17 	ldw	r2,-16(fp)
    f4c0:	10800044 	addi	r2,r2,1
    f4c4:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    f4c8:	e0bffc17 	ldw	r2,-16(fp)
    f4cc:	10800ca8 	cmpgeui	r2,r2,50
    f4d0:	1000071e 	bne	r2,zero,f4f0 <alt_up_ethernet_phy_reg_read+0x80>
    f4d4:	e13ffe17 	ldw	r4,-8(fp)
    f4d8:	014002c4 	movi	r5,11
    f4dc:	000f3f00 	call	f3f0 <alt_up_ethernet_reg_read>
    f4e0:	1080004c 	andi	r2,r2,1
    f4e4:	10803fcc 	andi	r2,r2,255
    f4e8:	1004c03a 	cmpne	r2,r2,zero
    f4ec:	103ff11e 	bne	r2,zero,f4b4 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    f4f0:	01000044 	movi	r4,1
    f4f4:	00126b80 	call	126b8 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    f4f8:	e13ffe17 	ldw	r4,-8(fp)
    f4fc:	014002c4 	movi	r5,11
    f500:	01800204 	movi	r6,8
    f504:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    f508:	e13ffe17 	ldw	r4,-8(fp)
    f50c:	01400384 	movi	r5,14
    f510:	000f3f00 	call	f3f0 <alt_up_ethernet_reg_read>
    f514:	1004923a 	slli	r2,r2,8
    f518:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    f51c:	e13ffe17 	ldw	r4,-8(fp)
    f520:	01400344 	movi	r5,13
    f524:	000f3f00 	call	f3f0 <alt_up_ethernet_reg_read>
    f528:	1007883a 	mov	r3,r2
    f52c:	e0bffd17 	ldw	r2,-12(fp)
    f530:	10c4b03a 	or	r2,r2,r3
    f534:	e0bffd15 	stw	r2,-12(fp)

	return result;
    f538:	e0bffd17 	ldw	r2,-12(fp)
}
    f53c:	e037883a 	mov	sp,fp
    f540:	dfc00117 	ldw	ra,4(sp)
    f544:	df000017 	ldw	fp,0(sp)
    f548:	dec00204 	addi	sp,sp,8
    f54c:	f800283a 	ret

0000f550 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    f550:	defffa04 	addi	sp,sp,-24
    f554:	dfc00515 	stw	ra,20(sp)
    f558:	df000415 	stw	fp,16(sp)
    f55c:	df000404 	addi	fp,sp,16
    f560:	e13ffd15 	stw	r4,-12(fp)
    f564:	e17ffe15 	stw	r5,-8(fp)
    f568:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    f56c:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    f570:	e0bffe17 	ldw	r2,-8(fp)
    f574:	11801014 	ori	r6,r2,64
    f578:	e13ffd17 	ldw	r4,-12(fp)
    f57c:	01400304 	movi	r5,12
    f580:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    f584:	e0bfff17 	ldw	r2,-4(fp)
    f588:	1004d23a 	srli	r2,r2,8
    f58c:	11803fcc 	andi	r6,r2,255
    f590:	e13ffd17 	ldw	r4,-12(fp)
    f594:	01400384 	movi	r5,14
    f598:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    f59c:	e0bfff17 	ldw	r2,-4(fp)
    f5a0:	11803fcc 	andi	r6,r2,255
    f5a4:	e13ffd17 	ldw	r4,-12(fp)
    f5a8:	01400344 	movi	r5,13
    f5ac:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    f5b0:	e13ffd17 	ldw	r4,-12(fp)
    f5b4:	014002c4 	movi	r5,11
    f5b8:	01800284 	movi	r6,10
    f5bc:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    f5c0:	01000044 	movi	r4,1
    f5c4:	00126b80 	call	126b8 <usleep>
		timeout++;
    f5c8:	e0bffc17 	ldw	r2,-16(fp)
    f5cc:	10800044 	addi	r2,r2,1
    f5d0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    f5d4:	e0bffc17 	ldw	r2,-16(fp)
    f5d8:	10800ca8 	cmpgeui	r2,r2,50
    f5dc:	1000071e 	bne	r2,zero,f5fc <alt_up_ethernet_phy_reg_write+0xac>
    f5e0:	e13ffd17 	ldw	r4,-12(fp)
    f5e4:	014002c4 	movi	r5,11
    f5e8:	000f3f00 	call	f3f0 <alt_up_ethernet_reg_read>
    f5ec:	1080004c 	andi	r2,r2,1
    f5f0:	10803fcc 	andi	r2,r2,255
    f5f4:	1004c03a 	cmpne	r2,r2,zero
    f5f8:	103ff11e 	bne	r2,zero,f5c0 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    f5fc:	01000044 	movi	r4,1
    f600:	00126b80 	call	126b8 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    f604:	e13ffd17 	ldw	r4,-12(fp)
    f608:	014002c4 	movi	r5,11
    f60c:	01800204 	movi	r6,8
    f610:	000f42c0 	call	f42c <alt_up_ethernet_reg_write>
}
    f614:	e037883a 	mov	sp,fp
    f618:	dfc00117 	ldw	ra,4(sp)
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00204 	addi	sp,sp,8
    f624:	f800283a 	ret

0000f628 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    f628:	defffd04 	addi	sp,sp,-12
    f62c:	df000215 	stw	fp,8(sp)
    f630:	df000204 	addi	fp,sp,8
    f634:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    f638:	e0bfff17 	ldw	r2,-4(fp)
    f63c:	10800a17 	ldw	r2,40(r2)
    f640:	10800104 	addi	r2,r2,4
    f644:	10800037 	ldwio	r2,0(r2)
    f648:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    f64c:	e0bffe17 	ldw	r2,-8(fp)
    f650:	10800054 	ori	r2,r2,1
    f654:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	10800a17 	ldw	r2,40(r2)
    f660:	10800104 	addi	r2,r2,4
    f664:	e0fffe17 	ldw	r3,-8(fp)
    f668:	10c00035 	stwio	r3,0(r2)
}
    f66c:	e037883a 	mov	sp,fp
    f670:	df000017 	ldw	fp,0(sp)
    f674:	dec00104 	addi	sp,sp,4
    f678:	f800283a 	ret

0000f67c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    f67c:	defffd04 	addi	sp,sp,-12
    f680:	df000215 	stw	fp,8(sp)
    f684:	df000204 	addi	fp,sp,8
    f688:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    f68c:	e0bfff17 	ldw	r2,-4(fp)
    f690:	10800a17 	ldw	r2,40(r2)
    f694:	10800104 	addi	r2,r2,4
    f698:	10800037 	ldwio	r2,0(r2)
    f69c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    f6a0:	e0fffe17 	ldw	r3,-8(fp)
    f6a4:	00bfff84 	movi	r2,-2
    f6a8:	1884703a 	and	r2,r3,r2
    f6ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    f6b0:	e0bfff17 	ldw	r2,-4(fp)
    f6b4:	10800a17 	ldw	r2,40(r2)
    f6b8:	10800104 	addi	r2,r2,4
    f6bc:	e0fffe17 	ldw	r3,-8(fp)
    f6c0:	10c00035 	stwio	r3,0(r2)
}
    f6c4:	e037883a 	mov	sp,fp
    f6c8:	df000017 	ldw	fp,0(sp)
    f6cc:	dec00104 	addi	sp,sp,4
    f6d0:	f800283a 	ret

0000f6d4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    f6d4:	defffd04 	addi	sp,sp,-12
    f6d8:	df000215 	stw	fp,8(sp)
    f6dc:	df000204 	addi	fp,sp,8
    f6e0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f6e4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    f6e8:	e0bfff17 	ldw	r2,-4(fp)
    f6ec:	10800a17 	ldw	r2,40(r2)
    f6f0:	10800084 	addi	r2,r2,2
    f6f4:	1080002b 	ldhuio	r2,0(r2)
    f6f8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    f6fc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f700:	e037883a 	mov	sp,fp
    f704:	df000017 	ldw	fp,0(sp)
    f708:	dec00104 	addi	sp,sp,4
    f70c:	f800283a 	ret

0000f710 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    f710:	defffd04 	addi	sp,sp,-12
    f714:	df000215 	stw	fp,8(sp)
    f718:	df000204 	addi	fp,sp,8
    f71c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    f720:	e0bfff17 	ldw	r2,-4(fp)
    f724:	10800a17 	ldw	r2,40(r2)
    f728:	10800104 	addi	r2,r2,4
    f72c:	10800037 	ldwio	r2,0(r2)
    f730:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    f734:	e0bffe17 	ldw	r2,-8(fp)
    f738:	10bfffec 	andhi	r2,r2,65535
    f73c:	1004d43a 	srli	r2,r2,16
}
    f740:	e037883a 	mov	sp,fp
    f744:	df000017 	ldw	fp,0(sp)
    f748:	dec00104 	addi	sp,sp,4
    f74c:	f800283a 	ret

0000f750 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    f750:	defffc04 	addi	sp,sp,-16
    f754:	df000315 	stw	fp,12(sp)
    f758:	df000304 	addi	fp,sp,12
    f75c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    f760:	e0bffe17 	ldw	r2,-8(fp)
    f764:	1080800c 	andi	r2,r2,512
    f768:	1004d27a 	srli	r2,r2,9
    f76c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    f770:	e0bffd17 	ldw	r2,-12(fp)
    f774:	1005003a 	cmpeq	r2,r2,zero
    f778:	1000031e 	bne	r2,zero,f788 <alt_up_irda_check_parity+0x38>
    f77c:	00bfffc4 	movi	r2,-1
    f780:	e0bfff15 	stw	r2,-4(fp)
    f784:	00000106 	br	f78c <alt_up_irda_check_parity+0x3c>
    f788:	e03fff15 	stw	zero,-4(fp)
    f78c:	e0bfff17 	ldw	r2,-4(fp)
}
    f790:	e037883a 	mov	sp,fp
    f794:	df000017 	ldw	fp,0(sp)
    f798:	dec00104 	addi	sp,sp,4
    f79c:	f800283a 	ret

0000f7a0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    f7a0:	defffc04 	addi	sp,sp,-16
    f7a4:	df000315 	stw	fp,12(sp)
    f7a8:	df000304 	addi	fp,sp,12
    f7ac:	e13ffe15 	stw	r4,-8(fp)
    f7b0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    f7b4:	e0bffe17 	ldw	r2,-8(fp)
    f7b8:	10800a17 	ldw	r2,40(r2)
    f7bc:	10800037 	ldwio	r2,0(r2)
    f7c0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    f7c4:	e0bffe17 	ldw	r2,-8(fp)
    f7c8:	10800a17 	ldw	r2,40(r2)
    f7cc:	e0ffff03 	ldbu	r3,-4(fp)
    f7d0:	10c00035 	stwio	r3,0(r2)
	return 0;
    f7d4:	0005883a 	mov	r2,zero
}
    f7d8:	e037883a 	mov	sp,fp
    f7dc:	df000017 	ldw	fp,0(sp)
    f7e0:	dec00104 	addi	sp,sp,4
    f7e4:	f800283a 	ret

0000f7e8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    f7e8:	defffa04 	addi	sp,sp,-24
    f7ec:	dfc00515 	stw	ra,20(sp)
    f7f0:	df000415 	stw	fp,16(sp)
    f7f4:	df000404 	addi	fp,sp,16
    f7f8:	e13ffd15 	stw	r4,-12(fp)
    f7fc:	e17ffe15 	stw	r5,-8(fp)
    f800:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	10800a17 	ldw	r2,40(r2)
    f80c:	10800037 	ldwio	r2,0(r2)
    f810:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    f814:	e0bffc17 	ldw	r2,-16(fp)
    f818:	1007883a 	mov	r3,r2
    f81c:	e0bffe17 	ldw	r2,-8(fp)
    f820:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    f824:	e13ffc17 	ldw	r4,-16(fp)
    f828:	000f7500 	call	f750 <alt_up_irda_check_parity>
    f82c:	1007883a 	mov	r3,r2
    f830:	e0bfff17 	ldw	r2,-4(fp)
    f834:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    f838:	e0bffc17 	ldw	r2,-16(fp)
    f83c:	10a0000c 	andi	r2,r2,32768
    f840:	1004d3fa 	srli	r2,r2,15
    f844:	10bfffc4 	addi	r2,r2,-1
}
    f848:	e037883a 	mov	sp,fp
    f84c:	dfc00117 	ldw	ra,4(sp)
    f850:	df000017 	ldw	fp,0(sp)
    f854:	dec00204 	addi	sp,sp,8
    f858:	f800283a 	ret

0000f85c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    f85c:	defff804 	addi	sp,sp,-32
    f860:	dfc00715 	stw	ra,28(sp)
    f864:	df000615 	stw	fp,24(sp)
    f868:	df000604 	addi	fp,sp,24
    f86c:	e13ffd15 	stw	r4,-12(fp)
    f870:	e17ffe15 	stw	r5,-8(fp)
    f874:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    f878:	e0bffd17 	ldw	r2,-12(fp)
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f884:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f888:	00000c06 	br	f8bc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    f88c:	e17ffe17 	ldw	r5,-8(fp)
    f890:	e0bffe17 	ldw	r2,-8(fp)
    f894:	10800044 	addi	r2,r2,1
    f898:	e0bffe15 	stw	r2,-8(fp)
    f89c:	e1bffc04 	addi	r6,fp,-16
    f8a0:	e13ffb17 	ldw	r4,-20(fp)
    f8a4:	000f7e80 	call	f7e8 <alt_up_irda_read_data>
    f8a8:	1004c03a 	cmpne	r2,r2,zero
    f8ac:	1000091e 	bne	r2,zero,f8d4 <alt_up_irda_read_fd+0x78>
			count++;
    f8b0:	e0bffa17 	ldw	r2,-24(fp)
    f8b4:	10800044 	addi	r2,r2,1
    f8b8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f8bc:	e0bfff17 	ldw	r2,-4(fp)
    f8c0:	10bfffc4 	addi	r2,r2,-1
    f8c4:	e0bfff15 	stw	r2,-4(fp)
    f8c8:	e0bfff17 	ldw	r2,-4(fp)
    f8cc:	10bfffd8 	cmpnei	r2,r2,-1
    f8d0:	103fee1e 	bne	r2,zero,f88c <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f8d4:	e0bffa17 	ldw	r2,-24(fp)
}
    f8d8:	e037883a 	mov	sp,fp
    f8dc:	dfc00117 	ldw	ra,4(sp)
    f8e0:	df000017 	ldw	fp,0(sp)
    f8e4:	dec00204 	addi	sp,sp,8
    f8e8:	f800283a 	ret

0000f8ec <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f8ec:	defff904 	addi	sp,sp,-28
    f8f0:	dfc00615 	stw	ra,24(sp)
    f8f4:	df000515 	stw	fp,20(sp)
    f8f8:	df000504 	addi	fp,sp,20
    f8fc:	e13ffd15 	stw	r4,-12(fp)
    f900:	e17ffe15 	stw	r5,-8(fp)
    f904:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    f908:	e0bffd17 	ldw	r2,-12(fp)
    f90c:	10800017 	ldw	r2,0(r2)
    f910:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f914:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f918:	00000c06 	br	f94c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    f91c:	e0bffe17 	ldw	r2,-8(fp)
    f920:	11403fcc 	andi	r5,r2,255
    f924:	e0bffe17 	ldw	r2,-8(fp)
    f928:	10800044 	addi	r2,r2,1
    f92c:	e0bffe15 	stw	r2,-8(fp)
    f930:	e13ffc17 	ldw	r4,-16(fp)
    f934:	000f7a00 	call	f7a0 <alt_up_irda_write_data>
    f938:	1004c03a 	cmpne	r2,r2,zero
    f93c:	1000091e 	bne	r2,zero,f964 <alt_up_irda_write_fd+0x78>
			count++;
    f940:	e0bffb17 	ldw	r2,-20(fp)
    f944:	10800044 	addi	r2,r2,1
    f948:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    f94c:	e0bfff17 	ldw	r2,-4(fp)
    f950:	10bfffc4 	addi	r2,r2,-1
    f954:	e0bfff15 	stw	r2,-4(fp)
    f958:	e0bfff17 	ldw	r2,-4(fp)
    f95c:	10bfffd8 	cmpnei	r2,r2,-1
    f960:	103fee1e 	bne	r2,zero,f91c <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    f964:	e0bffb17 	ldw	r2,-20(fp)
}
    f968:	e037883a 	mov	sp,fp
    f96c:	dfc00117 	ldw	ra,4(sp)
    f970:	df000017 	ldw	fp,0(sp)
    f974:	dec00204 	addi	sp,sp,8
    f978:	f800283a 	ret

0000f97c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    f97c:	defffc04 	addi	sp,sp,-16
    f980:	dfc00315 	stw	ra,12(sp)
    f984:	df000215 	stw	fp,8(sp)
    f988:	df000204 	addi	fp,sp,8
    f98c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    f990:	e13fff17 	ldw	r4,-4(fp)
    f994:	01400074 	movhi	r5,1
    f998:	29566204 	addi	r5,r5,22920
    f99c:	00120500 	call	12050 <alt_find_dev>
    f9a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f9a4:	e0bffe17 	ldw	r2,-8(fp)
}
    f9a8:	e037883a 	mov	sp,fp
    f9ac:	dfc00117 	ldw	ra,4(sp)
    f9b0:	df000017 	ldw	fp,0(sp)
    f9b4:	dec00204 	addi	sp,sp,8
    f9b8:	f800283a 	ret

0000f9bc <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    f9bc:	defffc04 	addi	sp,sp,-16
    f9c0:	dfc00315 	stw	ra,12(sp)
    f9c4:	df000215 	stw	fp,8(sp)
    f9c8:	df000204 	addi	fp,sp,8
    f9cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    f9d0:	e13fff17 	ldw	r4,-4(fp)
    f9d4:	01400074 	movhi	r5,1
    f9d8:	29566204 	addi	r5,r5,22920
    f9dc:	00120500 	call	12050 <alt_find_dev>
    f9e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f9e4:	e0bffe17 	ldw	r2,-8(fp)
}
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    f9fc:	defffd04 	addi	sp,sp,-12
    fa00:	df000215 	stw	fp,8(sp)
    fa04:	df000204 	addi	fp,sp,8
    fa08:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    fa0c:	e0bfff17 	ldw	r2,-4(fp)
    fa10:	1080400c 	andi	r2,r2,256
    fa14:	1004d23a 	srli	r2,r2,8
    fa18:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    fa1c:	e0bffe03 	ldbu	r2,-8(fp)
}
    fa20:	e037883a 	mov	sp,fp
    fa24:	df000017 	ldw	fp,0(sp)
    fa28:	dec00104 	addi	sp,sp,4
    fa2c:	f800283a 	ret

0000fa30 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    fa30:	defffd04 	addi	sp,sp,-12
    fa34:	df000215 	stw	fp,8(sp)
    fa38:	df000204 	addi	fp,sp,8
    fa3c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    fa40:	e0bfff17 	ldw	r2,-4(fp)
    fa44:	1080004c 	andi	r2,r2,1
    fa48:	e0bffe05 	stb	r2,-8(fp)
	return re;
    fa4c:	e0bffe03 	ldbu	r2,-8(fp)
}
    fa50:	e037883a 	mov	sp,fp
    fa54:	df000017 	ldw	fp,0(sp)
    fa58:	dec00104 	addi	sp,sp,4
    fa5c:	f800283a 	ret

0000fa60 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    fa60:	defffd04 	addi	sp,sp,-12
    fa64:	df000215 	stw	fp,8(sp)
    fa68:	df000204 	addi	fp,sp,8
    fa6c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    fa70:	e0bfff17 	ldw	r2,-4(fp)
    fa74:	1081000c 	andi	r2,r2,1024
    fa78:	1004d2ba 	srli	r2,r2,10
    fa7c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    fa80:	e0bffe03 	ldbu	r2,-8(fp)
}
    fa84:	e037883a 	mov	sp,fp
    fa88:	df000017 	ldw	fp,0(sp)
    fa8c:	dec00104 	addi	sp,sp,4
    fa90:	f800283a 	ret

0000fa94 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    fa94:	defffd04 	addi	sp,sp,-12
    fa98:	df000215 	stw	fp,8(sp)
    fa9c:	df000204 	addi	fp,sp,8
    faa0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    faa4:	e0bfff17 	ldw	r2,-4(fp)
    faa8:	10bfffec 	andhi	r2,r2,65535
    faac:	1004d43a 	srli	r2,r2,16
    fab0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    fab4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    fab8:	e037883a 	mov	sp,fp
    fabc:	df000017 	ldw	fp,0(sp)
    fac0:	dec00104 	addi	sp,sp,4
    fac4:	f800283a 	ret

0000fac8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    fac8:	defffd04 	addi	sp,sp,-12
    facc:	df000215 	stw	fp,8(sp)
    fad0:	df000204 	addi	fp,sp,8
    fad4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    fad8:	e0bfff17 	ldw	r2,-4(fp)
    fadc:	10a0000c 	andi	r2,r2,32768
    fae0:	1004d3fa 	srli	r2,r2,15
    fae4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    fae8:	e0bffe03 	ldbu	r2,-8(fp)
}
    faec:	e037883a 	mov	sp,fp
    faf0:	df000017 	ldw	fp,0(sp)
    faf4:	dec00104 	addi	sp,sp,4
    faf8:	f800283a 	ret

0000fafc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    fafc:	defffd04 	addi	sp,sp,-12
    fb00:	df000215 	stw	fp,8(sp)
    fb04:	df000204 	addi	fp,sp,8
    fb08:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    fb0c:	e0bfff17 	ldw	r2,-4(fp)
    fb10:	e0bffe05 	stb	r2,-8(fp)
	return data;
    fb14:	e0bffe03 	ldbu	r2,-8(fp)
}
    fb18:	e037883a 	mov	sp,fp
    fb1c:	df000017 	ldw	fp,0(sp)
    fb20:	dec00104 	addi	sp,sp,4
    fb24:	f800283a 	ret

0000fb28 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    fb28:	defffb04 	addi	sp,sp,-20
    fb2c:	dfc00415 	stw	ra,16(sp)
    fb30:	df000315 	stw	fp,12(sp)
    fb34:	df000304 	addi	fp,sp,12
    fb38:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    fb3c:	e13fff17 	ldw	r4,-4(fp)
    fb40:	01403fc4 	movi	r5,255
    fb44:	000fd880 	call	fd88 <alt_up_ps2_write_data_byte_with_ack>
    fb48:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    fb4c:	e0bffd17 	ldw	r2,-12(fp)
    fb50:	1004c03a 	cmpne	r2,r2,zero
    fb54:	1000221e 	bne	r2,zero,fbe0 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    fb58:	e17ffe04 	addi	r5,fp,-8
    fb5c:	e13fff17 	ldw	r4,-4(fp)
    fb60:	000fdf40 	call	fdf4 <alt_up_ps2_read_data_byte_timeout>
    fb64:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    fb68:	e0bffd17 	ldw	r2,-12(fp)
    fb6c:	1004c03a 	cmpne	r2,r2,zero
    fb70:	10001b1e 	bne	r2,zero,fbe0 <alt_up_ps2_init+0xb8>
    fb74:	e0bffe03 	ldbu	r2,-8(fp)
    fb78:	10803fcc 	andi	r2,r2,255
    fb7c:	10802a98 	cmpnei	r2,r2,170
    fb80:	1000171e 	bne	r2,zero,fbe0 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    fb84:	e17ffe04 	addi	r5,fp,-8
    fb88:	e13fff17 	ldw	r4,-4(fp)
    fb8c:	000fdf40 	call	fdf4 <alt_up_ps2_read_data_byte_timeout>
    fb90:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    fb94:	e0bffd17 	ldw	r2,-12(fp)
    fb98:	10bfe318 	cmpnei	r2,r2,-116
    fb9c:	1000041e 	bne	r2,zero,fbb0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    fba0:	e0ffff17 	ldw	r3,-4(fp)
    fba4:	00800044 	movi	r2,1
    fba8:	18800d15 	stw	r2,52(r3)
    fbac:	00000c06 	br	fbe0 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    fbb0:	e0bffd17 	ldw	r2,-12(fp)
    fbb4:	1004c03a 	cmpne	r2,r2,zero
    fbb8:	1000091e 	bne	r2,zero,fbe0 <alt_up_ps2_init+0xb8>
    fbbc:	e0bffe03 	ldbu	r2,-8(fp)
    fbc0:	10803fcc 	andi	r2,r2,255
    fbc4:	1004c03a 	cmpne	r2,r2,zero
    fbc8:	1000051e 	bne	r2,zero,fbe0 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    fbcc:	e0bfff17 	ldw	r2,-4(fp)
    fbd0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    fbd4:	e13fff17 	ldw	r4,-4(fp)
    fbd8:	01403d04 	movi	r5,244
    fbdc:	000fca00 	call	fca0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    fbe0:	e037883a 	mov	sp,fp
    fbe4:	dfc00117 	ldw	ra,4(sp)
    fbe8:	df000017 	ldw	fp,0(sp)
    fbec:	dec00204 	addi	sp,sp,8
    fbf0:	f800283a 	ret

0000fbf4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    fbf4:	defffd04 	addi	sp,sp,-12
    fbf8:	df000215 	stw	fp,8(sp)
    fbfc:	df000204 	addi	fp,sp,8
    fc00:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    fc04:	e0bfff17 	ldw	r2,-4(fp)
    fc08:	10800a17 	ldw	r2,40(r2)
    fc0c:	10800104 	addi	r2,r2,4
    fc10:	10800037 	ldwio	r2,0(r2)
    fc14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    fc18:	e0bffe17 	ldw	r2,-8(fp)
    fc1c:	10800054 	ori	r2,r2,1
    fc20:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    fc24:	e0bfff17 	ldw	r2,-4(fp)
    fc28:	10800a17 	ldw	r2,40(r2)
    fc2c:	10800104 	addi	r2,r2,4
    fc30:	e0fffe17 	ldw	r3,-8(fp)
    fc34:	10c00035 	stwio	r3,0(r2)
}
    fc38:	e037883a 	mov	sp,fp
    fc3c:	df000017 	ldw	fp,0(sp)
    fc40:	dec00104 	addi	sp,sp,4
    fc44:	f800283a 	ret

0000fc48 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    fc48:	defffd04 	addi	sp,sp,-12
    fc4c:	df000215 	stw	fp,8(sp)
    fc50:	df000204 	addi	fp,sp,8
    fc54:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    fc58:	e0bfff17 	ldw	r2,-4(fp)
    fc5c:	10800a17 	ldw	r2,40(r2)
    fc60:	10800104 	addi	r2,r2,4
    fc64:	10800037 	ldwio	r2,0(r2)
    fc68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    fc6c:	e0fffe17 	ldw	r3,-8(fp)
    fc70:	00bfff84 	movi	r2,-2
    fc74:	1884703a 	and	r2,r3,r2
    fc78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    fc7c:	e0bfff17 	ldw	r2,-4(fp)
    fc80:	10800a17 	ldw	r2,40(r2)
    fc84:	10800104 	addi	r2,r2,4
    fc88:	e0fffe17 	ldw	r3,-8(fp)
    fc8c:	10c00035 	stwio	r3,0(r2)
}
    fc90:	e037883a 	mov	sp,fp
    fc94:	df000017 	ldw	fp,0(sp)
    fc98:	dec00104 	addi	sp,sp,4
    fc9c:	f800283a 	ret

0000fca0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    fca0:	defffa04 	addi	sp,sp,-24
    fca4:	dfc00515 	stw	ra,20(sp)
    fca8:	df000415 	stw	fp,16(sp)
    fcac:	df000404 	addi	fp,sp,16
    fcb0:	e13ffd15 	stw	r4,-12(fp)
    fcb4:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	10800a17 	ldw	r2,40(r2)
    fcc0:	e0fffe03 	ldbu	r3,-8(fp)
    fcc4:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    fcc8:	e0bffd17 	ldw	r2,-12(fp)
    fccc:	10800a17 	ldw	r2,40(r2)
    fcd0:	10800104 	addi	r2,r2,4
    fcd4:	10800037 	ldwio	r2,0(r2)
    fcd8:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    fcdc:	e13ffc17 	ldw	r4,-16(fp)
    fce0:	000fa600 	call	fa60 <read_CE_bit>
    fce4:	10803fcc 	andi	r2,r2,255
    fce8:	1005003a 	cmpeq	r2,r2,zero
    fcec:	1000031e 	bne	r2,zero,fcfc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    fcf0:	00bffec4 	movi	r2,-5
    fcf4:	e0bfff15 	stw	r2,-4(fp)
    fcf8:	00000106 	br	fd00 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    fcfc:	e03fff15 	stw	zero,-4(fp)
    fd00:	e0bfff17 	ldw	r2,-4(fp)
}
    fd04:	e037883a 	mov	sp,fp
    fd08:	dfc00117 	ldw	ra,4(sp)
    fd0c:	df000017 	ldw	fp,0(sp)
    fd10:	dec00204 	addi	sp,sp,8
    fd14:	f800283a 	ret

0000fd18 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    fd18:	defffb04 	addi	sp,sp,-20
    fd1c:	dfc00415 	stw	ra,16(sp)
    fd20:	df000315 	stw	fp,12(sp)
    fd24:	df000304 	addi	fp,sp,12
    fd28:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    fd2c:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    fd30:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    fd34:	e17ffd44 	addi	r5,fp,-11
    fd38:	e13ffe17 	ldw	r4,-8(fp)
    fd3c:	000fdf40 	call	fdf4 <alt_up_ps2_read_data_byte_timeout>
    fd40:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    fd44:	e0bffd03 	ldbu	r2,-12(fp)
    fd48:	1004c03a 	cmpne	r2,r2,zero
    fd4c:	1000061e 	bne	r2,zero,fd68 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    fd50:	e0bffd43 	ldbu	r2,-11(fp)
    fd54:	10803fcc 	andi	r2,r2,255
    fd58:	10803e98 	cmpnei	r2,r2,250
    fd5c:	103ff51e 	bne	r2,zero,fd34 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    fd60:	e03fff15 	stw	zero,-4(fp)
    fd64:	00000206 	br	fd70 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    fd68:	e0bffd03 	ldbu	r2,-12(fp)
    fd6c:	e0bfff15 	stw	r2,-4(fp)
    fd70:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    fd74:	e037883a 	mov	sp,fp
    fd78:	dfc00117 	ldw	ra,4(sp)
    fd7c:	df000017 	ldw	fp,0(sp)
    fd80:	dec00204 	addi	sp,sp,8
    fd84:	f800283a 	ret

0000fd88 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    fd88:	defff904 	addi	sp,sp,-28
    fd8c:	dfc00615 	stw	ra,24(sp)
    fd90:	df000515 	stw	fp,20(sp)
    fd94:	df000504 	addi	fp,sp,20
    fd98:	e13ffd15 	stw	r4,-12(fp)
    fd9c:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    fda0:	e17ffe03 	ldbu	r5,-8(fp)
    fda4:	e13ffd17 	ldw	r4,-12(fp)
    fda8:	000fca00 	call	fca0 <alt_up_ps2_write_data_byte>
    fdac:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    fdb0:	e0bffc17 	ldw	r2,-16(fp)
    fdb4:	1005003a 	cmpeq	r2,r2,zero
    fdb8:	1000031e 	bne	r2,zero,fdc8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    fdbc:	e0bffc17 	ldw	r2,-16(fp)
    fdc0:	e0bfff15 	stw	r2,-4(fp)
    fdc4:	00000506 	br	fddc <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    fdc8:	e13ffd17 	ldw	r4,-12(fp)
    fdcc:	000fd180 	call	fd18 <alt_up_ps2_wait_for_ack>
    fdd0:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    fdd4:	e0bffb17 	ldw	r2,-20(fp)
    fdd8:	e0bfff15 	stw	r2,-4(fp)
    fddc:	e0bfff17 	ldw	r2,-4(fp)
}
    fde0:	e037883a 	mov	sp,fp
    fde4:	dfc00117 	ldw	ra,4(sp)
    fde8:	df000017 	ldw	fp,0(sp)
    fdec:	dec00204 	addi	sp,sp,8
    fdf0:	f800283a 	ret

0000fdf4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    fdf4:	defff904 	addi	sp,sp,-28
    fdf8:	dfc00615 	stw	ra,24(sp)
    fdfc:	df000515 	stw	fp,20(sp)
    fe00:	df000504 	addi	fp,sp,20
    fe04:	e13ffd15 	stw	r4,-12(fp)
    fe08:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    fe0c:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    fe10:	e03ffb15 	stw	zero,-20(fp)
    fe14:	00000006 	br	fe18 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    fe18:	e0bffb17 	ldw	r2,-20(fp)
    fe1c:	10800044 	addi	r2,r2,1
    fe20:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    fe24:	e0bffd17 	ldw	r2,-12(fp)
    fe28:	10800a17 	ldw	r2,40(r2)
    fe2c:	10800037 	ldwio	r2,0(r2)
    fe30:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    fe34:	e13ffc17 	ldw	r4,-16(fp)
    fe38:	000fac80 	call	fac8 <read_data_valid>
    fe3c:	10803fcc 	andi	r2,r2,255
    fe40:	1005003a 	cmpeq	r2,r2,zero
    fe44:	1000071e 	bne	r2,zero,fe64 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    fe48:	e13ffc17 	ldw	r4,-16(fp)
    fe4c:	000fafc0 	call	fafc <read_data_byte>
    fe50:	1007883a 	mov	r3,r2
    fe54:	e0bffe17 	ldw	r2,-8(fp)
    fe58:	10c00005 	stb	r3,0(r2)
			return 0;
    fe5c:	e03fff15 	stw	zero,-4(fp)
    fe60:	00000a06 	br	fe8c <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    fe64:	e0bffd17 	ldw	r2,-12(fp)
    fe68:	10800c17 	ldw	r2,48(r2)
    fe6c:	1005003a 	cmpeq	r2,r2,zero
    fe70:	103fe91e 	bne	r2,zero,fe18 <alt_up_ps2_read_data_byte_timeout+0x24>
    fe74:	e0bffd17 	ldw	r2,-12(fp)
    fe78:	10c00c17 	ldw	r3,48(r2)
    fe7c:	e0bffb17 	ldw	r2,-20(fp)
    fe80:	18bfe52e 	bgeu	r3,r2,fe18 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    fe84:	00bfe304 	movi	r2,-116
    fe88:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    fe8c:	e0bfff17 	ldw	r2,-4(fp)
}
    fe90:	e037883a 	mov	sp,fp
    fe94:	dfc00117 	ldw	ra,4(sp)
    fe98:	df000017 	ldw	fp,0(sp)
    fe9c:	dec00204 	addi	sp,sp,8
    fea0:	f800283a 	ret

0000fea4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    fea4:	defffa04 	addi	sp,sp,-24
    fea8:	dfc00515 	stw	ra,20(sp)
    feac:	df000415 	stw	fp,16(sp)
    feb0:	df000404 	addi	fp,sp,16
    feb4:	e13ffd15 	stw	r4,-12(fp)
    feb8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    febc:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    fec0:	e0bffd17 	ldw	r2,-12(fp)
    fec4:	10800a17 	ldw	r2,40(r2)
    fec8:	10800037 	ldwio	r2,0(r2)
    fecc:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    fed0:	e13ffc17 	ldw	r4,-16(fp)
    fed4:	000fac80 	call	fac8 <read_data_valid>
    fed8:	10803fcc 	andi	r2,r2,255
    fedc:	1005003a 	cmpeq	r2,r2,zero
    fee0:	1000071e 	bne	r2,zero,ff00 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    fee4:	e13ffc17 	ldw	r4,-16(fp)
    fee8:	000fafc0 	call	fafc <read_data_byte>
    feec:	1007883a 	mov	r3,r2
    fef0:	e0bffe17 	ldw	r2,-8(fp)
    fef4:	10c00005 	stb	r3,0(r2)
		return 0;
    fef8:	e03fff15 	stw	zero,-4(fp)
    fefc:	00000206 	br	ff08 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    ff00:	00bfffc4 	movi	r2,-1
    ff04:	e0bfff15 	stw	r2,-4(fp)
    ff08:	e0bfff17 	ldw	r2,-4(fp)
}
    ff0c:	e037883a 	mov	sp,fp
    ff10:	dfc00117 	ldw	ra,4(sp)
    ff14:	df000017 	ldw	fp,0(sp)
    ff18:	dec00204 	addi	sp,sp,8
    ff1c:	f800283a 	ret

0000ff20 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    ff20:	defffb04 	addi	sp,sp,-20
    ff24:	dfc00415 	stw	ra,16(sp)
    ff28:	df000315 	stw	fp,12(sp)
    ff2c:	df000304 	addi	fp,sp,12
    ff30:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    ff34:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    ff38:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ff3c:	e0bfff17 	ldw	r2,-4(fp)
    ff40:	10800a17 	ldw	r2,40(r2)
    ff44:	10800037 	ldwio	r2,0(r2)
    ff48:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    ff4c:	e13ffd17 	ldw	r4,-12(fp)
    ff50:	000fa940 	call	fa94 <read_num_bytes_available>
    ff54:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    ff58:	e0bffe0b 	ldhu	r2,-8(fp)
    ff5c:	1004c03a 	cmpne	r2,r2,zero
    ff60:	103ff61e 	bne	r2,zero,ff3c <alt_up_ps2_clear_fifo+0x1c>
}
    ff64:	e037883a 	mov	sp,fp
    ff68:	dfc00117 	ldw	ra,4(sp)
    ff6c:	df000017 	ldw	fp,0(sp)
    ff70:	dec00204 	addi	sp,sp,8
    ff74:	f800283a 	ret

0000ff78 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    ff78:	defff704 	addi	sp,sp,-36
    ff7c:	dfc00815 	stw	ra,32(sp)
    ff80:	df000715 	stw	fp,28(sp)
    ff84:	df000704 	addi	fp,sp,28
    ff88:	e13ffc15 	stw	r4,-16(fp)
    ff8c:	e17ffd15 	stw	r5,-12(fp)
    ff90:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ff94:	e0bffc17 	ldw	r2,-16(fp)
    ff98:	10800017 	ldw	r2,0(r2)
    ff9c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    ffa0:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    ffa4:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    ffa8:	e0fff917 	ldw	r3,-28(fp)
    ffac:	e0bffe17 	ldw	r2,-8(fp)
    ffb0:	18bffd16 	blt	r3,r2,ffa8 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    ffb4:	e17ffd17 	ldw	r5,-12(fp)
    ffb8:	e0bffd17 	ldw	r2,-12(fp)
    ffbc:	10800044 	addi	r2,r2,1
    ffc0:	e0bffd15 	stw	r2,-12(fp)
    ffc4:	e13ffb17 	ldw	r4,-20(fp)
    ffc8:	000fdf40 	call	fdf4 <alt_up_ps2_read_data_byte_timeout>
    ffcc:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ffd0:	e0bffa17 	ldw	r2,-24(fp)
    ffd4:	1005003a 	cmpeq	r2,r2,zero
    ffd8:	1000031e 	bne	r2,zero,ffe8 <alt_up_ps2_read_fd+0x70>
			return count;
    ffdc:	e0bff917 	ldw	r2,-28(fp)
    ffe0:	e0bfff15 	stw	r2,-4(fp)
    ffe4:	00000506 	br	fffc <alt_up_ps2_read_fd+0x84>
		count++;
    ffe8:	e0bff917 	ldw	r2,-28(fp)
    ffec:	10800044 	addi	r2,r2,1
    fff0:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    fff4:	e0bff917 	ldw	r2,-28(fp)
    fff8:	e0bfff15 	stw	r2,-4(fp)
    fffc:	e0bfff17 	ldw	r2,-4(fp)
}
   10000:	e037883a 	mov	sp,fp
   10004:	dfc00117 	ldw	ra,4(sp)
   10008:	df000017 	ldw	fp,0(sp)
   1000c:	dec00204 	addi	sp,sp,8
   10010:	f800283a 	ret

00010014 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   10014:	defff704 	addi	sp,sp,-36
   10018:	dfc00815 	stw	ra,32(sp)
   1001c:	df000715 	stw	fp,28(sp)
   10020:	df000704 	addi	fp,sp,28
   10024:	e13ffc15 	stw	r4,-16(fp)
   10028:	e17ffd15 	stw	r5,-12(fp)
   1002c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   10030:	e0bffc17 	ldw	r2,-16(fp)
   10034:	10800017 	ldw	r2,0(r2)
   10038:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1003c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   10040:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
   10044:	00001206 	br	10090 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   10048:	e0bffd17 	ldw	r2,-12(fp)
   1004c:	10800003 	ldbu	r2,0(r2)
   10050:	11403fcc 	andi	r5,r2,255
   10054:	e0bffd17 	ldw	r2,-12(fp)
   10058:	10800044 	addi	r2,r2,1
   1005c:	e0bffd15 	stw	r2,-12(fp)
   10060:	e13ffb17 	ldw	r4,-20(fp)
   10064:	000fca00 	call	fca0 <alt_up_ps2_write_data_byte>
   10068:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   1006c:	e0bffa17 	ldw	r2,-24(fp)
   10070:	1005003a 	cmpeq	r2,r2,zero
   10074:	1000031e 	bne	r2,zero,10084 <alt_up_ps2_write_fd+0x70>
			return count;
   10078:	e0bff917 	ldw	r2,-28(fp)
   1007c:	e0bfff15 	stw	r2,-4(fp)
   10080:	00000806 	br	100a4 <alt_up_ps2_write_fd+0x90>
		count++;
   10084:	e0bff917 	ldw	r2,-28(fp)
   10088:	10800044 	addi	r2,r2,1
   1008c:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   10090:	e0fff917 	ldw	r3,-28(fp)
   10094:	e0bffe17 	ldw	r2,-8(fp)
   10098:	18bfeb16 	blt	r3,r2,10048 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1009c:	e0bff917 	ldw	r2,-28(fp)
   100a0:	e0bfff15 	stw	r2,-4(fp)
   100a4:	e0bfff17 	ldw	r2,-4(fp)
}
   100a8:	e037883a 	mov	sp,fp
   100ac:	dfc00117 	ldw	ra,4(sp)
   100b0:	df000017 	ldw	fp,0(sp)
   100b4:	dec00204 	addi	sp,sp,8
   100b8:	f800283a 	ret

000100bc <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   100bc:	defffc04 	addi	sp,sp,-16
   100c0:	dfc00315 	stw	ra,12(sp)
   100c4:	df000215 	stw	fp,8(sp)
   100c8:	df000204 	addi	fp,sp,8
   100cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   100d0:	e13fff17 	ldw	r4,-4(fp)
   100d4:	01400074 	movhi	r5,1
   100d8:	29566204 	addi	r5,r5,22920
   100dc:	00120500 	call	12050 <alt_find_dev>
   100e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   100e4:	e0bffe17 	ldw	r2,-8(fp)
}
   100e8:	e037883a 	mov	sp,fp
   100ec:	dfc00117 	ldw	ra,4(sp)
   100f0:	df000017 	ldw	fp,0(sp)
   100f4:	dec00204 	addi	sp,sp,8
   100f8:	f800283a 	ret

000100fc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   100fc:	defffd04 	addi	sp,sp,-12
   10100:	df000215 	stw	fp,8(sp)
   10104:	df000204 	addi	fp,sp,8
   10108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1010c:	e0bfff17 	ldw	r2,-4(fp)
   10110:	10800a17 	ldw	r2,40(r2)
   10114:	10800104 	addi	r2,r2,4
   10118:	10800037 	ldwio	r2,0(r2)
   1011c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   10120:	e0bffe17 	ldw	r2,-8(fp)
   10124:	10800054 	ori	r2,r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1012c:	e0bfff17 	ldw	r2,-4(fp)
   10130:	10800a17 	ldw	r2,40(r2)
   10134:	10800104 	addi	r2,r2,4
   10138:	e0fffe17 	ldw	r3,-8(fp)
   1013c:	10c00035 	stwio	r3,0(r2)
}
   10140:	e037883a 	mov	sp,fp
   10144:	df000017 	ldw	fp,0(sp)
   10148:	dec00104 	addi	sp,sp,4
   1014c:	f800283a 	ret

00010150 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   10150:	defffd04 	addi	sp,sp,-12
   10154:	df000215 	stw	fp,8(sp)
   10158:	df000204 	addi	fp,sp,8
   1015c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10160:	e0bfff17 	ldw	r2,-4(fp)
   10164:	10800a17 	ldw	r2,40(r2)
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800037 	ldwio	r2,0(r2)
   10170:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   10174:	e0fffe17 	ldw	r3,-8(fp)
   10178:	00bfff84 	movi	r2,-2
   1017c:	1884703a 	and	r2,r3,r2
   10180:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	10800a17 	ldw	r2,40(r2)
   1018c:	10800104 	addi	r2,r2,4
   10190:	e0fffe17 	ldw	r3,-8(fp)
   10194:	10c00035 	stwio	r3,0(r2)
}
   10198:	e037883a 	mov	sp,fp
   1019c:	df000017 	ldw	fp,0(sp)
   101a0:	dec00104 	addi	sp,sp,4
   101a4:	f800283a 	ret

000101a8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   101a8:	defffd04 	addi	sp,sp,-12
   101ac:	df000215 	stw	fp,8(sp)
   101b0:	df000204 	addi	fp,sp,8
   101b4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   101b8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   101bc:	e0bfff17 	ldw	r2,-4(fp)
   101c0:	10800a17 	ldw	r2,40(r2)
   101c4:	10800084 	addi	r2,r2,2
   101c8:	1080002b 	ldhuio	r2,0(r2)
   101cc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   101d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   101d4:	e037883a 	mov	sp,fp
   101d8:	df000017 	ldw	fp,0(sp)
   101dc:	dec00104 	addi	sp,sp,4
   101e0:	f800283a 	ret

000101e4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   101e4:	defffd04 	addi	sp,sp,-12
   101e8:	df000215 	stw	fp,8(sp)
   101ec:	df000204 	addi	fp,sp,8
   101f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   101f4:	e0bfff17 	ldw	r2,-4(fp)
   101f8:	10800a17 	ldw	r2,40(r2)
   101fc:	10800104 	addi	r2,r2,4
   10200:	10800037 	ldwio	r2,0(r2)
   10204:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   10208:	e0bffe17 	ldw	r2,-8(fp)
   1020c:	10bfffec 	andhi	r2,r2,65535
   10210:	1004d43a 	srli	r2,r2,16
}
   10214:	e037883a 	mov	sp,fp
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00104 	addi	sp,sp,4
   10220:	f800283a 	ret

00010224 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   10224:	defffc04 	addi	sp,sp,-16
   10228:	df000315 	stw	fp,12(sp)
   1022c:	df000304 	addi	fp,sp,12
   10230:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	1080800c 	andi	r2,r2,512
   1023c:	1004d27a 	srli	r2,r2,9
   10240:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
   10244:	e0bffd17 	ldw	r2,-12(fp)
   10248:	1005003a 	cmpeq	r2,r2,zero
   1024c:	1000031e 	bne	r2,zero,1025c <alt_up_rs232_check_parity+0x38>
   10250:	00bfffc4 	movi	r2,-1
   10254:	e0bfff15 	stw	r2,-4(fp)
   10258:	00000106 	br	10260 <alt_up_rs232_check_parity+0x3c>
   1025c:	e03fff15 	stw	zero,-4(fp)
   10260:	e0bfff17 	ldw	r2,-4(fp)
}
   10264:	e037883a 	mov	sp,fp
   10268:	df000017 	ldw	fp,0(sp)
   1026c:	dec00104 	addi	sp,sp,4
   10270:	f800283a 	ret

00010274 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   10274:	defffc04 	addi	sp,sp,-16
   10278:	df000315 	stw	fp,12(sp)
   1027c:	df000304 	addi	fp,sp,12
   10280:	e13ffe15 	stw	r4,-8(fp)
   10284:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   10288:	e0bffe17 	ldw	r2,-8(fp)
   1028c:	10800a17 	ldw	r2,40(r2)
   10290:	10800037 	ldwio	r2,0(r2)
   10294:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   10298:	e0bffe17 	ldw	r2,-8(fp)
   1029c:	10800a17 	ldw	r2,40(r2)
   102a0:	e0ffff03 	ldbu	r3,-4(fp)
   102a4:	10c00035 	stwio	r3,0(r2)
	return 0;
   102a8:	0005883a 	mov	r2,zero
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	df000017 	ldw	fp,0(sp)
   102b4:	dec00104 	addi	sp,sp,4
   102b8:	f800283a 	ret

000102bc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   102bc:	defffa04 	addi	sp,sp,-24
   102c0:	dfc00515 	stw	ra,20(sp)
   102c4:	df000415 	stw	fp,16(sp)
   102c8:	df000404 	addi	fp,sp,16
   102cc:	e13ffd15 	stw	r4,-12(fp)
   102d0:	e17ffe15 	stw	r5,-8(fp)
   102d4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   102d8:	e0bffd17 	ldw	r2,-12(fp)
   102dc:	10800a17 	ldw	r2,40(r2)
   102e0:	10800037 	ldwio	r2,0(r2)
   102e4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	1007883a 	mov	r3,r2
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   102f8:	e13ffc17 	ldw	r4,-16(fp)
   102fc:	00102240 	call	10224 <alt_up_rs232_check_parity>
   10300:	1007883a 	mov	r3,r2
   10304:	e0bfff17 	ldw	r2,-4(fp)
   10308:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1030c:	e0bffc17 	ldw	r2,-16(fp)
   10310:	10a0000c 	andi	r2,r2,32768
   10314:	1004d3fa 	srli	r2,r2,15
   10318:	10bfffc4 	addi	r2,r2,-1
}
   1031c:	e037883a 	mov	sp,fp
   10320:	dfc00117 	ldw	ra,4(sp)
   10324:	df000017 	ldw	fp,0(sp)
   10328:	dec00204 	addi	sp,sp,8
   1032c:	f800283a 	ret

00010330 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   10330:	defff804 	addi	sp,sp,-32
   10334:	dfc00715 	stw	ra,28(sp)
   10338:	df000615 	stw	fp,24(sp)
   1033c:	df000604 	addi	fp,sp,24
   10340:	e13ffd15 	stw	r4,-12(fp)
   10344:	e17ffe15 	stw	r5,-8(fp)
   10348:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1034c:	e0bffd17 	ldw	r2,-12(fp)
   10350:	10800017 	ldw	r2,0(r2)
   10354:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   10358:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1035c:	00000c06 	br	10390 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
   10360:	e17ffe17 	ldw	r5,-8(fp)
   10364:	e0bffe17 	ldw	r2,-8(fp)
   10368:	10800044 	addi	r2,r2,1
   1036c:	e0bffe15 	stw	r2,-8(fp)
   10370:	e1bffc04 	addi	r6,fp,-16
   10374:	e13ffb17 	ldw	r4,-20(fp)
   10378:	00102bc0 	call	102bc <alt_up_rs232_read_data>
   1037c:	1004c03a 	cmpne	r2,r2,zero
   10380:	1000091e 	bne	r2,zero,103a8 <alt_up_rs232_read_fd+0x78>
			count++;
   10384:	e0bffa17 	ldw	r2,-24(fp)
   10388:	10800044 	addi	r2,r2,1
   1038c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   10390:	e0bfff17 	ldw	r2,-4(fp)
   10394:	10bfffc4 	addi	r2,r2,-1
   10398:	e0bfff15 	stw	r2,-4(fp)
   1039c:	e0bfff17 	ldw	r2,-4(fp)
   103a0:	10bfffd8 	cmpnei	r2,r2,-1
   103a4:	103fee1e 	bne	r2,zero,10360 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   103a8:	e0bffa17 	ldw	r2,-24(fp)
}
   103ac:	e037883a 	mov	sp,fp
   103b0:	dfc00117 	ldw	ra,4(sp)
   103b4:	df000017 	ldw	fp,0(sp)
   103b8:	dec00204 	addi	sp,sp,8
   103bc:	f800283a 	ret

000103c0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   103c0:	defff904 	addi	sp,sp,-28
   103c4:	dfc00615 	stw	ra,24(sp)
   103c8:	df000515 	stw	fp,20(sp)
   103cc:	df000504 	addi	fp,sp,20
   103d0:	e13ffd15 	stw	r4,-12(fp)
   103d4:	e17ffe15 	stw	r5,-8(fp)
   103d8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   103dc:	e0bffd17 	ldw	r2,-12(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   103e8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   103ec:	00000d06 	br	10424 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   103f0:	e0bffe17 	ldw	r2,-8(fp)
   103f4:	10800003 	ldbu	r2,0(r2)
   103f8:	11403fcc 	andi	r5,r2,255
   103fc:	e13ffc17 	ldw	r4,-16(fp)
   10400:	00102740 	call	10274 <alt_up_rs232_write_data>
   10404:	1004c03a 	cmpne	r2,r2,zero
   10408:	10000c1e 	bne	r2,zero,1043c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
   1040c:	e0bffb17 	ldw	r2,-20(fp)
   10410:	10800044 	addi	r2,r2,1
   10414:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   10418:	e0bffe17 	ldw	r2,-8(fp)
   1041c:	10800044 	addi	r2,r2,1
   10420:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   10424:	e0bfff17 	ldw	r2,-4(fp)
   10428:	10bfffc4 	addi	r2,r2,-1
   1042c:	e0bfff15 	stw	r2,-4(fp)
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	10bfffd8 	cmpnei	r2,r2,-1
   10438:	103fed1e 	bne	r2,zero,103f0 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
   1043c:	e0bffb17 	ldw	r2,-20(fp)
}
   10440:	e037883a 	mov	sp,fp
   10444:	dfc00117 	ldw	ra,4(sp)
   10448:	df000017 	ldw	fp,0(sp)
   1044c:	dec00204 	addi	sp,sp,8
   10450:	f800283a 	ret

00010454 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   10454:	defffc04 	addi	sp,sp,-16
   10458:	dfc00315 	stw	ra,12(sp)
   1045c:	df000215 	stw	fp,8(sp)
   10460:	df000204 	addi	fp,sp,8
   10464:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   10468:	e13fff17 	ldw	r4,-4(fp)
   1046c:	01400074 	movhi	r5,1
   10470:	29566204 	addi	r5,r5,22920
   10474:	00120500 	call	12050 <alt_find_dev>
   10478:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1047c:	e0bffe17 	ldw	r2,-8(fp)
}
   10480:	e037883a 	mov	sp,fp
   10484:	dfc00117 	ldw	ra,4(sp)
   10488:	df000017 	ldw	fp,0(sp)
   1048c:	dec00204 	addi	sp,sp,8
   10490:	f800283a 	ret

00010494 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   10494:	defffc04 	addi	sp,sp,-16
   10498:	dfc00315 	stw	ra,12(sp)
   1049c:	df000215 	stw	fp,8(sp)
   104a0:	df000204 	addi	fp,sp,8
   104a4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   104a8:	e0bfff17 	ldw	r2,-4(fp)
   104ac:	10800217 	ldw	r2,8(r2)
   104b0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   104b4:	00000c06 	br	104e8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   104b8:	e13ffe17 	ldw	r4,-8(fp)
   104bc:	01400074 	movhi	r5,1
   104c0:	294e9804 	addi	r5,r5,14944
   104c4:	0009f400 	call	9f40 <strcmp>
   104c8:	1004c03a 	cmpne	r2,r2,zero
   104cc:	1000031e 	bne	r2,zero,104dc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
   104d0:	e0bffe17 	ldw	r2,-8(fp)
   104d4:	10000005 	stb	zero,0(r2)
			break;
   104d8:	00000a06 	br	10504 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   104dc:	e0bffe17 	ldw	r2,-8(fp)
   104e0:	10800044 	addi	r2,r2,1
   104e4:	e0bffe15 	stw	r2,-8(fp)
   104e8:	e0bffe17 	ldw	r2,-8(fp)
   104ec:	10800003 	ldbu	r2,0(r2)
   104f0:	10803fcc 	andi	r2,r2,255
   104f4:	1080201c 	xori	r2,r2,128
   104f8:	10bfe004 	addi	r2,r2,-128
   104fc:	1004c03a 	cmpne	r2,r2,zero
   10500:	103fed1e 	bne	r2,zero,104b8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
   10504:	e037883a 	mov	sp,fp
   10508:	dfc00117 	ldw	ra,4(sp)
   1050c:	df000017 	ldw	fp,0(sp)
   10510:	dec00204 	addi	sp,sp,8
   10514:	f800283a 	ret

00010518 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   10518:	defffc04 	addi	sp,sp,-16
   1051c:	dfc00315 	stw	ra,12(sp)
   10520:	df000215 	stw	fp,8(sp)
   10524:	df000204 	addi	fp,sp,8
   10528:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1052c:	e13fff17 	ldw	r4,-4(fp)
   10530:	01400074 	movhi	r5,1
   10534:	29566204 	addi	r5,r5,22920
   10538:	00120500 	call	12050 <alt_find_dev>
   1053c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10540:	e0bffe17 	ldw	r2,-8(fp)
}
   10544:	e037883a 	mov	sp,fp
   10548:	dfc00117 	ldw	ra,4(sp)
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00204 	addi	sp,sp,8
   10554:	f800283a 	ret

00010558 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   10558:	defff904 	addi	sp,sp,-28
   1055c:	df000615 	stw	fp,24(sp)
   10560:	df000604 	addi	fp,sp,24
   10564:	e13ffb15 	stw	r4,-20(fp)
   10568:	e1bffd15 	stw	r6,-12(fp)
   1056c:	e1fffe15 	stw	r7,-8(fp)
   10570:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10574:	e0bffb17 	ldw	r2,-20(fp)
   10578:	10c00c17 	ldw	r3,48(r2)
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	10c0042e 	bgeu	r2,r3,10594 <alt_up_char_buffer_draw+0x3c>
   10584:	e0bffb17 	ldw	r2,-20(fp)
   10588:	10c00d17 	ldw	r3,52(r2)
   1058c:	e0bffe17 	ldw	r2,-8(fp)
   10590:	10c00336 	bltu	r2,r3,105a0 <alt_up_char_buffer_draw+0x48>
		return -1;
   10594:	00bfffc4 	movi	r2,-1
   10598:	e0bfff15 	stw	r2,-4(fp)
   1059c:	00001d06 	br	10614 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   105a0:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   105a4:	e0bffb17 	ldw	r2,-20(fp)
   105a8:	10c00f17 	ldw	r3,60(r2)
   105ac:	e0bffd17 	ldw	r2,-12(fp)
   105b0:	1886703a 	and	r3,r3,r2
   105b4:	e0bffb17 	ldw	r2,-20(fp)
   105b8:	10800e17 	ldw	r2,56(r2)
   105bc:	1886983a 	sll	r3,r3,r2
   105c0:	e0bffa17 	ldw	r2,-24(fp)
   105c4:	10c4b03a 	or	r2,r2,r3
   105c8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   105cc:	e0bffb17 	ldw	r2,-20(fp)
   105d0:	10c01117 	ldw	r3,68(r2)
   105d4:	e0bffe17 	ldw	r2,-8(fp)
   105d8:	1886703a 	and	r3,r3,r2
   105dc:	e0bffb17 	ldw	r2,-20(fp)
   105e0:	10801017 	ldw	r2,64(r2)
   105e4:	1886983a 	sll	r3,r3,r2
   105e8:	e0bffa17 	ldw	r2,-24(fp)
   105ec:	10c4b03a 	or	r2,r2,r3
   105f0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   105f4:	e0bffb17 	ldw	r2,-20(fp)
   105f8:	10800b17 	ldw	r2,44(r2)
   105fc:	1007883a 	mov	r3,r2
   10600:	e0bffa17 	ldw	r2,-24(fp)
   10604:	1885883a 	add	r2,r3,r2
   10608:	e0fffc03 	ldbu	r3,-16(fp)
   1060c:	10c00025 	stbio	r3,0(r2)

	return 0;
   10610:	e03fff15 	stw	zero,-4(fp)
   10614:	e0bfff17 	ldw	r2,-4(fp)
}
   10618:	e037883a 	mov	sp,fp
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00104 	addi	sp,sp,4
   10624:	f800283a 	ret

00010628 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   10628:	defff904 	addi	sp,sp,-28
   1062c:	df000615 	stw	fp,24(sp)
   10630:	df000604 	addi	fp,sp,24
   10634:	e13ffb15 	stw	r4,-20(fp)
   10638:	e17ffc15 	stw	r5,-16(fp)
   1063c:	e1bffd15 	stw	r6,-12(fp)
   10640:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10644:	e0bffb17 	ldw	r2,-20(fp)
   10648:	10c00c17 	ldw	r3,48(r2)
   1064c:	e0bffd17 	ldw	r2,-12(fp)
   10650:	10c0042e 	bgeu	r2,r3,10664 <alt_up_char_buffer_string+0x3c>
   10654:	e0bffb17 	ldw	r2,-20(fp)
   10658:	10c00d17 	ldw	r3,52(r2)
   1065c:	e0bffe17 	ldw	r2,-8(fp)
   10660:	10c00336 	bltu	r2,r3,10670 <alt_up_char_buffer_string+0x48>
		return -1;
   10664:	00bfffc4 	movi	r2,-1
   10668:	e0bfff15 	stw	r2,-4(fp)
   1066c:	00002e06 	br	10728 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
   10670:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   10674:	e0bffb17 	ldw	r2,-20(fp)
   10678:	10801017 	ldw	r2,64(r2)
   1067c:	1007883a 	mov	r3,r2
   10680:	e0bffe17 	ldw	r2,-8(fp)
   10684:	10c6983a 	sll	r3,r2,r3
   10688:	e0bffd17 	ldw	r2,-12(fp)
   1068c:	1885883a 	add	r2,r3,r2
   10690:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
   10694:	00001c06 	br	10708 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   10698:	e0bffb17 	ldw	r2,-20(fp)
   1069c:	10800b17 	ldw	r2,44(r2)
   106a0:	1007883a 	mov	r3,r2
   106a4:	e0bffa17 	ldw	r2,-24(fp)
   106a8:	1889883a 	add	r4,r3,r2
   106ac:	e0bffc17 	ldw	r2,-16(fp)
   106b0:	10800003 	ldbu	r2,0(r2)
   106b4:	10c03fcc 	andi	r3,r2,255
   106b8:	18c0201c 	xori	r3,r3,128
   106bc:	18ffe004 	addi	r3,r3,-128
   106c0:	2005883a 	mov	r2,r4
   106c4:	10c00025 	stbio	r3,0(r2)
		++ptr;
   106c8:	e0bffc17 	ldw	r2,-16(fp)
   106cc:	10800044 	addi	r2,r2,1
   106d0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
   106d4:	e0bffd17 	ldw	r2,-12(fp)
   106d8:	10800044 	addi	r2,r2,1
   106dc:	e0bffd15 	stw	r2,-12(fp)
   106e0:	e0bffb17 	ldw	r2,-20(fp)
   106e4:	10c00c17 	ldw	r3,48(r2)
   106e8:	e0bffd17 	ldw	r2,-12(fp)
   106ec:	10c00336 	bltu	r2,r3,106fc <alt_up_char_buffer_string+0xd4>
			return -1;
   106f0:	00bfffc4 	movi	r2,-1
   106f4:	e0bfff15 	stw	r2,-4(fp)
   106f8:	00000b06 	br	10728 <alt_up_char_buffer_string+0x100>
		++offset;
   106fc:	e0bffa17 	ldw	r2,-24(fp)
   10700:	10800044 	addi	r2,r2,1
   10704:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   10708:	e0bffc17 	ldw	r2,-16(fp)
   1070c:	10800003 	ldbu	r2,0(r2)
   10710:	10803fcc 	andi	r2,r2,255
   10714:	1080201c 	xori	r2,r2,128
   10718:	10bfe004 	addi	r2,r2,-128
   1071c:	1004c03a 	cmpne	r2,r2,zero
   10720:	103fdd1e 	bne	r2,zero,10698 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   10724:	e03fff15 	stw	zero,-4(fp)
   10728:	e0bfff17 	ldw	r2,-4(fp)
}
   1072c:	e037883a 	mov	sp,fp
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00104 	addi	sp,sp,4
   10738:	f800283a 	ret

0001073c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1073c:	defffe04 	addi	sp,sp,-8
   10740:	df000115 	stw	fp,4(sp)
   10744:	df000104 	addi	fp,sp,4
   10748:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	10800a17 	ldw	r2,40(r2)
   10754:	10800084 	addi	r2,r2,2
   10758:	1007883a 	mov	r3,r2
   1075c:	00800044 	movi	r2,1
   10760:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   10764:	e0bfff17 	ldw	r2,-4(fp)
   10768:	10800a17 	ldw	r2,40(r2)
   1076c:	10800084 	addi	r2,r2,2
   10770:	10800023 	ldbuio	r2,0(r2)
   10774:	1080004c 	andi	r2,r2,1
   10778:	10803fcc 	andi	r2,r2,255
   1077c:	1004c03a 	cmpne	r2,r2,zero
   10780:	103ff81e 	bne	r2,zero,10764 <alt_up_char_buffer_clear+0x28>
	return 0;
   10784:	0005883a 	mov	r2,zero
}
   10788:	e037883a 	mov	sp,fp
   1078c:	df000017 	ldw	fp,0(sp)
   10790:	dec00104 	addi	sp,sp,4
   10794:	f800283a 	ret

00010798 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   10798:	defffc04 	addi	sp,sp,-16
   1079c:	dfc00315 	stw	ra,12(sp)
   107a0:	df000215 	stw	fp,8(sp)
   107a4:	df000204 	addi	fp,sp,8
   107a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   107ac:	e13fff17 	ldw	r4,-4(fp)
   107b0:	01400074 	movhi	r5,1
   107b4:	29566204 	addi	r5,r5,22920
   107b8:	00120500 	call	12050 <alt_find_dev>
   107bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   107c0:	e0bffe17 	ldw	r2,-8(fp)
}
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   107d8:	defff904 	addi	sp,sp,-28
   107dc:	df000615 	stw	fp,24(sp)
   107e0:	df000604 	addi	fp,sp,24
   107e4:	e13ffb15 	stw	r4,-20(fp)
   107e8:	e17ffc15 	stw	r5,-16(fp)
   107ec:	e1bffd15 	stw	r6,-12(fp)
   107f0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   107f4:	e0bffb17 	ldw	r2,-20(fp)
   107f8:	10c00f17 	ldw	r3,60(r2)
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10c0042e 	bgeu	r2,r3,10814 <alt_up_pixel_buffer_dma_draw+0x3c>
   10804:	e0bffb17 	ldw	r2,-20(fp)
   10808:	10c01017 	ldw	r3,64(r2)
   1080c:	e0bffe17 	ldw	r2,-8(fp)
   10810:	10c00336 	bltu	r2,r3,10820 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
   10814:	00bfffc4 	movi	r2,-1
   10818:	e0bfff15 	stw	r2,-4(fp)
   1081c:	00005106 	br	10964 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
   10820:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10824:	e0bffb17 	ldw	r2,-20(fp)
   10828:	10800d17 	ldw	r2,52(r2)
   1082c:	1004c03a 	cmpne	r2,r2,zero
   10830:	1000151e 	bne	r2,zero,10888 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   10834:	e0bffb17 	ldw	r2,-20(fp)
   10838:	10c01217 	ldw	r3,72(r2)
   1083c:	e0bffd17 	ldw	r2,-12(fp)
   10840:	1886703a 	and	r3,r3,r2
   10844:	e0bffb17 	ldw	r2,-20(fp)
   10848:	10801117 	ldw	r2,68(r2)
   1084c:	1886983a 	sll	r3,r3,r2
   10850:	e0bffa17 	ldw	r2,-24(fp)
   10854:	10c4b03a 	or	r2,r2,r3
   10858:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   1085c:	e0bffb17 	ldw	r2,-20(fp)
   10860:	10c01417 	ldw	r3,80(r2)
   10864:	e0bffe17 	ldw	r2,-8(fp)
   10868:	1886703a 	and	r3,r3,r2
   1086c:	e0bffb17 	ldw	r2,-20(fp)
   10870:	10801317 	ldw	r2,76(r2)
   10874:	1886983a 	sll	r3,r3,r2
   10878:	e0bffa17 	ldw	r2,-24(fp)
   1087c:	10c4b03a 	or	r2,r2,r3
   10880:	e0bffa15 	stw	r2,-24(fp)
   10884:	00001706 	br	108e4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   10888:	e0bffb17 	ldw	r2,-20(fp)
   1088c:	10c01217 	ldw	r3,72(r2)
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	1886703a 	and	r3,r3,r2
   10898:	e0bffb17 	ldw	r2,-20(fp)
   1089c:	10801117 	ldw	r2,68(r2)
   108a0:	1886983a 	sll	r3,r3,r2
   108a4:	e0bffa17 	ldw	r2,-24(fp)
   108a8:	10c5883a 	add	r2,r2,r3
   108ac:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   108b0:	e0bffb17 	ldw	r2,-20(fp)
   108b4:	10c01417 	ldw	r3,80(r2)
   108b8:	e0bffe17 	ldw	r2,-8(fp)
   108bc:	1886703a 	and	r3,r3,r2
   108c0:	e0bffb17 	ldw	r2,-20(fp)
   108c4:	10800f17 	ldw	r2,60(r2)
   108c8:	1887383a 	mul	r3,r3,r2
   108cc:	e0bffb17 	ldw	r2,-20(fp)
   108d0:	10801117 	ldw	r2,68(r2)
   108d4:	1886983a 	sll	r3,r3,r2
   108d8:	e0bffa17 	ldw	r2,-24(fp)
   108dc:	10c5883a 	add	r2,r2,r3
   108e0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   108e4:	e0bffb17 	ldw	r2,-20(fp)
   108e8:	10800e17 	ldw	r2,56(r2)
   108ec:	10800058 	cmpnei	r2,r2,1
   108f0:	1000081e 	bne	r2,zero,10914 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   108f4:	e0bffb17 	ldw	r2,-20(fp)
   108f8:	10800c17 	ldw	r2,48(r2)
   108fc:	1007883a 	mov	r3,r2
   10900:	e0bffa17 	ldw	r2,-24(fp)
   10904:	1885883a 	add	r2,r3,r2
   10908:	e0fffc17 	ldw	r3,-16(fp)
   1090c:	10c00025 	stbio	r3,0(r2)
   10910:	00001306 	br	10960 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10914:	e0bffb17 	ldw	r2,-20(fp)
   10918:	10800e17 	ldw	r2,56(r2)
   1091c:	10800098 	cmpnei	r2,r2,2
   10920:	1000081e 	bne	r2,zero,10944 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10924:	e0bffb17 	ldw	r2,-20(fp)
   10928:	10800c17 	ldw	r2,48(r2)
   1092c:	1007883a 	mov	r3,r2
   10930:	e0bffa17 	ldw	r2,-24(fp)
   10934:	1885883a 	add	r2,r3,r2
   10938:	e0fffc17 	ldw	r3,-16(fp)
   1093c:	10c0002d 	sthio	r3,0(r2)
   10940:	00000706 	br	10960 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10944:	e0bffb17 	ldw	r2,-20(fp)
   10948:	10800c17 	ldw	r2,48(r2)
   1094c:	1007883a 	mov	r3,r2
   10950:	e0bffa17 	ldw	r2,-24(fp)
   10954:	1885883a 	add	r2,r3,r2
   10958:	e0fffc17 	ldw	r3,-16(fp)
   1095c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
   10960:	e03fff15 	stw	zero,-4(fp)
   10964:	e0bfff17 	ldw	r2,-4(fp)
}
   10968:	e037883a 	mov	sp,fp
   1096c:	df000017 	ldw	fp,0(sp)
   10970:	dec00104 	addi	sp,sp,4
   10974:	f800283a 	ret

00010978 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   10978:	defffd04 	addi	sp,sp,-12
   1097c:	df000215 	stw	fp,8(sp)
   10980:	df000204 	addi	fp,sp,8
   10984:	e13ffe15 	stw	r4,-8(fp)
   10988:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   1098c:	e0bffe17 	ldw	r2,-8(fp)
   10990:	10800a17 	ldw	r2,40(r2)
   10994:	10800104 	addi	r2,r2,4
   10998:	e0ffff17 	ldw	r3,-4(fp)
   1099c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   109a0:	e0bffe17 	ldw	r2,-8(fp)
   109a4:	10800a17 	ldw	r2,40(r2)
   109a8:	10800104 	addi	r2,r2,4
   109ac:	10800037 	ldwio	r2,0(r2)
   109b0:	1007883a 	mov	r3,r2
   109b4:	e0bffe17 	ldw	r2,-8(fp)
   109b8:	10c00c15 	stw	r3,48(r2)
	return 0;
   109bc:	0005883a 	mov	r2,zero
}
   109c0:	e037883a 	mov	sp,fp
   109c4:	df000017 	ldw	fp,0(sp)
   109c8:	dec00104 	addi	sp,sp,4
   109cc:	f800283a 	ret

000109d0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   109d0:	defffe04 	addi	sp,sp,-8
   109d4:	df000115 	stw	fp,4(sp)
   109d8:	df000104 	addi	fp,sp,4
   109dc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   109e0:	e0bfff17 	ldw	r2,-4(fp)
   109e4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   109e8:	e0bfff17 	ldw	r2,-4(fp)
   109ec:	10800a17 	ldw	r2,40(r2)
   109f0:	1007883a 	mov	r3,r2
   109f4:	00800044 	movi	r2,1
   109f8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   109fc:	e0bfff17 	ldw	r2,-4(fp)
   10a00:	10c00b17 	ldw	r3,44(r2)
   10a04:	e0bfff17 	ldw	r2,-4(fp)
   10a08:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   10a0c:	e0bfff17 	ldw	r2,-4(fp)
   10a10:	11000b15 	stw	r4,44(r2)
	return 0;
   10a14:	0005883a 	mov	r2,zero
}
   10a18:	e037883a 	mov	sp,fp
   10a1c:	df000017 	ldw	fp,0(sp)
   10a20:	dec00104 	addi	sp,sp,4
   10a24:	f800283a 	ret

00010a28 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   10a28:	defffe04 	addi	sp,sp,-8
   10a2c:	df000115 	stw	fp,4(sp)
   10a30:	df000104 	addi	fp,sp,4
   10a34:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   10a38:	e0bfff17 	ldw	r2,-4(fp)
   10a3c:	10800a17 	ldw	r2,40(r2)
   10a40:	10800304 	addi	r2,r2,12
   10a44:	10800037 	ldwio	r2,0(r2)
   10a48:	1080004c 	andi	r2,r2,1
}
   10a4c:	e037883a 	mov	sp,fp
   10a50:	df000017 	ldw	fp,0(sp)
   10a54:	dec00104 	addi	sp,sp,4
   10a58:	f800283a 	ret

00010a5c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   10a5c:	defff604 	addi	sp,sp,-40
   10a60:	df000915 	stw	fp,36(sp)
   10a64:	df000904 	addi	fp,sp,36
   10a68:	e13ff715 	stw	r4,-36(fp)
   10a6c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10a70:	e0bff817 	ldw	r2,-32(fp)
   10a74:	10800058 	cmpnei	r2,r2,1
   10a78:	1000041e 	bne	r2,zero,10a8c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
   10a7c:	e0bff717 	ldw	r2,-36(fp)
   10a80:	10800c17 	ldw	r2,48(r2)
   10a84:	e0bfff15 	stw	r2,-4(fp)
   10a88:	00000306 	br	10a98 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
   10a8c:	e0bff717 	ldw	r2,-36(fp)
   10a90:	10800b17 	ldw	r2,44(r2)
   10a94:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
   10a98:	e0bff717 	ldw	r2,-36(fp)
   10a9c:	10800f17 	ldw	r2,60(r2)
   10aa0:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10aa4:	e0bff717 	ldw	r2,-36(fp)
   10aa8:	10800e17 	ldw	r2,56(r2)
   10aac:	10800098 	cmpnei	r2,r2,2
   10ab0:	1000051e 	bne	r2,zero,10ac8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
   10ab4:	e0fffe17 	ldw	r3,-8(fp)
   10ab8:	e0fffe17 	ldw	r3,-8(fp)
   10abc:	18c5883a 	add	r2,r3,r3
   10ac0:	e0bffe15 	stw	r2,-8(fp)
   10ac4:	00000506 	br	10adc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
   10ac8:	e13ffe17 	ldw	r4,-8(fp)
   10acc:	e13ffe17 	ldw	r4,-8(fp)
   10ad0:	2105883a 	add	r2,r4,r4
   10ad4:	1085883a 	add	r2,r2,r2
   10ad8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
   10adc:	e0bff717 	ldw	r2,-36(fp)
   10ae0:	10801017 	ldw	r2,64(r2)
   10ae4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10ae8:	e0bff717 	ldw	r2,-36(fp)
   10aec:	10800d17 	ldw	r2,52(r2)
   10af0:	1004c03a 	cmpne	r2,r2,zero
   10af4:	10001e1e 	bne	r2,zero,10b70 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   10af8:	e0bff717 	ldw	r2,-36(fp)
   10afc:	10801317 	ldw	r2,76(r2)
   10b00:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
   10b04:	e03ffb15 	stw	zero,-20(fp)
   10b08:	00001506 	br	10b60 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
   10b0c:	e03ffc15 	stw	zero,-16(fp)
   10b10:	00000706 	br	10b30 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
   10b14:	e0ffff17 	ldw	r3,-4(fp)
   10b18:	e0bffc17 	ldw	r2,-16(fp)
   10b1c:	1885883a 	add	r2,r3,r2
   10b20:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   10b24:	e0bffc17 	ldw	r2,-16(fp)
   10b28:	10800104 	addi	r2,r2,4
   10b2c:	e0bffc15 	stw	r2,-16(fp)
   10b30:	e0fffc17 	ldw	r3,-16(fp)
   10b34:	e13ffe17 	ldw	r4,-8(fp)
   10b38:	193ff636 	bltu	r3,r4,10b14 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   10b3c:	e0fffa17 	ldw	r3,-24(fp)
   10b40:	00800044 	movi	r2,1
   10b44:	10c4983a 	sll	r2,r2,r3
   10b48:	e0ffff17 	ldw	r3,-4(fp)
   10b4c:	1887883a 	add	r3,r3,r2
   10b50:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   10b54:	e13ffb17 	ldw	r4,-20(fp)
   10b58:	21000044 	addi	r4,r4,1
   10b5c:	e13ffb15 	stw	r4,-20(fp)
   10b60:	e0bffb17 	ldw	r2,-20(fp)
   10b64:	e0fffd17 	ldw	r3,-12(fp)
   10b68:	10ffe836 	bltu	r2,r3,10b0c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   10b6c:	00001006 	br	10bb0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   10b70:	e13ffd17 	ldw	r4,-12(fp)
   10b74:	e0bffe17 	ldw	r2,-8(fp)
   10b78:	2089383a 	mul	r4,r4,r2
   10b7c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
   10b80:	e03ff915 	stw	zero,-28(fp)
   10b84:	00000706 	br	10ba4 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
   10b88:	e0ffff17 	ldw	r3,-4(fp)
   10b8c:	e0bff917 	ldw	r2,-28(fp)
   10b90:	1885883a 	add	r2,r3,r2
   10b94:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   10b98:	e0fff917 	ldw	r3,-28(fp)
   10b9c:	18c00104 	addi	r3,r3,4
   10ba0:	e0fff915 	stw	r3,-28(fp)
   10ba4:	e0bff917 	ldw	r2,-28(fp)
   10ba8:	e13ffd17 	ldw	r4,-12(fp)
   10bac:	113ff636 	bltu	r2,r4,10b88 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   10bb0:	e037883a 	mov	sp,fp
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00104 	addi	sp,sp,4
   10bbc:	f800283a 	ret

00010bc0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   10bc0:	deffed04 	addi	sp,sp,-76
   10bc4:	df001215 	stw	fp,72(sp)
   10bc8:	df001204 	addi	fp,sp,72
   10bcc:	e13fee15 	stw	r4,-72(fp)
   10bd0:	e17fef15 	stw	r5,-68(fp)
   10bd4:	e1bff015 	stw	r6,-64(fp)
   10bd8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10bdc:	e0bfee17 	ldw	r2,-72(fp)
   10be0:	10800f17 	ldw	r2,60(r2)
   10be4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10be8:	e0bfee17 	ldw	r2,-72(fp)
   10bec:	10801017 	ldw	r2,64(r2)
   10bf0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   10bf4:	e0bfef17 	ldw	r2,-68(fp)
   10bf8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
   10bfc:	e0fff117 	ldw	r3,-60(fp)
   10c00:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
   10c04:	e13ff017 	ldw	r4,-64(fp)
   10c08:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
   10c0c:	e0800117 	ldw	r2,4(fp)
   10c10:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
   10c14:	e0c00217 	ldw	r3,8(fp)
   10c18:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   10c1c:	e13ffa17 	ldw	r4,-24(fp)
   10c20:	e0bffb17 	ldw	r2,-20(fp)
   10c24:	2080062e 	bgeu	r4,r2,10c40 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
   10c28:	e0fffb17 	ldw	r3,-20(fp)
   10c2c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
   10c30:	e13ffa17 	ldw	r4,-24(fp)
   10c34:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
   10c38:	e0bffc17 	ldw	r2,-16(fp)
   10c3c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
   10c40:	e0fff817 	ldw	r3,-32(fp)
   10c44:	e13ff917 	ldw	r4,-28(fp)
   10c48:	1900062e 	bgeu	r3,r4,10c64 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
   10c4c:	e0bff917 	ldw	r2,-28(fp)
   10c50:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
   10c54:	e0fff817 	ldw	r3,-32(fp)
   10c58:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
   10c5c:	e13ffc17 	ldw	r4,-16(fp)
   10c60:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   10c64:	e0bffb17 	ldw	r2,-20(fp)
   10c68:	e0fffe17 	ldw	r3,-8(fp)
   10c6c:	10c10d2e 	bgeu	r2,r3,110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   10c70:	e13ff917 	ldw	r4,-28(fp)
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	20800136 	bltu	r4,r2,10c80 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   10c7c:	00010906 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10c80:	e0fffa17 	ldw	r3,-24(fp)
   10c84:	e13ffe17 	ldw	r4,-8(fp)
   10c88:	19000336 	bltu	r3,r4,10c98 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
   10c8c:	e0bffe17 	ldw	r2,-8(fp)
   10c90:	10bfffc4 	addi	r2,r2,-1
   10c94:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   10c98:	e0fff817 	ldw	r3,-32(fp)
   10c9c:	e13ffd17 	ldw	r4,-12(fp)
   10ca0:	19000336 	bltu	r3,r4,10cb0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
   10ca4:	e0bffd17 	ldw	r2,-12(fp)
   10ca8:	10bfffc4 	addi	r2,r2,-1
   10cac:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10cb0:	e0800317 	ldw	r2,12(fp)
   10cb4:	10800058 	cmpnei	r2,r2,1
   10cb8:	1000041e 	bne	r2,zero,10ccc <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
   10cbc:	e0bfee17 	ldw	r2,-72(fp)
   10cc0:	10800c17 	ldw	r2,48(r2)
   10cc4:	e0bfff15 	stw	r2,-4(fp)
   10cc8:	00000306 	br	10cd8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
   10ccc:	e0bfee17 	ldw	r2,-72(fp)
   10cd0:	10800b17 	ldw	r2,44(r2)
   10cd4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10cd8:	e0bfee17 	ldw	r2,-72(fp)
   10cdc:	10800d17 	ldw	r2,52(r2)
   10ce0:	1004c03a 	cmpne	r2,r2,zero
   10ce4:	1000721e 	bne	r2,zero,10eb0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   10ce8:	e0bfee17 	ldw	r2,-72(fp)
   10cec:	10801317 	ldw	r2,76(r2)
   10cf0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
   10cf4:	e0bff417 	ldw	r2,-48(fp)
   10cf8:	e0fff917 	ldw	r3,-28(fp)
   10cfc:	1884983a 	sll	r2,r3,r2
   10d00:	e13fff17 	ldw	r4,-4(fp)
   10d04:	2089883a 	add	r4,r4,r2
   10d08:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10d0c:	e0bfee17 	ldw	r2,-72(fp)
   10d10:	10800e17 	ldw	r2,56(r2)
   10d14:	10800058 	cmpnei	r2,r2,1
   10d18:	10001e1e 	bne	r2,zero,10d94 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
   10d1c:	e0bff917 	ldw	r2,-28(fp)
   10d20:	e0bff515 	stw	r2,-44(fp)
   10d24:	00001706 	br	10d84 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
   10d28:	e0fffb17 	ldw	r3,-20(fp)
   10d2c:	e0fff615 	stw	r3,-40(fp)
   10d30:	00000806 	br	10d54 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
   10d34:	e0ffff17 	ldw	r3,-4(fp)
   10d38:	e0bff617 	ldw	r2,-40(fp)
   10d3c:	1885883a 	add	r2,r3,r2
   10d40:	e0fff717 	ldw	r3,-36(fp)
   10d44:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10d48:	e13ff617 	ldw	r4,-40(fp)
   10d4c:	21000044 	addi	r4,r4,1
   10d50:	e13ff615 	stw	r4,-40(fp)
   10d54:	e0bffa17 	ldw	r2,-24(fp)
   10d58:	e0fff617 	ldw	r3,-40(fp)
   10d5c:	10fff52e 	bgeu	r2,r3,10d34 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   10d60:	e0fff417 	ldw	r3,-48(fp)
   10d64:	00800044 	movi	r2,1
   10d68:	10c4983a 	sll	r2,r2,r3
   10d6c:	e13fff17 	ldw	r4,-4(fp)
   10d70:	2089883a 	add	r4,r4,r2
   10d74:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10d78:	e0bff517 	ldw	r2,-44(fp)
   10d7c:	10800044 	addi	r2,r2,1
   10d80:	e0bff515 	stw	r2,-44(fp)
   10d84:	e0fff817 	ldw	r3,-32(fp)
   10d88:	e13ff517 	ldw	r4,-44(fp)
   10d8c:	193fe62e 	bgeu	r3,r4,10d28 <alt_up_pixel_buffer_dma_draw_box+0x168>
   10d90:	0000c406 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10d94:	e0bfee17 	ldw	r2,-72(fp)
   10d98:	10800e17 	ldw	r2,56(r2)
   10d9c:	10800098 	cmpnei	r2,r2,2
   10da0:	1000211e 	bne	r2,zero,10e28 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
   10da4:	e0bff917 	ldw	r2,-28(fp)
   10da8:	e0bff515 	stw	r2,-44(fp)
   10dac:	00001a06 	br	10e18 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
   10db0:	e0fffb17 	ldw	r3,-20(fp)
   10db4:	e0fff615 	stw	r3,-40(fp)
   10db8:	00000b06 	br	10de8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10dbc:	e13ff617 	ldw	r4,-40(fp)
   10dc0:	e13ff617 	ldw	r4,-40(fp)
   10dc4:	2105883a 	add	r2,r4,r4
   10dc8:	1007883a 	mov	r3,r2
   10dcc:	e0bfff17 	ldw	r2,-4(fp)
   10dd0:	1885883a 	add	r2,r3,r2
   10dd4:	e0fff717 	ldw	r3,-36(fp)
   10dd8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10ddc:	e0bff617 	ldw	r2,-40(fp)
   10de0:	10800044 	addi	r2,r2,1
   10de4:	e0bff615 	stw	r2,-40(fp)
   10de8:	e0fffa17 	ldw	r3,-24(fp)
   10dec:	e13ff617 	ldw	r4,-40(fp)
   10df0:	193ff22e 	bgeu	r3,r4,10dbc <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   10df4:	e0fff417 	ldw	r3,-48(fp)
   10df8:	00800044 	movi	r2,1
   10dfc:	10c4983a 	sll	r2,r2,r3
   10e00:	e0ffff17 	ldw	r3,-4(fp)
   10e04:	1887883a 	add	r3,r3,r2
   10e08:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10e0c:	e13ff517 	ldw	r4,-44(fp)
   10e10:	21000044 	addi	r4,r4,1
   10e14:	e13ff515 	stw	r4,-44(fp)
   10e18:	e0bff817 	ldw	r2,-32(fp)
   10e1c:	e0fff517 	ldw	r3,-44(fp)
   10e20:	10ffe32e 	bgeu	r2,r3,10db0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   10e24:	00009f06 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10e28:	e13ff917 	ldw	r4,-28(fp)
   10e2c:	e13ff515 	stw	r4,-44(fp)
   10e30:	00001b06 	br	10ea0 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
   10e34:	e0bffb17 	ldw	r2,-20(fp)
   10e38:	e0bff615 	stw	r2,-40(fp)
   10e3c:	00000c06 	br	10e70 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   10e40:	e0fff617 	ldw	r3,-40(fp)
   10e44:	e0fff617 	ldw	r3,-40(fp)
   10e48:	18c5883a 	add	r2,r3,r3
   10e4c:	1085883a 	add	r2,r2,r2
   10e50:	1007883a 	mov	r3,r2
   10e54:	e0bfff17 	ldw	r2,-4(fp)
   10e58:	1885883a 	add	r2,r3,r2
   10e5c:	e0fff717 	ldw	r3,-36(fp)
   10e60:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10e64:	e13ff617 	ldw	r4,-40(fp)
   10e68:	21000044 	addi	r4,r4,1
   10e6c:	e13ff615 	stw	r4,-40(fp)
   10e70:	e0bffa17 	ldw	r2,-24(fp)
   10e74:	e0fff617 	ldw	r3,-40(fp)
   10e78:	10fff12e 	bgeu	r2,r3,10e40 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   10e7c:	e0fff417 	ldw	r3,-48(fp)
   10e80:	00800044 	movi	r2,1
   10e84:	10c4983a 	sll	r2,r2,r3
   10e88:	e13fff17 	ldw	r4,-4(fp)
   10e8c:	2089883a 	add	r4,r4,r2
   10e90:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10e94:	e0bff517 	ldw	r2,-44(fp)
   10e98:	10800044 	addi	r2,r2,1
   10e9c:	e0bff515 	stw	r2,-44(fp)
   10ea0:	e0fff817 	ldw	r3,-32(fp)
   10ea4:	e13ff517 	ldw	r4,-44(fp)
   10ea8:	193fe22e 	bgeu	r3,r4,10e34 <alt_up_pixel_buffer_dma_draw_box+0x274>
   10eac:	00007d06 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10eb0:	e0bfee17 	ldw	r2,-72(fp)
   10eb4:	10800e17 	ldw	r2,56(r2)
   10eb8:	10800058 	cmpnei	r2,r2,1
   10ebc:	1000221e 	bne	r2,zero,10f48 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
   10ec0:	e0fff917 	ldw	r3,-28(fp)
   10ec4:	e13ffe17 	ldw	r4,-8(fp)
   10ec8:	1905383a 	mul	r2,r3,r4
   10ecc:	e0ffff17 	ldw	r3,-4(fp)
   10ed0:	1887883a 	add	r3,r3,r2
   10ed4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10ed8:	e13ff917 	ldw	r4,-28(fp)
   10edc:	e13ff215 	stw	r4,-56(fp)
   10ee0:	00001506 	br	10f38 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
   10ee4:	e0bffb17 	ldw	r2,-20(fp)
   10ee8:	e0bff315 	stw	r2,-52(fp)
   10eec:	00000806 	br	10f10 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
   10ef0:	e0ffff17 	ldw	r3,-4(fp)
   10ef4:	e0bff317 	ldw	r2,-52(fp)
   10ef8:	1885883a 	add	r2,r3,r2
   10efc:	e0fff717 	ldw	r3,-36(fp)
   10f00:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10f04:	e0fff317 	ldw	r3,-52(fp)
   10f08:	18c00044 	addi	r3,r3,1
   10f0c:	e0fff315 	stw	r3,-52(fp)
   10f10:	e13ffa17 	ldw	r4,-24(fp)
   10f14:	e0bff317 	ldw	r2,-52(fp)
   10f18:	20bff52e 	bgeu	r4,r2,10ef0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   10f1c:	e0ffff17 	ldw	r3,-4(fp)
   10f20:	e13ffe17 	ldw	r4,-8(fp)
   10f24:	1907883a 	add	r3,r3,r4
   10f28:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10f2c:	e0bff217 	ldw	r2,-56(fp)
   10f30:	10800044 	addi	r2,r2,1
   10f34:	e0bff215 	stw	r2,-56(fp)
   10f38:	e0fff817 	ldw	r3,-32(fp)
   10f3c:	e13ff217 	ldw	r4,-56(fp)
   10f40:	193fe82e 	bgeu	r3,r4,10ee4 <alt_up_pixel_buffer_dma_draw_box+0x324>
   10f44:	00005706 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10f48:	e0bfee17 	ldw	r2,-72(fp)
   10f4c:	10800e17 	ldw	r2,56(r2)
   10f50:	10800098 	cmpnei	r2,r2,2
   10f54:	1000291e 	bne	r2,zero,10ffc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
   10f58:	e0fffe17 	ldw	r3,-8(fp)
   10f5c:	e0fffe17 	ldw	r3,-8(fp)
   10f60:	18c5883a 	add	r2,r3,r3
   10f64:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   10f68:	e13ff917 	ldw	r4,-28(fp)
   10f6c:	e0fffe17 	ldw	r3,-8(fp)
   10f70:	20c5383a 	mul	r2,r4,r3
   10f74:	e13fff17 	ldw	r4,-4(fp)
   10f78:	2089883a 	add	r4,r4,r2
   10f7c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10f80:	e0bff917 	ldw	r2,-28(fp)
   10f84:	e0bff215 	stw	r2,-56(fp)
   10f88:	00001806 	br	10fec <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
   10f8c:	e0fffb17 	ldw	r3,-20(fp)
   10f90:	e0fff315 	stw	r3,-52(fp)
   10f94:	00000b06 	br	10fc4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10f98:	e13ff317 	ldw	r4,-52(fp)
   10f9c:	e13ff317 	ldw	r4,-52(fp)
   10fa0:	2105883a 	add	r2,r4,r4
   10fa4:	1007883a 	mov	r3,r2
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	1885883a 	add	r2,r3,r2
   10fb0:	e0fff717 	ldw	r3,-36(fp)
   10fb4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10fb8:	e0bff317 	ldw	r2,-52(fp)
   10fbc:	10800044 	addi	r2,r2,1
   10fc0:	e0bff315 	stw	r2,-52(fp)
   10fc4:	e0fffa17 	ldw	r3,-24(fp)
   10fc8:	e13ff317 	ldw	r4,-52(fp)
   10fcc:	193ff22e 	bgeu	r3,r4,10f98 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   10fd0:	e0bfff17 	ldw	r2,-4(fp)
   10fd4:	e0fffe17 	ldw	r3,-8(fp)
   10fd8:	10c5883a 	add	r2,r2,r3
   10fdc:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10fe0:	e13ff217 	ldw	r4,-56(fp)
   10fe4:	21000044 	addi	r4,r4,1
   10fe8:	e13ff215 	stw	r4,-56(fp)
   10fec:	e0bff817 	ldw	r2,-32(fp)
   10ff0:	e0fff217 	ldw	r3,-56(fp)
   10ff4:	10ffe52e 	bgeu	r2,r3,10f8c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   10ff8:	00002a06 	br	110a4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10ffc:	e13ffe17 	ldw	r4,-8(fp)
   11000:	e13ffe17 	ldw	r4,-8(fp)
   11004:	2105883a 	add	r2,r4,r4
   11008:	1085883a 	add	r2,r2,r2
   1100c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   11010:	e0fff917 	ldw	r3,-28(fp)
   11014:	e13ffe17 	ldw	r4,-8(fp)
   11018:	1905383a 	mul	r2,r3,r4
   1101c:	e0ffff17 	ldw	r3,-4(fp)
   11020:	1887883a 	add	r3,r3,r2
   11024:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11028:	e13ff917 	ldw	r4,-28(fp)
   1102c:	e13ff215 	stw	r4,-56(fp)
   11030:	00001906 	br	11098 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
   11034:	e0bffb17 	ldw	r2,-20(fp)
   11038:	e0bff315 	stw	r2,-52(fp)
   1103c:	00000c06 	br	11070 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   11040:	e0fff317 	ldw	r3,-52(fp)
   11044:	e0fff317 	ldw	r3,-52(fp)
   11048:	18c5883a 	add	r2,r3,r3
   1104c:	1085883a 	add	r2,r2,r2
   11050:	1007883a 	mov	r3,r2
   11054:	e0bfff17 	ldw	r2,-4(fp)
   11058:	1885883a 	add	r2,r3,r2
   1105c:	e0fff717 	ldw	r3,-36(fp)
   11060:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11064:	e13ff317 	ldw	r4,-52(fp)
   11068:	21000044 	addi	r4,r4,1
   1106c:	e13ff315 	stw	r4,-52(fp)
   11070:	e0bffa17 	ldw	r2,-24(fp)
   11074:	e0fff317 	ldw	r3,-52(fp)
   11078:	10fff12e 	bgeu	r2,r3,11040 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   1107c:	e13fff17 	ldw	r4,-4(fp)
   11080:	e0bffe17 	ldw	r2,-8(fp)
   11084:	2089883a 	add	r4,r4,r2
   11088:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1108c:	e0fff217 	ldw	r3,-56(fp)
   11090:	18c00044 	addi	r3,r3,1
   11094:	e0fff215 	stw	r3,-56(fp)
   11098:	e13ff817 	ldw	r4,-32(fp)
   1109c:	e0bff217 	ldw	r2,-56(fp)
   110a0:	20bfe42e 	bgeu	r4,r2,11034 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
   110a4:	e037883a 	mov	sp,fp
   110a8:	df000017 	ldw	fp,0(sp)
   110ac:	dec00104 	addi	sp,sp,4
   110b0:	f800283a 	ret

000110b4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   110b4:	defff204 	addi	sp,sp,-56
   110b8:	df000d15 	stw	fp,52(sp)
   110bc:	df000d04 	addi	fp,sp,52
   110c0:	e13ff315 	stw	r4,-52(fp)
   110c4:	e17ff415 	stw	r5,-48(fp)
   110c8:	e1bff515 	stw	r6,-44(fp)
   110cc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   110d0:	e0bff317 	ldw	r2,-52(fp)
   110d4:	10800f17 	ldw	r2,60(r2)
   110d8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   110dc:	e0bff317 	ldw	r2,-52(fp)
   110e0:	10801017 	ldw	r2,64(r2)
   110e4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   110e8:	e0bff417 	ldw	r2,-48(fp)
   110ec:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
   110f0:	e0fff517 	ldw	r3,-44(fp)
   110f4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
   110f8:	e13ff617 	ldw	r4,-40(fp)
   110fc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   11100:	e0800117 	ldw	r2,4(fp)
   11104:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   11108:	e0fffb17 	ldw	r3,-20(fp)
   1110c:	e13ffc17 	ldw	r4,-16(fp)
   11110:	1900042e 	bgeu	r3,r4,11124 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
   11114:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
   11118:	e0fffb17 	ldw	r3,-20(fp)
   1111c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
   11120:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   11124:	e13ffc17 	ldw	r4,-16(fp)
   11128:	e0bffe17 	ldw	r2,-8(fp)
   1112c:	2080b12e 	bgeu	r4,r2,113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   11130:	e0fffa17 	ldw	r3,-24(fp)
   11134:	e13ffd17 	ldw	r4,-12(fp)
   11138:	19000136 	bltu	r3,r4,11140 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1113c:	0000ad06 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   11140:	e0bffb17 	ldw	r2,-20(fp)
   11144:	e0fffe17 	ldw	r3,-8(fp)
   11148:	10c00336 	bltu	r2,r3,11158 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
   1114c:	e13ffe17 	ldw	r4,-8(fp)
   11150:	213fffc4 	addi	r4,r4,-1
   11154:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11158:	e0800217 	ldw	r2,8(fp)
   1115c:	10800058 	cmpnei	r2,r2,1
   11160:	1000041e 	bne	r2,zero,11174 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   11164:	e0bff317 	ldw	r2,-52(fp)
   11168:	10800c17 	ldw	r2,48(r2)
   1116c:	e0bfff15 	stw	r2,-4(fp)
   11170:	00000306 	br	11180 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   11174:	e0bff317 	ldw	r2,-52(fp)
   11178:	10800b17 	ldw	r2,44(r2)
   1117c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   11180:	e0bff317 	ldw	r2,-52(fp)
   11184:	10800d17 	ldw	r2,52(r2)
   11188:	1004c03a 	cmpne	r2,r2,zero
   1118c:	1000431e 	bne	r2,zero,1129c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   11190:	e0bff317 	ldw	r2,-52(fp)
   11194:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
   11198:	e0fffa17 	ldw	r3,-24(fp)
   1119c:	1884983a 	sll	r2,r3,r2
   111a0:	e13fff17 	ldw	r4,-4(fp)
   111a4:	2089883a 	add	r4,r4,r2
   111a8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   111ac:	e0bff317 	ldw	r2,-52(fp)
   111b0:	10800e17 	ldw	r2,56(r2)
   111b4:	10800058 	cmpnei	r2,r2,1
   111b8:	10000f1e 	bne	r2,zero,111f8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
   111bc:	e0bffc17 	ldw	r2,-16(fp)
   111c0:	e0bff815 	stw	r2,-32(fp)
   111c4:	00000806 	br	111e8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
   111c8:	e0ffff17 	ldw	r3,-4(fp)
   111cc:	e0bff817 	ldw	r2,-32(fp)
   111d0:	1885883a 	add	r2,r3,r2
   111d4:	e0fff917 	ldw	r3,-28(fp)
   111d8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   111dc:	e0fff817 	ldw	r3,-32(fp)
   111e0:	18c00044 	addi	r3,r3,1
   111e4:	e0fff815 	stw	r3,-32(fp)
   111e8:	e13ffb17 	ldw	r4,-20(fp)
   111ec:	e0bff817 	ldw	r2,-32(fp)
   111f0:	20bff52e 	bgeu	r4,r2,111c8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   111f4:	00007f06 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   111f8:	e0bff317 	ldw	r2,-52(fp)
   111fc:	10800e17 	ldw	r2,56(r2)
   11200:	10800098 	cmpnei	r2,r2,2
   11204:	1000121e 	bne	r2,zero,11250 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
   11208:	e0fffc17 	ldw	r3,-16(fp)
   1120c:	e0fff815 	stw	r3,-32(fp)
   11210:	00000b06 	br	11240 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   11214:	e13ff817 	ldw	r4,-32(fp)
   11218:	e13ff817 	ldw	r4,-32(fp)
   1121c:	2105883a 	add	r2,r4,r4
   11220:	1007883a 	mov	r3,r2
   11224:	e0bfff17 	ldw	r2,-4(fp)
   11228:	1885883a 	add	r2,r3,r2
   1122c:	e0fff917 	ldw	r3,-28(fp)
   11230:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   11234:	e0bff817 	ldw	r2,-32(fp)
   11238:	10800044 	addi	r2,r2,1
   1123c:	e0bff815 	stw	r2,-32(fp)
   11240:	e0fffb17 	ldw	r3,-20(fp)
   11244:	e13ff817 	ldw	r4,-32(fp)
   11248:	193ff22e 	bgeu	r3,r4,11214 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   1124c:	00006906 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	e0bff815 	stw	r2,-32(fp)
   11258:	00000c06 	br	1128c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1125c:	e0fff817 	ldw	r3,-32(fp)
   11260:	e0fff817 	ldw	r3,-32(fp)
   11264:	18c5883a 	add	r2,r3,r3
   11268:	1085883a 	add	r2,r2,r2
   1126c:	1007883a 	mov	r3,r2
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	1885883a 	add	r2,r3,r2
   11278:	e0fff917 	ldw	r3,-28(fp)
   1127c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   11280:	e13ff817 	ldw	r4,-32(fp)
   11284:	21000044 	addi	r4,r4,1
   11288:	e13ff815 	stw	r4,-32(fp)
   1128c:	e0bffb17 	ldw	r2,-20(fp)
   11290:	e0fff817 	ldw	r3,-32(fp)
   11294:	10fff12e 	bgeu	r2,r3,1125c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   11298:	00005606 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1129c:	e0bff317 	ldw	r2,-52(fp)
   112a0:	10800e17 	ldw	r2,56(r2)
   112a4:	10800058 	cmpnei	r2,r2,1
   112a8:	1000151e 	bne	r2,zero,11300 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
   112ac:	e13ffa17 	ldw	r4,-24(fp)
   112b0:	e0fffe17 	ldw	r3,-8(fp)
   112b4:	20c5383a 	mul	r2,r4,r3
   112b8:	e13fff17 	ldw	r4,-4(fp)
   112bc:	2089883a 	add	r4,r4,r2
   112c0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   112c4:	e0bffc17 	ldw	r2,-16(fp)
   112c8:	e0bff715 	stw	r2,-36(fp)
   112cc:	00000806 	br	112f0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   112d0:	e0ffff17 	ldw	r3,-4(fp)
   112d4:	e0bff717 	ldw	r2,-36(fp)
   112d8:	1885883a 	add	r2,r3,r2
   112dc:	e0fff917 	ldw	r3,-28(fp)
   112e0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   112e4:	e0fff717 	ldw	r3,-36(fp)
   112e8:	18c00044 	addi	r3,r3,1
   112ec:	e0fff715 	stw	r3,-36(fp)
   112f0:	e13ffb17 	ldw	r4,-20(fp)
   112f4:	e0bff717 	ldw	r2,-36(fp)
   112f8:	20bff52e 	bgeu	r4,r2,112d0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   112fc:	00003d06 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11300:	e0bff317 	ldw	r2,-52(fp)
   11304:	10800e17 	ldw	r2,56(r2)
   11308:	10800098 	cmpnei	r2,r2,2
   1130c:	10001c1e 	bne	r2,zero,11380 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
   11310:	e0fffe17 	ldw	r3,-8(fp)
   11314:	e0fffe17 	ldw	r3,-8(fp)
   11318:	18c5883a 	add	r2,r3,r3
   1131c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   11320:	e13ffa17 	ldw	r4,-24(fp)
   11324:	e0fffe17 	ldw	r3,-8(fp)
   11328:	20c5383a 	mul	r2,r4,r3
   1132c:	e13fff17 	ldw	r4,-4(fp)
   11330:	2089883a 	add	r4,r4,r2
   11334:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   11338:	e0bffc17 	ldw	r2,-16(fp)
   1133c:	e0bff715 	stw	r2,-36(fp)
   11340:	00000b06 	br	11370 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   11344:	e0fff717 	ldw	r3,-36(fp)
   11348:	e0fff717 	ldw	r3,-36(fp)
   1134c:	18c5883a 	add	r2,r3,r3
   11350:	1007883a 	mov	r3,r2
   11354:	e0bfff17 	ldw	r2,-4(fp)
   11358:	1885883a 	add	r2,r3,r2
   1135c:	e0fff917 	ldw	r3,-28(fp)
   11360:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   11364:	e13ff717 	ldw	r4,-36(fp)
   11368:	21000044 	addi	r4,r4,1
   1136c:	e13ff715 	stw	r4,-36(fp)
   11370:	e0bffb17 	ldw	r2,-20(fp)
   11374:	e0fff717 	ldw	r3,-36(fp)
   11378:	10fff22e 	bgeu	r2,r3,11344 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   1137c:	00001d06 	br	113f4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   11380:	e13ffe17 	ldw	r4,-8(fp)
   11384:	e13ffe17 	ldw	r4,-8(fp)
   11388:	2105883a 	add	r2,r4,r4
   1138c:	1085883a 	add	r2,r2,r2
   11390:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   11394:	e0fffa17 	ldw	r3,-24(fp)
   11398:	e13ffe17 	ldw	r4,-8(fp)
   1139c:	1905383a 	mul	r2,r3,r4
   113a0:	e0ffff17 	ldw	r3,-4(fp)
   113a4:	1887883a 	add	r3,r3,r2
   113a8:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   113ac:	e13ffc17 	ldw	r4,-16(fp)
   113b0:	e13ff715 	stw	r4,-36(fp)
   113b4:	00000c06 	br	113e8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   113b8:	e0fff717 	ldw	r3,-36(fp)
   113bc:	e0fff717 	ldw	r3,-36(fp)
   113c0:	18c5883a 	add	r2,r3,r3
   113c4:	1085883a 	add	r2,r2,r2
   113c8:	1007883a 	mov	r3,r2
   113cc:	e0bfff17 	ldw	r2,-4(fp)
   113d0:	1885883a 	add	r2,r3,r2
   113d4:	e0fff917 	ldw	r3,-28(fp)
   113d8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   113dc:	e13ff717 	ldw	r4,-36(fp)
   113e0:	21000044 	addi	r4,r4,1
   113e4:	e13ff715 	stw	r4,-36(fp)
   113e8:	e0bffb17 	ldw	r2,-20(fp)
   113ec:	e0fff717 	ldw	r3,-36(fp)
   113f0:	10fff12e 	bgeu	r2,r3,113b8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   113f4:	e037883a 	mov	sp,fp
   113f8:	df000017 	ldw	fp,0(sp)
   113fc:	dec00104 	addi	sp,sp,4
   11400:	f800283a 	ret

00011404 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   11404:	defff104 	addi	sp,sp,-60
   11408:	df000e15 	stw	fp,56(sp)
   1140c:	df000e04 	addi	fp,sp,56
   11410:	e13ff215 	stw	r4,-56(fp)
   11414:	e17ff315 	stw	r5,-52(fp)
   11418:	e1bff415 	stw	r6,-48(fp)
   1141c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   11420:	e0bff217 	ldw	r2,-56(fp)
   11424:	10800f17 	ldw	r2,60(r2)
   11428:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1142c:	e0bff217 	ldw	r2,-56(fp)
   11430:	10801017 	ldw	r2,64(r2)
   11434:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   11438:	e0bff317 	ldw	r2,-52(fp)
   1143c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   11440:	e0fff417 	ldw	r3,-48(fp)
   11444:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   11448:	e13ff517 	ldw	r4,-44(fp)
   1144c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   11450:	e0800117 	ldw	r2,4(fp)
   11454:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   11458:	e0fffa17 	ldw	r3,-24(fp)
   1145c:	e13ffb17 	ldw	r4,-20(fp)
   11460:	1900042e 	bgeu	r3,r4,11474 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   11464:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   11468:	e0fffa17 	ldw	r3,-24(fp)
   1146c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   11470:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   11474:	e13ffc17 	ldw	r4,-16(fp)
   11478:	e0bffe17 	ldw	r2,-8(fp)
   1147c:	2080d12e 	bgeu	r4,r2,117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   11480:	e0fffb17 	ldw	r3,-20(fp)
   11484:	e13ffd17 	ldw	r4,-12(fp)
   11488:	19000136 	bltu	r3,r4,11490 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   1148c:	0000cd06 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   11490:	e0bffa17 	ldw	r2,-24(fp)
   11494:	e0fffd17 	ldw	r3,-12(fp)
   11498:	10c00336 	bltu	r2,r3,114a8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   1149c:	e13ffd17 	ldw	r4,-12(fp)
   114a0:	213fffc4 	addi	r4,r4,-1
   114a4:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   114a8:	e0800217 	ldw	r2,8(fp)
   114ac:	10800058 	cmpnei	r2,r2,1
   114b0:	1000041e 	bne	r2,zero,114c4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   114b4:	e0bff217 	ldw	r2,-56(fp)
   114b8:	10800c17 	ldw	r2,48(r2)
   114bc:	e0bfff15 	stw	r2,-4(fp)
   114c0:	00000306 	br	114d0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   114c4:	e0bff217 	ldw	r2,-56(fp)
   114c8:	10800b17 	ldw	r2,44(r2)
   114cc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   114d0:	e0bff217 	ldw	r2,-56(fp)
   114d4:	10800d17 	ldw	r2,52(r2)
   114d8:	1004c03a 	cmpne	r2,r2,zero
   114dc:	1000571e 	bne	r2,zero,1163c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   114e0:	e0bff217 	ldw	r2,-56(fp)
   114e4:	10801317 	ldw	r2,76(r2)
   114e8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   114ec:	e0bff717 	ldw	r2,-36(fp)
   114f0:	e0fffb17 	ldw	r3,-20(fp)
   114f4:	1884983a 	sll	r2,r3,r2
   114f8:	e13fff17 	ldw	r4,-4(fp)
   114fc:	2089883a 	add	r4,r4,r2
   11500:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11504:	e0bff217 	ldw	r2,-56(fp)
   11508:	10800e17 	ldw	r2,56(r2)
   1150c:	10800058 	cmpnei	r2,r2,1
   11510:	1000151e 	bne	r2,zero,11568 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   11514:	e0bffb17 	ldw	r2,-20(fp)
   11518:	e0bff815 	stw	r2,-32(fp)
   1151c:	00000e06 	br	11558 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   11520:	e0ffff17 	ldw	r3,-4(fp)
   11524:	e0bffc17 	ldw	r2,-16(fp)
   11528:	1885883a 	add	r2,r3,r2
   1152c:	e0fff917 	ldw	r3,-28(fp)
   11530:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   11534:	e0fff717 	ldw	r3,-36(fp)
   11538:	00800044 	movi	r2,1
   1153c:	10c4983a 	sll	r2,r2,r3
   11540:	e0ffff17 	ldw	r3,-4(fp)
   11544:	1887883a 	add	r3,r3,r2
   11548:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   1154c:	e13ff817 	ldw	r4,-32(fp)
   11550:	21000044 	addi	r4,r4,1
   11554:	e13ff815 	stw	r4,-32(fp)
   11558:	e0bffa17 	ldw	r2,-24(fp)
   1155c:	e0fff817 	ldw	r3,-32(fp)
   11560:	10ffef2e 	bgeu	r2,r3,11520 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   11564:	00009706 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11568:	e0bff217 	ldw	r2,-56(fp)
   1156c:	10800e17 	ldw	r2,56(r2)
   11570:	10800098 	cmpnei	r2,r2,2
   11574:	1000181e 	bne	r2,zero,115d8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   11578:	e13ffb17 	ldw	r4,-20(fp)
   1157c:	e13ff815 	stw	r4,-32(fp)
   11580:	00001106 	br	115c8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   11584:	e0fffc17 	ldw	r3,-16(fp)
   11588:	e0fffc17 	ldw	r3,-16(fp)
   1158c:	18c5883a 	add	r2,r3,r3
   11590:	1007883a 	mov	r3,r2
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	1885883a 	add	r2,r3,r2
   1159c:	e0fff917 	ldw	r3,-28(fp)
   115a0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   115a4:	e0fff717 	ldw	r3,-36(fp)
   115a8:	00800044 	movi	r2,1
   115ac:	10c4983a 	sll	r2,r2,r3
   115b0:	e13fff17 	ldw	r4,-4(fp)
   115b4:	2089883a 	add	r4,r4,r2
   115b8:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   115bc:	e0bff817 	ldw	r2,-32(fp)
   115c0:	10800044 	addi	r2,r2,1
   115c4:	e0bff815 	stw	r2,-32(fp)
   115c8:	e0fffa17 	ldw	r3,-24(fp)
   115cc:	e13ff817 	ldw	r4,-32(fp)
   115d0:	193fec2e 	bgeu	r3,r4,11584 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   115d4:	00007b06 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   115d8:	e0bffb17 	ldw	r2,-20(fp)
   115dc:	e0bff815 	stw	r2,-32(fp)
   115e0:	00001206 	br	1162c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   115e4:	e0fffc17 	ldw	r3,-16(fp)
   115e8:	e0fffc17 	ldw	r3,-16(fp)
   115ec:	18c5883a 	add	r2,r3,r3
   115f0:	1085883a 	add	r2,r2,r2
   115f4:	1007883a 	mov	r3,r2
   115f8:	e0bfff17 	ldw	r2,-4(fp)
   115fc:	1885883a 	add	r2,r3,r2
   11600:	e0fff917 	ldw	r3,-28(fp)
   11604:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   11608:	e0fff717 	ldw	r3,-36(fp)
   1160c:	00800044 	movi	r2,1
   11610:	10c4983a 	sll	r2,r2,r3
   11614:	e13fff17 	ldw	r4,-4(fp)
   11618:	2089883a 	add	r4,r4,r2
   1161c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   11620:	e0bff817 	ldw	r2,-32(fp)
   11624:	10800044 	addi	r2,r2,1
   11628:	e0bff815 	stw	r2,-32(fp)
   1162c:	e0fffa17 	ldw	r3,-24(fp)
   11630:	e13ff817 	ldw	r4,-32(fp)
   11634:	193feb2e 	bgeu	r3,r4,115e4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   11638:	00006206 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1163c:	e0bff217 	ldw	r2,-56(fp)
   11640:	10800e17 	ldw	r2,56(r2)
   11644:	10800058 	cmpnei	r2,r2,1
   11648:	1000191e 	bne	r2,zero,116b0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   1164c:	e0fffb17 	ldw	r3,-20(fp)
   11650:	e13ffe17 	ldw	r4,-8(fp)
   11654:	1905383a 	mul	r2,r3,r4
   11658:	e0ffff17 	ldw	r3,-4(fp)
   1165c:	1887883a 	add	r3,r3,r2
   11660:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11664:	e13ffb17 	ldw	r4,-20(fp)
   11668:	e13ff615 	stw	r4,-40(fp)
   1166c:	00000c06 	br	116a0 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   11670:	e0ffff17 	ldw	r3,-4(fp)
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	1885883a 	add	r2,r3,r2
   1167c:	e0fff917 	ldw	r3,-28(fp)
   11680:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   11684:	e0bfff17 	ldw	r2,-4(fp)
   11688:	e0fffe17 	ldw	r3,-8(fp)
   1168c:	10c5883a 	add	r2,r2,r3
   11690:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11694:	e13ff617 	ldw	r4,-40(fp)
   11698:	21000044 	addi	r4,r4,1
   1169c:	e13ff615 	stw	r4,-40(fp)
   116a0:	e0bffa17 	ldw	r2,-24(fp)
   116a4:	e0fff617 	ldw	r3,-40(fp)
   116a8:	10fff12e 	bgeu	r2,r3,11670 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   116ac:	00004506 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   116b0:	e0bff217 	ldw	r2,-56(fp)
   116b4:	10800e17 	ldw	r2,56(r2)
   116b8:	10800098 	cmpnei	r2,r2,2
   116bc:	1000201e 	bne	r2,zero,11740 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   116c0:	e13ffe17 	ldw	r4,-8(fp)
   116c4:	e13ffe17 	ldw	r4,-8(fp)
   116c8:	2105883a 	add	r2,r4,r4
   116cc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   116d0:	e0fffb17 	ldw	r3,-20(fp)
   116d4:	e13ffe17 	ldw	r4,-8(fp)
   116d8:	1905383a 	mul	r2,r3,r4
   116dc:	e0ffff17 	ldw	r3,-4(fp)
   116e0:	1887883a 	add	r3,r3,r2
   116e4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   116e8:	e13ffb17 	ldw	r4,-20(fp)
   116ec:	e13ff615 	stw	r4,-40(fp)
   116f0:	00000f06 	br	11730 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   116f4:	e0fffc17 	ldw	r3,-16(fp)
   116f8:	e0fffc17 	ldw	r3,-16(fp)
   116fc:	18c5883a 	add	r2,r3,r3
   11700:	1007883a 	mov	r3,r2
   11704:	e0bfff17 	ldw	r2,-4(fp)
   11708:	1885883a 	add	r2,r3,r2
   1170c:	e0fff917 	ldw	r3,-28(fp)
   11710:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   11714:	e13fff17 	ldw	r4,-4(fp)
   11718:	e0bffe17 	ldw	r2,-8(fp)
   1171c:	2089883a 	add	r4,r4,r2
   11720:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11724:	e0fff617 	ldw	r3,-40(fp)
   11728:	18c00044 	addi	r3,r3,1
   1172c:	e0fff615 	stw	r3,-40(fp)
   11730:	e13ffa17 	ldw	r4,-24(fp)
   11734:	e0bff617 	ldw	r2,-40(fp)
   11738:	20bfee2e 	bgeu	r4,r2,116f4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   1173c:	00002106 	br	117c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   11740:	e0fffe17 	ldw	r3,-8(fp)
   11744:	e0fffe17 	ldw	r3,-8(fp)
   11748:	18c5883a 	add	r2,r3,r3
   1174c:	1085883a 	add	r2,r2,r2
   11750:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   11754:	e13ffb17 	ldw	r4,-20(fp)
   11758:	e0fffe17 	ldw	r3,-8(fp)
   1175c:	20c5383a 	mul	r2,r4,r3
   11760:	e13fff17 	ldw	r4,-4(fp)
   11764:	2089883a 	add	r4,r4,r2
   11768:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   1176c:	e0bffb17 	ldw	r2,-20(fp)
   11770:	e0bff615 	stw	r2,-40(fp)
   11774:	00001006 	br	117b8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   11778:	e0fffc17 	ldw	r3,-16(fp)
   1177c:	e0fffc17 	ldw	r3,-16(fp)
   11780:	18c5883a 	add	r2,r3,r3
   11784:	1085883a 	add	r2,r2,r2
   11788:	1007883a 	mov	r3,r2
   1178c:	e0bfff17 	ldw	r2,-4(fp)
   11790:	1885883a 	add	r2,r3,r2
   11794:	e0fff917 	ldw	r3,-28(fp)
   11798:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   1179c:	e13fff17 	ldw	r4,-4(fp)
   117a0:	e0bffe17 	ldw	r2,-8(fp)
   117a4:	2089883a 	add	r4,r4,r2
   117a8:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   117ac:	e0fff617 	ldw	r3,-40(fp)
   117b0:	18c00044 	addi	r3,r3,1
   117b4:	e0fff615 	stw	r3,-40(fp)
   117b8:	e13ffa17 	ldw	r4,-24(fp)
   117bc:	e0bff617 	ldw	r2,-40(fp)
   117c0:	20bfed2e 	bgeu	r4,r2,11778 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   117c4:	e037883a 	mov	sp,fp
   117c8:	df000017 	ldw	fp,0(sp)
   117cc:	dec00104 	addi	sp,sp,4
   117d0:	f800283a 	ret

000117d4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   117d4:	defff804 	addi	sp,sp,-32
   117d8:	dfc00715 	stw	ra,28(sp)
   117dc:	df000615 	stw	fp,24(sp)
   117e0:	df000604 	addi	fp,sp,24
   117e4:	e13ffc15 	stw	r4,-16(fp)
   117e8:	e17ffd15 	stw	r5,-12(fp)
   117ec:	e1bffe15 	stw	r6,-8(fp)
   117f0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   117f4:	e0800317 	ldw	r2,12(fp)
   117f8:	d8800015 	stw	r2,0(sp)
   117fc:	e0800417 	ldw	r2,16(fp)
   11800:	d8800115 	stw	r2,4(sp)
   11804:	e13ffc17 	ldw	r4,-16(fp)
   11808:	e17ffd17 	ldw	r5,-12(fp)
   1180c:	e1bfff17 	ldw	r6,-4(fp)
   11810:	e1fffe17 	ldw	r7,-8(fp)
   11814:	00110b40 	call	110b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   11818:	e0800317 	ldw	r2,12(fp)
   1181c:	d8800015 	stw	r2,0(sp)
   11820:	e0800417 	ldw	r2,16(fp)
   11824:	d8800115 	stw	r2,4(sp)
   11828:	e13ffc17 	ldw	r4,-16(fp)
   1182c:	e17ffd17 	ldw	r5,-12(fp)
   11830:	e1bfff17 	ldw	r6,-4(fp)
   11834:	e1c00217 	ldw	r7,8(fp)
   11838:	00110b40 	call	110b4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   1183c:	e0800317 	ldw	r2,12(fp)
   11840:	d8800015 	stw	r2,0(sp)
   11844:	e0800417 	ldw	r2,16(fp)
   11848:	d8800115 	stw	r2,4(sp)
   1184c:	e13ffc17 	ldw	r4,-16(fp)
   11850:	e17ffd17 	ldw	r5,-12(fp)
   11854:	e1bffe17 	ldw	r6,-8(fp)
   11858:	e1c00217 	ldw	r7,8(fp)
   1185c:	00114040 	call	11404 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   11860:	e0800317 	ldw	r2,12(fp)
   11864:	d8800015 	stw	r2,0(sp)
   11868:	e0800417 	ldw	r2,16(fp)
   1186c:	d8800115 	stw	r2,4(sp)
   11870:	e13ffc17 	ldw	r4,-16(fp)
   11874:	e17fff17 	ldw	r5,-4(fp)
   11878:	e1bffe17 	ldw	r6,-8(fp)
   1187c:	e1c00217 	ldw	r7,8(fp)
   11880:	00114040 	call	11404 <alt_up_pixel_buffer_dma_draw_vline>
}
   11884:	e037883a 	mov	sp,fp
   11888:	dfc00117 	ldw	ra,4(sp)
   1188c:	df000017 	ldw	fp,0(sp)
   11890:	dec00204 	addi	sp,sp,8
   11894:	f800283a 	ret

00011898 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   11898:	defffb04 	addi	sp,sp,-20
   1189c:	df000415 	stw	fp,16(sp)
   118a0:	df000404 	addi	fp,sp,16
   118a4:	e13ffc15 	stw	r4,-16(fp)
   118a8:	e17ffd15 	stw	r5,-12(fp)
   118ac:	e1bffe15 	stw	r6,-8(fp)
   118b0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   118b4:	e0c00217 	ldw	r3,8(fp)
   118b8:	1804c03a 	cmpne	r2,r3,zero
   118bc:	10000b1e 	bne	r2,zero,118ec <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   118c0:	e13ffd17 	ldw	r4,-12(fp)
   118c4:	e0ffff17 	ldw	r3,-4(fp)
   118c8:	20c5383a 	mul	r2,r4,r3
   118cc:	e13ffe17 	ldw	r4,-8(fp)
   118d0:	1105883a 	add	r2,r2,r4
   118d4:	1007883a 	mov	r3,r2
   118d8:	e0bffc17 	ldw	r2,-16(fp)
   118dc:	1885883a 	add	r2,r3,r2
   118e0:	e0c00117 	ldw	r3,4(fp)
   118e4:	10c00025 	stbio	r3,0(r2)
   118e8:	00001b06 	br	11958 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   118ec:	e1000217 	ldw	r4,8(fp)
   118f0:	20800058 	cmpnei	r2,r4,1
   118f4:	10000c1e 	bne	r2,zero,11928 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   118f8:	e0fffd17 	ldw	r3,-12(fp)
   118fc:	e13fff17 	ldw	r4,-4(fp)
   11900:	1905383a 	mul	r2,r3,r4
   11904:	e0fffe17 	ldw	r3,-8(fp)
   11908:	10c5883a 	add	r2,r2,r3
   1190c:	1085883a 	add	r2,r2,r2
   11910:	1007883a 	mov	r3,r2
   11914:	e0bffc17 	ldw	r2,-16(fp)
   11918:	1885883a 	add	r2,r3,r2
   1191c:	e1000117 	ldw	r4,4(fp)
   11920:	1100002d 	sthio	r4,0(r2)
   11924:	00000c06 	br	11958 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   11928:	e0fffd17 	ldw	r3,-12(fp)
   1192c:	e13fff17 	ldw	r4,-4(fp)
   11930:	1905383a 	mul	r2,r3,r4
   11934:	e0fffe17 	ldw	r3,-8(fp)
   11938:	10c5883a 	add	r2,r2,r3
   1193c:	1085883a 	add	r2,r2,r2
   11940:	1085883a 	add	r2,r2,r2
   11944:	1007883a 	mov	r3,r2
   11948:	e0bffc17 	ldw	r2,-16(fp)
   1194c:	1885883a 	add	r2,r3,r2
   11950:	e1000117 	ldw	r4,4(fp)
   11954:	11000035 	stwio	r4,0(r2)
}
   11958:	e037883a 	mov	sp,fp
   1195c:	df000017 	ldw	fp,0(sp)
   11960:	dec00104 	addi	sp,sp,4
   11964:	f800283a 	ret

00011968 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   11968:	deffe404 	addi	sp,sp,-112
   1196c:	dfc01b15 	stw	ra,108(sp)
   11970:	df001a15 	stw	fp,104(sp)
   11974:	df001a04 	addi	fp,sp,104
   11978:	e13fe815 	stw	r4,-96(fp)
   1197c:	e17fe915 	stw	r5,-92(fp)
   11980:	e1bfea15 	stw	r6,-88(fp)
   11984:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   11988:	e0bfe917 	ldw	r2,-92(fp)
   1198c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   11990:	e0ffea17 	ldw	r3,-88(fp)
   11994:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   11998:	e13feb17 	ldw	r4,-84(fp)
   1199c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   119a0:	e0800217 	ldw	r2,8(fp)
   119a4:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   119a8:	e0fff717 	ldw	r3,-36(fp)
   119ac:	e13ff917 	ldw	r4,-28(fp)
   119b0:	1905c83a 	sub	r2,r3,r4
   119b4:	e0bfff15 	stw	r2,-4(fp)
   119b8:	e0ffff17 	ldw	r3,-4(fp)
   119bc:	1804403a 	cmpge	r2,r3,zero
   119c0:	1000031e 	bne	r2,zero,119d0 <alt_up_pixel_buffer_dma_draw_line+0x68>
   119c4:	e13fff17 	ldw	r4,-4(fp)
   119c8:	0109c83a 	sub	r4,zero,r4
   119cc:	e13fff15 	stw	r4,-4(fp)
   119d0:	e0fff817 	ldw	r3,-32(fp)
   119d4:	e13ffa17 	ldw	r4,-24(fp)
   119d8:	1905c83a 	sub	r2,r3,r4
   119dc:	e0bffe15 	stw	r2,-8(fp)
   119e0:	e0fffe17 	ldw	r3,-8(fp)
   119e4:	1804403a 	cmpge	r2,r3,zero
   119e8:	1000031e 	bne	r2,zero,119f8 <alt_up_pixel_buffer_dma_draw_line+0x90>
   119ec:	e13ffe17 	ldw	r4,-8(fp)
   119f0:	0109c83a 	sub	r4,zero,r4
   119f4:	e13ffe15 	stw	r4,-8(fp)
   119f8:	e0fffe17 	ldw	r3,-8(fp)
   119fc:	e13fff17 	ldw	r4,-4(fp)
   11a00:	1904803a 	cmplt	r2,r3,r4
   11a04:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   11a08:	e0bfe817 	ldw	r2,-96(fp)
   11a0c:	10800e17 	ldw	r2,56(r2)
   11a10:	10800060 	cmpeqi	r2,r2,1
   11a14:	10000c1e 	bne	r2,zero,11a48 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   11a18:	e0bfe817 	ldw	r2,-96(fp)
   11a1c:	10800e17 	ldw	r2,56(r2)
   11a20:	10800098 	cmpnei	r2,r2,2
   11a24:	1000031e 	bne	r2,zero,11a34 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   11a28:	00800044 	movi	r2,1
   11a2c:	e0bffc15 	stw	r2,-16(fp)
   11a30:	00000206 	br	11a3c <alt_up_pixel_buffer_dma_draw_line+0xd4>
   11a34:	00c00084 	movi	r3,2
   11a38:	e0fffc15 	stw	r3,-16(fp)
   11a3c:	e13ffc17 	ldw	r4,-16(fp)
   11a40:	e13ffd15 	stw	r4,-12(fp)
   11a44:	00000106 	br	11a4c <alt_up_pixel_buffer_dma_draw_line+0xe4>
   11a48:	e03ffd15 	stw	zero,-12(fp)
   11a4c:	e0bffd17 	ldw	r2,-12(fp)
   11a50:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   11a54:	e0c00317 	ldw	r3,12(fp)
   11a58:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   11a5c:	e0bfe817 	ldw	r2,-96(fp)
   11a60:	10800d17 	ldw	r2,52(r2)
   11a64:	1004c03a 	cmpne	r2,r2,zero
   11a68:	1000091e 	bne	r2,zero,11a90 <alt_up_pixel_buffer_dma_draw_line+0x128>
   11a6c:	e0bfe817 	ldw	r2,-96(fp)
   11a70:	10c01317 	ldw	r3,76(r2)
   11a74:	e0bfef17 	ldw	r2,-68(fp)
   11a78:	1885c83a 	sub	r2,r3,r2
   11a7c:	1007883a 	mov	r3,r2
   11a80:	00800044 	movi	r2,1
   11a84:	10c4983a 	sll	r2,r2,r3
   11a88:	e0bffb15 	stw	r2,-20(fp)
   11a8c:	00000306 	br	11a9c <alt_up_pixel_buffer_dma_draw_line+0x134>
   11a90:	e0bfe817 	ldw	r2,-96(fp)
   11a94:	10800f17 	ldw	r2,60(r2)
   11a98:	e0bffb15 	stw	r2,-20(fp)
   11a9c:	e13ffb17 	ldw	r4,-20(fp)
   11aa0:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   11aa4:	e0800417 	ldw	r2,16(fp)
   11aa8:	10800058 	cmpnei	r2,r2,1
   11aac:	1000041e 	bne	r2,zero,11ac0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   11ab0:	e0bfe817 	ldw	r2,-96(fp)
   11ab4:	10800c17 	ldw	r2,48(r2)
   11ab8:	e0bfed15 	stw	r2,-76(fp)
   11abc:	00000306 	br	11acc <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   11ac0:	e0bfe817 	ldw	r2,-96(fp)
   11ac4:	10800b17 	ldw	r2,44(r2)
   11ac8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   11acc:	e0fff603 	ldbu	r3,-40(fp)
   11ad0:	18803fcc 	andi	r2,r3,255
   11ad4:	1080201c 	xori	r2,r2,128
   11ad8:	10bfe004 	addi	r2,r2,-128
   11adc:	10800050 	cmplti	r2,r2,1
   11ae0:	10000c1e 	bne	r2,zero,11b14 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   11ae4:	e13ffa17 	ldw	r4,-24(fp)
   11ae8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   11aec:	e0bff917 	ldw	r2,-28(fp)
   11af0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   11af4:	e0fff317 	ldw	r3,-52(fp)
   11af8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   11afc:	e13ff817 	ldw	r4,-32(fp)
   11b00:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   11b04:	e0bff717 	ldw	r2,-36(fp)
   11b08:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   11b0c:	e0fff317 	ldw	r3,-52(fp)
   11b10:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   11b14:	e13ff817 	ldw	r4,-32(fp)
   11b18:	e0bffa17 	ldw	r2,-24(fp)
   11b1c:	20800c0e 	bge	r4,r2,11b50 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   11b20:	e0fffa17 	ldw	r3,-24(fp)
   11b24:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   11b28:	e13ff817 	ldw	r4,-32(fp)
   11b2c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   11b30:	e0bff317 	ldw	r2,-52(fp)
   11b34:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   11b38:	e0fff917 	ldw	r3,-28(fp)
   11b3c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   11b40:	e13ff717 	ldw	r4,-36(fp)
   11b44:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   11b48:	e0bff317 	ldw	r2,-52(fp)
   11b4c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   11b50:	e0fff817 	ldw	r3,-32(fp)
   11b54:	e13ffa17 	ldw	r4,-24(fp)
   11b58:	1907c83a 	sub	r3,r3,r4
   11b5c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   11b60:	e0fff717 	ldw	r3,-36(fp)
   11b64:	e13ff917 	ldw	r4,-28(fp)
   11b68:	1905c83a 	sub	r2,r3,r4
   11b6c:	e0bff415 	stw	r2,-48(fp)
   11b70:	e0fff417 	ldw	r3,-48(fp)
   11b74:	1804403a 	cmpge	r2,r3,zero
   11b78:	1000031e 	bne	r2,zero,11b88 <alt_up_pixel_buffer_dma_draw_line+0x220>
   11b7c:	e13ff417 	ldw	r4,-48(fp)
   11b80:	0109c83a 	sub	r4,zero,r4
   11b84:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   11b88:	e0fff517 	ldw	r3,-44(fp)
   11b8c:	1804d7fa 	srli	r2,r3,31
   11b90:	e13ff517 	ldw	r4,-44(fp)
   11b94:	1105883a 	add	r2,r2,r4
   11b98:	1005d07a 	srai	r2,r2,1
   11b9c:	0085c83a 	sub	r2,zero,r2
   11ba0:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   11ba4:	e0bff917 	ldw	r2,-28(fp)
   11ba8:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   11bac:	e0fff917 	ldw	r3,-28(fp)
   11bb0:	e13ff717 	ldw	r4,-36(fp)
   11bb4:	1900030e 	bge	r3,r4,11bc4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   11bb8:	00800044 	movi	r2,1
   11bbc:	e0bff215 	stw	r2,-56(fp)
   11bc0:	00000206 	br	11bcc <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   11bc4:	00ffffc4 	movi	r3,-1
   11bc8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   11bcc:	e13ff603 	ldbu	r4,-40(fp)
   11bd0:	20803fcc 	andi	r2,r4,255
   11bd4:	1080201c 	xori	r2,r2,128
   11bd8:	10bfe004 	addi	r2,r2,-128
   11bdc:	10800058 	cmpnei	r2,r2,1
   11be0:	1000221e 	bne	r2,zero,11c6c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   11be4:	e0bffa17 	ldw	r2,-24(fp)
   11be8:	e0bff115 	stw	r2,-60(fp)
   11bec:	00001b06 	br	11c5c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   11bf0:	e0ffee17 	ldw	r3,-72(fp)
   11bf4:	d8c00015 	stw	r3,0(sp)
   11bf8:	e13fef17 	ldw	r4,-68(fp)
   11bfc:	d9000115 	stw	r4,4(sp)
   11c00:	e13fed17 	ldw	r4,-76(fp)
   11c04:	e17fec17 	ldw	r5,-80(fp)
   11c08:	e1bff017 	ldw	r6,-64(fp)
   11c0c:	e1fff117 	ldw	r7,-60(fp)
   11c10:	00118980 	call	11898 <helper_plot_pixel>
			error = error + deltay;
   11c14:	e0bff317 	ldw	r2,-52(fp)
   11c18:	e0fff417 	ldw	r3,-48(fp)
   11c1c:	10c5883a 	add	r2,r2,r3
   11c20:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   11c24:	e13ff317 	ldw	r4,-52(fp)
   11c28:	20800050 	cmplti	r2,r4,1
   11c2c:	1000081e 	bne	r2,zero,11c50 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   11c30:	e0bff017 	ldw	r2,-64(fp)
   11c34:	e0fff217 	ldw	r3,-56(fp)
   11c38:	10c5883a 	add	r2,r2,r3
   11c3c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   11c40:	e13ff317 	ldw	r4,-52(fp)
   11c44:	e0bff517 	ldw	r2,-44(fp)
   11c48:	2089c83a 	sub	r4,r4,r2
   11c4c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   11c50:	e0fff117 	ldw	r3,-60(fp)
   11c54:	18c00044 	addi	r3,r3,1
   11c58:	e0fff115 	stw	r3,-60(fp)
   11c5c:	e13ff817 	ldw	r4,-32(fp)
   11c60:	e0bff117 	ldw	r2,-60(fp)
   11c64:	20bfe20e 	bge	r4,r2,11bf0 <alt_up_pixel_buffer_dma_draw_line+0x288>
   11c68:	00002106 	br	11cf0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   11c6c:	e0fffa17 	ldw	r3,-24(fp)
   11c70:	e0fff115 	stw	r3,-60(fp)
   11c74:	00001b06 	br	11ce4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   11c78:	e13fee17 	ldw	r4,-72(fp)
   11c7c:	d9000015 	stw	r4,0(sp)
   11c80:	e0bfef17 	ldw	r2,-68(fp)
   11c84:	d8800115 	stw	r2,4(sp)
   11c88:	e13fed17 	ldw	r4,-76(fp)
   11c8c:	e17fec17 	ldw	r5,-80(fp)
   11c90:	e1bff117 	ldw	r6,-60(fp)
   11c94:	e1fff017 	ldw	r7,-64(fp)
   11c98:	00118980 	call	11898 <helper_plot_pixel>
			error = error + deltay;
   11c9c:	e0fff317 	ldw	r3,-52(fp)
   11ca0:	e13ff417 	ldw	r4,-48(fp)
   11ca4:	1907883a 	add	r3,r3,r4
   11ca8:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   11cac:	e0fff317 	ldw	r3,-52(fp)
   11cb0:	18800050 	cmplti	r2,r3,1
   11cb4:	1000081e 	bne	r2,zero,11cd8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   11cb8:	e13ff017 	ldw	r4,-64(fp)
   11cbc:	e0bff217 	ldw	r2,-56(fp)
   11cc0:	2089883a 	add	r4,r4,r2
   11cc4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   11cc8:	e0fff317 	ldw	r3,-52(fp)
   11ccc:	e13ff517 	ldw	r4,-44(fp)
   11cd0:	1907c83a 	sub	r3,r3,r4
   11cd4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   11cd8:	e0bff117 	ldw	r2,-60(fp)
   11cdc:	10800044 	addi	r2,r2,1
   11ce0:	e0bff115 	stw	r2,-60(fp)
   11ce4:	e0fff817 	ldw	r3,-32(fp)
   11ce8:	e13ff117 	ldw	r4,-60(fp)
   11cec:	193fe20e 	bge	r3,r4,11c78 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   11cf0:	e037883a 	mov	sp,fp
   11cf4:	dfc00117 	ldw	ra,4(sp)
   11cf8:	df000017 	ldw	fp,0(sp)
   11cfc:	dec00204 	addi	sp,sp,8
   11d00:	f800283a 	ret

00011d04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11d04:	defff404 	addi	sp,sp,-48
   11d08:	df000b15 	stw	fp,44(sp)
   11d0c:	df000b04 	addi	fp,sp,44
   11d10:	e13ffb15 	stw	r4,-20(fp)
   11d14:	e17ffc15 	stw	r5,-16(fp)
   11d18:	e1bffd15 	stw	r6,-12(fp)
   11d1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11d20:	e03ff915 	stw	zero,-28(fp)
   11d24:	00800074 	movhi	r2,1
   11d28:	109e5d04 	addi	r2,r2,31092
   11d2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   11d30:	1005003a 	cmpeq	r2,r2,zero
   11d34:	1000411e 	bne	r2,zero,11e3c <alt_alarm_start+0x138>
  {
    if (alarm)
   11d38:	e0bffb17 	ldw	r2,-20(fp)
   11d3c:	1005003a 	cmpeq	r2,r2,zero
   11d40:	10003b1e 	bne	r2,zero,11e30 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   11d44:	e0fffb17 	ldw	r3,-20(fp)
   11d48:	e0bffd17 	ldw	r2,-12(fp)
   11d4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   11d50:	e0fffb17 	ldw	r3,-20(fp)
   11d54:	e0bffe17 	ldw	r2,-8(fp)
   11d58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d5c:	0005303a 	rdctl	r2,status
   11d60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d64:	e0fff817 	ldw	r3,-32(fp)
   11d68:	00bfff84 	movi	r2,-2
   11d6c:	1884703a 	and	r2,r3,r2
   11d70:	1001703a 	wrctl	status,r2
  
  return context;
   11d74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   11d78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11d7c:	00800074 	movhi	r2,1
   11d80:	109e5e04 	addi	r2,r2,31096
   11d84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   11d88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11d8c:	e0fffc17 	ldw	r3,-16(fp)
   11d90:	e0bff917 	ldw	r2,-28(fp)
   11d94:	1885883a 	add	r2,r3,r2
   11d98:	10c00044 	addi	r3,r2,1
   11d9c:	e0bffb17 	ldw	r2,-20(fp)
   11da0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11da4:	e0bffb17 	ldw	r2,-20(fp)
   11da8:	10c00217 	ldw	r3,8(r2)
   11dac:	e0bff917 	ldw	r2,-28(fp)
   11db0:	1880042e 	bgeu	r3,r2,11dc4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   11db4:	e0fffb17 	ldw	r3,-20(fp)
   11db8:	00800044 	movi	r2,1
   11dbc:	18800405 	stb	r2,16(r3)
   11dc0:	00000206 	br	11dcc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   11dc4:	e0bffb17 	ldw	r2,-20(fp)
   11dc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11dcc:	e0fffb17 	ldw	r3,-20(fp)
   11dd0:	00800074 	movhi	r2,1
   11dd4:	10966804 	addi	r2,r2,22944
   11dd8:	e0bff615 	stw	r2,-40(fp)
   11ddc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11de0:	e0fff717 	ldw	r3,-36(fp)
   11de4:	e0bff617 	ldw	r2,-40(fp)
   11de8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11dec:	e0bff617 	ldw	r2,-40(fp)
   11df0:	10c00017 	ldw	r3,0(r2)
   11df4:	e0bff717 	ldw	r2,-36(fp)
   11df8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11dfc:	e0bff617 	ldw	r2,-40(fp)
   11e00:	10c00017 	ldw	r3,0(r2)
   11e04:	e0bff717 	ldw	r2,-36(fp)
   11e08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   11e0c:	e0fff617 	ldw	r3,-40(fp)
   11e10:	e0bff717 	ldw	r2,-36(fp)
   11e14:	18800015 	stw	r2,0(r3)
   11e18:	e0bffa17 	ldw	r2,-24(fp)
   11e1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e20:	e0bff517 	ldw	r2,-44(fp)
   11e24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11e28:	e03fff15 	stw	zero,-4(fp)
   11e2c:	00000506 	br	11e44 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   11e30:	00bffa84 	movi	r2,-22
   11e34:	e0bfff15 	stw	r2,-4(fp)
   11e38:	00000206 	br	11e44 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   11e3c:	00bfde84 	movi	r2,-134
   11e40:	e0bfff15 	stw	r2,-4(fp)
   11e44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   11e48:	e037883a 	mov	sp,fp
   11e4c:	df000017 	ldw	fp,0(sp)
   11e50:	dec00104 	addi	sp,sp,4
   11e54:	f800283a 	ret

00011e58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11e58:	deffff04 	addi	sp,sp,-4
   11e5c:	df000015 	stw	fp,0(sp)
   11e60:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11e64:	e037883a 	mov	sp,fp
   11e68:	df000017 	ldw	fp,0(sp)
   11e6c:	dec00104 	addi	sp,sp,4
   11e70:	f800283a 	ret

00011e74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11e74:	defff904 	addi	sp,sp,-28
   11e78:	dfc00615 	stw	ra,24(sp)
   11e7c:	df000515 	stw	fp,20(sp)
   11e80:	df000504 	addi	fp,sp,20
   11e84:	e13ffd15 	stw	r4,-12(fp)
   11e88:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11e8c:	e0bffd17 	ldw	r2,-12(fp)
   11e90:	1005003a 	cmpeq	r2,r2,zero
   11e94:	1000041e 	bne	r2,zero,11ea8 <alt_dev_llist_insert+0x34>
   11e98:	e0bffd17 	ldw	r2,-12(fp)
   11e9c:	10800217 	ldw	r2,8(r2)
   11ea0:	1004c03a 	cmpne	r2,r2,zero
   11ea4:	1000071e 	bne	r2,zero,11ec4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11ea8:	0011f280 	call	11f28 <alt_get_errno>
   11eac:	1007883a 	mov	r3,r2
   11eb0:	00800584 	movi	r2,22
   11eb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11eb8:	00bffa84 	movi	r2,-22
   11ebc:	e0bfff15 	stw	r2,-4(fp)
   11ec0:	00001306 	br	11f10 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11ec4:	e0fffd17 	ldw	r3,-12(fp)
   11ec8:	e0bffe17 	ldw	r2,-8(fp)
   11ecc:	e0bffb15 	stw	r2,-20(fp)
   11ed0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11ed4:	e0fffc17 	ldw	r3,-16(fp)
   11ed8:	e0bffb17 	ldw	r2,-20(fp)
   11edc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11ee0:	e0bffb17 	ldw	r2,-20(fp)
   11ee4:	10c00017 	ldw	r3,0(r2)
   11ee8:	e0bffc17 	ldw	r2,-16(fp)
   11eec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11ef0:	e0bffb17 	ldw	r2,-20(fp)
   11ef4:	10c00017 	ldw	r3,0(r2)
   11ef8:	e0bffc17 	ldw	r2,-16(fp)
   11efc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   11f00:	e0fffb17 	ldw	r3,-20(fp)
   11f04:	e0bffc17 	ldw	r2,-16(fp)
   11f08:	18800015 	stw	r2,0(r3)

  return 0;  
   11f0c:	e03fff15 	stw	zero,-4(fp)
   11f10:	e0bfff17 	ldw	r2,-4(fp)
}
   11f14:	e037883a 	mov	sp,fp
   11f18:	dfc00117 	ldw	ra,4(sp)
   11f1c:	df000017 	ldw	fp,0(sp)
   11f20:	dec00204 	addi	sp,sp,8
   11f24:	f800283a 	ret

00011f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f28:	defffd04 	addi	sp,sp,-12
   11f2c:	dfc00215 	stw	ra,8(sp)
   11f30:	df000115 	stw	fp,4(sp)
   11f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11f38:	00800074 	movhi	r2,1
   11f3c:	10966504 	addi	r2,r2,22932
   11f40:	10800017 	ldw	r2,0(r2)
   11f44:	1005003a 	cmpeq	r2,r2,zero
   11f48:	1000061e 	bne	r2,zero,11f64 <alt_get_errno+0x3c>
   11f4c:	00800074 	movhi	r2,1
   11f50:	10966504 	addi	r2,r2,22932
   11f54:	10800017 	ldw	r2,0(r2)
   11f58:	103ee83a 	callr	r2
   11f5c:	e0bfff15 	stw	r2,-4(fp)
   11f60:	00000306 	br	11f70 <alt_get_errno+0x48>
   11f64:	00800074 	movhi	r2,1
   11f68:	109e5604 	addi	r2,r2,31064
   11f6c:	e0bfff15 	stw	r2,-4(fp)
   11f70:	e0bfff17 	ldw	r2,-4(fp)
}
   11f74:	e037883a 	mov	sp,fp
   11f78:	dfc00117 	ldw	ra,4(sp)
   11f7c:	df000017 	ldw	fp,0(sp)
   11f80:	dec00204 	addi	sp,sp,8
   11f84:	f800283a 	ret

00011f88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11f88:	defffd04 	addi	sp,sp,-12
   11f8c:	dfc00215 	stw	ra,8(sp)
   11f90:	df000115 	stw	fp,4(sp)
   11f94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11f98:	00bfff04 	movi	r2,-4
   11f9c:	00c00074 	movhi	r3,1
   11fa0:	18cc7804 	addi	r3,r3,12768
   11fa4:	1885883a 	add	r2,r3,r2
   11fa8:	e0bfff15 	stw	r2,-4(fp)
   11fac:	00000606 	br	11fc8 <_do_ctors+0x40>
        (*ctor) (); 
   11fb0:	e0bfff17 	ldw	r2,-4(fp)
   11fb4:	10800017 	ldw	r2,0(r2)
   11fb8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11fbc:	e0bfff17 	ldw	r2,-4(fp)
   11fc0:	10bfff04 	addi	r2,r2,-4
   11fc4:	e0bfff15 	stw	r2,-4(fp)
   11fc8:	e0ffff17 	ldw	r3,-4(fp)
   11fcc:	00800074 	movhi	r2,1
   11fd0:	108c7704 	addi	r2,r2,12764
   11fd4:	18bff62e 	bgeu	r3,r2,11fb0 <_do_ctors+0x28>
        (*ctor) (); 
}
   11fd8:	e037883a 	mov	sp,fp
   11fdc:	dfc00117 	ldw	ra,4(sp)
   11fe0:	df000017 	ldw	fp,0(sp)
   11fe4:	dec00204 	addi	sp,sp,8
   11fe8:	f800283a 	ret

00011fec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11fec:	defffd04 	addi	sp,sp,-12
   11ff0:	dfc00215 	stw	ra,8(sp)
   11ff4:	df000115 	stw	fp,4(sp)
   11ff8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11ffc:	00bfff04 	movi	r2,-4
   12000:	00c00074 	movhi	r3,1
   12004:	18cc7804 	addi	r3,r3,12768
   12008:	1885883a 	add	r2,r3,r2
   1200c:	e0bfff15 	stw	r2,-4(fp)
   12010:	00000606 	br	1202c <_do_dtors+0x40>
        (*dtor) (); 
   12014:	e0bfff17 	ldw	r2,-4(fp)
   12018:	10800017 	ldw	r2,0(r2)
   1201c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12020:	e0bfff17 	ldw	r2,-4(fp)
   12024:	10bfff04 	addi	r2,r2,-4
   12028:	e0bfff15 	stw	r2,-4(fp)
   1202c:	e0ffff17 	ldw	r3,-4(fp)
   12030:	00800074 	movhi	r2,1
   12034:	108c7804 	addi	r2,r2,12768
   12038:	18bff62e 	bgeu	r3,r2,12014 <_do_dtors+0x28>
        (*dtor) (); 
}
   1203c:	e037883a 	mov	sp,fp
   12040:	dfc00117 	ldw	ra,4(sp)
   12044:	df000017 	ldw	fp,0(sp)
   12048:	dec00204 	addi	sp,sp,8
   1204c:	f800283a 	ret

00012050 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12050:	defff904 	addi	sp,sp,-28
   12054:	dfc00615 	stw	ra,24(sp)
   12058:	df000515 	stw	fp,20(sp)
   1205c:	df000504 	addi	fp,sp,20
   12060:	e13ffd15 	stw	r4,-12(fp)
   12064:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12068:	e0bffe17 	ldw	r2,-8(fp)
   1206c:	10800017 	ldw	r2,0(r2)
   12070:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12074:	e13ffd17 	ldw	r4,-12(fp)
   12078:	0009ffc0 	call	9ffc <strlen>
   1207c:	10800044 	addi	r2,r2,1
   12080:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12084:	00000d06 	br	120bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12088:	e0bffc17 	ldw	r2,-16(fp)
   1208c:	11000217 	ldw	r4,8(r2)
   12090:	e1bffb17 	ldw	r6,-20(fp)
   12094:	e17ffd17 	ldw	r5,-12(fp)
   12098:	0012ae80 	call	12ae8 <memcmp>
   1209c:	1004c03a 	cmpne	r2,r2,zero
   120a0:	1000031e 	bne	r2,zero,120b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   120a4:	e0bffc17 	ldw	r2,-16(fp)
   120a8:	e0bfff15 	stw	r2,-4(fp)
   120ac:	00000706 	br	120cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   120b0:	e0bffc17 	ldw	r2,-16(fp)
   120b4:	10800017 	ldw	r2,0(r2)
   120b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   120bc:	e0fffe17 	ldw	r3,-8(fp)
   120c0:	e0bffc17 	ldw	r2,-16(fp)
   120c4:	10fff01e 	bne	r2,r3,12088 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   120c8:	e03fff15 	stw	zero,-4(fp)
   120cc:	e0bfff17 	ldw	r2,-4(fp)
}
   120d0:	e037883a 	mov	sp,fp
   120d4:	dfc00117 	ldw	ra,4(sp)
   120d8:	df000017 	ldw	fp,0(sp)
   120dc:	dec00204 	addi	sp,sp,8
   120e0:	f800283a 	ret

000120e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   120e4:	defffe04 	addi	sp,sp,-8
   120e8:	dfc00115 	stw	ra,4(sp)
   120ec:	df000015 	stw	fp,0(sp)
   120f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   120f4:	0009883a 	mov	r4,zero
   120f8:	01440004 	movi	r5,4096
   120fc:	0012a0c0 	call	12a0c <alt_icache_flush>
#endif
}
   12100:	e037883a 	mov	sp,fp
   12104:	dfc00117 	ldw	ra,4(sp)
   12108:	df000017 	ldw	fp,0(sp)
   1210c:	dec00204 	addi	sp,sp,8
   12110:	f800283a 	ret

00012114 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12114:	defff904 	addi	sp,sp,-28
   12118:	dfc00615 	stw	ra,24(sp)
   1211c:	df000515 	stw	fp,20(sp)
   12120:	df000504 	addi	fp,sp,20
   12124:	e13ffc15 	stw	r4,-16(fp)
   12128:	e17ffd15 	stw	r5,-12(fp)
   1212c:	e1bffe15 	stw	r6,-8(fp)
   12130:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   12134:	e13ffd17 	ldw	r4,-12(fp)
   12138:	e17ffe17 	ldw	r5,-8(fp)
   1213c:	e1bfff17 	ldw	r6,-4(fp)
   12140:	001232c0 	call	1232c <open>
   12144:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   12148:	e0bffb17 	ldw	r2,-20(fp)
   1214c:	1004803a 	cmplt	r2,r2,zero
   12150:	10001c1e 	bne	r2,zero,121c4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   12154:	e0bffb17 	ldw	r2,-20(fp)
   12158:	00c00074 	movhi	r3,1
   1215c:	18d0ee04 	addi	r3,r3,17336
   12160:	10800324 	muli	r2,r2,12
   12164:	10c5883a 	add	r2,r2,r3
   12168:	10c00017 	ldw	r3,0(r2)
   1216c:	e0bffc17 	ldw	r2,-16(fp)
   12170:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12174:	e0bffb17 	ldw	r2,-20(fp)
   12178:	00c00074 	movhi	r3,1
   1217c:	18d0ee04 	addi	r3,r3,17336
   12180:	10800324 	muli	r2,r2,12
   12184:	10c5883a 	add	r2,r2,r3
   12188:	10800104 	addi	r2,r2,4
   1218c:	10c00017 	ldw	r3,0(r2)
   12190:	e0bffc17 	ldw	r2,-16(fp)
   12194:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12198:	e0bffb17 	ldw	r2,-20(fp)
   1219c:	00c00074 	movhi	r3,1
   121a0:	18d0ee04 	addi	r3,r3,17336
   121a4:	10800324 	muli	r2,r2,12
   121a8:	10c5883a 	add	r2,r2,r3
   121ac:	10800204 	addi	r2,r2,8
   121b0:	10c00017 	ldw	r3,0(r2)
   121b4:	e0bffc17 	ldw	r2,-16(fp)
   121b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   121bc:	e13ffb17 	ldw	r4,-20(fp)
   121c0:	000d23c0 	call	d23c <alt_release_fd>
  }
} 
   121c4:	e037883a 	mov	sp,fp
   121c8:	dfc00117 	ldw	ra,4(sp)
   121cc:	df000017 	ldw	fp,0(sp)
   121d0:	dec00204 	addi	sp,sp,8
   121d4:	f800283a 	ret

000121d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   121d8:	defffb04 	addi	sp,sp,-20
   121dc:	dfc00415 	stw	ra,16(sp)
   121e0:	df000315 	stw	fp,12(sp)
   121e4:	df000304 	addi	fp,sp,12
   121e8:	e13ffd15 	stw	r4,-12(fp)
   121ec:	e17ffe15 	stw	r5,-8(fp)
   121f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   121f4:	01000074 	movhi	r4,1
   121f8:	2110f104 	addi	r4,r4,17348
   121fc:	e17ffd17 	ldw	r5,-12(fp)
   12200:	01800044 	movi	r6,1
   12204:	01c07fc4 	movi	r7,511
   12208:	00121140 	call	12114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1220c:	01000074 	movhi	r4,1
   12210:	2110ee04 	addi	r4,r4,17336
   12214:	e17ffe17 	ldw	r5,-8(fp)
   12218:	000d883a 	mov	r6,zero
   1221c:	01c07fc4 	movi	r7,511
   12220:	00121140 	call	12114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12224:	01000074 	movhi	r4,1
   12228:	2110f404 	addi	r4,r4,17360
   1222c:	e17fff17 	ldw	r5,-4(fp)
   12230:	01800044 	movi	r6,1
   12234:	01c07fc4 	movi	r7,511
   12238:	00121140 	call	12114 <alt_open_fd>
}  
   1223c:	e037883a 	mov	sp,fp
   12240:	dfc00117 	ldw	ra,4(sp)
   12244:	df000017 	ldw	fp,0(sp)
   12248:	dec00204 	addi	sp,sp,8
   1224c:	f800283a 	ret

00012250 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12250:	defffc04 	addi	sp,sp,-16
   12254:	df000315 	stw	fp,12(sp)
   12258:	df000304 	addi	fp,sp,12
   1225c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12260:	e0bffe17 	ldw	r2,-8(fp)
   12264:	10800217 	ldw	r2,8(r2)
   12268:	10d00034 	orhi	r3,r2,16384
   1226c:	e0bffe17 	ldw	r2,-8(fp)
   12270:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12274:	e03ffd15 	stw	zero,-12(fp)
   12278:	00002006 	br	122fc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1227c:	e0bffd17 	ldw	r2,-12(fp)
   12280:	00c00074 	movhi	r3,1
   12284:	18d0ee04 	addi	r3,r3,17336
   12288:	10800324 	muli	r2,r2,12
   1228c:	10c5883a 	add	r2,r2,r3
   12290:	10c00017 	ldw	r3,0(r2)
   12294:	e0bffe17 	ldw	r2,-8(fp)
   12298:	10800017 	ldw	r2,0(r2)
   1229c:	1880141e 	bne	r3,r2,122f0 <alt_file_locked+0xa0>
   122a0:	e0bffd17 	ldw	r2,-12(fp)
   122a4:	00c00074 	movhi	r3,1
   122a8:	18d0ee04 	addi	r3,r3,17336
   122ac:	10800324 	muli	r2,r2,12
   122b0:	10c5883a 	add	r2,r2,r3
   122b4:	10800204 	addi	r2,r2,8
   122b8:	10800017 	ldw	r2,0(r2)
   122bc:	1004403a 	cmpge	r2,r2,zero
   122c0:	10000b1e 	bne	r2,zero,122f0 <alt_file_locked+0xa0>
   122c4:	e0bffd17 	ldw	r2,-12(fp)
   122c8:	10800324 	muli	r2,r2,12
   122cc:	1007883a 	mov	r3,r2
   122d0:	00800074 	movhi	r2,1
   122d4:	1090ee04 	addi	r2,r2,17336
   122d8:	1887883a 	add	r3,r3,r2
   122dc:	e0bffe17 	ldw	r2,-8(fp)
   122e0:	18800326 	beq	r3,r2,122f0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   122e4:	00bffcc4 	movi	r2,-13
   122e8:	e0bfff15 	stw	r2,-4(fp)
   122ec:	00000a06 	br	12318 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   122f0:	e0bffd17 	ldw	r2,-12(fp)
   122f4:	10800044 	addi	r2,r2,1
   122f8:	e0bffd15 	stw	r2,-12(fp)
   122fc:	00800074 	movhi	r2,1
   12300:	10966404 	addi	r2,r2,22928
   12304:	10800017 	ldw	r2,0(r2)
   12308:	1007883a 	mov	r3,r2
   1230c:	e0bffd17 	ldw	r2,-12(fp)
   12310:	18bfda2e 	bgeu	r3,r2,1227c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12314:	e03fff15 	stw	zero,-4(fp)
   12318:	e0bfff17 	ldw	r2,-4(fp)
}
   1231c:	e037883a 	mov	sp,fp
   12320:	df000017 	ldw	fp,0(sp)
   12324:	dec00104 	addi	sp,sp,4
   12328:	f800283a 	ret

0001232c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1232c:	defff404 	addi	sp,sp,-48
   12330:	dfc00b15 	stw	ra,44(sp)
   12334:	df000a15 	stw	fp,40(sp)
   12338:	df000a04 	addi	fp,sp,40
   1233c:	e13ffb15 	stw	r4,-20(fp)
   12340:	e17ffc15 	stw	r5,-16(fp)
   12344:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12348:	00bfffc4 	movi	r2,-1
   1234c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   12350:	00bffb44 	movi	r2,-19
   12354:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   12358:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1235c:	e13ffb17 	ldw	r4,-20(fp)
   12360:	01400074 	movhi	r5,1
   12364:	29566204 	addi	r5,r5,22920
   12368:	00120500 	call	12050 <alt_find_dev>
   1236c:	e0bffa15 	stw	r2,-24(fp)
   12370:	e0bffa17 	ldw	r2,-24(fp)
   12374:	1004c03a 	cmpne	r2,r2,zero
   12378:	1000051e 	bne	r2,zero,12390 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1237c:	e13ffb17 	ldw	r4,-20(fp)
   12380:	00128340 	call	12834 <alt_find_file>
   12384:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   12388:	00800044 	movi	r2,1
   1238c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12390:	e0bffa17 	ldw	r2,-24(fp)
   12394:	1005003a 	cmpeq	r2,r2,zero
   12398:	1000301e 	bne	r2,zero,1245c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1239c:	e13ffa17 	ldw	r4,-24(fp)
   123a0:	00129540 	call	12954 <alt_get_fd>
   123a4:	e0bff815 	stw	r2,-32(fp)
   123a8:	e0bff817 	ldw	r2,-32(fp)
   123ac:	1004403a 	cmpge	r2,r2,zero
   123b0:	1000031e 	bne	r2,zero,123c0 <open+0x94>
    {
      status = index;
   123b4:	e0bff817 	ldw	r2,-32(fp)
   123b8:	e0bff715 	stw	r2,-36(fp)
   123bc:	00002906 	br	12464 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   123c0:	e0bff817 	ldw	r2,-32(fp)
   123c4:	10800324 	muli	r2,r2,12
   123c8:	1007883a 	mov	r3,r2
   123cc:	00800074 	movhi	r2,1
   123d0:	1090ee04 	addi	r2,r2,17336
   123d4:	1885883a 	add	r2,r3,r2
   123d8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   123dc:	e0fffc17 	ldw	r3,-16(fp)
   123e0:	00900034 	movhi	r2,16384
   123e4:	10bfffc4 	addi	r2,r2,-1
   123e8:	1886703a 	and	r3,r3,r2
   123ec:	e0bff917 	ldw	r2,-28(fp)
   123f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   123f4:	e0bff617 	ldw	r2,-40(fp)
   123f8:	1004c03a 	cmpne	r2,r2,zero
   123fc:	1000061e 	bne	r2,zero,12418 <open+0xec>
   12400:	e13ff917 	ldw	r4,-28(fp)
   12404:	00122500 	call	12250 <alt_file_locked>
   12408:	e0bff715 	stw	r2,-36(fp)
   1240c:	e0bff717 	ldw	r2,-36(fp)
   12410:	1004803a 	cmplt	r2,r2,zero
   12414:	1000131e 	bne	r2,zero,12464 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12418:	e0bffa17 	ldw	r2,-24(fp)
   1241c:	10800317 	ldw	r2,12(r2)
   12420:	1005003a 	cmpeq	r2,r2,zero
   12424:	1000091e 	bne	r2,zero,1244c <open+0x120>
   12428:	e0bffa17 	ldw	r2,-24(fp)
   1242c:	10800317 	ldw	r2,12(r2)
   12430:	e13ff917 	ldw	r4,-28(fp)
   12434:	e17ffb17 	ldw	r5,-20(fp)
   12438:	e1bffc17 	ldw	r6,-16(fp)
   1243c:	e1fffd17 	ldw	r7,-12(fp)
   12440:	103ee83a 	callr	r2
   12444:	e0bfff15 	stw	r2,-4(fp)
   12448:	00000106 	br	12450 <open+0x124>
   1244c:	e03fff15 	stw	zero,-4(fp)
   12450:	e0bfff17 	ldw	r2,-4(fp)
   12454:	e0bff715 	stw	r2,-36(fp)
   12458:	00000206 	br	12464 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1245c:	00bffb44 	movi	r2,-19
   12460:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12464:	e0bff717 	ldw	r2,-36(fp)
   12468:	1004403a 	cmpge	r2,r2,zero
   1246c:	1000091e 	bne	r2,zero,12494 <open+0x168>
  {
    alt_release_fd (index);  
   12470:	e13ff817 	ldw	r4,-32(fp)
   12474:	000d23c0 	call	d23c <alt_release_fd>
    ALT_ERRNO = -status;
   12478:	00124b40 	call	124b4 <alt_get_errno>
   1247c:	e0fff717 	ldw	r3,-36(fp)
   12480:	00c7c83a 	sub	r3,zero,r3
   12484:	10c00015 	stw	r3,0(r2)
    return -1;
   12488:	00bfffc4 	movi	r2,-1
   1248c:	e0bffe15 	stw	r2,-8(fp)
   12490:	00000206 	br	1249c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   12494:	e0bff817 	ldw	r2,-32(fp)
   12498:	e0bffe15 	stw	r2,-8(fp)
   1249c:	e0bffe17 	ldw	r2,-8(fp)
}
   124a0:	e037883a 	mov	sp,fp
   124a4:	dfc00117 	ldw	ra,4(sp)
   124a8:	df000017 	ldw	fp,0(sp)
   124ac:	dec00204 	addi	sp,sp,8
   124b0:	f800283a 	ret

000124b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   124b4:	defffd04 	addi	sp,sp,-12
   124b8:	dfc00215 	stw	ra,8(sp)
   124bc:	df000115 	stw	fp,4(sp)
   124c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   124c4:	00800074 	movhi	r2,1
   124c8:	10966504 	addi	r2,r2,22932
   124cc:	10800017 	ldw	r2,0(r2)
   124d0:	1005003a 	cmpeq	r2,r2,zero
   124d4:	1000061e 	bne	r2,zero,124f0 <alt_get_errno+0x3c>
   124d8:	00800074 	movhi	r2,1
   124dc:	10966504 	addi	r2,r2,22932
   124e0:	10800017 	ldw	r2,0(r2)
   124e4:	103ee83a 	callr	r2
   124e8:	e0bfff15 	stw	r2,-4(fp)
   124ec:	00000306 	br	124fc <alt_get_errno+0x48>
   124f0:	00800074 	movhi	r2,1
   124f4:	109e5604 	addi	r2,r2,31064
   124f8:	e0bfff15 	stw	r2,-4(fp)
   124fc:	e0bfff17 	ldw	r2,-4(fp)
}
   12500:	e037883a 	mov	sp,fp
   12504:	dfc00117 	ldw	ra,4(sp)
   12508:	df000017 	ldw	fp,0(sp)
   1250c:	dec00204 	addi	sp,sp,8
   12510:	f800283a 	ret

00012514 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12514:	defffa04 	addi	sp,sp,-24
   12518:	df000515 	stw	fp,20(sp)
   1251c:	df000504 	addi	fp,sp,20
   12520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12524:	0005303a 	rdctl	r2,status
   12528:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1252c:	e0fffd17 	ldw	r3,-12(fp)
   12530:	00bfff84 	movi	r2,-2
   12534:	1884703a 	and	r2,r3,r2
   12538:	1001703a 	wrctl	status,r2
  
  return context;
   1253c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12540:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   12544:	e0bfff17 	ldw	r2,-4(fp)
   12548:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1254c:	e0bffc17 	ldw	r2,-16(fp)
   12550:	10c00017 	ldw	r3,0(r2)
   12554:	e0bffc17 	ldw	r2,-16(fp)
   12558:	10800117 	ldw	r2,4(r2)
   1255c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   12560:	e0bffc17 	ldw	r2,-16(fp)
   12564:	10c00117 	ldw	r3,4(r2)
   12568:	e0bffc17 	ldw	r2,-16(fp)
   1256c:	10800017 	ldw	r2,0(r2)
   12570:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12574:	e0fffc17 	ldw	r3,-16(fp)
   12578:	e0bffc17 	ldw	r2,-16(fp)
   1257c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   12580:	e0fffc17 	ldw	r3,-16(fp)
   12584:	e0bffc17 	ldw	r2,-16(fp)
   12588:	18800015 	stw	r2,0(r3)
   1258c:	e0bffe17 	ldw	r2,-8(fp)
   12590:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12594:	e0bffb17 	ldw	r2,-20(fp)
   12598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1259c:	e037883a 	mov	sp,fp
   125a0:	df000017 	ldw	fp,0(sp)
   125a4:	dec00104 	addi	sp,sp,4
   125a8:	f800283a 	ret

000125ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   125ac:	defffb04 	addi	sp,sp,-20
   125b0:	dfc00415 	stw	ra,16(sp)
   125b4:	df000315 	stw	fp,12(sp)
   125b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   125bc:	d0a01517 	ldw	r2,-32684(gp)
   125c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   125c4:	d0a80b17 	ldw	r2,-24532(gp)
   125c8:	10800044 	addi	r2,r2,1
   125cc:	d0a80b15 	stw	r2,-24532(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   125d0:	00003106 	br	12698 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   125d4:	e0bffe17 	ldw	r2,-8(fp)
   125d8:	10800017 	ldw	r2,0(r2)
   125dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   125e0:	e0bffe17 	ldw	r2,-8(fp)
   125e4:	10800403 	ldbu	r2,16(r2)
   125e8:	10803fcc 	andi	r2,r2,255
   125ec:	1005003a 	cmpeq	r2,r2,zero
   125f0:	1000051e 	bne	r2,zero,12608 <alt_tick+0x5c>
   125f4:	d0a80b17 	ldw	r2,-24532(gp)
   125f8:	1004c03a 	cmpne	r2,r2,zero
   125fc:	1000021e 	bne	r2,zero,12608 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   12600:	e0bffe17 	ldw	r2,-8(fp)
   12604:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12608:	e0bffe17 	ldw	r2,-8(fp)
   1260c:	10c00217 	ldw	r3,8(r2)
   12610:	d0a80b17 	ldw	r2,-24532(gp)
   12614:	10c01e36 	bltu	r2,r3,12690 <alt_tick+0xe4>
   12618:	e0bffe17 	ldw	r2,-8(fp)
   1261c:	10800403 	ldbu	r2,16(r2)
   12620:	10803fcc 	andi	r2,r2,255
   12624:	1004c03a 	cmpne	r2,r2,zero
   12628:	1000191e 	bne	r2,zero,12690 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1262c:	e0bffe17 	ldw	r2,-8(fp)
   12630:	10c00317 	ldw	r3,12(r2)
   12634:	e0bffe17 	ldw	r2,-8(fp)
   12638:	11000517 	ldw	r4,20(r2)
   1263c:	183ee83a 	callr	r3
   12640:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12644:	e0bffd17 	ldw	r2,-12(fp)
   12648:	1004c03a 	cmpne	r2,r2,zero
   1264c:	1000031e 	bne	r2,zero,1265c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   12650:	e13ffe17 	ldw	r4,-8(fp)
   12654:	00125140 	call	12514 <alt_alarm_stop>
   12658:	00000d06 	br	12690 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1265c:	e0bffe17 	ldw	r2,-8(fp)
   12660:	10c00217 	ldw	r3,8(r2)
   12664:	e0bffd17 	ldw	r2,-12(fp)
   12668:	1887883a 	add	r3,r3,r2
   1266c:	e0bffe17 	ldw	r2,-8(fp)
   12670:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12674:	e0bffe17 	ldw	r2,-8(fp)
   12678:	10c00217 	ldw	r3,8(r2)
   1267c:	d0a80b17 	ldw	r2,-24532(gp)
   12680:	1880032e 	bgeu	r3,r2,12690 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   12684:	e0fffe17 	ldw	r3,-8(fp)
   12688:	00800044 	movi	r2,1
   1268c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   12690:	e0bfff17 	ldw	r2,-4(fp)
   12694:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12698:	d0e01504 	addi	r3,gp,-32684
   1269c:	e0bffe17 	ldw	r2,-8(fp)
   126a0:	10ffcc1e 	bne	r2,r3,125d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   126a4:	e037883a 	mov	sp,fp
   126a8:	dfc00117 	ldw	ra,4(sp)
   126ac:	df000017 	ldw	fp,0(sp)
   126b0:	dec00204 	addi	sp,sp,8
   126b4:	f800283a 	ret

000126b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   126b8:	defffd04 	addi	sp,sp,-12
   126bc:	dfc00215 	stw	ra,8(sp)
   126c0:	df000115 	stw	fp,4(sp)
   126c4:	df000104 	addi	fp,sp,4
   126c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   126cc:	e13fff17 	ldw	r4,-4(fp)
   126d0:	00127080 	call	12708 <alt_busy_sleep>
}
   126d4:	e037883a 	mov	sp,fp
   126d8:	dfc00117 	ldw	ra,4(sp)
   126dc:	df000017 	ldw	fp,0(sp)
   126e0:	dec00204 	addi	sp,sp,8
   126e4:	f800283a 	ret

000126e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   126e8:	deffff04 	addi	sp,sp,-4
   126ec:	df000015 	stw	fp,0(sp)
   126f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   126f4:	000170fa 	wrctl	ienable,zero
}
   126f8:	e037883a 	mov	sp,fp
   126fc:	df000017 	ldw	fp,0(sp)
   12700:	dec00104 	addi	sp,sp,4
   12704:	f800283a 	ret

00012708 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12708:	defffb04 	addi	sp,sp,-20
   1270c:	df000415 	stw	fp,16(sp)
   12710:	df000404 	addi	fp,sp,16
   12714:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   12718:	008000c4 	movi	r2,3
   1271c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   12720:	e0fffc17 	ldw	r3,-16(fp)
   12724:	008003f4 	movhi	r2,15
   12728:	10909004 	addi	r2,r2,16960
   1272c:	1887383a 	mul	r3,r3,r2
   12730:	0080bef4 	movhi	r2,763
   12734:	10bc2004 	addi	r2,r2,-3968
   12738:	10c7203a 	divu	r3,r2,r3
   1273c:	00a00034 	movhi	r2,32768
   12740:	10bfffc4 	addi	r2,r2,-1
   12744:	10c7203a 	divu	r3,r2,r3
   12748:	e0bfff17 	ldw	r2,-4(fp)
   1274c:	10c5203a 	divu	r2,r2,r3
   12750:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12754:	e0bffd17 	ldw	r2,-12(fp)
   12758:	1005003a 	cmpeq	r2,r2,zero
   1275c:	1000251e 	bne	r2,zero,127f4 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   12760:	e03ffe15 	stw	zero,-8(fp)
   12764:	00001406 	br	127b8 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12768:	00a00034 	movhi	r2,32768
   1276c:	10bfffc4 	addi	r2,r2,-1
   12770:	10bfffc4 	addi	r2,r2,-1
   12774:	103ffe1e 	bne	r2,zero,12770 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12778:	e0fffc17 	ldw	r3,-16(fp)
   1277c:	008003f4 	movhi	r2,15
   12780:	10909004 	addi	r2,r2,16960
   12784:	1887383a 	mul	r3,r3,r2
   12788:	0080bef4 	movhi	r2,763
   1278c:	10bc2004 	addi	r2,r2,-3968
   12790:	10c7203a 	divu	r3,r2,r3
   12794:	00a00034 	movhi	r2,32768
   12798:	10bfffc4 	addi	r2,r2,-1
   1279c:	10c7203a 	divu	r3,r2,r3
   127a0:	e0bfff17 	ldw	r2,-4(fp)
   127a4:	10c5c83a 	sub	r2,r2,r3
   127a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	10800044 	addi	r2,r2,1
   127b4:	e0bffe15 	stw	r2,-8(fp)
   127b8:	e0fffe17 	ldw	r3,-8(fp)
   127bc:	e0bffd17 	ldw	r2,-12(fp)
   127c0:	18bfe916 	blt	r3,r2,12768 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   127c4:	e0fffc17 	ldw	r3,-16(fp)
   127c8:	008003f4 	movhi	r2,15
   127cc:	10909004 	addi	r2,r2,16960
   127d0:	1887383a 	mul	r3,r3,r2
   127d4:	0080bef4 	movhi	r2,763
   127d8:	10bc2004 	addi	r2,r2,-3968
   127dc:	10c7203a 	divu	r3,r2,r3
   127e0:	e0bfff17 	ldw	r2,-4(fp)
   127e4:	1885383a 	mul	r2,r3,r2
   127e8:	10bfffc4 	addi	r2,r2,-1
   127ec:	103ffe1e 	bne	r2,zero,127e8 <alt_busy_sleep+0xe0>
   127f0:	00000b06 	br	12820 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   127f4:	e0fffc17 	ldw	r3,-16(fp)
   127f8:	008003f4 	movhi	r2,15
   127fc:	10909004 	addi	r2,r2,16960
   12800:	1887383a 	mul	r3,r3,r2
   12804:	0080bef4 	movhi	r2,763
   12808:	10bc2004 	addi	r2,r2,-3968
   1280c:	10c7203a 	divu	r3,r2,r3
   12810:	e0bfff17 	ldw	r2,-4(fp)
   12814:	1885383a 	mul	r2,r3,r2
   12818:	10bfffc4 	addi	r2,r2,-1
   1281c:	00bffe16 	blt	zero,r2,12818 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   12820:	0005883a 	mov	r2,zero
}
   12824:	e037883a 	mov	sp,fp
   12828:	df000017 	ldw	fp,0(sp)
   1282c:	dec00104 	addi	sp,sp,4
   12830:	f800283a 	ret

00012834 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12834:	defffa04 	addi	sp,sp,-24
   12838:	dfc00515 	stw	ra,20(sp)
   1283c:	df000415 	stw	fp,16(sp)
   12840:	df000404 	addi	fp,sp,16
   12844:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12848:	00800074 	movhi	r2,1
   1284c:	10966004 	addi	r2,r2,22912
   12850:	10800017 	ldw	r2,0(r2)
   12854:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12858:	00003306 	br	12928 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	11000217 	ldw	r4,8(r2)
   12864:	0009ffc0 	call	9ffc <strlen>
   12868:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1286c:	e0bffd17 	ldw	r2,-12(fp)
   12870:	10c00217 	ldw	r3,8(r2)
   12874:	e0bffc17 	ldw	r2,-16(fp)
   12878:	1885883a 	add	r2,r3,r2
   1287c:	10bfffc4 	addi	r2,r2,-1
   12880:	10800003 	ldbu	r2,0(r2)
   12884:	10803fcc 	andi	r2,r2,255
   12888:	1080201c 	xori	r2,r2,128
   1288c:	10bfe004 	addi	r2,r2,-128
   12890:	10800bd8 	cmpnei	r2,r2,47
   12894:	1000031e 	bne	r2,zero,128a4 <alt_find_file+0x70>
    {
      len -= 1;
   12898:	e0bffc17 	ldw	r2,-16(fp)
   1289c:	10bfffc4 	addi	r2,r2,-1
   128a0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   128a4:	e0bffc17 	ldw	r2,-16(fp)
   128a8:	1007883a 	mov	r3,r2
   128ac:	e0bffe17 	ldw	r2,-8(fp)
   128b0:	1885883a 	add	r2,r3,r2
   128b4:	10800003 	ldbu	r2,0(r2)
   128b8:	10803fcc 	andi	r2,r2,255
   128bc:	1080201c 	xori	r2,r2,128
   128c0:	10bfe004 	addi	r2,r2,-128
   128c4:	10800be0 	cmpeqi	r2,r2,47
   128c8:	10000a1e 	bne	r2,zero,128f4 <alt_find_file+0xc0>
   128cc:	e0bffc17 	ldw	r2,-16(fp)
   128d0:	1007883a 	mov	r3,r2
   128d4:	e0bffe17 	ldw	r2,-8(fp)
   128d8:	1885883a 	add	r2,r3,r2
   128dc:	10800003 	ldbu	r2,0(r2)
   128e0:	10803fcc 	andi	r2,r2,255
   128e4:	1080201c 	xori	r2,r2,128
   128e8:	10bfe004 	addi	r2,r2,-128
   128ec:	1004c03a 	cmpne	r2,r2,zero
   128f0:	10000a1e 	bne	r2,zero,1291c <alt_find_file+0xe8>
   128f4:	e0bffd17 	ldw	r2,-12(fp)
   128f8:	11000217 	ldw	r4,8(r2)
   128fc:	e1bffc17 	ldw	r6,-16(fp)
   12900:	e17ffe17 	ldw	r5,-8(fp)
   12904:	0012ae80 	call	12ae8 <memcmp>
   12908:	1004c03a 	cmpne	r2,r2,zero
   1290c:	1000031e 	bne	r2,zero,1291c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12910:	e0bffd17 	ldw	r2,-12(fp)
   12914:	e0bfff15 	stw	r2,-4(fp)
   12918:	00000806 	br	1293c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1291c:	e0bffd17 	ldw	r2,-12(fp)
   12920:	10800017 	ldw	r2,0(r2)
   12924:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12928:	00c00074 	movhi	r3,1
   1292c:	18d66004 	addi	r3,r3,22912
   12930:	e0bffd17 	ldw	r2,-12(fp)
   12934:	10ffc91e 	bne	r2,r3,1285c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12938:	e03fff15 	stw	zero,-4(fp)
   1293c:	e0bfff17 	ldw	r2,-4(fp)
}
   12940:	e037883a 	mov	sp,fp
   12944:	dfc00117 	ldw	ra,4(sp)
   12948:	df000017 	ldw	fp,0(sp)
   1294c:	dec00204 	addi	sp,sp,8
   12950:	f800283a 	ret

00012954 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12954:	defffc04 	addi	sp,sp,-16
   12958:	df000315 	stw	fp,12(sp)
   1295c:	df000304 	addi	fp,sp,12
   12960:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12964:	00bffa04 	movi	r2,-24
   12968:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1296c:	e03ffe15 	stw	zero,-8(fp)
   12970:	00001e06 	br	129ec <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12974:	e0bffe17 	ldw	r2,-8(fp)
   12978:	00c00074 	movhi	r3,1
   1297c:	18d0ee04 	addi	r3,r3,17336
   12980:	10800324 	muli	r2,r2,12
   12984:	10c5883a 	add	r2,r2,r3
   12988:	10800017 	ldw	r2,0(r2)
   1298c:	1004c03a 	cmpne	r2,r2,zero
   12990:	1000131e 	bne	r2,zero,129e0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   12994:	e0bffe17 	ldw	r2,-8(fp)
   12998:	00c00074 	movhi	r3,1
   1299c:	18d0ee04 	addi	r3,r3,17336
   129a0:	10800324 	muli	r2,r2,12
   129a4:	10c7883a 	add	r3,r2,r3
   129a8:	e0bfff17 	ldw	r2,-4(fp)
   129ac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   129b0:	00800074 	movhi	r2,1
   129b4:	10966404 	addi	r2,r2,22928
   129b8:	10c00017 	ldw	r3,0(r2)
   129bc:	e0bffe17 	ldw	r2,-8(fp)
   129c0:	1880040e 	bge	r3,r2,129d4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   129c4:	00c00074 	movhi	r3,1
   129c8:	18d66404 	addi	r3,r3,22928
   129cc:	e0bffe17 	ldw	r2,-8(fp)
   129d0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   129d4:	e0bffe17 	ldw	r2,-8(fp)
   129d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   129dc:	00000606 	br	129f8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   129e0:	e0bffe17 	ldw	r2,-8(fp)
   129e4:	10800044 	addi	r2,r2,1
   129e8:	e0bffe15 	stw	r2,-8(fp)
   129ec:	e0bffe17 	ldw	r2,-8(fp)
   129f0:	10800810 	cmplti	r2,r2,32
   129f4:	103fdf1e 	bne	r2,zero,12974 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   129f8:	e0bffd17 	ldw	r2,-12(fp)
}
   129fc:	e037883a 	mov	sp,fp
   12a00:	df000017 	ldw	fp,0(sp)
   12a04:	dec00104 	addi	sp,sp,4
   12a08:	f800283a 	ret

00012a0c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12a0c:	defffb04 	addi	sp,sp,-20
   12a10:	df000415 	stw	fp,16(sp)
   12a14:	df000404 	addi	fp,sp,16
   12a18:	e13ffe15 	stw	r4,-8(fp)
   12a1c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12a20:	e0bfff17 	ldw	r2,-4(fp)
   12a24:	10840070 	cmpltui	r2,r2,4097
   12a28:	1000021e 	bne	r2,zero,12a34 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12a2c:	00840004 	movi	r2,4096
   12a30:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12a34:	e0fffe17 	ldw	r3,-8(fp)
   12a38:	e0bfff17 	ldw	r2,-4(fp)
   12a3c:	1885883a 	add	r2,r3,r2
   12a40:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12a44:	e0bffe17 	ldw	r2,-8(fp)
   12a48:	e0bffd15 	stw	r2,-12(fp)
   12a4c:	00000506 	br	12a64 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12a50:	e0bffd17 	ldw	r2,-12(fp)
   12a54:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12a58:	e0bffd17 	ldw	r2,-12(fp)
   12a5c:	10800804 	addi	r2,r2,32
   12a60:	e0bffd15 	stw	r2,-12(fp)
   12a64:	e0fffd17 	ldw	r3,-12(fp)
   12a68:	e0bffc17 	ldw	r2,-16(fp)
   12a6c:	18bff836 	bltu	r3,r2,12a50 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12a70:	e0bffe17 	ldw	r2,-8(fp)
   12a74:	108007cc 	andi	r2,r2,31
   12a78:	1005003a 	cmpeq	r2,r2,zero
   12a7c:	1000021e 	bne	r2,zero,12a88 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12a88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12a8c:	e037883a 	mov	sp,fp
   12a90:	df000017 	ldw	fp,0(sp)
   12a94:	dec00104 	addi	sp,sp,4
   12a98:	f800283a 	ret

00012a9c <atexit>:
   12a9c:	200b883a 	mov	r5,r4
   12aa0:	000d883a 	mov	r6,zero
   12aa4:	0009883a 	mov	r4,zero
   12aa8:	000f883a 	mov	r7,zero
   12aac:	0012e941 	jmpi	12e94 <__register_exitproc>

00012ab0 <exit>:
   12ab0:	defffe04 	addi	sp,sp,-8
   12ab4:	000b883a 	mov	r5,zero
   12ab8:	dc000015 	stw	r16,0(sp)
   12abc:	dfc00115 	stw	ra,4(sp)
   12ac0:	2021883a 	mov	r16,r4
   12ac4:	0012fcc0 	call	12fcc <__call_exitprocs>
   12ac8:	00800074 	movhi	r2,1
   12acc:	10965b04 	addi	r2,r2,22892
   12ad0:	11000017 	ldw	r4,0(r2)
   12ad4:	20800f17 	ldw	r2,60(r4)
   12ad8:	10000126 	beq	r2,zero,12ae0 <exit+0x30>
   12adc:	103ee83a 	callr	r2
   12ae0:	8009883a 	mov	r4,r16
   12ae4:	00131bc0 	call	131bc <_exit>

00012ae8 <memcmp>:
   12ae8:	00c000c4 	movi	r3,3
   12aec:	1980032e 	bgeu	r3,r6,12afc <memcmp+0x14>
   12af0:	2144b03a 	or	r2,r4,r5
   12af4:	10c4703a 	and	r2,r2,r3
   12af8:	10000f26 	beq	r2,zero,12b38 <memcmp+0x50>
   12afc:	31ffffc4 	addi	r7,r6,-1
   12b00:	3000061e 	bne	r6,zero,12b1c <memcmp+0x34>
   12b04:	00000a06 	br	12b30 <memcmp+0x48>
   12b08:	39ffffc4 	addi	r7,r7,-1
   12b0c:	00bfffc4 	movi	r2,-1
   12b10:	21000044 	addi	r4,r4,1
   12b14:	29400044 	addi	r5,r5,1
   12b18:	38800526 	beq	r7,r2,12b30 <memcmp+0x48>
   12b1c:	20c00003 	ldbu	r3,0(r4)
   12b20:	28800003 	ldbu	r2,0(r5)
   12b24:	18bff826 	beq	r3,r2,12b08 <memcmp+0x20>
   12b28:	1885c83a 	sub	r2,r3,r2
   12b2c:	f800283a 	ret
   12b30:	0005883a 	mov	r2,zero
   12b34:	f800283a 	ret
   12b38:	180f883a 	mov	r7,r3
   12b3c:	20c00017 	ldw	r3,0(r4)
   12b40:	28800017 	ldw	r2,0(r5)
   12b44:	18bfed1e 	bne	r3,r2,12afc <memcmp+0x14>
   12b48:	31bfff04 	addi	r6,r6,-4
   12b4c:	21000104 	addi	r4,r4,4
   12b50:	29400104 	addi	r5,r5,4
   12b54:	39bff936 	bltu	r7,r6,12b3c <memcmp+0x54>
   12b58:	003fe806 	br	12afc <memcmp+0x14>

00012b5c <putc>:
   12b5c:	defffc04 	addi	sp,sp,-16
   12b60:	dc800215 	stw	r18,8(sp)
   12b64:	04800074 	movhi	r18,1
   12b68:	94965a04 	addi	r18,r18,22888
   12b6c:	90c00017 	ldw	r3,0(r18)
   12b70:	dc400115 	stw	r17,4(sp)
   12b74:	dc000015 	stw	r16,0(sp)
   12b78:	dfc00315 	stw	ra,12(sp)
   12b7c:	2023883a 	mov	r17,r4
   12b80:	2821883a 	mov	r16,r5
   12b84:	18000226 	beq	r3,zero,12b90 <putc+0x34>
   12b88:	18800e17 	ldw	r2,56(r3)
   12b8c:	10001126 	beq	r2,zero,12bd4 <putc+0x78>
   12b90:	80800217 	ldw	r2,8(r16)
   12b94:	10ffffc4 	addi	r3,r2,-1
   12b98:	80c00215 	stw	r3,8(r16)
   12b9c:	18001316 	blt	r3,zero,12bec <putc+0x90>
   12ba0:	80800017 	ldw	r2,0(r16)
   12ba4:	14400005 	stb	r17,0(r2)
   12ba8:	80c00017 	ldw	r3,0(r16)
   12bac:	18800044 	addi	r2,r3,1
   12bb0:	18c00003 	ldbu	r3,0(r3)
   12bb4:	80800015 	stw	r2,0(r16)
   12bb8:	1805883a 	mov	r2,r3
   12bbc:	dfc00317 	ldw	ra,12(sp)
   12bc0:	dc800217 	ldw	r18,8(sp)
   12bc4:	dc400117 	ldw	r17,4(sp)
   12bc8:	dc000017 	ldw	r16,0(sp)
   12bcc:	dec00404 	addi	sp,sp,16
   12bd0:	f800283a 	ret
   12bd4:	1809883a 	mov	r4,r3
   12bd8:	0006f1c0 	call	6f1c <__sinit>
   12bdc:	80800217 	ldw	r2,8(r16)
   12be0:	10ffffc4 	addi	r3,r2,-1
   12be4:	80c00215 	stw	r3,8(r16)
   12be8:	183fed0e 	bge	r3,zero,12ba0 <putc+0x44>
   12bec:	80800617 	ldw	r2,24(r16)
   12bf0:	18800f16 	blt	r3,r2,12c30 <putc+0xd4>
   12bf4:	80800017 	ldw	r2,0(r16)
   12bf8:	14400005 	stb	r17,0(r2)
   12bfc:	81000017 	ldw	r4,0(r16)
   12c00:	00800284 	movi	r2,10
   12c04:	20c00003 	ldbu	r3,0(r4)
   12c08:	18801226 	beq	r3,r2,12c54 <putc+0xf8>
   12c0c:	20800044 	addi	r2,r4,1
   12c10:	80800015 	stw	r2,0(r16)
   12c14:	1805883a 	mov	r2,r3
   12c18:	dfc00317 	ldw	ra,12(sp)
   12c1c:	dc800217 	ldw	r18,8(sp)
   12c20:	dc400117 	ldw	r17,4(sp)
   12c24:	dc000017 	ldw	r16,0(sp)
   12c28:	dec00404 	addi	sp,sp,16
   12c2c:	f800283a 	ret
   12c30:	91000017 	ldw	r4,0(r18)
   12c34:	880b883a 	mov	r5,r17
   12c38:	800d883a 	mov	r6,r16
   12c3c:	dfc00317 	ldw	ra,12(sp)
   12c40:	dc800217 	ldw	r18,8(sp)
   12c44:	dc400117 	ldw	r17,4(sp)
   12c48:	dc000017 	ldw	r16,0(sp)
   12c4c:	dec00404 	addi	sp,sp,16
   12c50:	0012d481 	jmpi	12d48 <__swbuf_r>
   12c54:	91000017 	ldw	r4,0(r18)
   12c58:	180b883a 	mov	r5,r3
   12c5c:	003ff606 	br	12c38 <putc+0xdc>

00012c60 <_putc_r>:
   12c60:	defffc04 	addi	sp,sp,-16
   12c64:	dc400215 	stw	r17,8(sp)
   12c68:	dc000115 	stw	r16,4(sp)
   12c6c:	dfc00315 	stw	ra,12(sp)
   12c70:	2021883a 	mov	r16,r4
   12c74:	2823883a 	mov	r17,r5
   12c78:	20000226 	beq	r4,zero,12c84 <_putc_r+0x24>
   12c7c:	20800e17 	ldw	r2,56(r4)
   12c80:	10001026 	beq	r2,zero,12cc4 <_putc_r+0x64>
   12c84:	30800217 	ldw	r2,8(r6)
   12c88:	10ffffc4 	addi	r3,r2,-1
   12c8c:	30c00215 	stw	r3,8(r6)
   12c90:	18001316 	blt	r3,zero,12ce0 <_putc_r+0x80>
   12c94:	30800017 	ldw	r2,0(r6)
   12c98:	14400005 	stb	r17,0(r2)
   12c9c:	30c00017 	ldw	r3,0(r6)
   12ca0:	18800044 	addi	r2,r3,1
   12ca4:	18c00003 	ldbu	r3,0(r3)
   12ca8:	30800015 	stw	r2,0(r6)
   12cac:	1805883a 	mov	r2,r3
   12cb0:	dfc00317 	ldw	ra,12(sp)
   12cb4:	dc400217 	ldw	r17,8(sp)
   12cb8:	dc000117 	ldw	r16,4(sp)
   12cbc:	dec00404 	addi	sp,sp,16
   12cc0:	f800283a 	ret
   12cc4:	d9800015 	stw	r6,0(sp)
   12cc8:	0006f1c0 	call	6f1c <__sinit>
   12ccc:	d9800017 	ldw	r6,0(sp)
   12cd0:	30800217 	ldw	r2,8(r6)
   12cd4:	10ffffc4 	addi	r3,r2,-1
   12cd8:	30c00215 	stw	r3,8(r6)
   12cdc:	183fed0e 	bge	r3,zero,12c94 <_putc_r+0x34>
   12ce0:	30800617 	ldw	r2,24(r6)
   12ce4:	18800e16 	blt	r3,r2,12d20 <_putc_r+0xc0>
   12ce8:	30800017 	ldw	r2,0(r6)
   12cec:	14400005 	stb	r17,0(r2)
   12cf0:	31000017 	ldw	r4,0(r6)
   12cf4:	00800284 	movi	r2,10
   12cf8:	20c00003 	ldbu	r3,0(r4)
   12cfc:	18800f26 	beq	r3,r2,12d3c <_putc_r+0xdc>
   12d00:	20800044 	addi	r2,r4,1
   12d04:	30800015 	stw	r2,0(r6)
   12d08:	1805883a 	mov	r2,r3
   12d0c:	dfc00317 	ldw	ra,12(sp)
   12d10:	dc400217 	ldw	r17,8(sp)
   12d14:	dc000117 	ldw	r16,4(sp)
   12d18:	dec00404 	addi	sp,sp,16
   12d1c:	f800283a 	ret
   12d20:	8009883a 	mov	r4,r16
   12d24:	880b883a 	mov	r5,r17
   12d28:	dfc00317 	ldw	ra,12(sp)
   12d2c:	dc400217 	ldw	r17,8(sp)
   12d30:	dc000117 	ldw	r16,4(sp)
   12d34:	dec00404 	addi	sp,sp,16
   12d38:	0012d481 	jmpi	12d48 <__swbuf_r>
   12d3c:	8009883a 	mov	r4,r16
   12d40:	180b883a 	mov	r5,r3
   12d44:	003ff806 	br	12d28 <_putc_r+0xc8>

00012d48 <__swbuf_r>:
   12d48:	defffc04 	addi	sp,sp,-16
   12d4c:	dc400215 	stw	r17,8(sp)
   12d50:	dc000115 	stw	r16,4(sp)
   12d54:	dfc00315 	stw	ra,12(sp)
   12d58:	2023883a 	mov	r17,r4
   12d5c:	2821883a 	mov	r16,r5
   12d60:	20000226 	beq	r4,zero,12d6c <__swbuf_r+0x24>
   12d64:	20800e17 	ldw	r2,56(r4)
   12d68:	10002f26 	beq	r2,zero,12e28 <__swbuf_r+0xe0>
   12d6c:	3080030b 	ldhu	r2,12(r6)
   12d70:	30c00617 	ldw	r3,24(r6)
   12d74:	1080020c 	andi	r2,r2,8
   12d78:	30c00215 	stw	r3,8(r6)
   12d7c:	10002226 	beq	r2,zero,12e08 <__swbuf_r+0xc0>
   12d80:	30c00417 	ldw	r3,16(r6)
   12d84:	18002026 	beq	r3,zero,12e08 <__swbuf_r+0xc0>
   12d88:	31000017 	ldw	r4,0(r6)
   12d8c:	30800517 	ldw	r2,20(r6)
   12d90:	20c7c83a 	sub	r3,r4,r3
   12d94:	18802f0e 	bge	r3,r2,12e54 <__swbuf_r+0x10c>
   12d98:	19400044 	addi	r5,r3,1
   12d9c:	30800217 	ldw	r2,8(r6)
   12da0:	84003fcc 	andi	r16,r16,255
   12da4:	20c00044 	addi	r3,r4,1
   12da8:	10bfffc4 	addi	r2,r2,-1
   12dac:	30800215 	stw	r2,8(r6)
   12db0:	24000005 	stb	r16,0(r4)
   12db4:	30800517 	ldw	r2,20(r6)
   12db8:	30c00015 	stw	r3,0(r6)
   12dbc:	11400c26 	beq	r2,r5,12df0 <__swbuf_r+0xa8>
   12dc0:	3080030b 	ldhu	r2,12(r6)
   12dc4:	1080004c 	andi	r2,r2,1
   12dc8:	1005003a 	cmpeq	r2,r2,zero
   12dcc:	10000626 	beq	r2,zero,12de8 <__swbuf_r+0xa0>
   12dd0:	8005883a 	mov	r2,r16
   12dd4:	dfc00317 	ldw	ra,12(sp)
   12dd8:	dc400217 	ldw	r17,8(sp)
   12ddc:	dc000117 	ldw	r16,4(sp)
   12de0:	dec00404 	addi	sp,sp,16
   12de4:	f800283a 	ret
   12de8:	00800284 	movi	r2,10
   12dec:	80bff81e 	bne	r16,r2,12dd0 <__swbuf_r+0x88>
   12df0:	8809883a 	mov	r4,r17
   12df4:	300b883a 	mov	r5,r6
   12df8:	0006c840 	call	6c84 <_fflush_r>
   12dfc:	103ff426 	beq	r2,zero,12dd0 <__swbuf_r+0x88>
   12e00:	043fffc4 	movi	r16,-1
   12e04:	003ff206 	br	12dd0 <__swbuf_r+0x88>
   12e08:	300b883a 	mov	r5,r6
   12e0c:	8809883a 	mov	r4,r17
   12e10:	d9800015 	stw	r6,0(sp)
   12e14:	000537c0 	call	537c <__swsetup_r>
   12e18:	d9800017 	ldw	r6,0(sp)
   12e1c:	1000061e 	bne	r2,zero,12e38 <__swbuf_r+0xf0>
   12e20:	30c00417 	ldw	r3,16(r6)
   12e24:	003fd806 	br	12d88 <__swbuf_r+0x40>
   12e28:	d9800015 	stw	r6,0(sp)
   12e2c:	0006f1c0 	call	6f1c <__sinit>
   12e30:	d9800017 	ldw	r6,0(sp)
   12e34:	003fcd06 	br	12d6c <__swbuf_r+0x24>
   12e38:	3080030b 	ldhu	r2,12(r6)
   12e3c:	00c00244 	movi	r3,9
   12e40:	043fffc4 	movi	r16,-1
   12e44:	10801014 	ori	r2,r2,64
   12e48:	3080030d 	sth	r2,12(r6)
   12e4c:	88c00015 	stw	r3,0(r17)
   12e50:	003fdf06 	br	12dd0 <__swbuf_r+0x88>
   12e54:	300b883a 	mov	r5,r6
   12e58:	8809883a 	mov	r4,r17
   12e5c:	d9800015 	stw	r6,0(sp)
   12e60:	0006c840 	call	6c84 <_fflush_r>
   12e64:	d9800017 	ldw	r6,0(sp)
   12e68:	103fe51e 	bne	r2,zero,12e00 <__swbuf_r+0xb8>
   12e6c:	31000017 	ldw	r4,0(r6)
   12e70:	01400044 	movi	r5,1
   12e74:	003fc906 	br	12d9c <__swbuf_r+0x54>

00012e78 <__swbuf>:
   12e78:	01800074 	movhi	r6,1
   12e7c:	31965a04 	addi	r6,r6,22888
   12e80:	2007883a 	mov	r3,r4
   12e84:	31000017 	ldw	r4,0(r6)
   12e88:	280d883a 	mov	r6,r5
   12e8c:	180b883a 	mov	r5,r3
   12e90:	0012d481 	jmpi	12d48 <__swbuf_r>

00012e94 <__register_exitproc>:
   12e94:	defffa04 	addi	sp,sp,-24
   12e98:	00800074 	movhi	r2,1
   12e9c:	10965b04 	addi	r2,r2,22892
   12ea0:	dc000015 	stw	r16,0(sp)
   12ea4:	14000017 	ldw	r16,0(r2)
   12ea8:	dd000415 	stw	r20,16(sp)
   12eac:	2829883a 	mov	r20,r5
   12eb0:	81405217 	ldw	r5,328(r16)
   12eb4:	dcc00315 	stw	r19,12(sp)
   12eb8:	dc800215 	stw	r18,8(sp)
   12ebc:	dc400115 	stw	r17,4(sp)
   12ec0:	dfc00515 	stw	ra,20(sp)
   12ec4:	2023883a 	mov	r17,r4
   12ec8:	3027883a 	mov	r19,r6
   12ecc:	3825883a 	mov	r18,r7
   12ed0:	28002526 	beq	r5,zero,12f68 <__register_exitproc+0xd4>
   12ed4:	29000117 	ldw	r4,4(r5)
   12ed8:	008007c4 	movi	r2,31
   12edc:	11002716 	blt	r2,r4,12f7c <__register_exitproc+0xe8>
   12ee0:	8800101e 	bne	r17,zero,12f24 <__register_exitproc+0x90>
   12ee4:	2105883a 	add	r2,r4,r4
   12ee8:	1085883a 	add	r2,r2,r2
   12eec:	20c00044 	addi	r3,r4,1
   12ef0:	1145883a 	add	r2,r2,r5
   12ef4:	0009883a 	mov	r4,zero
   12ef8:	15000215 	stw	r20,8(r2)
   12efc:	28c00115 	stw	r3,4(r5)
   12f00:	2005883a 	mov	r2,r4
   12f04:	dfc00517 	ldw	ra,20(sp)
   12f08:	dd000417 	ldw	r20,16(sp)
   12f0c:	dcc00317 	ldw	r19,12(sp)
   12f10:	dc800217 	ldw	r18,8(sp)
   12f14:	dc400117 	ldw	r17,4(sp)
   12f18:	dc000017 	ldw	r16,0(sp)
   12f1c:	dec00604 	addi	sp,sp,24
   12f20:	f800283a 	ret
   12f24:	29802204 	addi	r6,r5,136
   12f28:	00800044 	movi	r2,1
   12f2c:	110e983a 	sll	r7,r2,r4
   12f30:	30c04017 	ldw	r3,256(r6)
   12f34:	2105883a 	add	r2,r4,r4
   12f38:	1085883a 	add	r2,r2,r2
   12f3c:	1185883a 	add	r2,r2,r6
   12f40:	19c6b03a 	or	r3,r3,r7
   12f44:	14802015 	stw	r18,128(r2)
   12f48:	14c00015 	stw	r19,0(r2)
   12f4c:	00800084 	movi	r2,2
   12f50:	30c04015 	stw	r3,256(r6)
   12f54:	88bfe31e 	bne	r17,r2,12ee4 <__register_exitproc+0x50>
   12f58:	30804117 	ldw	r2,260(r6)
   12f5c:	11c4b03a 	or	r2,r2,r7
   12f60:	30804115 	stw	r2,260(r6)
   12f64:	003fdf06 	br	12ee4 <__register_exitproc+0x50>
   12f68:	00801f34 	movhi	r2,124
   12f6c:	10a33104 	addi	r2,r2,-29500
   12f70:	100b883a 	mov	r5,r2
   12f74:	80805215 	stw	r2,328(r16)
   12f78:	003fd606 	br	12ed4 <__register_exitproc+0x40>
   12f7c:	00800034 	movhi	r2,0
   12f80:	10800004 	addi	r2,r2,0
   12f84:	1000021e 	bne	r2,zero,12f90 <__register_exitproc+0xfc>
   12f88:	013fffc4 	movi	r4,-1
   12f8c:	003fdc06 	br	12f00 <__register_exitproc+0x6c>
   12f90:	01006404 	movi	r4,400
   12f94:	103ee83a 	callr	r2
   12f98:	1007883a 	mov	r3,r2
   12f9c:	103ffa26 	beq	r2,zero,12f88 <__register_exitproc+0xf4>
   12fa0:	80805217 	ldw	r2,328(r16)
   12fa4:	180b883a 	mov	r5,r3
   12fa8:	18000115 	stw	zero,4(r3)
   12fac:	18800015 	stw	r2,0(r3)
   12fb0:	80c05215 	stw	r3,328(r16)
   12fb4:	18006215 	stw	zero,392(r3)
   12fb8:	18006315 	stw	zero,396(r3)
   12fbc:	0009883a 	mov	r4,zero
   12fc0:	883fc826 	beq	r17,zero,12ee4 <__register_exitproc+0x50>
   12fc4:	003fd706 	br	12f24 <__register_exitproc+0x90>

00012fc8 <register_fini>:
   12fc8:	f800283a 	ret

00012fcc <__call_exitprocs>:
   12fcc:	00800074 	movhi	r2,1
   12fd0:	10965b04 	addi	r2,r2,22892
   12fd4:	10800017 	ldw	r2,0(r2)
   12fd8:	defff304 	addi	sp,sp,-52
   12fdc:	df000b15 	stw	fp,44(sp)
   12fe0:	d8800115 	stw	r2,4(sp)
   12fe4:	00800034 	movhi	r2,0
   12fe8:	10800004 	addi	r2,r2,0
   12fec:	1005003a 	cmpeq	r2,r2,zero
   12ff0:	d8800215 	stw	r2,8(sp)
   12ff4:	d8800117 	ldw	r2,4(sp)
   12ff8:	dd400815 	stw	r21,32(sp)
   12ffc:	dd000715 	stw	r20,28(sp)
   13000:	10805204 	addi	r2,r2,328
   13004:	dfc00c15 	stw	ra,48(sp)
   13008:	ddc00a15 	stw	r23,40(sp)
   1300c:	dd800915 	stw	r22,36(sp)
   13010:	dcc00615 	stw	r19,24(sp)
   13014:	dc800515 	stw	r18,20(sp)
   13018:	dc400415 	stw	r17,16(sp)
   1301c:	dc000315 	stw	r16,12(sp)
   13020:	282b883a 	mov	r21,r5
   13024:	2039883a 	mov	fp,r4
   13028:	d8800015 	stw	r2,0(sp)
   1302c:	2829003a 	cmpeq	r20,r5,zero
   13030:	d8800117 	ldw	r2,4(sp)
   13034:	14405217 	ldw	r17,328(r2)
   13038:	88001026 	beq	r17,zero,1307c <__call_exitprocs+0xb0>
   1303c:	ddc00017 	ldw	r23,0(sp)
   13040:	88800117 	ldw	r2,4(r17)
   13044:	8c802204 	addi	r18,r17,136
   13048:	143fffc4 	addi	r16,r2,-1
   1304c:	80000916 	blt	r16,zero,13074 <__call_exitprocs+0xa8>
   13050:	05bfffc4 	movi	r22,-1
   13054:	a000151e 	bne	r20,zero,130ac <__call_exitprocs+0xe0>
   13058:	8409883a 	add	r4,r16,r16
   1305c:	2105883a 	add	r2,r4,r4
   13060:	1485883a 	add	r2,r2,r18
   13064:	10c02017 	ldw	r3,128(r2)
   13068:	a8c01126 	beq	r21,r3,130b0 <__call_exitprocs+0xe4>
   1306c:	843fffc4 	addi	r16,r16,-1
   13070:	85bff81e 	bne	r16,r22,13054 <__call_exitprocs+0x88>
   13074:	d8800217 	ldw	r2,8(sp)
   13078:	10003126 	beq	r2,zero,13140 <__call_exitprocs+0x174>
   1307c:	dfc00c17 	ldw	ra,48(sp)
   13080:	df000b17 	ldw	fp,44(sp)
   13084:	ddc00a17 	ldw	r23,40(sp)
   13088:	dd800917 	ldw	r22,36(sp)
   1308c:	dd400817 	ldw	r21,32(sp)
   13090:	dd000717 	ldw	r20,28(sp)
   13094:	dcc00617 	ldw	r19,24(sp)
   13098:	dc800517 	ldw	r18,20(sp)
   1309c:	dc400417 	ldw	r17,16(sp)
   130a0:	dc000317 	ldw	r16,12(sp)
   130a4:	dec00d04 	addi	sp,sp,52
   130a8:	f800283a 	ret
   130ac:	8409883a 	add	r4,r16,r16
   130b0:	88c00117 	ldw	r3,4(r17)
   130b4:	2105883a 	add	r2,r4,r4
   130b8:	1445883a 	add	r2,r2,r17
   130bc:	18ffffc4 	addi	r3,r3,-1
   130c0:	11800217 	ldw	r6,8(r2)
   130c4:	1c001526 	beq	r3,r16,1311c <__call_exitprocs+0x150>
   130c8:	10000215 	stw	zero,8(r2)
   130cc:	303fe726 	beq	r6,zero,1306c <__call_exitprocs+0xa0>
   130d0:	00c00044 	movi	r3,1
   130d4:	1c06983a 	sll	r3,r3,r16
   130d8:	90804017 	ldw	r2,256(r18)
   130dc:	8cc00117 	ldw	r19,4(r17)
   130e0:	1884703a 	and	r2,r3,r2
   130e4:	10001426 	beq	r2,zero,13138 <__call_exitprocs+0x16c>
   130e8:	90804117 	ldw	r2,260(r18)
   130ec:	1884703a 	and	r2,r3,r2
   130f0:	10000c1e 	bne	r2,zero,13124 <__call_exitprocs+0x158>
   130f4:	2105883a 	add	r2,r4,r4
   130f8:	1485883a 	add	r2,r2,r18
   130fc:	11400017 	ldw	r5,0(r2)
   13100:	e009883a 	mov	r4,fp
   13104:	303ee83a 	callr	r6
   13108:	88800117 	ldw	r2,4(r17)
   1310c:	98bfc81e 	bne	r19,r2,13030 <__call_exitprocs+0x64>
   13110:	b8800017 	ldw	r2,0(r23)
   13114:	147fd526 	beq	r2,r17,1306c <__call_exitprocs+0xa0>
   13118:	003fc506 	br	13030 <__call_exitprocs+0x64>
   1311c:	8c000115 	stw	r16,4(r17)
   13120:	003fea06 	br	130cc <__call_exitprocs+0x100>
   13124:	2105883a 	add	r2,r4,r4
   13128:	1485883a 	add	r2,r2,r18
   1312c:	11000017 	ldw	r4,0(r2)
   13130:	303ee83a 	callr	r6
   13134:	003ff406 	br	13108 <__call_exitprocs+0x13c>
   13138:	303ee83a 	callr	r6
   1313c:	003ff206 	br	13108 <__call_exitprocs+0x13c>
   13140:	88800117 	ldw	r2,4(r17)
   13144:	1000081e 	bne	r2,zero,13168 <__call_exitprocs+0x19c>
   13148:	89000017 	ldw	r4,0(r17)
   1314c:	20000726 	beq	r4,zero,1316c <__call_exitprocs+0x1a0>
   13150:	b9000015 	stw	r4,0(r23)
   13154:	8809883a 	mov	r4,r17
   13158:	00000000 	call	0 <__alt_mem_SDRAM>
   1315c:	bc400017 	ldw	r17,0(r23)
   13160:	883fb71e 	bne	r17,zero,13040 <__call_exitprocs+0x74>
   13164:	003fc506 	br	1307c <__call_exitprocs+0xb0>
   13168:	89000017 	ldw	r4,0(r17)
   1316c:	882f883a 	mov	r23,r17
   13170:	2023883a 	mov	r17,r4
   13174:	883fb21e 	bne	r17,zero,13040 <__call_exitprocs+0x74>
   13178:	003fc006 	br	1307c <__call_exitprocs+0xb0>

0001317c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1317c:	defffd04 	addi	sp,sp,-12
   13180:	df000215 	stw	fp,8(sp)
   13184:	df000204 	addi	fp,sp,8
   13188:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1318c:	e0bfff17 	ldw	r2,-4(fp)
   13190:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13194:	e0bffe17 	ldw	r2,-8(fp)
   13198:	1005003a 	cmpeq	r2,r2,zero
   1319c:	1000021e 	bne	r2,zero,131a8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   131a0:	002af070 	cmpltui	zero,zero,43969
   131a4:	00000106 	br	131ac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   131a8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   131ac:	e037883a 	mov	sp,fp
   131b0:	df000017 	ldw	fp,0(sp)
   131b4:	dec00104 	addi	sp,sp,4
   131b8:	f800283a 	ret

000131bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   131bc:	defffd04 	addi	sp,sp,-12
   131c0:	dfc00215 	stw	ra,8(sp)
   131c4:	df000115 	stw	fp,4(sp)
   131c8:	df000104 	addi	fp,sp,4
   131cc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   131d0:	e13fff17 	ldw	r4,-4(fp)
   131d4:	001317c0 	call	1317c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   131d8:	003fff06 	br	131d8 <_exit+0x1c>
   131dc:	00012fc8 	cmpgei	zero,zero,1215
